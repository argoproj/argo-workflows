# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: v2.12.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo.workflows.client.configuration import Configuration


class V1alpha1Prometheus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'counter': 'V1alpha1Counter',
        'gauge': 'V1alpha1Gauge',
        'help': 'str',
        'histogram': 'V1alpha1Histogram',
        'labels': 'list[V1alpha1MetricLabel]',
        'name': 'str',
        'when': 'str'
    }

    attribute_map = {
        'counter': 'counter',
        'gauge': 'gauge',
        'help': 'help',
        'histogram': 'histogram',
        'labels': 'labels',
        'name': 'name',
        'when': 'when'
    }

    def __init__(self, counter=None, gauge=None, help=None, histogram=None, labels=None, name=None, when=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1Prometheus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._counter = None
        self._gauge = None
        self._help = None
        self._histogram = None
        self._labels = None
        self._name = None
        self._when = None
        self.discriminator = None

        if counter is not None:
            self.counter = counter
        if gauge is not None:
            self.gauge = gauge
        self.help = help
        if histogram is not None:
            self.histogram = histogram
        if labels is not None:
            self.labels = labels
        self.name = name
        if when is not None:
            self.when = when

    @property
    def counter(self):
        """Gets the counter of this V1alpha1Prometheus.  # noqa: E501


        :return: The counter of this V1alpha1Prometheus.  # noqa: E501
        :rtype: V1alpha1Counter
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this V1alpha1Prometheus.


        :param counter: The counter of this V1alpha1Prometheus.  # noqa: E501
        :type: V1alpha1Counter
        """

        self._counter = counter

    @property
    def gauge(self):
        """Gets the gauge of this V1alpha1Prometheus.  # noqa: E501


        :return: The gauge of this V1alpha1Prometheus.  # noqa: E501
        :rtype: V1alpha1Gauge
        """
        return self._gauge

    @gauge.setter
    def gauge(self, gauge):
        """Sets the gauge of this V1alpha1Prometheus.


        :param gauge: The gauge of this V1alpha1Prometheus.  # noqa: E501
        :type: V1alpha1Gauge
        """

        self._gauge = gauge

    @property
    def help(self):
        """Gets the help of this V1alpha1Prometheus.  # noqa: E501

        Help is a string that describes the metric  # noqa: E501

        :return: The help of this V1alpha1Prometheus.  # noqa: E501
        :rtype: str
        """
        return self._help

    @help.setter
    def help(self, help):
        """Sets the help of this V1alpha1Prometheus.

        Help is a string that describes the metric  # noqa: E501

        :param help: The help of this V1alpha1Prometheus.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and help is None:  # noqa: E501
            raise ValueError("Invalid value for `help`, must not be `None`")  # noqa: E501

        self._help = help

    @property
    def histogram(self):
        """Gets the histogram of this V1alpha1Prometheus.  # noqa: E501


        :return: The histogram of this V1alpha1Prometheus.  # noqa: E501
        :rtype: V1alpha1Histogram
        """
        return self._histogram

    @histogram.setter
    def histogram(self, histogram):
        """Sets the histogram of this V1alpha1Prometheus.


        :param histogram: The histogram of this V1alpha1Prometheus.  # noqa: E501
        :type: V1alpha1Histogram
        """

        self._histogram = histogram

    @property
    def labels(self):
        """Gets the labels of this V1alpha1Prometheus.  # noqa: E501

        Labels is a list of metric labels  # noqa: E501

        :return: The labels of this V1alpha1Prometheus.  # noqa: E501
        :rtype: list[V1alpha1MetricLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this V1alpha1Prometheus.

        Labels is a list of metric labels  # noqa: E501

        :param labels: The labels of this V1alpha1Prometheus.  # noqa: E501
        :type: list[V1alpha1MetricLabel]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this V1alpha1Prometheus.  # noqa: E501

        Name is the name of the metric  # noqa: E501

        :return: The name of this V1alpha1Prometheus.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alpha1Prometheus.

        Name is the name of the metric  # noqa: E501

        :param name: The name of this V1alpha1Prometheus.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def when(self):
        """Gets the when of this V1alpha1Prometheus.  # noqa: E501

        When is a conditional statement that decides when to emit the metric  # noqa: E501

        :return: The when of this V1alpha1Prometheus.  # noqa: E501
        :rtype: str
        """
        return self._when

    @when.setter
    def when(self, when):
        """Sets the when of this V1alpha1Prometheus.

        When is a conditional statement that decides when to emit the metric  # noqa: E501

        :param when: The when of this V1alpha1Prometheus.  # noqa: E501
        :type: str
        """

        self._when = when

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1Prometheus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1Prometheus):
            return True

        return self.to_dict() != other.to_dict()
