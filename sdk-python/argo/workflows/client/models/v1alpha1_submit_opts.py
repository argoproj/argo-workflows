# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: v2.12.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo.workflows.client.configuration import Configuration


class V1alpha1SubmitOpts(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dry_run': 'bool',
        'entry_point': 'str',
        'generate_name': 'str',
        'labels': 'str',
        'name': 'str',
        'owner_reference': 'V1OwnerReference',
        'parameter_file': 'str',
        'parameters': 'list[str]',
        'server_dry_run': 'bool',
        'service_account': 'str'
    }

    attribute_map = {
        'dry_run': 'dryRun',
        'entry_point': 'entryPoint',
        'generate_name': 'generateName',
        'labels': 'labels',
        'name': 'name',
        'owner_reference': 'ownerReference',
        'parameter_file': 'parameterFile',
        'parameters': 'parameters',
        'server_dry_run': 'serverDryRun',
        'service_account': 'serviceAccount'
    }

    def __init__(self, dry_run=None, entry_point=None, generate_name=None, labels=None, name=None, owner_reference=None, parameter_file=None, parameters=None, server_dry_run=None, service_account=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1SubmitOpts - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dry_run = None
        self._entry_point = None
        self._generate_name = None
        self._labels = None
        self._name = None
        self._owner_reference = None
        self._parameter_file = None
        self._parameters = None
        self._server_dry_run = None
        self._service_account = None
        self.discriminator = None

        if dry_run is not None:
            self.dry_run = dry_run
        if entry_point is not None:
            self.entry_point = entry_point
        if generate_name is not None:
            self.generate_name = generate_name
        if labels is not None:
            self.labels = labels
        if name is not None:
            self.name = name
        if owner_reference is not None:
            self.owner_reference = owner_reference
        if parameter_file is not None:
            self.parameter_file = parameter_file
        if parameters is not None:
            self.parameters = parameters
        if server_dry_run is not None:
            self.server_dry_run = server_dry_run
        if service_account is not None:
            self.service_account = service_account

    @property
    def dry_run(self):
        """Gets the dry_run of this V1alpha1SubmitOpts.  # noqa: E501

        DryRun validates the workflow on the client-side without creating it. This option is not supported in API  # noqa: E501

        :return: The dry_run of this V1alpha1SubmitOpts.  # noqa: E501
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this V1alpha1SubmitOpts.

        DryRun validates the workflow on the client-side without creating it. This option is not supported in API  # noqa: E501

        :param dry_run: The dry_run of this V1alpha1SubmitOpts.  # noqa: E501
        :type: bool
        """

        self._dry_run = dry_run

    @property
    def entry_point(self):
        """Gets the entry_point of this V1alpha1SubmitOpts.  # noqa: E501

        Entrypoint overrides spec.entrypoint  # noqa: E501

        :return: The entry_point of this V1alpha1SubmitOpts.  # noqa: E501
        :rtype: str
        """
        return self._entry_point

    @entry_point.setter
    def entry_point(self, entry_point):
        """Sets the entry_point of this V1alpha1SubmitOpts.

        Entrypoint overrides spec.entrypoint  # noqa: E501

        :param entry_point: The entry_point of this V1alpha1SubmitOpts.  # noqa: E501
        :type: str
        """

        self._entry_point = entry_point

    @property
    def generate_name(self):
        """Gets the generate_name of this V1alpha1SubmitOpts.  # noqa: E501

        GenerateName overrides metadata.generateName  # noqa: E501

        :return: The generate_name of this V1alpha1SubmitOpts.  # noqa: E501
        :rtype: str
        """
        return self._generate_name

    @generate_name.setter
    def generate_name(self, generate_name):
        """Sets the generate_name of this V1alpha1SubmitOpts.

        GenerateName overrides metadata.generateName  # noqa: E501

        :param generate_name: The generate_name of this V1alpha1SubmitOpts.  # noqa: E501
        :type: str
        """

        self._generate_name = generate_name

    @property
    def labels(self):
        """Gets the labels of this V1alpha1SubmitOpts.  # noqa: E501

        Labels adds to metadata.labels  # noqa: E501

        :return: The labels of this V1alpha1SubmitOpts.  # noqa: E501
        :rtype: str
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this V1alpha1SubmitOpts.

        Labels adds to metadata.labels  # noqa: E501

        :param labels: The labels of this V1alpha1SubmitOpts.  # noqa: E501
        :type: str
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this V1alpha1SubmitOpts.  # noqa: E501

        Name overrides metadata.name  # noqa: E501

        :return: The name of this V1alpha1SubmitOpts.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1alpha1SubmitOpts.

        Name overrides metadata.name  # noqa: E501

        :param name: The name of this V1alpha1SubmitOpts.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner_reference(self):
        """Gets the owner_reference of this V1alpha1SubmitOpts.  # noqa: E501


        :return: The owner_reference of this V1alpha1SubmitOpts.  # noqa: E501
        :rtype: V1OwnerReference
        """
        return self._owner_reference

    @owner_reference.setter
    def owner_reference(self, owner_reference):
        """Sets the owner_reference of this V1alpha1SubmitOpts.


        :param owner_reference: The owner_reference of this V1alpha1SubmitOpts.  # noqa: E501
        :type: V1OwnerReference
        """

        self._owner_reference = owner_reference

    @property
    def parameter_file(self):
        """Gets the parameter_file of this V1alpha1SubmitOpts.  # noqa: E501

        ParameterFile holds a reference to a parameter file. This option is not supported in API  # noqa: E501

        :return: The parameter_file of this V1alpha1SubmitOpts.  # noqa: E501
        :rtype: str
        """
        return self._parameter_file

    @parameter_file.setter
    def parameter_file(self, parameter_file):
        """Sets the parameter_file of this V1alpha1SubmitOpts.

        ParameterFile holds a reference to a parameter file. This option is not supported in API  # noqa: E501

        :param parameter_file: The parameter_file of this V1alpha1SubmitOpts.  # noqa: E501
        :type: str
        """

        self._parameter_file = parameter_file

    @property
    def parameters(self):
        """Gets the parameters of this V1alpha1SubmitOpts.  # noqa: E501

        Parameters passes input parameters to workflow  # noqa: E501

        :return: The parameters of this V1alpha1SubmitOpts.  # noqa: E501
        :rtype: list[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this V1alpha1SubmitOpts.

        Parameters passes input parameters to workflow  # noqa: E501

        :param parameters: The parameters of this V1alpha1SubmitOpts.  # noqa: E501
        :type: list[str]
        """

        self._parameters = parameters

    @property
    def server_dry_run(self):
        """Gets the server_dry_run of this V1alpha1SubmitOpts.  # noqa: E501

        ServerDryRun validates the workflow on the server-side without creating it  # noqa: E501

        :return: The server_dry_run of this V1alpha1SubmitOpts.  # noqa: E501
        :rtype: bool
        """
        return self._server_dry_run

    @server_dry_run.setter
    def server_dry_run(self, server_dry_run):
        """Sets the server_dry_run of this V1alpha1SubmitOpts.

        ServerDryRun validates the workflow on the server-side without creating it  # noqa: E501

        :param server_dry_run: The server_dry_run of this V1alpha1SubmitOpts.  # noqa: E501
        :type: bool
        """

        self._server_dry_run = server_dry_run

    @property
    def service_account(self):
        """Gets the service_account of this V1alpha1SubmitOpts.  # noqa: E501

        ServiceAccount runs all pods in the workflow using specified ServiceAccount.  # noqa: E501

        :return: The service_account of this V1alpha1SubmitOpts.  # noqa: E501
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this V1alpha1SubmitOpts.

        ServiceAccount runs all pods in the workflow using specified ServiceAccount.  # noqa: E501

        :param service_account: The service_account of this V1alpha1SubmitOpts.  # noqa: E501
        :type: str
        """

        self._service_account = service_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1SubmitOpts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1SubmitOpts):
            return True

        return self.to_dict() != other.to_dict()
