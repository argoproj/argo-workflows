{
	"paths": {
		"/apis/{{ argo_api_group }}/{{ argo_api_version }}/namespaces/{namespace}/archivedworkflows": {
			"parameters": [
				{
					"name": "namespace",
					"description": "The Workflow's namespace",
					"required": true,
					"type": "string",
					"in": "path"
				}
			],
			"get": {
				"description": "List archivedworkflow resources.",
				"operationId": "list_namespaced_archivedworkflows",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/json;stream=watch"
				],
				"schemes": [
					"https"
				],
				"parameters": [
					{
						"name": "fieldSelector",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"uniqueItems": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "labelSelector",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"uniqueItems": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "resourceVersion",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"uniqueItems": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "timeoutSeconds",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"uniqueItems": true,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "watch",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
						"uniqueItems": true,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"tags": [
					"v1alpha1"
				]
			},
			"post": {
				"operationId": "create_namespaced_archivedworkflow",
				"description": "Creates a namespace scoped Workflow",
				"produces": [
					"application/json"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"v1alpha1"
				],
				"parameters": [
					{
						"name": "body",
						"description": "The JSON schema of the Workflow to create.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Workflow"
						},
						"in": "body"
					}
				],
				"responses": {
					"201": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Workflow"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/{{ argo_api_group }}/{{ argo_api_version }}/namespaces/{namespace}/archivedworkflows/{name}": {
			"parameters": [
				{
					"name": "namespace",
					"description": "The custom resource's namespace",
					"required": true,
					"type": "string",
					"in": "path"
				},
				{
					"name": "name",
					"description": "Unique Workflow name",
					"required": true,
					"type": "string",
					"in": "path"
				}
			],
			"get": {
				"description": "Get Workflow resource by the archivedworkflow name",
				"operationId": "get_namespaced_archivedworkflow",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Workflow"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"tags": [
					"v1alpha1"
				]
			},
			"delete": {
				"operationId": "delete_namespaced_archivedworkflow",
				"description": "Deletes the specified namespace scoped Workflow.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"v1alpha1"
				],
				"parameters": [
					{
						"name": "body",
						"description": "Delete options to be send along in the body of this request.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/v1.DeleteOptions"
						}
					},
					{
						"name": "gracePeriodSeconds",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"uniqueItems": true,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "orphanDependents",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"uniqueItems": true,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "propagationPolicy",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
						"uniqueItems": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "object"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			},
			"patch": {
				"operationId": "patch_namespaced_archivedworkflow",
				"description": "patch the specified namespace scoped Workflow.",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json"
				],
				"produces": [
					"application/json"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"v1alpha1"
				],
				"parameters": [
					{
						"name": "body",
						"description": "The JSON schema of the Workflow to patch.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Workflow"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "object"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			},
			"put": {
				"operationId": "replace_namespaced_archivedworkflow",
				"description": "replace the specified namespace scoped Workflow.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"v1alpha1"
				],
				"parameters": [
					{
						"name": "body",
						"description": "The JSON schema of the Workflow to replace.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Workflow"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Workflow"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/{{ argo_api_group }}/{{ argo_api_version }}/namespaces/{namespace}/cronworkflows": {
			"parameters": [
				{
					"name": "namespace",
					"description": "The Workflow's namespace",
					"required": true,
					"type": "string",
					"in": "path"
				}
			],
			"get": {
				"description": "List cronworkflow resources.",
				"operationId": "list_namespaced_cronworkflows",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/json;stream=watch"
				],
				"schemes": [
					"https"
				],
				"parameters": [
					{
						"name": "fieldSelector",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"uniqueItems": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "labelSelector",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"uniqueItems": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "resourceVersion",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"uniqueItems": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "timeoutSeconds",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"uniqueItems": true,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "watch",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
						"uniqueItems": true,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CronWorkflowList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"tags": [
					"v1alpha1"
				]
			},
			"post": {
				"operationId": "create_namespaced_cronworkflow",
				"description": "Creates a namespace scoped Workflow",
				"produces": [
					"application/json"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"v1alpha1"
				],
				"parameters": [
					{
						"name": "body",
						"description": "The JSON schema of the Workflow to create.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CronWorkflow"
						},
						"in": "body"
					}
				],
				"responses": {
					"201": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CronWorkflow"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/{{ argo_api_group }}/{{ argo_api_version }}/namespaces/{namespace}/cronworkflows/{name}": {
			"parameters": [
				{
					"name": "namespace",
					"description": "The custom resource's namespace",
					"required": true,
					"type": "string",
					"in": "path"
				},
				{
					"name": "name",
					"description": "Unique Workflow name",
					"required": true,
					"type": "string",
					"in": "path"
				}
			],
			"get": {
				"description": "Get Workflow resource by the cronworkflow name",
				"operationId": "get_namespaced_cronworkflow",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CronWorkflow"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"tags": [
					"v1alpha1"
				]
			},
			"delete": {
				"operationId": "delete_namespaced_cronworkflow",
				"description": "Deletes the specified namespace scoped Workflow.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"v1alpha1"
				],
				"parameters": [
					{
						"name": "body",
						"description": "Delete options to be send along in the body of this request.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/v1.DeleteOptions"
						}
					},
					{
						"name": "gracePeriodSeconds",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"uniqueItems": true,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "orphanDependents",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"uniqueItems": true,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "propagationPolicy",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
						"uniqueItems": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "object"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			},
			"patch": {
				"operationId": "patch_namespaced_cronworkflow",
				"description": "patch the specified namespace scoped Workflow.",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json"
				],
				"produces": [
					"application/json"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"v1alpha1"
				],
				"parameters": [
					{
						"name": "body",
						"description": "The JSON schema of the Workflow to patch.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CronWorkflow"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "object"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			},
			"put": {
				"operationId": "replace_namespaced_cronworkflow",
				"description": "replace the specified namespace scoped Workflow.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"v1alpha1"
				],
				"parameters": [
					{
						"name": "body",
						"description": "The JSON schema of the Workflow to replace.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CronWorkflow"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.CronWorkflow"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/{{ argo_api_group }}/{{ argo_api_version }}/namespaces/{namespace}/workflows": {
			"parameters": [
				{
					"name": "namespace",
					"description": "The Workflow's namespace",
					"required": true,
					"type": "string",
					"in": "path"
				}
			],
			"get": {
				"description": "List workflow resources.",
				"operationId": "list_namespaced_workflows",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/json;stream=watch"
				],
				"schemes": [
					"https"
				],
				"parameters": [
					{
						"name": "fieldSelector",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"uniqueItems": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "labelSelector",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"uniqueItems": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "resourceVersion",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"uniqueItems": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "timeoutSeconds",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"uniqueItems": true,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "watch",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
						"uniqueItems": true,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"tags": [
					"v1alpha1"
				]
			},
			"post": {
				"operationId": "create_namespaced_workflow",
				"description": "Creates a namespace scoped Workflow",
				"produces": [
					"application/json"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"v1alpha1"
				],
				"parameters": [
					{
						"name": "body",
						"description": "The JSON schema of the Workflow to create.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Workflow"
						},
						"in": "body"
					}
				],
				"responses": {
					"201": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Workflow"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/{{ argo_api_group }}/{{ argo_api_version }}/namespaces/{namespace}/workflows/{name}": {
			"parameters": [
				{
					"name": "namespace",
					"description": "The custom resource's namespace",
					"required": true,
					"type": "string",
					"in": "path"
				},
				{
					"name": "name",
					"description": "Unique Workflow name",
					"required": true,
					"type": "string",
					"in": "path"
				}
			],
			"get": {
				"description": "Get Workflow resource by the workflow name",
				"operationId": "get_namespaced_workflow",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Workflow"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"tags": [
					"v1alpha1"
				]
			},
			"delete": {
				"operationId": "delete_namespaced_workflow",
				"description": "Deletes the specified namespace scoped Workflow.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"v1alpha1"
				],
				"parameters": [
					{
						"name": "body",
						"description": "Delete options to be send along in the body of this request.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/v1.DeleteOptions"
						}
					},
					{
						"name": "gracePeriodSeconds",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"uniqueItems": true,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "orphanDependents",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"uniqueItems": true,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "propagationPolicy",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
						"uniqueItems": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "object"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			},
			"patch": {
				"operationId": "patch_namespaced_workflow",
				"description": "patch the specified namespace scoped Workflow.",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json"
				],
				"produces": [
					"application/json"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"v1alpha1"
				],
				"parameters": [
					{
						"name": "body",
						"description": "The JSON schema of the Workflow to patch.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Workflow"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "object"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			},
			"put": {
				"operationId": "replace_namespaced_workflow",
				"description": "replace the specified namespace scoped Workflow.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"v1alpha1"
				],
				"parameters": [
					{
						"name": "body",
						"description": "The JSON schema of the Workflow to replace.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Workflow"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.Workflow"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/{{ argo_api_group }}/{{ argo_api_version }}/namespaces/{namespace}/workflowtemplates": {
			"parameters": [
				{
					"name": "namespace",
					"description": "The WorkflowTemplate's namespace",
					"required": true,
					"type": "string",
					"in": "path"
				}
			],
			"get": {
				"description": "List WorkflowTemplate resources.",
				"operationId": "list_namespaced_workflowtemplates",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json",
					"application/json;stream=watch"
				],
				"schemes": [
					"https"
				],
				"parameters": [
					{
						"name": "fieldSelector",
						"description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
						"uniqueItems": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "labelSelector",
						"description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
						"uniqueItems": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "resourceVersion",
						"description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
						"uniqueItems": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "timeoutSeconds",
						"description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
						"uniqueItems": true,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "watch",
						"description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.",
						"uniqueItems": true,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTemplateList"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"tags": [
					"v1alpha1"
				]
			},
			"post": {
				"operationId": "create_namespaced_workflowtemplate",
				"description": "Creates a namespace scoped WorkflowTemplate",
				"produces": [
					"application/json"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"v1alpha1"
				],
				"parameters": [
					{
						"name": "body",
						"description": "The JSON schema of the WorkflowTemplate to create.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTemplate"
						},
						"in": "body"
					}
				],
				"responses": {
					"201": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTemplate"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		},
		"/apis/{{ argo_api_group }}/{{ argo_api_version }}/namespaces/{namespace}/workflowtemplates/{name}": {
			"parameters": [
				{
					"name": "namespace",
					"description": "The custom resource's namespace",
					"required": true,
					"type": "string",
					"in": "path"
				},
				{
					"name": "name",
					"description": "Unique WorkflowTemplate name",
					"required": true,
					"type": "string",
					"in": "path"
				}
			],
			"get": {
				"description": "Get WorkflowTemplate resource by its name",
				"operationId": "get_namespaced_workflowtemplate",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTemplate"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				},
				"tags": [
					"v1alpha1"
				]
			},
			"delete": {
				"operationId": "delete_namespaced_workflowtemplate",
				"description": "Deletes the specified namespace scoped WorkflowTemplate.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"v1alpha1"
				],
				"parameters": [
					{
						"name": "body",
						"description": "Delete options to be send along in the body of this request.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/v1.DeleteOptions"
						}
					},
					{
						"name": "gracePeriodSeconds",
						"description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
						"uniqueItems": true,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "orphanDependents",
						"description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
						"uniqueItems": true,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "propagationPolicy",
						"description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.",
						"uniqueItems": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "object"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			},
			"patch": {
				"operationId": "patch_namespaced_workflowtemplate",
				"description": "patch the specified namespace scoped WorkflowTemplate.",
				"consumes": [
					"application/json-patch+json",
					"application/merge-patch+json"
				],
				"produces": [
					"application/json"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"v1alpha1"
				],
				"parameters": [
					{
						"name": "body",
						"description": "The JSON schema of the WorkflowTemplate to patch.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTemplate"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTemplate"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			},
			"put": {
				"operationId": "replace_namespaced_workflowtemplate",
				"description": "replace the specified namespace scoped WorkflowTemplate.",
				"consumes": [
					"*/*"
				],
				"produces": [
					"application/json"
				],
				"schemes": [
					"https"
				],
				"tags": [
					"v1alpha1"
				],
				"parameters": [
					{
						"name": "body",
						"description": "The JSON schema of the WorkflowTemplate to replace.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTemplate"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/io.argoproj.workflow.v1alpha1.WorkflowTemplate"
						}
					},
					"401": {
						"description": "Unauthorized"
					}
				}
			}
		}
	}
}
