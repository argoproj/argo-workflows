####################################################################################################
# Builder image
# Initial stage which pulls prepares build dependencies and CLI tooling we need for our final image
# Also used as the image in CI jobs so needs all dependencies
####################################################################################################
# had issues with official golange image for windows so I'm using plain servercore 
FROM mcr.microsoft.com/windows/servercore:ltsc2019 as builder

ARG IMAGE_OS=windows
ARG IMAGE_ARCH=amd64

# install chocolatey package manager
ENV chocolateyUseWindowsCompression false
RUN iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1')); \
    choco feature disable --name showDownloadProgress ; \
    choco feature enable -n allowGlobalConfirmation

# install golang, dep and tools
RUN choco install golang --version=1.13.4 ; \
    choco install git --params "/GitOnlyOnPath" ; \
    choco install make dep


####################################################################################################
# Argo Build stage which performs the actual build of Argo binaries
####################################################################################################
FROM builder as argo-build

ARG IMAGE_OS=windows
ARG IMAGE_ARCH=amd64

# Perform the build
WORKDIR C:/Users/ContainerAdministrator/go/src/github.com/argoproj/argo
COPY . .
# check we can use Git
RUN git rev-parse HEAD # TODO
#RUN git --version
# fail the build if we are "dirty"
RUN git diff --exit-code # TODO
RUN make dist/argoexec-windows-amd64