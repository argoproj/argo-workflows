version: 2.1
commands:
  dep_ensure:
    steps:
      - run:
          name: Install Dep v0.5.3
          command: DEP_RELEASE_TAG=v0.5.3 curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
      - restore_cache:
          name: Restore vendor cache
          keys:
            - vendor-v2-{{ checksum "Gopkg.lock" }}-{{ .Environment.CIRCLE_JOB }}
            - vendor-v1-{{ checksum "Gopkg.lock" }}-{{ .Environment.CIRCLE_JOB }}
      - run:
          name: Ensure dependencies
          command: dep ensure -v
      - save_cache:
          name: Save vendor cache
          key: vendor-v2-{{ checksum "Gopkg.lock" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - vendor
  install_golang:
    steps:
      - run:
          name: Install Golang v1.12.6
          command: |
            go get golang.org/dl/go1.12.6
            [ -e /home/circleci/sdk/go1.12.6 ] || go1.12.6 download
            echo "export GOPATH=/home/circleci/.go_workspace" | tee -a $BASH_ENV
            echo "export PATH=/home/circleci/sdk/go1.12.6/bin:\$PATH" | tee -a $BASH_ENV
  save_go_cache:
    steps:
      - save_cache:
          name: Save Golang cache
          key: go-v1-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}
          # https://circleci.com/docs/2.0/language-go/
          paths:
            - /home/circleci/.cache/go-build
            - /home/circleci/sdk/go1.12.6
  restore_go_cache:
    steps:
      - restore_cache:
          name: Restore Golang cache
          keys:
            - go-v1-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}
            - go-v1-master-{{ .Environment.CIRCLE_JOB }}
  go_junit_report:
    steps:
      - run:
          name: Install Go test report to Junit test report
          command: go get github.com/jstemmer/go-junit-report
jobs:
  test:
    working_directory: /home/circleci/.go_workspace/src/github.com/argoproj/argo
    machine:
      image: circleci/classic:201808-01
    steps:
      - restore_go_cache
      - install_golang
      - go_junit_report
      - checkout
      - dep_ensure
      - run:
          name: Run tests
          command: |
            mkdir -p test-results
            trap 'go-junit-report < test-results/test.out > test-results/junit.xml' EXIT
            make test 2>&1 | tee test-results/test.out
      - run:
          name: Verify code generation
          command: make verify-codegen
      - save_go_cache
      - run:
          name: Uploading code coverage
          command: bash <(curl -s https://codecov.io/bash) -f coverage.out
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: .
  e2e:
    working_directory: /home/circleci/.go_workspace/src/github.com/argoproj/argo
    machine:
      image: circleci/classic:201808-01
    steps:
      - run:
          name: Install and start K3S v1.0.0
          command: curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.0.0 INSTALL_K3S_EXEC=--docker K3S_KUBECONFIG_MODE=644 sh -
          background: true
      - run:
          name: Pull some Docker images now, to save time later
          command: |
            docker pull golang:1.11.5
            docker pull minio/minio
            docker pull docker/whalesay:latest
            docker pull bitnami/kubectl
          background: true
      - restore_go_cache
      - install_golang
      - go_junit_report
      - checkout
      - dep_ensure
      - run:
          name: Create KUBECONFIG
          command: |
            mkdir -p ~/.kube
            cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
      - run: KUBECONFIG=~/.kube/config make cli start-e2e
      - run:
          name: Follow controller logs, to help diagnose failures
          command: |
            sleep 10
            make logs-e2e
          background: true
      - run:
          name: Watch Docker events, to help diagnose failures
          command: docker events
          background: true
      - run:
          name: Watch Kubernetes events, to help diagnose failures
          command: kubectl -n argo get events --watch
          background: true
      - run:
          name: Run tests
          command: |
            mkdir -p test-results
            trap 'go-junit-report < test-results/test.out > test-results/junit.xml' EXIT
            make test-e2e 2>&1 | tee test-results/test.out
      - save_go_cache
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: .
  ui:
    docker:
      - image: node:11.15.0
    working_directory: ~/argo/ui
    steps:
      - checkout:
          path: ~/argo
      - restore_cache:
          name: Restore Yarn cache
          keys:
            - yarn-packages-v1-{{ checksum "yarn.lock" }}
      - run:
          name: Download dependencies
          command: yarn install --frozen-lockfile --ignore-optional --non-interactive
      - save_cache:
          name: Save Yarn cache
          key: yarn-packages-v1-{{ checksum "yarn.lock" }}
          paths: [~/.cache/yarn, node_modules]
      # - run: yarn test
      # - run: ./node_modules/.bin/codecov -p ..
      - run:
          name: Build
          command: NODE_ENV='production' yarn build
      - run:
          name: Lint
          command: yarn lint
workflows:
  version: 2
  workflow:
    jobs:
      - test
      - ui
      - e2e
