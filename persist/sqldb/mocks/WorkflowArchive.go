// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	labels "k8s.io/apimachinery/pkg/labels"

	time "time"

	utils "github.com/argoproj/argo-workflows/v3/server/utils"

	v1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
)

// WorkflowArchive is an autogenerated mock type for the WorkflowArchive type
type WorkflowArchive struct {
	mock.Mock
}

// ArchiveWorkflow provides a mock function with given fields: ctx, wf
func (_m *WorkflowArchive) ArchiveWorkflow(ctx context.Context, wf *v1alpha1.Workflow) error {
	ret := _m.Called(ctx, wf)

	if len(ret) == 0 {
		panic("no return value specified for ArchiveWorkflow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Workflow) error); ok {
		r0 = rf(ctx, wf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountWorkflows provides a mock function with given fields: ctx, options
func (_m *WorkflowArchive) CountWorkflows(ctx context.Context, options utils.ListOptions) (int64, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for CountWorkflows")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, utils.ListOptions) (int64, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, utils.ListOptions) int64); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, utils.ListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExpiredWorkflows provides a mock function with given fields: ctx, ttl
func (_m *WorkflowArchive) DeleteExpiredWorkflows(ctx context.Context, ttl time.Duration) error {
	ret := _m.Called(ctx, ttl)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredWorkflows")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) error); ok {
		r0 = rf(ctx, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteWorkflow provides a mock function with given fields: ctx, uid
func (_m *WorkflowArchive) DeleteWorkflow(ctx context.Context, uid string) error {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkflow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWorkflow provides a mock function with given fields: ctx, uid, namespace, name
func (_m *WorkflowArchive) GetWorkflow(ctx context.Context, uid string, namespace string, name string) (*v1alpha1.Workflow, error) {
	ret := _m.Called(ctx, uid, namespace, name)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflow")
	}

	var r0 *v1alpha1.Workflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*v1alpha1.Workflow, error)); ok {
		return rf(ctx, uid, namespace, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *v1alpha1.Workflow); ok {
		r0 = rf(ctx, uid, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Workflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, uid, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkflowForEstimator provides a mock function with given fields: ctx, namespace, requirements
func (_m *WorkflowArchive) GetWorkflowForEstimator(ctx context.Context, namespace string, requirements []labels.Requirement) (*v1alpha1.Workflow, error) {
	ret := _m.Called(ctx, namespace, requirements)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowForEstimator")
	}

	var r0 *v1alpha1.Workflow
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []labels.Requirement) (*v1alpha1.Workflow, error)); ok {
		return rf(ctx, namespace, requirements)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []labels.Requirement) *v1alpha1.Workflow); ok {
		r0 = rf(ctx, namespace, requirements)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Workflow)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []labels.Requirement) error); ok {
		r1 = rf(ctx, namespace, requirements)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsEnabled provides a mock function with no fields
func (_m *WorkflowArchive) IsEnabled() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEnabled")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListWorkflows provides a mock function with given fields: ctx, options
func (_m *WorkflowArchive) ListWorkflows(ctx context.Context, options utils.ListOptions) (v1alpha1.Workflows, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflows")
	}

	var r0 v1alpha1.Workflows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, utils.ListOptions) (v1alpha1.Workflows, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, utils.ListOptions) v1alpha1.Workflows); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.Workflows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, utils.ListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkflowsLabelKeys provides a mock function with given fields: ctx
func (_m *WorkflowArchive) ListWorkflowsLabelKeys(ctx context.Context) (*v1alpha1.LabelKeys, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflowsLabelKeys")
	}

	var r0 *v1alpha1.LabelKeys
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*v1alpha1.LabelKeys, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *v1alpha1.LabelKeys); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.LabelKeys)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkflowsLabelValues provides a mock function with given fields: ctx, key
func (_m *WorkflowArchive) ListWorkflowsLabelValues(ctx context.Context, key string) (*v1alpha1.LabelValues, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflowsLabelValues")
	}

	var r0 *v1alpha1.LabelValues
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1alpha1.LabelValues, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1alpha1.LabelValues); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.LabelValues)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWorkflowArchive creates a new instance of WorkflowArchive. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkflowArchive(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkflowArchive {
	mock := &WorkflowArchive{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
