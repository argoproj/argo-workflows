/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.argoproj.workflow.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1MutexHolding;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * MutexStatus contains which objects hold  mutex locks, and which objects this workflow is waiting on to release locks.
 */
@ApiModel(description = "MutexStatus contains which objects hold  mutex locks, and which objects this workflow is waiting on to release locks.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class IoArgoprojWorkflowV1alpha1MutexStatus {
  public static final String SERIALIZED_NAME_HOLDING = "holding";
  @SerializedName(SERIALIZED_NAME_HOLDING)
  private List<IoArgoprojWorkflowV1alpha1MutexHolding> holding = null;

  public static final String SERIALIZED_NAME_WAITING = "waiting";
  @SerializedName(SERIALIZED_NAME_WAITING)
  private List<IoArgoprojWorkflowV1alpha1MutexHolding> waiting = null;


  public IoArgoprojWorkflowV1alpha1MutexStatus holding(List<IoArgoprojWorkflowV1alpha1MutexHolding> holding) {
    
    this.holding = holding;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1MutexStatus addHoldingItem(IoArgoprojWorkflowV1alpha1MutexHolding holdingItem) {
    if (this.holding == null) {
      this.holding = new ArrayList<>();
    }
    this.holding.add(holdingItem);
    return this;
  }

   /**
   * Holding is a list of mutexes and their respective objects that are held by mutex lock for this io.argoproj.workflow.v1alpha1.
   * @return holding
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Holding is a list of mutexes and their respective objects that are held by mutex lock for this io.argoproj.workflow.v1alpha1.")

  public List<IoArgoprojWorkflowV1alpha1MutexHolding> getHolding() {
    return holding;
  }


  public void setHolding(List<IoArgoprojWorkflowV1alpha1MutexHolding> holding) {
    this.holding = holding;
  }


  public IoArgoprojWorkflowV1alpha1MutexStatus waiting(List<IoArgoprojWorkflowV1alpha1MutexHolding> waiting) {
    
    this.waiting = waiting;
    return this;
  }

  public IoArgoprojWorkflowV1alpha1MutexStatus addWaitingItem(IoArgoprojWorkflowV1alpha1MutexHolding waitingItem) {
    if (this.waiting == null) {
      this.waiting = new ArrayList<>();
    }
    this.waiting.add(waitingItem);
    return this;
  }

   /**
   * Waiting is a list of mutexes and their respective objects this workflow is waiting for.
   * @return waiting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Waiting is a list of mutexes and their respective objects this workflow is waiting for.")

  public List<IoArgoprojWorkflowV1alpha1MutexHolding> getWaiting() {
    return waiting;
  }


  public void setWaiting(List<IoArgoprojWorkflowV1alpha1MutexHolding> waiting) {
    this.waiting = waiting;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoArgoprojWorkflowV1alpha1MutexStatus ioArgoprojWorkflowV1alpha1MutexStatus = (IoArgoprojWorkflowV1alpha1MutexStatus) o;
    return Objects.equals(this.holding, ioArgoprojWorkflowV1alpha1MutexStatus.holding) &&
        Objects.equals(this.waiting, ioArgoprojWorkflowV1alpha1MutexStatus.waiting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(holding, waiting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoArgoprojWorkflowV1alpha1MutexStatus {\n");
    sb.append("    holding: ").append(toIndentedString(holding)).append("\n");
    sb.append("    waiting: ").append(toIndentedString(waiting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

