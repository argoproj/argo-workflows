/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.argoproj.workflow.models;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.argoproj.workflow.models.IoArgoprojEventsV1alpha1AMQPConsumeConfig;
import io.argoproj.workflow.models.IoArgoprojEventsV1alpha1AMQPExchangeDeclareConfig;
import io.argoproj.workflow.models.IoArgoprojEventsV1alpha1AMQPQueueBindConfig;
import io.argoproj.workflow.models.IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig;
import io.argoproj.workflow.models.IoArgoprojEventsV1alpha1Backoff;
import io.argoproj.workflow.models.IoArgoprojEventsV1alpha1BasicAuth;
import io.argoproj.workflow.models.IoArgoprojEventsV1alpha1EventSourceFilter;
import io.argoproj.workflow.models.IoArgoprojEventsV1alpha1TLSConfig;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for IoArgoprojEventsV1alpha1AMQPEventSource
 */
public class IoArgoprojEventsV1alpha1AMQPEventSourceTest {
    private final IoArgoprojEventsV1alpha1AMQPEventSource model = new IoArgoprojEventsV1alpha1AMQPEventSource();

    /**
     * Model tests for IoArgoprojEventsV1alpha1AMQPEventSource
     */
    @Test
    public void testIoArgoprojEventsV1alpha1AMQPEventSource() {
        // TODO: test IoArgoprojEventsV1alpha1AMQPEventSource
    }

    /**
     * Test the property 'auth'
     */
    @Test
    public void authTest() {
        // TODO: test auth
    }

    /**
     * Test the property 'connectionBackoff'
     */
    @Test
    public void connectionBackoffTest() {
        // TODO: test connectionBackoff
    }

    /**
     * Test the property 'consume'
     */
    @Test
    public void consumeTest() {
        // TODO: test consume
    }

    /**
     * Test the property 'exchangeDeclare'
     */
    @Test
    public void exchangeDeclareTest() {
        // TODO: test exchangeDeclare
    }

    /**
     * Test the property 'exchangeName'
     */
    @Test
    public void exchangeNameTest() {
        // TODO: test exchangeName
    }

    /**
     * Test the property 'exchangeType'
     */
    @Test
    public void exchangeTypeTest() {
        // TODO: test exchangeType
    }

    /**
     * Test the property 'filter'
     */
    @Test
    public void filterTest() {
        // TODO: test filter
    }

    /**
     * Test the property 'jsonBody'
     */
    @Test
    public void jsonBodyTest() {
        // TODO: test jsonBody
    }

    /**
     * Test the property 'metadata'
     */
    @Test
    public void metadataTest() {
        // TODO: test metadata
    }

    /**
     * Test the property 'queueBind'
     */
    @Test
    public void queueBindTest() {
        // TODO: test queueBind
    }

    /**
     * Test the property 'queueDeclare'
     */
    @Test
    public void queueDeclareTest() {
        // TODO: test queueDeclare
    }

    /**
     * Test the property 'routingKey'
     */
    @Test
    public void routingKeyTest() {
        // TODO: test routingKey
    }

    /**
     * Test the property 'tls'
     */
    @Test
    public void tlsTest() {
        // TODO: test tls
    }

    /**
     * Test the property 'url'
     */
    @Test
    public void urlTest() {
        // TODO: test url
    }

    /**
     * Test the property 'urlSecret'
     */
    @Test
    public void urlSecretTest() {
        // TODO: test urlSecret
    }

}
