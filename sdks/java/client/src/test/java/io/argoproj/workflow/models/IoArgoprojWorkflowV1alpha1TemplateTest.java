/*
 * Argo Workflows API
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.argoproj.workflow.models;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1ArtifactLocation;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1ContainerSetTemplate;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1DAGTemplate;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1Data;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1ExecutorConfig;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1HTTP;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1Inputs;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1Memoize;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1Metadata;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1Metrics;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1Outputs;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1ParallelSteps;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1ResourceTemplate;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1RetryStrategy;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1ScriptTemplate;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1SuspendTemplate;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1Synchronization;
import io.argoproj.workflow.models.IoArgoprojWorkflowV1alpha1UserContainer;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for IoArgoprojWorkflowV1alpha1Template
 */
public class IoArgoprojWorkflowV1alpha1TemplateTest {
    private final IoArgoprojWorkflowV1alpha1Template model = new IoArgoprojWorkflowV1alpha1Template();

    /**
     * Model tests for IoArgoprojWorkflowV1alpha1Template
     */
    @Test
    public void testIoArgoprojWorkflowV1alpha1Template() {
        // TODO: test IoArgoprojWorkflowV1alpha1Template
    }

    /**
     * Test the property 'activeDeadlineSeconds'
     */
    @Test
    public void activeDeadlineSecondsTest() {
        // TODO: test activeDeadlineSeconds
    }

    /**
     * Test the property 'affinity'
     */
    @Test
    public void affinityTest() {
        // TODO: test affinity
    }

    /**
     * Test the property 'archiveLocation'
     */
    @Test
    public void archiveLocationTest() {
        // TODO: test archiveLocation
    }

    /**
     * Test the property 'automountServiceAccountToken'
     */
    @Test
    public void automountServiceAccountTokenTest() {
        // TODO: test automountServiceAccountToken
    }

    /**
     * Test the property 'container'
     */
    @Test
    public void containerTest() {
        // TODO: test container
    }

    /**
     * Test the property 'containerSet'
     */
    @Test
    public void containerSetTest() {
        // TODO: test containerSet
    }

    /**
     * Test the property 'daemon'
     */
    @Test
    public void daemonTest() {
        // TODO: test daemon
    }

    /**
     * Test the property 'dag'
     */
    @Test
    public void dagTest() {
        // TODO: test dag
    }

    /**
     * Test the property 'data'
     */
    @Test
    public void dataTest() {
        // TODO: test data
    }

    /**
     * Test the property 'executor'
     */
    @Test
    public void executorTest() {
        // TODO: test executor
    }

    /**
     * Test the property 'failFast'
     */
    @Test
    public void failFastTest() {
        // TODO: test failFast
    }

    /**
     * Test the property 'hostAliases'
     */
    @Test
    public void hostAliasesTest() {
        // TODO: test hostAliases
    }

    /**
     * Test the property 'http'
     */
    @Test
    public void httpTest() {
        // TODO: test http
    }

    /**
     * Test the property 'initContainers'
     */
    @Test
    public void initContainersTest() {
        // TODO: test initContainers
    }

    /**
     * Test the property 'inputs'
     */
    @Test
    public void inputsTest() {
        // TODO: test inputs
    }

    /**
     * Test the property 'memoize'
     */
    @Test
    public void memoizeTest() {
        // TODO: test memoize
    }

    /**
     * Test the property 'metadata'
     */
    @Test
    public void metadataTest() {
        // TODO: test metadata
    }

    /**
     * Test the property 'metrics'
     */
    @Test
    public void metricsTest() {
        // TODO: test metrics
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'nodeSelector'
     */
    @Test
    public void nodeSelectorTest() {
        // TODO: test nodeSelector
    }

    /**
     * Test the property 'outputs'
     */
    @Test
    public void outputsTest() {
        // TODO: test outputs
    }

    /**
     * Test the property 'parallelism'
     */
    @Test
    public void parallelismTest() {
        // TODO: test parallelism
    }

    /**
     * Test the property 'plugin'
     */
    @Test
    public void pluginTest() {
        // TODO: test plugin
    }

    /**
     * Test the property 'podSpecPatch'
     */
    @Test
    public void podSpecPatchTest() {
        // TODO: test podSpecPatch
    }

    /**
     * Test the property 'priority'
     */
    @Test
    public void priorityTest() {
        // TODO: test priority
    }

    /**
     * Test the property 'priorityClassName'
     */
    @Test
    public void priorityClassNameTest() {
        // TODO: test priorityClassName
    }

    /**
     * Test the property 'resource'
     */
    @Test
    public void resourceTest() {
        // TODO: test resource
    }

    /**
     * Test the property 'retryStrategy'
     */
    @Test
    public void retryStrategyTest() {
        // TODO: test retryStrategy
    }

    /**
     * Test the property 'schedulerName'
     */
    @Test
    public void schedulerNameTest() {
        // TODO: test schedulerName
    }

    /**
     * Test the property 'script'
     */
    @Test
    public void scriptTest() {
        // TODO: test script
    }

    /**
     * Test the property 'securityContext'
     */
    @Test
    public void securityContextTest() {
        // TODO: test securityContext
    }

    /**
     * Test the property 'serviceAccountName'
     */
    @Test
    public void serviceAccountNameTest() {
        // TODO: test serviceAccountName
    }

    /**
     * Test the property 'sidecars'
     */
    @Test
    public void sidecarsTest() {
        // TODO: test sidecars
    }

    /**
     * Test the property 'steps'
     */
    @Test
    public void stepsTest() {
        // TODO: test steps
    }

    /**
     * Test the property 'suspend'
     */
    @Test
    public void suspendTest() {
        // TODO: test suspend
    }

    /**
     * Test the property 'synchronization'
     */
    @Test
    public void synchronizationTest() {
        // TODO: test synchronization
    }

    /**
     * Test the property 'timeout'
     */
    @Test
    public void timeoutTest() {
        // TODO: test timeout
    }

    /**
     * Test the property 'tolerations'
     */
    @Test
    public void tolerationsTest() {
        // TODO: test tolerations
    }

    /**
     * Test the property 'volumes'
     */
    @Test
    public void volumesTest() {
        // TODO: test volumes
    }

}
