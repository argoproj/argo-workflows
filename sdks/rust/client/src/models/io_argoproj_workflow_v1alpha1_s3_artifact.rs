/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoArgoprojWorkflowV1alpha1S3Artifact : S3Artifact is the location of an S3 artifact



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoArgoprojWorkflowV1alpha1S3Artifact {
    #[serde(rename = "accessKeySecret", skip_serializing_if = "Option::is_none")]
    pub access_key_secret: Option<Box<crate::models::SecretKeySelector>>,
    /// Bucket is the name of the bucket
    #[serde(rename = "bucket", skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    #[serde(rename = "createBucketIfNotPresent", skip_serializing_if = "Option::is_none")]
    pub create_bucket_if_not_present: Option<Box<crate::models::IoArgoprojWorkflowV1alpha1CreateS3BucketOptions>>,
    #[serde(rename = "encryptionOptions", skip_serializing_if = "Option::is_none")]
    pub encryption_options: Option<Box<crate::models::IoArgoprojWorkflowV1alpha1S3EncryptionOptions>>,
    /// Endpoint is the hostname of the bucket endpoint
    #[serde(rename = "endpoint", skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// Insecure will connect to the service with TLS
    #[serde(rename = "insecure", skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    /// Key is the key in the bucket where the artifact resides
    #[serde(rename = "key", skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Region contains the optional bucket region
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// RoleARN is the Amazon Resource Name (ARN) of the role to assume.
    #[serde(rename = "roleARN", skip_serializing_if = "Option::is_none")]
    pub role_arn: Option<String>,
    #[serde(rename = "secretKeySecret", skip_serializing_if = "Option::is_none")]
    pub secret_key_secret: Option<Box<crate::models::SecretKeySelector>>,
    /// UseSDKCreds tells the driver to figure out credentials based on sdk defaults.
    #[serde(rename = "useSDKCreds", skip_serializing_if = "Option::is_none")]
    pub use_sdk_creds: Option<bool>,
}

impl IoArgoprojWorkflowV1alpha1S3Artifact {
    /// S3Artifact is the location of an S3 artifact
    pub fn new() -> IoArgoprojWorkflowV1alpha1S3Artifact {
        IoArgoprojWorkflowV1alpha1S3Artifact {
            access_key_secret: None,
            bucket: None,
            create_bucket_if_not_present: None,
            encryption_options: None,
            endpoint: None,
            insecure: None,
            key: None,
            region: None,
            role_arn: None,
            secret_key_secret: None,
            use_sdk_creds: None,
        }
    }
}


