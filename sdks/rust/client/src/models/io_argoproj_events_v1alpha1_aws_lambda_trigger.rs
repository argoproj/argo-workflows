/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoArgoprojEventsV1alpha1AwsLambdaTrigger {
    #[serde(rename = "accessKey", skip_serializing_if = "Option::is_none")]
    pub access_key: Option<Box<crate::models::SecretKeySelector>>,
    /// FunctionName refers to the name of the function to invoke.
    #[serde(rename = "functionName", skip_serializing_if = "Option::is_none")]
    pub function_name: Option<String>,
    /// Choose from the following options.     * RequestResponse (default) - Invoke the function synchronously. Keep    the connection open until the function returns a response or times out.    The API response includes the function response and additional data.     * Event - Invoke the function asynchronously. Send events that fail multiple    times to the function's dead-letter queue (if it's configured). The API    response only includes a status code.     * DryRun - Validate parameter values and verify that the user or role    has permission to invoke the function. +optional
    #[serde(rename = "invocationType", skip_serializing_if = "Option::is_none")]
    pub invocation_type: Option<String>,
    #[serde(rename = "parameters", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<crate::models::IoArgoprojEventsV1alpha1TriggerParameter>>,
    /// Payload is the list of key-value extracted from an event payload to construct the request payload.
    #[serde(rename = "payload", skip_serializing_if = "Option::is_none")]
    pub payload: Option<Vec<crate::models::IoArgoprojEventsV1alpha1TriggerParameter>>,
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    #[serde(rename = "roleARN", skip_serializing_if = "Option::is_none")]
    pub role_arn: Option<String>,
    #[serde(rename = "secretKey", skip_serializing_if = "Option::is_none")]
    pub secret_key: Option<Box<crate::models::SecretKeySelector>>,
}

impl IoArgoprojEventsV1alpha1AwsLambdaTrigger {
    pub fn new() -> IoArgoprojEventsV1alpha1AwsLambdaTrigger {
        IoArgoprojEventsV1alpha1AwsLambdaTrigger {
            access_key: None,
            function_name: None,
            invocation_type: None,
            parameters: None,
            payload: None,
            region: None,
            role_arn: None,
            secret_key: None,
        }
    }
}


