/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoArgoprojEventsV1alpha1EventSourceSpec {
    #[serde(rename = "amqp", skip_serializing_if = "Option::is_none")]
    pub amqp: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1AmqpEventSource>>,
    #[serde(rename = "azureEventsHub", skip_serializing_if = "Option::is_none")]
    pub azure_events_hub: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1AzureEventsHubEventSource>>,
    #[serde(rename = "bitbucket", skip_serializing_if = "Option::is_none")]
    pub bitbucket: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1BitbucketEventSource>>,
    #[serde(rename = "bitbucketserver", skip_serializing_if = "Option::is_none")]
    pub bitbucketserver: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1BitbucketServerEventSource>>,
    #[serde(rename = "calendar", skip_serializing_if = "Option::is_none")]
    pub calendar: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1CalendarEventSource>>,
    #[serde(rename = "emitter", skip_serializing_if = "Option::is_none")]
    pub emitter: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1EmitterEventSource>>,
    #[serde(rename = "eventBusName", skip_serializing_if = "Option::is_none")]
    pub event_bus_name: Option<String>,
    #[serde(rename = "file", skip_serializing_if = "Option::is_none")]
    pub file: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1FileEventSource>>,
    #[serde(rename = "generic", skip_serializing_if = "Option::is_none")]
    pub generic: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1GenericEventSource>>,
    #[serde(rename = "github", skip_serializing_if = "Option::is_none")]
    pub github: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1GithubEventSource>>,
    #[serde(rename = "gitlab", skip_serializing_if = "Option::is_none")]
    pub gitlab: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1GitlabEventSource>>,
    #[serde(rename = "hdfs", skip_serializing_if = "Option::is_none")]
    pub hdfs: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1HdfsEventSource>>,
    #[serde(rename = "kafka", skip_serializing_if = "Option::is_none")]
    pub kafka: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1KafkaEventSource>>,
    #[serde(rename = "minio", skip_serializing_if = "Option::is_none")]
    pub minio: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1S3Artifact>>,
    #[serde(rename = "mqtt", skip_serializing_if = "Option::is_none")]
    pub mqtt: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1MqttEventSource>>,
    #[serde(rename = "nats", skip_serializing_if = "Option::is_none")]
    pub nats: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1NatsEventsSource>>,
    #[serde(rename = "nsq", skip_serializing_if = "Option::is_none")]
    pub nsq: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1NsqEventSource>>,
    #[serde(rename = "pubSub", skip_serializing_if = "Option::is_none")]
    pub pub_sub: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1PubSubEventSource>>,
    #[serde(rename = "pulsar", skip_serializing_if = "Option::is_none")]
    pub pulsar: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1PulsarEventSource>>,
    #[serde(rename = "redis", skip_serializing_if = "Option::is_none")]
    pub redis: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1RedisEventSource>>,
    #[serde(rename = "redisStream", skip_serializing_if = "Option::is_none")]
    pub redis_stream: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1RedisStreamEventSource>>,
    #[serde(rename = "replicas", skip_serializing_if = "Option::is_none")]
    pub replicas: Option<i32>,
    #[serde(rename = "resource", skip_serializing_if = "Option::is_none")]
    pub resource: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1ResourceEventSource>>,
    #[serde(rename = "service", skip_serializing_if = "Option::is_none")]
    pub service: Option<Box<crate::models::IoArgoprojEventsV1alpha1Service>>,
    #[serde(rename = "slack", skip_serializing_if = "Option::is_none")]
    pub slack: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1SlackEventSource>>,
    #[serde(rename = "sns", skip_serializing_if = "Option::is_none")]
    pub sns: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1SnsEventSource>>,
    #[serde(rename = "sqs", skip_serializing_if = "Option::is_none")]
    pub sqs: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1SqsEventSource>>,
    #[serde(rename = "storageGrid", skip_serializing_if = "Option::is_none")]
    pub storage_grid: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1StorageGridEventSource>>,
    #[serde(rename = "stripe", skip_serializing_if = "Option::is_none")]
    pub stripe: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1StripeEventSource>>,
    #[serde(rename = "template", skip_serializing_if = "Option::is_none")]
    pub template: Option<Box<crate::models::IoArgoprojEventsV1alpha1Template>>,
    #[serde(rename = "webhook", skip_serializing_if = "Option::is_none")]
    pub webhook: Option<::std::collections::HashMap<String, crate::models::IoArgoprojEventsV1alpha1WebhookEventSource>>,
}

impl IoArgoprojEventsV1alpha1EventSourceSpec {
    pub fn new() -> IoArgoprojEventsV1alpha1EventSourceSpec {
        IoArgoprojEventsV1alpha1EventSourceSpec {
            amqp: None,
            azure_events_hub: None,
            bitbucket: None,
            bitbucketserver: None,
            calendar: None,
            emitter: None,
            event_bus_name: None,
            file: None,
            generic: None,
            github: None,
            gitlab: None,
            hdfs: None,
            kafka: None,
            minio: None,
            mqtt: None,
            nats: None,
            nsq: None,
            pub_sub: None,
            pulsar: None,
            redis: None,
            redis_stream: None,
            replicas: None,
            resource: None,
            service: None,
            slack: None,
            sns: None,
            sqs: None,
            storage_grid: None,
            stripe: None,
            template: None,
            webhook: None,
        }
    }
}


