/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

/// NodeSelectorTerm : A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeSelectorTerm {
    /// A list of node selector requirements by node's labels.
    #[serde(rename = "matchExpressions", skip_serializing_if = "Option::is_none")]
    pub match_expressions: Option<Vec<crate::models::NodeSelectorRequirement>>,
    /// A list of node selector requirements by node's fields.
    #[serde(rename = "matchFields", skip_serializing_if = "Option::is_none")]
    pub match_fields: Option<Vec<crate::models::NodeSelectorRequirement>>,
}

impl NodeSelectorTerm {
    /// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
    pub fn new() -> NodeSelectorTerm {
        NodeSelectorTerm {
            match_expressions: None,
            match_fields: None,
        }
    }
}


