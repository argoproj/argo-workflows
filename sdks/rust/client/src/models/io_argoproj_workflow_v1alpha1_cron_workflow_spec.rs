/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoArgoprojWorkflowV1alpha1CronWorkflowSpec : CronWorkflowSpec is the specification of a CronWorkflow



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoArgoprojWorkflowV1alpha1CronWorkflowSpec {
    /// ConcurrencyPolicy is the K8s-style concurrency policy that will be used
    #[serde(rename = "concurrencyPolicy", skip_serializing_if = "Option::is_none")]
    pub concurrency_policy: Option<String>,
    /// FailedJobsHistoryLimit is the number of failed jobs to be kept at a time
    #[serde(rename = "failedJobsHistoryLimit", skip_serializing_if = "Option::is_none")]
    pub failed_jobs_history_limit: Option<i32>,
    /// Schedule is a schedule to run the Workflow in Cron format
    #[serde(rename = "schedule")]
    pub schedule: String,
    /// StartingDeadlineSeconds is the K8s-style deadline that will limit the time a CronWorkflow will be run after its original scheduled time if it is missed.
    #[serde(rename = "startingDeadlineSeconds", skip_serializing_if = "Option::is_none")]
    pub starting_deadline_seconds: Option<i32>,
    /// SuccessfulJobsHistoryLimit is the number of successful jobs to be kept at a time
    #[serde(rename = "successfulJobsHistoryLimit", skip_serializing_if = "Option::is_none")]
    pub successful_jobs_history_limit: Option<i32>,
    /// Suspend is a flag that will stop new CronWorkflows from running if set to true
    #[serde(rename = "suspend", skip_serializing_if = "Option::is_none")]
    pub suspend: Option<bool>,
    /// Timezone is the timezone against which the cron schedule will be calculated, e.g. \"Asia/Tokyo\". Default is machine's local time.
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    #[serde(rename = "workflowMetadata", skip_serializing_if = "Option::is_none")]
    pub workflow_metadata: Option<Box<crate::models::ObjectMeta>>,
    #[serde(rename = "workflowSpec")]
    pub workflow_spec: Box<crate::models::IoArgoprojWorkflowV1alpha1WorkflowSpec>,
}

impl IoArgoprojWorkflowV1alpha1CronWorkflowSpec {
    /// CronWorkflowSpec is the specification of a CronWorkflow
    pub fn new(schedule: String, workflow_spec: crate::models::IoArgoprojWorkflowV1alpha1WorkflowSpec) -> IoArgoprojWorkflowV1alpha1CronWorkflowSpec {
        IoArgoprojWorkflowV1alpha1CronWorkflowSpec {
            concurrency_policy: None,
            failed_jobs_history_limit: None,
            schedule,
            starting_deadline_seconds: None,
            successful_jobs_history_limit: None,
            suspend: None,
            timezone: None,
            workflow_metadata: None,
            workflow_spec: Box::new(workflow_spec),
        }
    }
}


