/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoArgoprojWorkflowV1alpha1Memoize : Memoization enables caching for the Outputs of the template



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoArgoprojWorkflowV1alpha1Memoize {
    #[serde(rename = "cache")]
    pub cache: Box<crate::models::IoArgoprojWorkflowV1alpha1Cache>,
    /// Key is the key to use as the caching key
    #[serde(rename = "key")]
    pub key: String,
    /// MaxAge is the maximum age (e.g. \"180s\", \"24h\") of an entry that is still considered valid. If an entry is older than the MaxAge, it will be ignored.
    #[serde(rename = "maxAge")]
    pub max_age: String,
}

impl IoArgoprojWorkflowV1alpha1Memoize {
    /// Memoization enables caching for the Outputs of the template
    pub fn new(cache: crate::models::IoArgoprojWorkflowV1alpha1Cache, key: String, max_age: String) -> IoArgoprojWorkflowV1alpha1Memoize {
        IoArgoprojWorkflowV1alpha1Memoize {
            cache: Box::new(cache),
            key,
            max_age,
        }
    }
}


