/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SensorLogEntry {
    #[serde(rename = "dependencyName", skip_serializing_if = "Option::is_none")]
    pub dependency_name: Option<String>,
    #[serde(rename = "eventContext", skip_serializing_if = "Option::is_none")]
    pub event_context: Option<String>,
    #[serde(rename = "level", skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    #[serde(rename = "msg", skip_serializing_if = "Option::is_none")]
    pub msg: Option<String>,
    #[serde(rename = "namespace", skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    #[serde(rename = "sensorName", skip_serializing_if = "Option::is_none")]
    pub sensor_name: Option<String>,
    /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
    #[serde(rename = "triggerName", skip_serializing_if = "Option::is_none")]
    pub trigger_name: Option<String>,
}

impl SensorLogEntry {
    pub fn new() -> SensorLogEntry {
        SensorLogEntry {
            dependency_name: None,
            event_context: None,
            level: None,
            msg: None,
            namespace: None,
            sensor_name: None,
            time: None,
            trigger_name: None,
        }
    }
}


