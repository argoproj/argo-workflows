/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoArgoprojWorkflowV1alpha1CronWorkflowStatus : CronWorkflowStatus is the status of a CronWorkflow



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoArgoprojWorkflowV1alpha1CronWorkflowStatus {
    /// Active is a list of active workflows stemming from this CronWorkflow
    #[serde(rename = "active")]
    pub active: Vec<crate::models::ObjectReference>,
    /// Conditions is a list of conditions the CronWorkflow may have
    #[serde(rename = "conditions")]
    pub conditions: Vec<crate::models::IoArgoprojWorkflowV1alpha1Condition>,
    /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    #[serde(rename = "lastScheduledTime")]
    pub last_scheduled_time: String,
}

impl IoArgoprojWorkflowV1alpha1CronWorkflowStatus {
    /// CronWorkflowStatus is the status of a CronWorkflow
    pub fn new(active: Vec<crate::models::ObjectReference>, conditions: Vec<crate::models::IoArgoprojWorkflowV1alpha1Condition>, last_scheduled_time: String) -> IoArgoprojWorkflowV1alpha1CronWorkflowStatus {
        IoArgoprojWorkflowV1alpha1CronWorkflowStatus {
            active,
            conditions,
            last_scheduled_time,
        }
    }
}


