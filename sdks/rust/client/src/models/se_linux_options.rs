/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

/// SeLinuxOptions : SELinuxOptions are the labels to be applied to the container



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SeLinuxOptions {
    /// Level is SELinux level label that applies to the container.
    #[serde(rename = "level", skip_serializing_if = "Option::is_none")]
    pub level: Option<String>,
    /// Role is a SELinux role label that applies to the container.
    #[serde(rename = "role", skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// Type is a SELinux type label that applies to the container.
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    /// User is a SELinux user label that applies to the container.
    #[serde(rename = "user", skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

impl SeLinuxOptions {
    /// SELinuxOptions are the labels to be applied to the container
    pub fn new() -> SeLinuxOptions {
        SeLinuxOptions {
            level: None,
            role: None,
            _type: None,
            user: None,
        }
    }
}


