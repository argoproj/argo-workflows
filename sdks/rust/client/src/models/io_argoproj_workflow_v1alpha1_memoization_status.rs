/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoArgoprojWorkflowV1alpha1MemoizationStatus : MemoizationStatus is the status of this memoized node



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoArgoprojWorkflowV1alpha1MemoizationStatus {
    /// Cache is the name of the cache that was used
    #[serde(rename = "cacheName")]
    pub cache_name: String,
    /// Hit indicates whether this node was created from a cache entry
    #[serde(rename = "hit")]
    pub hit: bool,
    /// Key is the name of the key used for this node's cache
    #[serde(rename = "key")]
    pub key: String,
}

impl IoArgoprojWorkflowV1alpha1MemoizationStatus {
    /// MemoizationStatus is the status of this memoized node
    pub fn new(cache_name: String, hit: bool, key: String) -> IoArgoprojWorkflowV1alpha1MemoizationStatus {
        IoArgoprojWorkflowV1alpha1MemoizationStatus {
            cache_name,
            hit,
            key,
        }
    }
}


