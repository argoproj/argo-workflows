/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoArgoprojEventsV1alpha1Backoff {
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<Box<crate::models::IoArgoprojEventsV1alpha1Int64OrString>>,
    #[serde(rename = "factor", skip_serializing_if = "Option::is_none")]
    pub factor: Option<Box<crate::models::IoArgoprojEventsV1alpha1Amount>>,
    #[serde(rename = "jitter", skip_serializing_if = "Option::is_none")]
    pub jitter: Option<Box<crate::models::IoArgoprojEventsV1alpha1Amount>>,
    #[serde(rename = "steps", skip_serializing_if = "Option::is_none")]
    pub steps: Option<i32>,
}

impl IoArgoprojEventsV1alpha1Backoff {
    pub fn new() -> IoArgoprojEventsV1alpha1Backoff {
        IoArgoprojEventsV1alpha1Backoff {
            duration: None,
            factor: None,
            jitter: None,
            steps: None,
        }
    }
}


