/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoArgoprojWorkflowV1alpha1ArchiveStrategy : ArchiveStrategy describes how to archive files/directory when saving artifacts



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoArgoprojWorkflowV1alpha1ArchiveStrategy {
    /// NoneStrategy indicates to skip tar process and upload the files or directory tree as independent files. Note that if the artifact is a directory, the artifact driver must support the ability to save/load the directory appropriately.
    #[serde(rename = "none", skip_serializing_if = "Option::is_none")]
    pub none: Option<serde_json::Value>,
    #[serde(rename = "tar", skip_serializing_if = "Option::is_none")]
    pub tar: Option<Box<crate::models::IoArgoprojWorkflowV1alpha1TarStrategy>>,
    /// ZipStrategy will unzip zipped input artifacts
    #[serde(rename = "zip", skip_serializing_if = "Option::is_none")]
    pub zip: Option<serde_json::Value>,
}

impl IoArgoprojWorkflowV1alpha1ArchiveStrategy {
    /// ArchiveStrategy describes how to archive files/directory when saving artifacts
    pub fn new() -> IoArgoprojWorkflowV1alpha1ArchiveStrategy {
        IoArgoprojWorkflowV1alpha1ArchiveStrategy {
            none: None,
            tar: None,
            zip: None,
        }
    }
}


