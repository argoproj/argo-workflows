/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoArgoprojWorkflowV1alpha1TtlStrategy : TTLStrategy is the strategy for the time to live depending on if the workflow succeeded or failed



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoArgoprojWorkflowV1alpha1TtlStrategy {
    /// SecondsAfterCompletion is the number of seconds to live after completion
    #[serde(rename = "secondsAfterCompletion", skip_serializing_if = "Option::is_none")]
    pub seconds_after_completion: Option<i32>,
    /// SecondsAfterFailure is the number of seconds to live after failure
    #[serde(rename = "secondsAfterFailure", skip_serializing_if = "Option::is_none")]
    pub seconds_after_failure: Option<i32>,
    /// SecondsAfterSuccess is the number of seconds to live after success
    #[serde(rename = "secondsAfterSuccess", skip_serializing_if = "Option::is_none")]
    pub seconds_after_success: Option<i32>,
}

impl IoArgoprojWorkflowV1alpha1TtlStrategy {
    /// TTLStrategy is the strategy for the time to live depending on if the workflow succeeded or failed
    pub fn new() -> IoArgoprojWorkflowV1alpha1TtlStrategy {
        IoArgoprojWorkflowV1alpha1TtlStrategy {
            seconds_after_completion: None,
            seconds_after_failure: None,
            seconds_after_success: None,
        }
    }
}


