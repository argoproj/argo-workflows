/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

/// StatusCause : StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct StatusCause {
    /// The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.  Examples:   \"name\" - the field \"name\" on the current resource   \"items[0].name\" - the field \"name\" on the first array entry in \"items\"
    #[serde(rename = "field", skip_serializing_if = "Option::is_none")]
    pub field: Option<String>,
    /// A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// A machine-readable description of the cause of the error. If this value is empty there is no information available.
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
}

impl StatusCause {
    /// StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
    pub fn new() -> StatusCause {
        StatusCause {
            field: None,
            message: None,
            reason: None,
        }
    }
}


