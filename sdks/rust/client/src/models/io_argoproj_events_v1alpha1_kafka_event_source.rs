/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoArgoprojEventsV1alpha1KafkaEventSource {
    /// Yaml format Sarama config for Kafka connection. It follows the struct of sarama.Config. See https://github.com/Shopify/sarama/blob/main/config.go e.g.  consumer:   fetch:     min: 1 net:   MaxOpenRequests: 5  +optional
    #[serde(rename = "config", skip_serializing_if = "Option::is_none")]
    pub config: Option<String>,
    #[serde(rename = "connectionBackoff", skip_serializing_if = "Option::is_none")]
    pub connection_backoff: Option<Box<crate::models::IoArgoprojEventsV1alpha1Backoff>>,
    #[serde(rename = "consumerGroup", skip_serializing_if = "Option::is_none")]
    pub consumer_group: Option<Box<crate::models::IoArgoprojEventsV1alpha1KafkaConsumerGroup>>,
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<Box<crate::models::IoArgoprojEventsV1alpha1EventSourceFilter>>,
    #[serde(rename = "jsonBody", skip_serializing_if = "Option::is_none")]
    pub json_body: Option<bool>,
    #[serde(rename = "limitEventsPerSecond", skip_serializing_if = "Option::is_none")]
    pub limit_events_per_second: Option<String>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "partition", skip_serializing_if = "Option::is_none")]
    pub partition: Option<String>,
    #[serde(rename = "sasl", skip_serializing_if = "Option::is_none")]
    pub sasl: Option<Box<crate::models::IoArgoprojEventsV1alpha1SaslConfig>>,
    #[serde(rename = "tls", skip_serializing_if = "Option::is_none")]
    pub tls: Option<Box<crate::models::IoArgoprojEventsV1alpha1TlsConfig>>,
    #[serde(rename = "topic", skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

impl IoArgoprojEventsV1alpha1KafkaEventSource {
    pub fn new() -> IoArgoprojEventsV1alpha1KafkaEventSource {
        IoArgoprojEventsV1alpha1KafkaEventSource {
            config: None,
            connection_backoff: None,
            consumer_group: None,
            filter: None,
            json_body: None,
            limit_events_per_second: None,
            metadata: None,
            partition: None,
            sasl: None,
            tls: None,
            topic: None,
            url: None,
            version: None,
        }
    }
}


