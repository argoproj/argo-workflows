/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoArgoprojWorkflowV1alpha1HttpArtifact : HTTPArtifact allows a file served on HTTP to be placed as an input artifact in a container



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoArgoprojWorkflowV1alpha1HttpArtifact {
    #[serde(rename = "auth", skip_serializing_if = "Option::is_none")]
    pub auth: Option<Box<crate::models::IoArgoprojWorkflowV1alpha1HttpAuth>>,
    /// Headers are an optional list of headers to send with HTTP requests for artifacts
    #[serde(rename = "headers", skip_serializing_if = "Option::is_none")]
    pub headers: Option<Vec<crate::models::IoArgoprojWorkflowV1alpha1Header>>,
    /// URL of the artifact
    #[serde(rename = "url")]
    pub url: String,
}

impl IoArgoprojWorkflowV1alpha1HttpArtifact {
    /// HTTPArtifact allows a file served on HTTP to be placed as an input artifact in a container
    pub fn new(url: String) -> IoArgoprojWorkflowV1alpha1HttpArtifact {
        IoArgoprojWorkflowV1alpha1HttpArtifact {
            auth: None,
            headers: None,
            url,
        }
    }
}


