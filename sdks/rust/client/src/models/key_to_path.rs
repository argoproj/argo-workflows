/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

/// KeyToPath : Maps a string key to a path within a volume.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KeyToPath {
    /// The key to project.
    #[serde(rename = "key")]
    pub key: String,
    /// Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<i32>,
    /// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
    #[serde(rename = "path")]
    pub path: String,
}

impl KeyToPath {
    /// Maps a string key to a path within a volume.
    pub fn new(key: String, path: String) -> KeyToPath {
        KeyToPath {
            key,
            mode: None,
            path,
        }
    }
}


