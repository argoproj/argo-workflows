/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoArgoprojWorkflowV1alpha1WorkflowStatus : WorkflowStatus contains overall status information about a workflow



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoArgoprojWorkflowV1alpha1WorkflowStatus {
    #[serde(rename = "artifactGCStatus", skip_serializing_if = "Option::is_none")]
    pub artifact_gc_status: Option<Box<crate::models::IoArgoprojWorkflowV1alpha1ArtGcStatus>>,
    #[serde(rename = "artifactRepositoryRef", skip_serializing_if = "Option::is_none")]
    pub artifact_repository_ref: Option<Box<crate::models::IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus>>,
    /// Compressed and base64 decoded Nodes map
    #[serde(rename = "compressedNodes", skip_serializing_if = "Option::is_none")]
    pub compressed_nodes: Option<String>,
    /// Conditions is a list of conditions the Workflow may have
    #[serde(rename = "conditions", skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<crate::models::IoArgoprojWorkflowV1alpha1Condition>>,
    /// EstimatedDuration in seconds.
    #[serde(rename = "estimatedDuration", skip_serializing_if = "Option::is_none")]
    pub estimated_duration: Option<i32>,
    /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    #[serde(rename = "finishedAt", skip_serializing_if = "Option::is_none")]
    pub finished_at: Option<String>,
    /// A human readable message indicating details about why the workflow is in this condition.
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    /// Nodes is a mapping between a node ID and the node's status.
    #[serde(rename = "nodes", skip_serializing_if = "Option::is_none")]
    pub nodes: Option<::std::collections::HashMap<String, crate::models::IoArgoprojWorkflowV1alpha1NodeStatus>>,
    /// Whether on not node status has been offloaded to a database. If exists, then Nodes and CompressedNodes will be empty. This will actually be populated with a hash of the offloaded data.
    #[serde(rename = "offloadNodeStatusVersion", skip_serializing_if = "Option::is_none")]
    pub offload_node_status_version: Option<String>,
    #[serde(rename = "outputs", skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Box<crate::models::IoArgoprojWorkflowV1alpha1Outputs>>,
    /// PersistentVolumeClaims tracks all PVCs that were created as part of the io.argoproj.workflow.v1alpha1. The contents of this list are drained at the end of the workflow.
    #[serde(rename = "persistentVolumeClaims", skip_serializing_if = "Option::is_none")]
    pub persistent_volume_claims: Option<Vec<crate::models::Volume>>,
    /// Phase a simple, high-level summary of where the workflow is in its lifecycle. Will be \"\" (Unknown), \"Pending\", or \"Running\" before the workflow is completed, and \"Succeeded\", \"Failed\" or \"Error\" once the workflow has completed.
    #[serde(rename = "phase", skip_serializing_if = "Option::is_none")]
    pub phase: Option<String>,
    /// Progress to completion
    #[serde(rename = "progress", skip_serializing_if = "Option::is_none")]
    pub progress: Option<String>,
    /// ResourcesDuration is the total for the workflow
    #[serde(rename = "resourcesDuration", skip_serializing_if = "Option::is_none")]
    pub resources_duration: Option<::std::collections::HashMap<String, i64>>,
    /// Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    #[serde(rename = "startedAt", skip_serializing_if = "Option::is_none")]
    pub started_at: Option<String>,
    /// StoredTemplates is a mapping between a template ref and the node's status.
    #[serde(rename = "storedTemplates", skip_serializing_if = "Option::is_none")]
    pub stored_templates: Option<::std::collections::HashMap<String, crate::models::IoArgoprojWorkflowV1alpha1Template>>,
    #[serde(rename = "storedWorkflowTemplateSpec", skip_serializing_if = "Option::is_none")]
    pub stored_workflow_template_spec: Option<Box<crate::models::IoArgoprojWorkflowV1alpha1WorkflowSpec>>,
    #[serde(rename = "synchronization", skip_serializing_if = "Option::is_none")]
    pub synchronization: Option<Box<crate::models::IoArgoprojWorkflowV1alpha1SynchronizationStatus>>,
}

impl IoArgoprojWorkflowV1alpha1WorkflowStatus {
    /// WorkflowStatus contains overall status information about a workflow
    pub fn new() -> IoArgoprojWorkflowV1alpha1WorkflowStatus {
        IoArgoprojWorkflowV1alpha1WorkflowStatus {
            artifact_gc_status: None,
            artifact_repository_ref: None,
            compressed_nodes: None,
            conditions: None,
            estimated_duration: None,
            finished_at: None,
            message: None,
            nodes: None,
            offload_node_status_version: None,
            outputs: None,
            persistent_volume_claims: None,
            phase: None,
            progress: None,
            resources_duration: None,
            started_at: None,
            stored_templates: None,
            stored_workflow_template_spec: None,
            synchronization: None,
        }
    }
}


