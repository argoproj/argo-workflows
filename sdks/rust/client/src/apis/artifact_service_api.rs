/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `get_artifact_file`
#[derive(Clone, Debug)]
pub struct GetArtifactFileParams {
    pub namespace: String,
    pub id_discriminator: String,
    pub id: String,
    pub node_id: String,
    pub artifact_name: String,
    pub artifact_discriminator: String
}

/// struct for passing parameters to the method `get_input_artifact`
#[derive(Clone, Debug)]
pub struct GetInputArtifactParams {
    pub namespace: String,
    pub name: String,
    pub node_id: String,
    pub artifact_name: String
}

/// struct for passing parameters to the method `get_input_artifact_by_uid`
#[derive(Clone, Debug)]
pub struct GetInputArtifactByUidParams {
    pub uid: String,
    pub node_id: String,
    pub artifact_name: String
}

/// struct for passing parameters to the method `get_output_artifact`
#[derive(Clone, Debug)]
pub struct GetOutputArtifactParams {
    pub namespace: String,
    pub name: String,
    pub node_id: String,
    pub artifact_name: String
}

/// struct for passing parameters to the method `get_output_artifact_by_uid`
#[derive(Clone, Debug)]
pub struct GetOutputArtifactByUidParams {
    pub uid: String,
    pub node_id: String,
    pub artifact_name: String
}


/// struct for typed successes of method `get_artifact_file`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetArtifactFileSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `get_input_artifact`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetInputArtifactSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `get_input_artifact_by_uid`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetInputArtifactByUidSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `get_output_artifact`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOutputArtifactSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `get_output_artifact_by_uid`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOutputArtifactByUidSuccess {
    Status200(std::path::PathBuf),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_artifact_file`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetArtifactFileError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_input_artifact`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetInputArtifactError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_input_artifact_by_uid`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetInputArtifactByUidError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_output_artifact`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOutputArtifactError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_output_artifact_by_uid`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetOutputArtifactByUidError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}


pub async fn get_artifact_file(configuration: &configuration::Configuration, params: GetArtifactFileParams) -> Result<ResponseContent<GetArtifactFileSuccess>, Error<GetArtifactFileError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let id_discriminator = params.id_discriminator;
    let id = params.id;
    let node_id = params.node_id;
    let artifact_name = params.artifact_name;
    let artifact_discriminator = params.artifact_discriminator;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/artifact-files/{namespace}/{idDiscriminator}/{id}/{nodeId}/{artifactDiscriminator}/{artifactName}", configuration.base_path, namespace=crate::apis::urlencode(namespace), idDiscriminator=crate::apis::urlencode(id_discriminator), id=crate::apis::urlencode(id), nodeId=crate::apis::urlencode(node_id), artifactName=crate::apis::urlencode(artifact_name), artifactDiscriminator=crate::apis::urlencode(artifact_discriminator));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetArtifactFileSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetArtifactFileError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_input_artifact(configuration: &configuration::Configuration, params: GetInputArtifactParams) -> Result<ResponseContent<GetInputArtifactSuccess>, Error<GetInputArtifactError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let name = params.name;
    let node_id = params.node_id;
    let artifact_name = params.artifact_name;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/input-artifacts/{namespace}/{name}/{nodeId}/{artifactName}", configuration.base_path, namespace=crate::apis::urlencode(namespace), name=crate::apis::urlencode(name), nodeId=crate::apis::urlencode(node_id), artifactName=crate::apis::urlencode(artifact_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetInputArtifactSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetInputArtifactError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_input_artifact_by_uid(configuration: &configuration::Configuration, params: GetInputArtifactByUidParams) -> Result<ResponseContent<GetInputArtifactByUidSuccess>, Error<GetInputArtifactByUidError>> {
    // unbox the parameters
    let uid = params.uid;
    let node_id = params.node_id;
    let artifact_name = params.artifact_name;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/input-artifacts-by-uid/{uid}/{nodeId}/{artifactName}", configuration.base_path, uid=crate::apis::urlencode(uid), nodeId=crate::apis::urlencode(node_id), artifactName=crate::apis::urlencode(artifact_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetInputArtifactByUidSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetInputArtifactByUidError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_output_artifact(configuration: &configuration::Configuration, params: GetOutputArtifactParams) -> Result<ResponseContent<GetOutputArtifactSuccess>, Error<GetOutputArtifactError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let name = params.name;
    let node_id = params.node_id;
    let artifact_name = params.artifact_name;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/artifacts/{namespace}/{name}/{nodeId}/{artifactName}", configuration.base_path, namespace=crate::apis::urlencode(namespace), name=crate::apis::urlencode(name), nodeId=crate::apis::urlencode(node_id), artifactName=crate::apis::urlencode(artifact_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetOutputArtifactSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetOutputArtifactError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_output_artifact_by_uid(configuration: &configuration::Configuration, params: GetOutputArtifactByUidParams) -> Result<ResponseContent<GetOutputArtifactByUidSuccess>, Error<GetOutputArtifactByUidError>> {
    // unbox the parameters
    let uid = params.uid;
    let node_id = params.node_id;
    let artifact_name = params.artifact_name;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/artifacts-by-uid/{uid}/{nodeId}/{artifactName}", configuration.base_path, uid=crate::apis::urlencode(uid), nodeId=crate::apis::urlencode(node_id), artifactName=crate::apis::urlencode(artifact_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetOutputArtifactByUidSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetOutputArtifactByUidError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

