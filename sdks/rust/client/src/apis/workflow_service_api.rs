/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `create_workflow`
#[derive(Clone, Debug)]
pub struct CreateWorkflowParams {
    pub namespace: String,
    pub body: crate::models::IoArgoprojWorkflowV1alpha1WorkflowCreateRequest
}

/// struct for passing parameters to the method `delete_workflow`
#[derive(Clone, Debug)]
pub struct DeleteWorkflowParams {
    pub namespace: String,
    pub name: String,
    /// The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. +optional.
    pub delete_options_grace_period_seconds: Option<String>,
    /// Specifies the target UID. +optional.
    pub delete_options_preconditions_uid: Option<String>,
    /// Specifies the target ResourceVersion +optional.
    pub delete_options_preconditions_resource_version: Option<String>,
    /// Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both. +optional.
    pub delete_options_orphan_dependents: Option<bool>,
    /// Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground. +optional.
    pub delete_options_propagation_policy: Option<String>,
    /// When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed +optional.
    pub delete_options_dry_run: Option<Vec<String>>,
    pub force: Option<bool>
}

/// struct for passing parameters to the method `get_workflow`
#[derive(Clone, Debug)]
pub struct GetWorkflowParams {
    pub namespace: String,
    pub name: String,
    /// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    pub get_options_resource_version: Option<String>,
    /// Fields to be included or excluded in the response. e.g. \"spec,status.phase\", \"-status.nodes\".
    pub fields: Option<String>
}

/// struct for passing parameters to the method `lint_workflow`
#[derive(Clone, Debug)]
pub struct LintWorkflowParams {
    pub namespace: String,
    pub body: crate::models::IoArgoprojWorkflowV1alpha1WorkflowLintRequest
}

/// struct for passing parameters to the method `list_workflows`
#[derive(Clone, Debug)]
pub struct ListWorkflowsParams {
    pub namespace: String,
    /// A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
    pub list_options_label_selector: Option<String>,
    /// A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
    pub list_options_field_selector: Option<String>,
    /// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
    pub list_options_watch: Option<bool>,
    /// allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
    pub list_options_allow_watch_bookmarks: Option<bool>,
    /// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    pub list_options_resource_version: Option<String>,
    /// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    pub list_options_resource_version_match: Option<String>,
    /// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
    pub list_options_timeout_seconds: Option<String>,
    /// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    pub list_options_limit: Option<String>,
    /// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    pub list_options_continue: Option<String>,
    /// Fields to be included or excluded in the response. e.g. \"items.spec,items.status.phase\", \"-items.status.nodes\".
    pub fields: Option<String>
}

/// struct for passing parameters to the method `pod_logs`
#[derive(Clone, Debug)]
pub struct PodLogsParams {
    pub namespace: String,
    pub name: String,
    pub pod_name: String,
    /// The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
    pub log_options_container: Option<String>,
    /// Follow the log stream of the pod. Defaults to false. +optional.
    pub log_options_follow: Option<bool>,
    /// Return previous terminated container logs. Defaults to false. +optional.
    pub log_options_previous: Option<bool>,
    /// A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
    pub log_options_since_seconds: Option<String>,
    /// Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
    pub log_options_since_time_seconds: Option<String>,
    /// Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
    pub log_options_since_time_nanos: Option<i32>,
    /// If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
    pub log_options_timestamps: Option<bool>,
    /// If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
    pub log_options_tail_lines: Option<String>,
    /// If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
    pub log_options_limit_bytes: Option<String>,
    /// insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver's TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
    pub log_options_insecure_skip_tls_verify_backend: Option<bool>,
    pub grep: Option<String>,
    pub selector: Option<String>
}

/// struct for passing parameters to the method `resubmit_workflow`
#[derive(Clone, Debug)]
pub struct ResubmitWorkflowParams {
    pub namespace: String,
    pub name: String,
    pub body: crate::models::IoArgoprojWorkflowV1alpha1WorkflowResubmitRequest
}

/// struct for passing parameters to the method `resume_workflow`
#[derive(Clone, Debug)]
pub struct ResumeWorkflowParams {
    pub namespace: String,
    pub name: String,
    pub body: crate::models::IoArgoprojWorkflowV1alpha1WorkflowResumeRequest
}

/// struct for passing parameters to the method `retry_workflow`
#[derive(Clone, Debug)]
pub struct RetryWorkflowParams {
    pub namespace: String,
    pub name: String,
    pub body: crate::models::IoArgoprojWorkflowV1alpha1WorkflowRetryRequest
}

/// struct for passing parameters to the method `set_workflow`
#[derive(Clone, Debug)]
pub struct SetWorkflowParams {
    pub namespace: String,
    pub name: String,
    pub body: crate::models::IoArgoprojWorkflowV1alpha1WorkflowSetRequest
}

/// struct for passing parameters to the method `stop_workflow`
#[derive(Clone, Debug)]
pub struct StopWorkflowParams {
    pub namespace: String,
    pub name: String,
    pub body: crate::models::IoArgoprojWorkflowV1alpha1WorkflowStopRequest
}

/// struct for passing parameters to the method `submit_workflow`
#[derive(Clone, Debug)]
pub struct SubmitWorkflowParams {
    pub namespace: String,
    pub body: crate::models::IoArgoprojWorkflowV1alpha1WorkflowSubmitRequest
}

/// struct for passing parameters to the method `suspend_workflow`
#[derive(Clone, Debug)]
pub struct SuspendWorkflowParams {
    pub namespace: String,
    pub name: String,
    pub body: crate::models::IoArgoprojWorkflowV1alpha1WorkflowSuspendRequest
}

/// struct for passing parameters to the method `terminate_workflow`
#[derive(Clone, Debug)]
pub struct TerminateWorkflowParams {
    pub namespace: String,
    pub name: String,
    pub body: crate::models::IoArgoprojWorkflowV1alpha1WorkflowTerminateRequest
}

/// struct for passing parameters to the method `watch_events`
#[derive(Clone, Debug)]
pub struct WatchEventsParams {
    pub namespace: String,
    /// A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
    pub list_options_label_selector: Option<String>,
    /// A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
    pub list_options_field_selector: Option<String>,
    /// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
    pub list_options_watch: Option<bool>,
    /// allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
    pub list_options_allow_watch_bookmarks: Option<bool>,
    /// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    pub list_options_resource_version: Option<String>,
    /// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    pub list_options_resource_version_match: Option<String>,
    /// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
    pub list_options_timeout_seconds: Option<String>,
    /// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    pub list_options_limit: Option<String>,
    /// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    pub list_options_continue: Option<String>
}

/// struct for passing parameters to the method `watch_workflows`
#[derive(Clone, Debug)]
pub struct WatchWorkflowsParams {
    pub namespace: String,
    /// A selector to restrict the list of returned objects by their labels. Defaults to everything. +optional.
    pub list_options_label_selector: Option<String>,
    /// A selector to restrict the list of returned objects by their fields. Defaults to everything. +optional.
    pub list_options_field_selector: Option<String>,
    /// Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. +optional.
    pub list_options_watch: Option<bool>,
    /// allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. +optional.
    pub list_options_allow_watch_bookmarks: Option<bool>,
    /// resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    pub list_options_resource_version: Option<String>,
    /// resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset +optional
    pub list_options_resource_version_match: Option<String>,
    /// Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity. +optional.
    pub list_options_timeout_seconds: Option<String>,
    /// limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
    pub list_options_limit: Option<String>,
    /// The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
    pub list_options_continue: Option<String>,
    pub fields: Option<String>
}

/// struct for passing parameters to the method `workflow_logs`
#[derive(Clone, Debug)]
pub struct WorkflowLogsParams {
    pub namespace: String,
    pub name: String,
    pub pod_name: Option<String>,
    /// The container for which to stream logs. Defaults to only container if there is one container in the pod. +optional.
    pub log_options_container: Option<String>,
    /// Follow the log stream of the pod. Defaults to false. +optional.
    pub log_options_follow: Option<bool>,
    /// Return previous terminated container logs. Defaults to false. +optional.
    pub log_options_previous: Option<bool>,
    /// A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified. +optional.
    pub log_options_since_seconds: Option<String>,
    /// Represents seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.
    pub log_options_since_time_seconds: Option<String>,
    /// Non-negative fractions of a second at nanosecond resolution. Negative second values with fractions must still have non-negative nanos values that count forward in time. Must be from 0 to 999,999,999 inclusive. This field may be limited in precision depending on context.
    pub log_options_since_time_nanos: Option<i32>,
    /// If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false. +optional.
    pub log_options_timestamps: Option<bool>,
    /// If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime +optional.
    pub log_options_tail_lines: Option<String>,
    /// If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit. +optional.
    pub log_options_limit_bytes: Option<String>,
    /// insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver's TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet). +optional.
    pub log_options_insecure_skip_tls_verify_backend: Option<bool>,
    pub grep: Option<String>,
    pub selector: Option<String>
}


/// struct for typed successes of method `create_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateWorkflowSuccess {
    Status200(crate::models::IoArgoprojWorkflowV1alpha1Workflow),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `delete_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteWorkflowSuccess {
    Status200(serde_json::Value),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `get_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetWorkflowSuccess {
    Status200(crate::models::IoArgoprojWorkflowV1alpha1Workflow),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `lint_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LintWorkflowSuccess {
    Status200(crate::models::IoArgoprojWorkflowV1alpha1Workflow),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `list_workflows`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListWorkflowsSuccess {
    Status200(crate::models::IoArgoprojWorkflowV1alpha1WorkflowList),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `pod_logs`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PodLogsSuccess {
    Status200(crate::models::StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `resubmit_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResubmitWorkflowSuccess {
    Status200(crate::models::IoArgoprojWorkflowV1alpha1Workflow),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `resume_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResumeWorkflowSuccess {
    Status200(crate::models::IoArgoprojWorkflowV1alpha1Workflow),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `retry_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetryWorkflowSuccess {
    Status200(crate::models::IoArgoprojWorkflowV1alpha1Workflow),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `set_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetWorkflowSuccess {
    Status200(crate::models::IoArgoprojWorkflowV1alpha1Workflow),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `stop_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StopWorkflowSuccess {
    Status200(crate::models::IoArgoprojWorkflowV1alpha1Workflow),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `submit_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SubmitWorkflowSuccess {
    Status200(crate::models::IoArgoprojWorkflowV1alpha1Workflow),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `suspend_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SuspendWorkflowSuccess {
    Status200(crate::models::IoArgoprojWorkflowV1alpha1Workflow),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `terminate_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TerminateWorkflowSuccess {
    Status200(crate::models::IoArgoprojWorkflowV1alpha1Workflow),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `watch_events`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WatchEventsSuccess {
    Status200(crate::models::StreamResultOfEvent),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `watch_workflows`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WatchWorkflowsSuccess {
    Status200(crate::models::StreamResultOfIoArgoprojWorkflowV1alpha1WorkflowWatchEvent),
    UnknownValue(serde_json::Value),
}

/// struct for typed successes of method `workflow_logs`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowLogsSuccess {
    Status200(crate::models::StreamResultOfIoArgoprojWorkflowV1alpha1LogEntry),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateWorkflowError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteWorkflowError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetWorkflowError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `lint_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LintWorkflowError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_workflows`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListWorkflowsError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `pod_logs`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PodLogsError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `resubmit_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResubmitWorkflowError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `resume_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResumeWorkflowError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `retry_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RetryWorkflowError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `set_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetWorkflowError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `stop_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StopWorkflowError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `submit_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SubmitWorkflowError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `suspend_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SuspendWorkflowError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `terminate_workflow`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TerminateWorkflowError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `watch_events`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WatchEventsError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `watch_workflows`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WatchWorkflowsError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `workflow_logs`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WorkflowLogsError {
    DefaultResponse(crate::models::GrpcGatewayRuntimeError),
    UnknownValue(serde_json::Value),
}


pub async fn create_workflow(configuration: &configuration::Configuration, params: CreateWorkflowParams) -> Result<ResponseContent<CreateWorkflowSuccess>, Error<CreateWorkflowError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let body = params.body;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/workflows/{namespace}", configuration.base_path, namespace=crate::apis::urlencode(namespace));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<CreateWorkflowSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<CreateWorkflowError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_workflow(configuration: &configuration::Configuration, params: DeleteWorkflowParams) -> Result<ResponseContent<DeleteWorkflowSuccess>, Error<DeleteWorkflowError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let name = params.name;
    let delete_options_grace_period_seconds = params.delete_options_grace_period_seconds;
    let delete_options_preconditions_uid = params.delete_options_preconditions_uid;
    let delete_options_preconditions_resource_version = params.delete_options_preconditions_resource_version;
    let delete_options_orphan_dependents = params.delete_options_orphan_dependents;
    let delete_options_propagation_policy = params.delete_options_propagation_policy;
    let delete_options_dry_run = params.delete_options_dry_run;
    let force = params.force;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/workflows/{namespace}/{name}", configuration.base_path, namespace=crate::apis::urlencode(namespace), name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = delete_options_grace_period_seconds {
        local_var_req_builder = local_var_req_builder.query(&[("deleteOptions.gracePeriodSeconds", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = delete_options_preconditions_uid {
        local_var_req_builder = local_var_req_builder.query(&[("deleteOptions.preconditions.uid", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = delete_options_preconditions_resource_version {
        local_var_req_builder = local_var_req_builder.query(&[("deleteOptions.preconditions.resourceVersion", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = delete_options_orphan_dependents {
        local_var_req_builder = local_var_req_builder.query(&[("deleteOptions.orphanDependents", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = delete_options_propagation_policy {
        local_var_req_builder = local_var_req_builder.query(&[("deleteOptions.propagationPolicy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = delete_options_dry_run {
        local_var_req_builder = local_var_req_builder.query(&[("deleteOptions.dryRun", &local_var_str.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]);
    }
    if let Some(ref local_var_str) = force {
        local_var_req_builder = local_var_req_builder.query(&[("force", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<DeleteWorkflowSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<DeleteWorkflowError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_workflow(configuration: &configuration::Configuration, params: GetWorkflowParams) -> Result<ResponseContent<GetWorkflowSuccess>, Error<GetWorkflowError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let name = params.name;
    let get_options_resource_version = params.get_options_resource_version;
    let fields = params.fields;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/workflows/{namespace}/{name}", configuration.base_path, namespace=crate::apis::urlencode(namespace), name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = get_options_resource_version {
        local_var_req_builder = local_var_req_builder.query(&[("getOptions.resourceVersion", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<GetWorkflowSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<GetWorkflowError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn lint_workflow(configuration: &configuration::Configuration, params: LintWorkflowParams) -> Result<ResponseContent<LintWorkflowSuccess>, Error<LintWorkflowError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let body = params.body;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/workflows/{namespace}/lint", configuration.base_path, namespace=crate::apis::urlencode(namespace));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<LintWorkflowSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<LintWorkflowError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list_workflows(configuration: &configuration::Configuration, params: ListWorkflowsParams) -> Result<ResponseContent<ListWorkflowsSuccess>, Error<ListWorkflowsError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let list_options_label_selector = params.list_options_label_selector;
    let list_options_field_selector = params.list_options_field_selector;
    let list_options_watch = params.list_options_watch;
    let list_options_allow_watch_bookmarks = params.list_options_allow_watch_bookmarks;
    let list_options_resource_version = params.list_options_resource_version;
    let list_options_resource_version_match = params.list_options_resource_version_match;
    let list_options_timeout_seconds = params.list_options_timeout_seconds;
    let list_options_limit = params.list_options_limit;
    let list_options_continue = params.list_options_continue;
    let fields = params.fields;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/workflows/{namespace}", configuration.base_path, namespace=crate::apis::urlencode(namespace));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = list_options_label_selector {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.labelSelector", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_field_selector {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.fieldSelector", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_watch {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.watch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_allow_watch_bookmarks {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.allowWatchBookmarks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_resource_version {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.resourceVersion", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_resource_version_match {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.resourceVersionMatch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_timeout_seconds {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.timeoutSeconds", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_limit {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_continue {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.continue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ListWorkflowsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ListWorkflowsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn pod_logs(configuration: &configuration::Configuration, params: PodLogsParams) -> Result<ResponseContent<PodLogsSuccess>, Error<PodLogsError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let name = params.name;
    let pod_name = params.pod_name;
    let log_options_container = params.log_options_container;
    let log_options_follow = params.log_options_follow;
    let log_options_previous = params.log_options_previous;
    let log_options_since_seconds = params.log_options_since_seconds;
    let log_options_since_time_seconds = params.log_options_since_time_seconds;
    let log_options_since_time_nanos = params.log_options_since_time_nanos;
    let log_options_timestamps = params.log_options_timestamps;
    let log_options_tail_lines = params.log_options_tail_lines;
    let log_options_limit_bytes = params.log_options_limit_bytes;
    let log_options_insecure_skip_tls_verify_backend = params.log_options_insecure_skip_tls_verify_backend;
    let grep = params.grep;
    let selector = params.selector;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/{podName}/log", configuration.base_path, namespace=crate::apis::urlencode(namespace), name=crate::apis::urlencode(name), podName=crate::apis::urlencode(pod_name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = log_options_container {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.container", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_follow {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.follow", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_previous {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.previous", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_since_seconds {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.sinceSeconds", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_since_time_seconds {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.sinceTime.seconds", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_since_time_nanos {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.sinceTime.nanos", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_timestamps {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.timestamps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_tail_lines {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.tailLines", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_limit_bytes {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.limitBytes", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_insecure_skip_tls_verify_backend {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.insecureSkipTLSVerifyBackend", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = grep {
        local_var_req_builder = local_var_req_builder.query(&[("grep", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = selector {
        local_var_req_builder = local_var_req_builder.query(&[("selector", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<PodLogsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<PodLogsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn resubmit_workflow(configuration: &configuration::Configuration, params: ResubmitWorkflowParams) -> Result<ResponseContent<ResubmitWorkflowSuccess>, Error<ResubmitWorkflowError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let name = params.name;
    let body = params.body;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/resubmit", configuration.base_path, namespace=crate::apis::urlencode(namespace), name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ResubmitWorkflowSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ResubmitWorkflowError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn resume_workflow(configuration: &configuration::Configuration, params: ResumeWorkflowParams) -> Result<ResponseContent<ResumeWorkflowSuccess>, Error<ResumeWorkflowError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let name = params.name;
    let body = params.body;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/resume", configuration.base_path, namespace=crate::apis::urlencode(namespace), name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<ResumeWorkflowSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<ResumeWorkflowError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn retry_workflow(configuration: &configuration::Configuration, params: RetryWorkflowParams) -> Result<ResponseContent<RetryWorkflowSuccess>, Error<RetryWorkflowError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let name = params.name;
    let body = params.body;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/retry", configuration.base_path, namespace=crate::apis::urlencode(namespace), name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<RetryWorkflowSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<RetryWorkflowError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_workflow(configuration: &configuration::Configuration, params: SetWorkflowParams) -> Result<ResponseContent<SetWorkflowSuccess>, Error<SetWorkflowError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let name = params.name;
    let body = params.body;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/set", configuration.base_path, namespace=crate::apis::urlencode(namespace), name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<SetWorkflowSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<SetWorkflowError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn stop_workflow(configuration: &configuration::Configuration, params: StopWorkflowParams) -> Result<ResponseContent<StopWorkflowSuccess>, Error<StopWorkflowError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let name = params.name;
    let body = params.body;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/stop", configuration.base_path, namespace=crate::apis::urlencode(namespace), name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<StopWorkflowSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<StopWorkflowError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn submit_workflow(configuration: &configuration::Configuration, params: SubmitWorkflowParams) -> Result<ResponseContent<SubmitWorkflowSuccess>, Error<SubmitWorkflowError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let body = params.body;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/workflows/{namespace}/submit", configuration.base_path, namespace=crate::apis::urlencode(namespace));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<SubmitWorkflowSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<SubmitWorkflowError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn suspend_workflow(configuration: &configuration::Configuration, params: SuspendWorkflowParams) -> Result<ResponseContent<SuspendWorkflowSuccess>, Error<SuspendWorkflowError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let name = params.name;
    let body = params.body;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/suspend", configuration.base_path, namespace=crate::apis::urlencode(namespace), name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<SuspendWorkflowSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<SuspendWorkflowError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn terminate_workflow(configuration: &configuration::Configuration, params: TerminateWorkflowParams) -> Result<ResponseContent<TerminateWorkflowSuccess>, Error<TerminateWorkflowError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let name = params.name;
    let body = params.body;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/terminate", configuration.base_path, namespace=crate::apis::urlencode(namespace), name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<TerminateWorkflowSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<TerminateWorkflowError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn watch_events(configuration: &configuration::Configuration, params: WatchEventsParams) -> Result<ResponseContent<WatchEventsSuccess>, Error<WatchEventsError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let list_options_label_selector = params.list_options_label_selector;
    let list_options_field_selector = params.list_options_field_selector;
    let list_options_watch = params.list_options_watch;
    let list_options_allow_watch_bookmarks = params.list_options_allow_watch_bookmarks;
    let list_options_resource_version = params.list_options_resource_version;
    let list_options_resource_version_match = params.list_options_resource_version_match;
    let list_options_timeout_seconds = params.list_options_timeout_seconds;
    let list_options_limit = params.list_options_limit;
    let list_options_continue = params.list_options_continue;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/stream/events/{namespace}", configuration.base_path, namespace=crate::apis::urlencode(namespace));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = list_options_label_selector {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.labelSelector", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_field_selector {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.fieldSelector", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_watch {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.watch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_allow_watch_bookmarks {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.allowWatchBookmarks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_resource_version {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.resourceVersion", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_resource_version_match {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.resourceVersionMatch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_timeout_seconds {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.timeoutSeconds", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_limit {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_continue {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.continue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<WatchEventsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<WatchEventsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn watch_workflows(configuration: &configuration::Configuration, params: WatchWorkflowsParams) -> Result<ResponseContent<WatchWorkflowsSuccess>, Error<WatchWorkflowsError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let list_options_label_selector = params.list_options_label_selector;
    let list_options_field_selector = params.list_options_field_selector;
    let list_options_watch = params.list_options_watch;
    let list_options_allow_watch_bookmarks = params.list_options_allow_watch_bookmarks;
    let list_options_resource_version = params.list_options_resource_version;
    let list_options_resource_version_match = params.list_options_resource_version_match;
    let list_options_timeout_seconds = params.list_options_timeout_seconds;
    let list_options_limit = params.list_options_limit;
    let list_options_continue = params.list_options_continue;
    let fields = params.fields;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/workflow-events/{namespace}", configuration.base_path, namespace=crate::apis::urlencode(namespace));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = list_options_label_selector {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.labelSelector", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_field_selector {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.fieldSelector", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_watch {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.watch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_allow_watch_bookmarks {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.allowWatchBookmarks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_resource_version {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.resourceVersion", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_resource_version_match {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.resourceVersionMatch", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_timeout_seconds {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.timeoutSeconds", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_limit {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = list_options_continue {
        local_var_req_builder = local_var_req_builder.query(&[("listOptions.continue", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fields {
        local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<WatchWorkflowsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<WatchWorkflowsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn workflow_logs(configuration: &configuration::Configuration, params: WorkflowLogsParams) -> Result<ResponseContent<WorkflowLogsSuccess>, Error<WorkflowLogsError>> {
    // unbox the parameters
    let namespace = params.namespace;
    let name = params.name;
    let pod_name = params.pod_name;
    let log_options_container = params.log_options_container;
    let log_options_follow = params.log_options_follow;
    let log_options_previous = params.log_options_previous;
    let log_options_since_seconds = params.log_options_since_seconds;
    let log_options_since_time_seconds = params.log_options_since_time_seconds;
    let log_options_since_time_nanos = params.log_options_since_time_nanos;
    let log_options_timestamps = params.log_options_timestamps;
    let log_options_tail_lines = params.log_options_tail_lines;
    let log_options_limit_bytes = params.log_options_limit_bytes;
    let log_options_insecure_skip_tls_verify_backend = params.log_options_insecure_skip_tls_verify_backend;
    let grep = params.grep;
    let selector = params.selector;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/api/v1/workflows/{namespace}/{name}/log", configuration.base_path, namespace=crate::apis::urlencode(namespace), name=crate::apis::urlencode(name));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = pod_name {
        local_var_req_builder = local_var_req_builder.query(&[("podName", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_container {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.container", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_follow {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.follow", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_previous {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.previous", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_since_seconds {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.sinceSeconds", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_since_time_seconds {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.sinceTime.seconds", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_since_time_nanos {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.sinceTime.nanos", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_timestamps {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.timestamps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_tail_lines {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.tailLines", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_limit_bytes {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.limitBytes", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = log_options_insecure_skip_tls_verify_backend {
        local_var_req_builder = local_var_req_builder.query(&[("logOptions.insecureSkipTLSVerifyBackend", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = grep {
        local_var_req_builder = local_var_req_builder.query(&[("grep", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = selector {
        local_var_req_builder = local_var_req_builder.query(&[("selector", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        let local_var_entity: Option<WorkflowLogsSuccess> = serde_json::from_str(&local_var_content).ok();
        let local_var_result = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Ok(local_var_result)
    } else {
        let local_var_entity: Option<WorkflowLogsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

