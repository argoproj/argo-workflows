# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class IoArgoprojEventsV1alpha1NATSAuth(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'basic': 'IoArgoprojEventsV1alpha1BasicAuth',
        'credential': 'SecretKeySelector',
        'nkey': 'SecretKeySelector',
        'token': 'SecretKeySelector'
    }

    attribute_map = {
        'basic': 'basic',
        'credential': 'credential',
        'nkey': 'nkey',
        'token': 'token'
    }

    def __init__(self, basic=None, credential=None, nkey=None, token=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojEventsV1alpha1NATSAuth - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._basic = None
        self._credential = None
        self._nkey = None
        self._token = None
        self.discriminator = None

        if basic is not None:
            self.basic = basic
        if credential is not None:
            self.credential = credential
        if nkey is not None:
            self.nkey = nkey
        if token is not None:
            self.token = token

    @property
    def basic(self):
        """Gets the basic of this IoArgoprojEventsV1alpha1NATSAuth.  # noqa: E501


        :return: The basic of this IoArgoprojEventsV1alpha1NATSAuth.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1BasicAuth
        """
        return self._basic

    @basic.setter
    def basic(self, basic):
        """Sets the basic of this IoArgoprojEventsV1alpha1NATSAuth.


        :param basic: The basic of this IoArgoprojEventsV1alpha1NATSAuth.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1BasicAuth
        """

        self._basic = basic

    @property
    def credential(self):
        """Gets the credential of this IoArgoprojEventsV1alpha1NATSAuth.  # noqa: E501


        :return: The credential of this IoArgoprojEventsV1alpha1NATSAuth.  # noqa: E501
        :rtype: SecretKeySelector
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this IoArgoprojEventsV1alpha1NATSAuth.


        :param credential: The credential of this IoArgoprojEventsV1alpha1NATSAuth.  # noqa: E501
        :type: SecretKeySelector
        """

        self._credential = credential

    @property
    def nkey(self):
        """Gets the nkey of this IoArgoprojEventsV1alpha1NATSAuth.  # noqa: E501


        :return: The nkey of this IoArgoprojEventsV1alpha1NATSAuth.  # noqa: E501
        :rtype: SecretKeySelector
        """
        return self._nkey

    @nkey.setter
    def nkey(self, nkey):
        """Sets the nkey of this IoArgoprojEventsV1alpha1NATSAuth.


        :param nkey: The nkey of this IoArgoprojEventsV1alpha1NATSAuth.  # noqa: E501
        :type: SecretKeySelector
        """

        self._nkey = nkey

    @property
    def token(self):
        """Gets the token of this IoArgoprojEventsV1alpha1NATSAuth.  # noqa: E501


        :return: The token of this IoArgoprojEventsV1alpha1NATSAuth.  # noqa: E501
        :rtype: SecretKeySelector
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this IoArgoprojEventsV1alpha1NATSAuth.


        :param token: The token of this IoArgoprojEventsV1alpha1NATSAuth.  # noqa: E501
        :type: SecretKeySelector
        """

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1NATSAuth):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1NATSAuth):
            return True

        return self.to_dict() != other.to_dict()
