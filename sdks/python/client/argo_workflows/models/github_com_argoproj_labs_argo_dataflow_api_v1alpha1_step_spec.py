# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'affinity': 'Affinity',
        'cat': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Cat',
        'code': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Code',
        'container': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Container',
        'dedupe': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Dedupe',
        'expand': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Expand',
        'filter': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter',
        'flatten': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Flatten',
        'git': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Git',
        'group': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Group',
        'image_pull_secrets': 'list[LocalObjectReference]',
        'map': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Map',
        'metadata': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Metadata',
        'name': 'str',
        'node_selector': 'dict(str, str)',
        'replicas': 'int',
        'restart_policy': 'str',
        'scale': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Scale',
        'service_account_name': 'str',
        'sidecar': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Sidecar',
        'sinks': 'list[GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink]',
        'sources': 'list[GithubComArgoprojLabsArgoDataflowApiV1alpha1Source]',
        'terminator': 'bool',
        'tolerations': 'list[Toleration]',
        'volumes': 'list[Volume]'
    }

    attribute_map = {
        'affinity': 'affinity',
        'cat': 'cat',
        'code': 'code',
        'container': 'container',
        'dedupe': 'dedupe',
        'expand': 'expand',
        'filter': 'filter',
        'flatten': 'flatten',
        'git': 'git',
        'group': 'group',
        'image_pull_secrets': 'imagePullSecrets',
        'map': 'map',
        'metadata': 'metadata',
        'name': 'name',
        'node_selector': 'nodeSelector',
        'replicas': 'replicas',
        'restart_policy': 'restartPolicy',
        'scale': 'scale',
        'service_account_name': 'serviceAccountName',
        'sidecar': 'sidecar',
        'sinks': 'sinks',
        'sources': 'sources',
        'terminator': 'terminator',
        'tolerations': 'tolerations',
        'volumes': 'volumes'
    }

    def __init__(self, affinity=None, cat=None, code=None, container=None, dedupe=None, expand=None, filter=None, flatten=None, git=None, group=None, image_pull_secrets=None, map=None, metadata=None, name=None, node_selector=None, replicas=None, restart_policy=None, scale=None, service_account_name=None, sidecar=None, sinks=None, sources=None, terminator=None, tolerations=None, volumes=None, local_vars_configuration=None):  # noqa: E501
        """GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._affinity = None
        self._cat = None
        self._code = None
        self._container = None
        self._dedupe = None
        self._expand = None
        self._filter = None
        self._flatten = None
        self._git = None
        self._group = None
        self._image_pull_secrets = None
        self._map = None
        self._metadata = None
        self._name = None
        self._node_selector = None
        self._replicas = None
        self._restart_policy = None
        self._scale = None
        self._service_account_name = None
        self._sidecar = None
        self._sinks = None
        self._sources = None
        self._terminator = None
        self._tolerations = None
        self._volumes = None
        self.discriminator = None

        if affinity is not None:
            self.affinity = affinity
        if cat is not None:
            self.cat = cat
        if code is not None:
            self.code = code
        if container is not None:
            self.container = container
        if dedupe is not None:
            self.dedupe = dedupe
        if expand is not None:
            self.expand = expand
        if filter is not None:
            self.filter = filter
        if flatten is not None:
            self.flatten = flatten
        if git is not None:
            self.git = git
        if group is not None:
            self.group = group
        if image_pull_secrets is not None:
            self.image_pull_secrets = image_pull_secrets
        if map is not None:
            self.map = map
        if metadata is not None:
            self.metadata = metadata
        if name is not None:
            self.name = name
        if node_selector is not None:
            self.node_selector = node_selector
        if replicas is not None:
            self.replicas = replicas
        if restart_policy is not None:
            self.restart_policy = restart_policy
        if scale is not None:
            self.scale = scale
        if service_account_name is not None:
            self.service_account_name = service_account_name
        if sidecar is not None:
            self.sidecar = sidecar
        if sinks is not None:
            self.sinks = sinks
        if sources is not None:
            self.sources = sources
        if terminator is not None:
            self.terminator = terminator
        if tolerations is not None:
            self.tolerations = tolerations
        if volumes is not None:
            self.volumes = volumes

    @property
    def affinity(self):
        """Gets the affinity of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The affinity of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: Affinity
        """
        return self._affinity

    @affinity.setter
    def affinity(self, affinity):
        """Sets the affinity of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param affinity: The affinity of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: Affinity
        """

        self._affinity = affinity

    @property
    def cat(self):
        """Gets the cat of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The cat of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1Cat
        """
        return self._cat

    @cat.setter
    def cat(self, cat):
        """Sets the cat of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param cat: The cat of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1Cat
        """

        self._cat = cat

    @property
    def code(self):
        """Gets the code of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The code of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1Code
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param code: The code of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1Code
        """

        self._code = code

    @property
    def container(self):
        """Gets the container of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The container of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1Container
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param container: The container of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1Container
        """

        self._container = container

    @property
    def dedupe(self):
        """Gets the dedupe of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The dedupe of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1Dedupe
        """
        return self._dedupe

    @dedupe.setter
    def dedupe(self, dedupe):
        """Sets the dedupe of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param dedupe: The dedupe of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1Dedupe
        """

        self._dedupe = dedupe

    @property
    def expand(self):
        """Gets the expand of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The expand of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1Expand
        """
        return self._expand

    @expand.setter
    def expand(self, expand):
        """Sets the expand of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param expand: The expand of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1Expand
        """

        self._expand = expand

    @property
    def filter(self):
        """Gets the filter of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The filter of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param filter: The filter of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1Filter
        """

        self._filter = filter

    @property
    def flatten(self):
        """Gets the flatten of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The flatten of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1Flatten
        """
        return self._flatten

    @flatten.setter
    def flatten(self, flatten):
        """Sets the flatten of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param flatten: The flatten of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1Flatten
        """

        self._flatten = flatten

    @property
    def git(self):
        """Gets the git of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The git of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1Git
        """
        return self._git

    @git.setter
    def git(self, git):
        """Sets the git of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param git: The git of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1Git
        """

        self._git = git

    @property
    def group(self):
        """Gets the group of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The group of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1Group
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param group: The group of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1Group
        """

        self._group = group

    @property
    def image_pull_secrets(self):
        """Gets the image_pull_secrets of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The image_pull_secrets of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: list[LocalObjectReference]
        """
        return self._image_pull_secrets

    @image_pull_secrets.setter
    def image_pull_secrets(self, image_pull_secrets):
        """Sets the image_pull_secrets of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param image_pull_secrets: The image_pull_secrets of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: list[LocalObjectReference]
        """

        self._image_pull_secrets = image_pull_secrets

    @property
    def map(self):
        """Gets the map of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The map of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1Map
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param map: The map of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1Map
        """

        self._map = map

    @property
    def metadata(self):
        """Gets the metadata of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The metadata of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param metadata: The metadata of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1Metadata
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The name of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param name: The name of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def node_selector(self):
        """Gets the node_selector of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The node_selector of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param node_selector: The node_selector of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def replicas(self):
        """Gets the replicas of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The replicas of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param replicas: The replicas of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def restart_policy(self):
        """Gets the restart_policy of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The restart_policy of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: str
        """
        return self._restart_policy

    @restart_policy.setter
    def restart_policy(self, restart_policy):
        """Sets the restart_policy of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param restart_policy: The restart_policy of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: str
        """

        self._restart_policy = restart_policy

    @property
    def scale(self):
        """Gets the scale of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The scale of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1Scale
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param scale: The scale of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1Scale
        """

        self._scale = scale

    @property
    def service_account_name(self):
        """Gets the service_account_name of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The service_account_name of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: str
        """
        return self._service_account_name

    @service_account_name.setter
    def service_account_name(self, service_account_name):
        """Sets the service_account_name of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param service_account_name: The service_account_name of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: str
        """

        self._service_account_name = service_account_name

    @property
    def sidecar(self):
        """Gets the sidecar of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The sidecar of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1Sidecar
        """
        return self._sidecar

    @sidecar.setter
    def sidecar(self, sidecar):
        """Sets the sidecar of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param sidecar: The sidecar of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1Sidecar
        """

        self._sidecar = sidecar

    @property
    def sinks(self):
        """Gets the sinks of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The sinks of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: list[GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink]
        """
        return self._sinks

    @sinks.setter
    def sinks(self, sinks):
        """Sets the sinks of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param sinks: The sinks of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: list[GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink]
        """

        self._sinks = sinks

    @property
    def sources(self):
        """Gets the sources of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The sources of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: list[GithubComArgoprojLabsArgoDataflowApiV1alpha1Source]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param sources: The sources of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: list[GithubComArgoprojLabsArgoDataflowApiV1alpha1Source]
        """

        self._sources = sources

    @property
    def terminator(self):
        """Gets the terminator of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The terminator of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: bool
        """
        return self._terminator

    @terminator.setter
    def terminator(self, terminator):
        """Sets the terminator of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param terminator: The terminator of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: bool
        """

        self._terminator = terminator

    @property
    def tolerations(self):
        """Gets the tolerations of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The tolerations of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: list[Toleration]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """Sets the tolerations of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param tolerations: The tolerations of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: list[Toleration]
        """

        self._tolerations = tolerations

    @property
    def volumes(self):
        """Gets the volumes of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501


        :return: The volumes of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :rtype: list[Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.


        :param volumes: The volumes of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec.  # noqa: E501
        :type: list[Volume]
        """

        self._volumes = volumes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1StepSpec):
            return True

        return self.to_dict() != other.to_dict()
