# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.config_map_key_selector import ConfigMapKeySelector
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojWorkflowV1alpha1ValueFrom(BaseModel):
    """
    ValueFrom describes a location in which to obtain the value to a parameter
    """ # noqa: E501
    config_map_key_ref: Optional[ConfigMapKeySelector] = Field(default=None, alias="configMapKeyRef")
    default: Optional[StrictStr] = Field(default=None, description="Default specifies a value to be used if retrieving the value from the specified source fails")
    event: Optional[StrictStr] = Field(default=None, description="Selector (https://github.com/expr-lang/expr) that is evaluated against the event to get the value of the parameter. E.g. `payload.message`")
    expression: Optional[StrictStr] = Field(default=None, description="Expression, if defined, is evaluated to specify the value for the parameter")
    jq_filter: Optional[StrictStr] = Field(default=None, description="JQFilter expression against the resource object in resource templates", alias="jqFilter")
    json_path: Optional[StrictStr] = Field(default=None, description="JSONPath of a resource to retrieve an output parameter value from in resource templates", alias="jsonPath")
    parameter: Optional[StrictStr] = Field(default=None, description="Parameter reference to a step or dag task in which to retrieve an output parameter value from (e.g. '{{steps.mystep.outputs.myparam}}')")
    path: Optional[StrictStr] = Field(default=None, description="Path in the container to retrieve an output parameter value from in container templates")
    supplied: Optional[Dict[str, Any]] = Field(default=None, description="SuppliedValueFrom is a placeholder for a value to be filled in directly, either through the CLI, API, etc.")
    __properties: ClassVar[List[str]] = ["configMapKeyRef", "default", "event", "expression", "jqFilter", "jsonPath", "parameter", "path", "supplied"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1ValueFrom from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config_map_key_ref
        if self.config_map_key_ref:
            _dict['configMapKeyRef'] = self.config_map_key_ref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1ValueFrom from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configMapKeyRef": ConfigMapKeySelector.from_dict(obj["configMapKeyRef"]) if obj.get("configMapKeyRef") is not None else None,
            "default": obj.get("default"),
            "event": obj.get("event"),
            "expression": obj.get("expression"),
            "jqFilter": obj.get("jqFilter"),
            "jsonPath": obj.get("jsonPath"),
            "parameter": obj.get("parameter"),
            "path": obj.get("path"),
            "supplied": obj.get("supplied")
        })
        return _obj


