# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class IoArgoprojEventsV1alpha1AWSLambdaTrigger(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_key': 'SecretKeySelector',
        'function_name': 'str',
        'invocation_type': 'str',
        'parameters': 'list[IoArgoprojEventsV1alpha1TriggerParameter]',
        'payload': 'list[IoArgoprojEventsV1alpha1TriggerParameter]',
        'region': 'str',
        'secret_key': 'SecretKeySelector'
    }

    attribute_map = {
        'access_key': 'accessKey',
        'function_name': 'functionName',
        'invocation_type': 'invocationType',
        'parameters': 'parameters',
        'payload': 'payload',
        'region': 'region',
        'secret_key': 'secretKey'
    }

    def __init__(self, access_key=None, function_name=None, invocation_type=None, parameters=None, payload=None, region=None, secret_key=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojEventsV1alpha1AWSLambdaTrigger - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_key = None
        self._function_name = None
        self._invocation_type = None
        self._parameters = None
        self._payload = None
        self._region = None
        self._secret_key = None
        self.discriminator = None

        if access_key is not None:
            self.access_key = access_key
        if function_name is not None:
            self.function_name = function_name
        if invocation_type is not None:
            self.invocation_type = invocation_type
        if parameters is not None:
            self.parameters = parameters
        if payload is not None:
            self.payload = payload
        if region is not None:
            self.region = region
        if secret_key is not None:
            self.secret_key = secret_key

    @property
    def access_key(self):
        """Gets the access_key of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501


        :return: The access_key of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501
        :rtype: SecretKeySelector
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.


        :param access_key: The access_key of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501
        :type: SecretKeySelector
        """

        self._access_key = access_key

    @property
    def function_name(self):
        """Gets the function_name of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501

        FunctionName refers to the name of the function to invoke.  # noqa: E501

        :return: The function_name of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501
        :rtype: str
        """
        return self._function_name

    @function_name.setter
    def function_name(self, function_name):
        """Sets the function_name of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.

        FunctionName refers to the name of the function to invoke.  # noqa: E501

        :param function_name: The function_name of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501
        :type: str
        """

        self._function_name = function_name

    @property
    def invocation_type(self):
        """Gets the invocation_type of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501

        Choose from the following options.     * RequestResponse (default) - Invoke the function synchronously. Keep    the connection open until the function returns a response or times out.    The API response includes the function response and additional data.     * Event - Invoke the function asynchronously. Send events that fail multiple    times to the function's dead-letter queue (if it's configured). The API    response only includes a status code.     * DryRun - Validate parameter values and verify that the user or role    has permission to invoke the function. +optional  # noqa: E501

        :return: The invocation_type of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501
        :rtype: str
        """
        return self._invocation_type

    @invocation_type.setter
    def invocation_type(self, invocation_type):
        """Sets the invocation_type of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.

        Choose from the following options.     * RequestResponse (default) - Invoke the function synchronously. Keep    the connection open until the function returns a response or times out.    The API response includes the function response and additional data.     * Event - Invoke the function asynchronously. Send events that fail multiple    times to the function's dead-letter queue (if it's configured). The API    response only includes a status code.     * DryRun - Validate parameter values and verify that the user or role    has permission to invoke the function. +optional  # noqa: E501

        :param invocation_type: The invocation_type of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501
        :type: str
        """

        self._invocation_type = invocation_type

    @property
    def parameters(self):
        """Gets the parameters of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501


        :return: The parameters of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501
        :rtype: list[IoArgoprojEventsV1alpha1TriggerParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.


        :param parameters: The parameters of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501
        :type: list[IoArgoprojEventsV1alpha1TriggerParameter]
        """

        self._parameters = parameters

    @property
    def payload(self):
        """Gets the payload of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501

        Payload is the list of key-value extracted from an event payload to construct the request payload.  # noqa: E501

        :return: The payload of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501
        :rtype: list[IoArgoprojEventsV1alpha1TriggerParameter]
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.

        Payload is the list of key-value extracted from an event payload to construct the request payload.  # noqa: E501

        :param payload: The payload of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501
        :type: list[IoArgoprojEventsV1alpha1TriggerParameter]
        """

        self._payload = payload

    @property
    def region(self):
        """Gets the region of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501


        :return: The region of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.


        :param region: The region of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def secret_key(self):
        """Gets the secret_key of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501


        :return: The secret_key of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501
        :rtype: SecretKeySelector
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.


        :param secret_key: The secret_key of this IoArgoprojEventsV1alpha1AWSLambdaTrigger.  # noqa: E501
        :type: SecretKeySelector
        """

        self._secret_key = secret_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1AWSLambdaTrigger):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1AWSLambdaTrigger):
            return True

        return self.to_dict() != other.to_dict()
