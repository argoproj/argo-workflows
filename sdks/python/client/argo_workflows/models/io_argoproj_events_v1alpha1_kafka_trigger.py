# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.io_argoproj_events_v1alpha1_sasl_config import IoArgoprojEventsV1alpha1SASLConfig
from argo_workflows.models.io_argoproj_events_v1alpha1_schema_registry_config import IoArgoprojEventsV1alpha1SchemaRegistryConfig
from argo_workflows.models.io_argoproj_events_v1alpha1_tls_config import IoArgoprojEventsV1alpha1TLSConfig
from argo_workflows.models.io_argoproj_events_v1alpha1_trigger_parameter import IoArgoprojEventsV1alpha1TriggerParameter
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojEventsV1alpha1KafkaTrigger(BaseModel):
    """
    KafkaTrigger refers to the specification of the Kafka trigger.
    """ # noqa: E501
    compress: Optional[StrictBool] = None
    flush_frequency: Optional[StrictInt] = Field(default=None, alias="flushFrequency")
    parameters: Optional[List[IoArgoprojEventsV1alpha1TriggerParameter]] = Field(default=None, description="Parameters is the list of parameters that is applied to resolved Kafka trigger object.")
    partition: Optional[StrictInt] = None
    partitioning_key: Optional[StrictStr] = Field(default=None, description="The partitioning key for the messages put on the Kafka topic. +optional.", alias="partitioningKey")
    payload: Optional[List[IoArgoprojEventsV1alpha1TriggerParameter]] = Field(default=None, description="Payload is the list of key-value extracted from an event payload to construct the request payload.")
    required_acks: Optional[StrictInt] = Field(default=None, description="RequiredAcks used in producer to tell the broker how many replica acknowledgements Defaults to 1 (Only wait for the leader to ack). +optional.", alias="requiredAcks")
    sasl: Optional[IoArgoprojEventsV1alpha1SASLConfig] = None
    schema_registry: Optional[IoArgoprojEventsV1alpha1SchemaRegistryConfig] = Field(default=None, alias="schemaRegistry")
    tls: Optional[IoArgoprojEventsV1alpha1TLSConfig] = None
    topic: Optional[StrictStr] = None
    url: Optional[StrictStr] = Field(default=None, description="URL of the Kafka broker, multiple URLs separated by comma.")
    version: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["compress", "flushFrequency", "parameters", "partition", "partitioningKey", "payload", "requiredAcks", "sasl", "schemaRegistry", "tls", "topic", "url", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1KafkaTrigger from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item in self.parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in payload (list)
        _items = []
        if self.payload:
            for _item in self.payload:
                if _item:
                    _items.append(_item.to_dict())
            _dict['payload'] = _items
        # override the default output from pydantic by calling `to_dict()` of sasl
        if self.sasl:
            _dict['sasl'] = self.sasl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schema_registry
        if self.schema_registry:
            _dict['schemaRegistry'] = self.schema_registry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tls
        if self.tls:
            _dict['tls'] = self.tls.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1KafkaTrigger from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compress": obj.get("compress"),
            "flushFrequency": obj.get("flushFrequency"),
            "parameters": [IoArgoprojEventsV1alpha1TriggerParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "partition": obj.get("partition"),
            "partitioningKey": obj.get("partitioningKey"),
            "payload": [IoArgoprojEventsV1alpha1TriggerParameter.from_dict(_item) for _item in obj["payload"]] if obj.get("payload") is not None else None,
            "requiredAcks": obj.get("requiredAcks"),
            "sasl": IoArgoprojEventsV1alpha1SASLConfig.from_dict(obj["sasl"]) if obj.get("sasl") is not None else None,
            "schemaRegistry": IoArgoprojEventsV1alpha1SchemaRegistryConfig.from_dict(obj["schemaRegistry"]) if obj.get("schemaRegistry") is not None else None,
            "tls": IoArgoprojEventsV1alpha1TLSConfig.from_dict(obj["tls"]) if obj.get("tls") is not None else None,
            "topic": obj.get("topic"),
            "url": obj.get("url"),
            "version": obj.get("version")
        })
        return _obj


