# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.io_argoproj_workflow_v1alpha1_counter import IoArgoprojWorkflowV1alpha1Counter
from argo_workflows.models.io_argoproj_workflow_v1alpha1_gauge import IoArgoprojWorkflowV1alpha1Gauge
from argo_workflows.models.io_argoproj_workflow_v1alpha1_histogram import IoArgoprojWorkflowV1alpha1Histogram
from argo_workflows.models.io_argoproj_workflow_v1alpha1_metric_label import IoArgoprojWorkflowV1alpha1MetricLabel
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojWorkflowV1alpha1Prometheus(BaseModel):
    """
    Prometheus is a prometheus metric to be emitted
    """ # noqa: E501
    counter: Optional[IoArgoprojWorkflowV1alpha1Counter] = None
    gauge: Optional[IoArgoprojWorkflowV1alpha1Gauge] = None
    help: StrictStr = Field(description="Help is a string that describes the metric")
    histogram: Optional[IoArgoprojWorkflowV1alpha1Histogram] = None
    labels: Optional[List[IoArgoprojWorkflowV1alpha1MetricLabel]] = Field(default=None, description="Labels is a list of metric labels")
    name: StrictStr = Field(description="Name is the name of the metric")
    when: Optional[StrictStr] = Field(default=None, description="When is a conditional statement that decides when to emit the metric")
    __properties: ClassVar[List[str]] = ["counter", "gauge", "help", "histogram", "labels", "name", "when"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1Prometheus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of counter
        if self.counter:
            _dict['counter'] = self.counter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gauge
        if self.gauge:
            _dict['gauge'] = self.gauge.to_dict()
        # override the default output from pydantic by calling `to_dict()` of histogram
        if self.histogram:
            _dict['histogram'] = self.histogram.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item in self.labels:
                if _item:
                    _items.append(_item.to_dict())
            _dict['labels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1Prometheus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "counter": IoArgoprojWorkflowV1alpha1Counter.from_dict(obj["counter"]) if obj.get("counter") is not None else None,
            "gauge": IoArgoprojWorkflowV1alpha1Gauge.from_dict(obj["gauge"]) if obj.get("gauge") is not None else None,
            "help": obj.get("help"),
            "histogram": IoArgoprojWorkflowV1alpha1Histogram.from_dict(obj["histogram"]) if obj.get("histogram") is not None else None,
            "labels": [IoArgoprojWorkflowV1alpha1MetricLabel.from_dict(_item) for _item in obj["labels"]] if obj.get("labels") is not None else None,
            "name": obj.get("name"),
            "when": obj.get("when")
        })
        return _obj


