# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.secret_key_selector import SecretKeySelector
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojWorkflowV1alpha1GitArtifact(BaseModel):
    """
    GitArtifact is the location of an git artifact
    """ # noqa: E501
    branch: Optional[StrictStr] = Field(default=None, description="Branch is the branch to fetch when `SingleBranch` is enabled")
    depth: Optional[StrictInt] = Field(default=None, description="Depth specifies clones/fetches should be shallow and include the given number of commits from the branch tip")
    disable_submodules: Optional[StrictBool] = Field(default=None, description="DisableSubmodules disables submodules during git clone", alias="disableSubmodules")
    fetch: Optional[List[StrictStr]] = Field(default=None, description="Fetch specifies a number of refs that should be fetched before checkout")
    insecure_ignore_host_key: Optional[StrictBool] = Field(default=None, description="InsecureIgnoreHostKey disables SSH strict host key checking during git clone", alias="insecureIgnoreHostKey")
    password_secret: Optional[SecretKeySelector] = Field(default=None, alias="passwordSecret")
    repo: StrictStr = Field(description="Repo is the git repository")
    revision: Optional[StrictStr] = Field(default=None, description="Revision is the git commit, tag, branch to checkout")
    single_branch: Optional[StrictBool] = Field(default=None, description="SingleBranch enables single branch clone, using the `branch` parameter", alias="singleBranch")
    ssh_private_key_secret: Optional[SecretKeySelector] = Field(default=None, alias="sshPrivateKeySecret")
    username_secret: Optional[SecretKeySelector] = Field(default=None, alias="usernameSecret")
    __properties: ClassVar[List[str]] = ["branch", "depth", "disableSubmodules", "fetch", "insecureIgnoreHostKey", "passwordSecret", "repo", "revision", "singleBranch", "sshPrivateKeySecret", "usernameSecret"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1GitArtifact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of password_secret
        if self.password_secret:
            _dict['passwordSecret'] = self.password_secret.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssh_private_key_secret
        if self.ssh_private_key_secret:
            _dict['sshPrivateKeySecret'] = self.ssh_private_key_secret.to_dict()
        # override the default output from pydantic by calling `to_dict()` of username_secret
        if self.username_secret:
            _dict['usernameSecret'] = self.username_secret.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1GitArtifact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "branch": obj.get("branch"),
            "depth": obj.get("depth"),
            "disableSubmodules": obj.get("disableSubmodules"),
            "fetch": obj.get("fetch"),
            "insecureIgnoreHostKey": obj.get("insecureIgnoreHostKey"),
            "passwordSecret": SecretKeySelector.from_dict(obj["passwordSecret"]) if obj.get("passwordSecret") is not None else None,
            "repo": obj.get("repo"),
            "revision": obj.get("revision"),
            "singleBranch": obj.get("singleBranch"),
            "sshPrivateKeySecret": SecretKeySelector.from_dict(obj["sshPrivateKeySecret"]) if obj.get("sshPrivateKeySecret") is not None else None,
            "usernameSecret": SecretKeySelector.from_dict(obj["usernameSecret"]) if obj.get("usernameSecret") is not None else None
        })
        return _obj


