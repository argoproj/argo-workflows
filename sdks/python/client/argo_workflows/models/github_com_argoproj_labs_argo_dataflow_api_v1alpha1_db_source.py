# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'commit_interval': 'Duration',
        'database': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Database',
        'init_schema': 'bool',
        'offset_column': 'str',
        'poll_interval': 'Duration',
        'query': 'str'
    }

    attribute_map = {
        'commit_interval': 'commitInterval',
        'database': 'database',
        'init_schema': 'initSchema',
        'offset_column': 'offsetColumn',
        'poll_interval': 'pollInterval',
        'query': 'query'
    }

    def __init__(self, commit_interval=None, database=None, init_schema=None, offset_column=None, poll_interval=None, query=None, local_vars_configuration=None):  # noqa: E501
        """GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._commit_interval = None
        self._database = None
        self._init_schema = None
        self._offset_column = None
        self._poll_interval = None
        self._query = None
        self.discriminator = None

        if commit_interval is not None:
            self.commit_interval = commit_interval
        if database is not None:
            self.database = database
        if init_schema is not None:
            self.init_schema = init_schema
        if offset_column is not None:
            self.offset_column = offset_column
        if poll_interval is not None:
            self.poll_interval = poll_interval
        if query is not None:
            self.query = query

    @property
    def commit_interval(self):
        """Gets the commit_interval of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501


        :return: The commit_interval of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501
        :rtype: Duration
        """
        return self._commit_interval

    @commit_interval.setter
    def commit_interval(self, commit_interval):
        """Sets the commit_interval of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.


        :param commit_interval: The commit_interval of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501
        :type: Duration
        """

        self._commit_interval = commit_interval

    @property
    def database(self):
        """Gets the database of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501


        :return: The database of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1Database
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.


        :param database: The database of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1Database
        """

        self._database = database

    @property
    def init_schema(self):
        """Gets the init_schema of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501


        :return: The init_schema of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501
        :rtype: bool
        """
        return self._init_schema

    @init_schema.setter
    def init_schema(self, init_schema):
        """Sets the init_schema of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.


        :param init_schema: The init_schema of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501
        :type: bool
        """

        self._init_schema = init_schema

    @property
    def offset_column(self):
        """Gets the offset_column of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501


        :return: The offset_column of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501
        :rtype: str
        """
        return self._offset_column

    @offset_column.setter
    def offset_column(self, offset_column):
        """Sets the offset_column of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.


        :param offset_column: The offset_column of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501
        :type: str
        """

        self._offset_column = offset_column

    @property
    def poll_interval(self):
        """Gets the poll_interval of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501


        :return: The poll_interval of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501
        :rtype: Duration
        """
        return self._poll_interval

    @poll_interval.setter
    def poll_interval(self, poll_interval):
        """Sets the poll_interval of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.


        :param poll_interval: The poll_interval of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501
        :type: Duration
        """

        self._poll_interval = poll_interval

    @property
    def query(self):
        """Gets the query of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501


        :return: The query of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.


        :param query: The query of this GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource.  # noqa: E501
        :type: str
        """

        self._query = query

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSource):
            return True

        return self.to_dict() != other.to_dict()
