# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'db': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSink',
        'http': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1HTTPSink',
        'kafka': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink',
        'log': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Log',
        'name': 'str',
        's3': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Sink',
        'stan': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1STAN',
        'volume': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSink'
    }

    attribute_map = {
        'db': 'db',
        'http': 'http',
        'kafka': 'kafka',
        'log': 'log',
        'name': 'name',
        's3': 's3',
        'stan': 'stan',
        'volume': 'volume'
    }

    def __init__(self, db=None, http=None, kafka=None, log=None, name=None, s3=None, stan=None, volume=None, local_vars_configuration=None):  # noqa: E501
        """GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._db = None
        self._http = None
        self._kafka = None
        self._log = None
        self._name = None
        self._s3 = None
        self._stan = None
        self._volume = None
        self.discriminator = None

        if db is not None:
            self.db = db
        if http is not None:
            self.http = http
        if kafka is not None:
            self.kafka = kafka
        if log is not None:
            self.log = log
        if name is not None:
            self.name = name
        if s3 is not None:
            self.s3 = s3
        if stan is not None:
            self.stan = stan
        if volume is not None:
            self.volume = volume

    @property
    def db(self):
        """Gets the db of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501


        :return: The db of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSink
        """
        return self._db

    @db.setter
    def db(self, db):
        """Sets the db of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.


        :param db: The db of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1DBSink
        """

        self._db = db

    @property
    def http(self):
        """Gets the http of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501


        :return: The http of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1HTTPSink
        """
        return self._http

    @http.setter
    def http(self, http):
        """Sets the http of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.


        :param http: The http of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1HTTPSink
        """

        self._http = http

    @property
    def kafka(self):
        """Gets the kafka of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501


        :return: The kafka of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink
        """
        return self._kafka

    @kafka.setter
    def kafka(self, kafka):
        """Sets the kafka of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.


        :param kafka: The kafka of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaSink
        """

        self._kafka = kafka

    @property
    def log(self):
        """Gets the log of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501


        :return: The log of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1Log
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.


        :param log: The log of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1Log
        """

        self._log = log

    @property
    def name(self):
        """Gets the name of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501


        :return: The name of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.


        :param name: The name of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def s3(self):
        """Gets the s3 of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501


        :return: The s3 of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Sink
        """
        return self._s3

    @s3.setter
    def s3(self, s3):
        """Sets the s3 of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.


        :param s3: The s3 of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1S3Sink
        """

        self._s3 = s3

    @property
    def stan(self):
        """Gets the stan of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501


        :return: The stan of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1STAN
        """
        return self._stan

    @stan.setter
    def stan(self, stan):
        """Sets the stan of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.


        :param stan: The stan of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1STAN
        """

        self._stan = stan

    @property
    def volume(self):
        """Gets the volume of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501


        :return: The volume of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSink
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.


        :param volume: The volume of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSink
        """

        self._volume = volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1Sink):
            return True

        return self.to_dict() != other.to_dict()
