# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.io_argoproj_events_v1alpha1_argo_workflow_trigger import IoArgoprojEventsV1alpha1ArgoWorkflowTrigger
from argo_workflows.models.io_argoproj_events_v1alpha1_aws_lambda_trigger import IoArgoprojEventsV1alpha1AWSLambdaTrigger
from argo_workflows.models.io_argoproj_events_v1alpha1_azure_event_hubs_trigger import IoArgoprojEventsV1alpha1AzureEventHubsTrigger
from argo_workflows.models.io_argoproj_events_v1alpha1_azure_service_bus_trigger import IoArgoprojEventsV1alpha1AzureServiceBusTrigger
from argo_workflows.models.io_argoproj_events_v1alpha1_conditions_reset_criteria import IoArgoprojEventsV1alpha1ConditionsResetCriteria
from argo_workflows.models.io_argoproj_events_v1alpha1_custom_trigger import IoArgoprojEventsV1alpha1CustomTrigger
from argo_workflows.models.io_argoproj_events_v1alpha1_email_trigger import IoArgoprojEventsV1alpha1EmailTrigger
from argo_workflows.models.io_argoproj_events_v1alpha1_http_trigger import IoArgoprojEventsV1alpha1HTTPTrigger
from argo_workflows.models.io_argoproj_events_v1alpha1_kafka_trigger import IoArgoprojEventsV1alpha1KafkaTrigger
from argo_workflows.models.io_argoproj_events_v1alpha1_log_trigger import IoArgoprojEventsV1alpha1LogTrigger
from argo_workflows.models.io_argoproj_events_v1alpha1_nats_trigger import IoArgoprojEventsV1alpha1NATSTrigger
from argo_workflows.models.io_argoproj_events_v1alpha1_open_whisk_trigger import IoArgoprojEventsV1alpha1OpenWhiskTrigger
from argo_workflows.models.io_argoproj_events_v1alpha1_pulsar_trigger import IoArgoprojEventsV1alpha1PulsarTrigger
from argo_workflows.models.io_argoproj_events_v1alpha1_slack_trigger import IoArgoprojEventsV1alpha1SlackTrigger
from argo_workflows.models.io_argoproj_events_v1alpha1_standard_k8_s_trigger import IoArgoprojEventsV1alpha1StandardK8STrigger
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojEventsV1alpha1TriggerTemplate(BaseModel):
    """
    TriggerTemplate is the template that describes trigger specification.
    """ # noqa: E501
    argo_workflow: Optional[IoArgoprojEventsV1alpha1ArgoWorkflowTrigger] = Field(default=None, alias="argoWorkflow")
    aws_lambda: Optional[IoArgoprojEventsV1alpha1AWSLambdaTrigger] = Field(default=None, alias="awsLambda")
    azure_event_hubs: Optional[IoArgoprojEventsV1alpha1AzureEventHubsTrigger] = Field(default=None, alias="azureEventHubs")
    azure_service_bus: Optional[IoArgoprojEventsV1alpha1AzureServiceBusTrigger] = Field(default=None, alias="azureServiceBus")
    conditions: Optional[StrictStr] = None
    conditions_reset: Optional[List[IoArgoprojEventsV1alpha1ConditionsResetCriteria]] = Field(default=None, alias="conditionsReset")
    custom: Optional[IoArgoprojEventsV1alpha1CustomTrigger] = None
    email: Optional[IoArgoprojEventsV1alpha1EmailTrigger] = None
    http: Optional[IoArgoprojEventsV1alpha1HTTPTrigger] = None
    k8s: Optional[IoArgoprojEventsV1alpha1StandardK8STrigger] = None
    kafka: Optional[IoArgoprojEventsV1alpha1KafkaTrigger] = None
    log: Optional[IoArgoprojEventsV1alpha1LogTrigger] = None
    name: Optional[StrictStr] = Field(default=None, description="Name is a unique name of the action to take.")
    nats: Optional[IoArgoprojEventsV1alpha1NATSTrigger] = None
    open_whisk: Optional[IoArgoprojEventsV1alpha1OpenWhiskTrigger] = Field(default=None, alias="openWhisk")
    pulsar: Optional[IoArgoprojEventsV1alpha1PulsarTrigger] = None
    slack: Optional[IoArgoprojEventsV1alpha1SlackTrigger] = None
    __properties: ClassVar[List[str]] = ["argoWorkflow", "awsLambda", "azureEventHubs", "azureServiceBus", "conditions", "conditionsReset", "custom", "email", "http", "k8s", "kafka", "log", "name", "nats", "openWhisk", "pulsar", "slack"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1TriggerTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of argo_workflow
        if self.argo_workflow:
            _dict['argoWorkflow'] = self.argo_workflow.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aws_lambda
        if self.aws_lambda:
            _dict['awsLambda'] = self.aws_lambda.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_event_hubs
        if self.azure_event_hubs:
            _dict['azureEventHubs'] = self.azure_event_hubs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_service_bus
        if self.azure_service_bus:
            _dict['azureServiceBus'] = self.azure_service_bus.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in conditions_reset (list)
        _items = []
        if self.conditions_reset:
            for _item in self.conditions_reset:
                if _item:
                    _items.append(_item.to_dict())
            _dict['conditionsReset'] = _items
        # override the default output from pydantic by calling `to_dict()` of custom
        if self.custom:
            _dict['custom'] = self.custom.to_dict()
        # override the default output from pydantic by calling `to_dict()` of email
        if self.email:
            _dict['email'] = self.email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of http
        if self.http:
            _dict['http'] = self.http.to_dict()
        # override the default output from pydantic by calling `to_dict()` of k8s
        if self.k8s:
            _dict['k8s'] = self.k8s.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kafka
        if self.kafka:
            _dict['kafka'] = self.kafka.to_dict()
        # override the default output from pydantic by calling `to_dict()` of log
        if self.log:
            _dict['log'] = self.log.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nats
        if self.nats:
            _dict['nats'] = self.nats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_whisk
        if self.open_whisk:
            _dict['openWhisk'] = self.open_whisk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pulsar
        if self.pulsar:
            _dict['pulsar'] = self.pulsar.to_dict()
        # override the default output from pydantic by calling `to_dict()` of slack
        if self.slack:
            _dict['slack'] = self.slack.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1TriggerTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "argoWorkflow": IoArgoprojEventsV1alpha1ArgoWorkflowTrigger.from_dict(obj["argoWorkflow"]) if obj.get("argoWorkflow") is not None else None,
            "awsLambda": IoArgoprojEventsV1alpha1AWSLambdaTrigger.from_dict(obj["awsLambda"]) if obj.get("awsLambda") is not None else None,
            "azureEventHubs": IoArgoprojEventsV1alpha1AzureEventHubsTrigger.from_dict(obj["azureEventHubs"]) if obj.get("azureEventHubs") is not None else None,
            "azureServiceBus": IoArgoprojEventsV1alpha1AzureServiceBusTrigger.from_dict(obj["azureServiceBus"]) if obj.get("azureServiceBus") is not None else None,
            "conditions": obj.get("conditions"),
            "conditionsReset": [IoArgoprojEventsV1alpha1ConditionsResetCriteria.from_dict(_item) for _item in obj["conditionsReset"]] if obj.get("conditionsReset") is not None else None,
            "custom": IoArgoprojEventsV1alpha1CustomTrigger.from_dict(obj["custom"]) if obj.get("custom") is not None else None,
            "email": IoArgoprojEventsV1alpha1EmailTrigger.from_dict(obj["email"]) if obj.get("email") is not None else None,
            "http": IoArgoprojEventsV1alpha1HTTPTrigger.from_dict(obj["http"]) if obj.get("http") is not None else None,
            "k8s": IoArgoprojEventsV1alpha1StandardK8STrigger.from_dict(obj["k8s"]) if obj.get("k8s") is not None else None,
            "kafka": IoArgoprojEventsV1alpha1KafkaTrigger.from_dict(obj["kafka"]) if obj.get("kafka") is not None else None,
            "log": IoArgoprojEventsV1alpha1LogTrigger.from_dict(obj["log"]) if obj.get("log") is not None else None,
            "name": obj.get("name"),
            "nats": IoArgoprojEventsV1alpha1NATSTrigger.from_dict(obj["nats"]) if obj.get("nats") is not None else None,
            "openWhisk": IoArgoprojEventsV1alpha1OpenWhiskTrigger.from_dict(obj["openWhisk"]) if obj.get("openWhisk") is not None else None,
            "pulsar": IoArgoprojEventsV1alpha1PulsarTrigger.from_dict(obj["pulsar"]) if obj.get("pulsar") is not None else None,
            "slack": IoArgoprojEventsV1alpha1SlackTrigger.from_dict(obj["slack"]) if obj.get("slack") is not None else None
        })
        return _obj


