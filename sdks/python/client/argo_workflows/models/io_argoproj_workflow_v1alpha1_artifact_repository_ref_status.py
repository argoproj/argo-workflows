# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifact_repository': 'IoArgoprojWorkflowV1alpha1ArtifactRepository',
        'config_map': 'str',
        'default': 'bool',
        'key': 'str',
        'namespace': 'str'
    }

    attribute_map = {
        'artifact_repository': 'artifactRepository',
        'config_map': 'configMap',
        'default': 'default',
        'key': 'key',
        'namespace': 'namespace'
    }

    def __init__(self, artifact_repository=None, config_map=None, default=None, key=None, namespace=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._artifact_repository = None
        self._config_map = None
        self._default = None
        self._key = None
        self._namespace = None
        self.discriminator = None

        if artifact_repository is not None:
            self.artifact_repository = artifact_repository
        if config_map is not None:
            self.config_map = config_map
        if default is not None:
            self.default = default
        if key is not None:
            self.key = key
        if namespace is not None:
            self.namespace = namespace

    @property
    def artifact_repository(self):
        """Gets the artifact_repository of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.  # noqa: E501


        :return: The artifact_repository of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1ArtifactRepository
        """
        return self._artifact_repository

    @artifact_repository.setter
    def artifact_repository(self, artifact_repository):
        """Sets the artifact_repository of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.


        :param artifact_repository: The artifact_repository of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1ArtifactRepository
        """

        self._artifact_repository = artifact_repository

    @property
    def config_map(self):
        """Gets the config_map of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.  # noqa: E501

        The name of the config map. Defaults to \"artifact-repositories\".  # noqa: E501

        :return: The config_map of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.  # noqa: E501
        :rtype: str
        """
        return self._config_map

    @config_map.setter
    def config_map(self, config_map):
        """Sets the config_map of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.

        The name of the config map. Defaults to \"artifact-repositories\".  # noqa: E501

        :param config_map: The config_map of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.  # noqa: E501
        :type: str
        """

        self._config_map = config_map

    @property
    def default(self):
        """Gets the default of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.  # noqa: E501

        If this ref represents the default artifact repository, rather than a config map.  # noqa: E501

        :return: The default of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.  # noqa: E501
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.

        If this ref represents the default artifact repository, rather than a config map.  # noqa: E501

        :param default: The default of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.  # noqa: E501
        :type: bool
        """

        self._default = default

    @property
    def key(self):
        """Gets the key of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.  # noqa: E501

        The config map key. Defaults to the value of the \"workflows.argoproj.io/default-artifact-repository\" annotation.  # noqa: E501

        :return: The key of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.

        The config map key. Defaults to the value of the \"workflows.argoproj.io/default-artifact-repository\" annotation.  # noqa: E501

        :param key: The key of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def namespace(self):
        """Gets the namespace of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.  # noqa: E501

        The namespace of the config map. Defaults to the workflow's namespace, or the controller's namespace (if found).  # noqa: E501

        :return: The namespace of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.

        The namespace of the config map. Defaults to the workflow's namespace, or the controller's namespace (if found).  # noqa: E501

        :param namespace: The namespace of this IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1ArtifactRepositoryRefStatus):
            return True

        return self.to_dict() != other.to_dict()
