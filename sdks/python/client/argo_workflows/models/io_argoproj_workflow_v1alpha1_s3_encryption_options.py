# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class IoArgoprojWorkflowV1alpha1S3EncryptionOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'enable_encryption': 'bool',
        'kms_encryption_context': 'str',
        'kms_key_id': 'str',
        'server_side_customer_key_secret': 'SecretKeySelector'
    }

    attribute_map = {
        'enable_encryption': 'enableEncryption',
        'kms_encryption_context': 'kmsEncryptionContext',
        'kms_key_id': 'kmsKeyId',
        'server_side_customer_key_secret': 'serverSideCustomerKeySecret'
    }

    def __init__(self, enable_encryption=None, kms_encryption_context=None, kms_key_id=None, server_side_customer_key_secret=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojWorkflowV1alpha1S3EncryptionOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._enable_encryption = None
        self._kms_encryption_context = None
        self._kms_key_id = None
        self._server_side_customer_key_secret = None
        self.discriminator = None

        if enable_encryption is not None:
            self.enable_encryption = enable_encryption
        if kms_encryption_context is not None:
            self.kms_encryption_context = kms_encryption_context
        if kms_key_id is not None:
            self.kms_key_id = kms_key_id
        if server_side_customer_key_secret is not None:
            self.server_side_customer_key_secret = server_side_customer_key_secret

    @property
    def enable_encryption(self):
        """Gets the enable_encryption of this IoArgoprojWorkflowV1alpha1S3EncryptionOptions.  # noqa: E501

        EnableEncryption tells the driver to encrypt objects if set to true. If kmsKeyId and serverSideCustomerKeySecret are not set, SSE-S3 will be used  # noqa: E501

        :return: The enable_encryption of this IoArgoprojWorkflowV1alpha1S3EncryptionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._enable_encryption

    @enable_encryption.setter
    def enable_encryption(self, enable_encryption):
        """Sets the enable_encryption of this IoArgoprojWorkflowV1alpha1S3EncryptionOptions.

        EnableEncryption tells the driver to encrypt objects if set to true. If kmsKeyId and serverSideCustomerKeySecret are not set, SSE-S3 will be used  # noqa: E501

        :param enable_encryption: The enable_encryption of this IoArgoprojWorkflowV1alpha1S3EncryptionOptions.  # noqa: E501
        :type: bool
        """

        self._enable_encryption = enable_encryption

    @property
    def kms_encryption_context(self):
        """Gets the kms_encryption_context of this IoArgoprojWorkflowV1alpha1S3EncryptionOptions.  # noqa: E501

        KmsEncryptionContext is a json blob that contains an encryption context. See https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context for more information  # noqa: E501

        :return: The kms_encryption_context of this IoArgoprojWorkflowV1alpha1S3EncryptionOptions.  # noqa: E501
        :rtype: str
        """
        return self._kms_encryption_context

    @kms_encryption_context.setter
    def kms_encryption_context(self, kms_encryption_context):
        """Sets the kms_encryption_context of this IoArgoprojWorkflowV1alpha1S3EncryptionOptions.

        KmsEncryptionContext is a json blob that contains an encryption context. See https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context for more information  # noqa: E501

        :param kms_encryption_context: The kms_encryption_context of this IoArgoprojWorkflowV1alpha1S3EncryptionOptions.  # noqa: E501
        :type: str
        """

        self._kms_encryption_context = kms_encryption_context

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this IoArgoprojWorkflowV1alpha1S3EncryptionOptions.  # noqa: E501

        KMSKeyId tells the driver to encrypt the object using the specified KMS Key.  # noqa: E501

        :return: The kms_key_id of this IoArgoprojWorkflowV1alpha1S3EncryptionOptions.  # noqa: E501
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this IoArgoprojWorkflowV1alpha1S3EncryptionOptions.

        KMSKeyId tells the driver to encrypt the object using the specified KMS Key.  # noqa: E501

        :param kms_key_id: The kms_key_id of this IoArgoprojWorkflowV1alpha1S3EncryptionOptions.  # noqa: E501
        :type: str
        """

        self._kms_key_id = kms_key_id

    @property
    def server_side_customer_key_secret(self):
        """Gets the server_side_customer_key_secret of this IoArgoprojWorkflowV1alpha1S3EncryptionOptions.  # noqa: E501


        :return: The server_side_customer_key_secret of this IoArgoprojWorkflowV1alpha1S3EncryptionOptions.  # noqa: E501
        :rtype: SecretKeySelector
        """
        return self._server_side_customer_key_secret

    @server_side_customer_key_secret.setter
    def server_side_customer_key_secret(self, server_side_customer_key_secret):
        """Sets the server_side_customer_key_secret of this IoArgoprojWorkflowV1alpha1S3EncryptionOptions.


        :param server_side_customer_key_secret: The server_side_customer_key_secret of this IoArgoprojWorkflowV1alpha1S3EncryptionOptions.  # noqa: E501
        :type: SecretKeySelector
        """

        self._server_side_customer_key_secret = server_side_customer_key_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1S3EncryptionOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1S3EncryptionOptions):
            return True

        return self.to_dict() != other.to_dict()
