# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class IoArgoprojEventsV1alpha1DataFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'comparator': 'str',
        'path': 'str',
        'template': 'str',
        'type': 'str',
        'value': 'list[str]'
    }

    attribute_map = {
        'comparator': 'comparator',
        'path': 'path',
        'template': 'template',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, comparator=None, path=None, template=None, type=None, value=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojEventsV1alpha1DataFilter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._comparator = None
        self._path = None
        self._template = None
        self._type = None
        self._value = None
        self.discriminator = None

        if comparator is not None:
            self.comparator = comparator
        if path is not None:
            self.path = path
        if template is not None:
            self.template = template
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value

    @property
    def comparator(self):
        """Gets the comparator of this IoArgoprojEventsV1alpha1DataFilter.  # noqa: E501

        Comparator compares the event data with a user given value. Can be \">=\", \">\", \"=\", \"!=\", \"<\", or \"<=\". Is optional, and if left blank treated as equality \"=\".  # noqa: E501

        :return: The comparator of this IoArgoprojEventsV1alpha1DataFilter.  # noqa: E501
        :rtype: str
        """
        return self._comparator

    @comparator.setter
    def comparator(self, comparator):
        """Sets the comparator of this IoArgoprojEventsV1alpha1DataFilter.

        Comparator compares the event data with a user given value. Can be \">=\", \">\", \"=\", \"!=\", \"<\", or \"<=\". Is optional, and if left blank treated as equality \"=\".  # noqa: E501

        :param comparator: The comparator of this IoArgoprojEventsV1alpha1DataFilter.  # noqa: E501
        :type: str
        """

        self._comparator = comparator

    @property
    def path(self):
        """Gets the path of this IoArgoprojEventsV1alpha1DataFilter.  # noqa: E501

        Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.  # noqa: E501

        :return: The path of this IoArgoprojEventsV1alpha1DataFilter.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this IoArgoprojEventsV1alpha1DataFilter.

        Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.  # noqa: E501

        :param path: The path of this IoArgoprojEventsV1alpha1DataFilter.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def template(self):
        """Gets the template of this IoArgoprojEventsV1alpha1DataFilter.  # noqa: E501


        :return: The template of this IoArgoprojEventsV1alpha1DataFilter.  # noqa: E501
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this IoArgoprojEventsV1alpha1DataFilter.


        :param template: The template of this IoArgoprojEventsV1alpha1DataFilter.  # noqa: E501
        :type: str
        """

        self._template = template

    @property
    def type(self):
        """Gets the type of this IoArgoprojEventsV1alpha1DataFilter.  # noqa: E501


        :return: The type of this IoArgoprojEventsV1alpha1DataFilter.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IoArgoprojEventsV1alpha1DataFilter.


        :param type: The type of this IoArgoprojEventsV1alpha1DataFilter.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this IoArgoprojEventsV1alpha1DataFilter.  # noqa: E501


        :return: The value of this IoArgoprojEventsV1alpha1DataFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this IoArgoprojEventsV1alpha1DataFilter.


        :param value: The value of this IoArgoprojEventsV1alpha1DataFilter.  # noqa: E501
        :type: list[str]
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1DataFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1DataFilter):
            return True

        return self.to_dict() != other.to_dict()
