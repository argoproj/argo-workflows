# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class IoArgoprojWorkflowV1alpha1ArtifactRepository(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'archive_logs': 'bool',
        'artifactory': 'IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository',
        'gcs': 'IoArgoprojWorkflowV1alpha1GCSArtifactRepository',
        'hdfs': 'IoArgoprojWorkflowV1alpha1HDFSArtifactRepository',
        'oss': 'IoArgoprojWorkflowV1alpha1OSSArtifactRepository',
        's3': 'IoArgoprojWorkflowV1alpha1S3ArtifactRepository'
    }

    attribute_map = {
        'archive_logs': 'archiveLogs',
        'artifactory': 'artifactory',
        'gcs': 'gcs',
        'hdfs': 'hdfs',
        'oss': 'oss',
        's3': 's3'
    }

    def __init__(self, archive_logs=None, artifactory=None, gcs=None, hdfs=None, oss=None, s3=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojWorkflowV1alpha1ArtifactRepository - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._archive_logs = None
        self._artifactory = None
        self._gcs = None
        self._hdfs = None
        self._oss = None
        self._s3 = None
        self.discriminator = None

        if archive_logs is not None:
            self.archive_logs = archive_logs
        if artifactory is not None:
            self.artifactory = artifactory
        if gcs is not None:
            self.gcs = gcs
        if hdfs is not None:
            self.hdfs = hdfs
        if oss is not None:
            self.oss = oss
        if s3 is not None:
            self.s3 = s3

    @property
    def archive_logs(self):
        """Gets the archive_logs of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501

        ArchiveLogs enables log archiving  # noqa: E501

        :return: The archive_logs of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501
        :rtype: bool
        """
        return self._archive_logs

    @archive_logs.setter
    def archive_logs(self, archive_logs):
        """Sets the archive_logs of this IoArgoprojWorkflowV1alpha1ArtifactRepository.

        ArchiveLogs enables log archiving  # noqa: E501

        :param archive_logs: The archive_logs of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501
        :type: bool
        """

        self._archive_logs = archive_logs

    @property
    def artifactory(self):
        """Gets the artifactory of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501


        :return: The artifactory of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository
        """
        return self._artifactory

    @artifactory.setter
    def artifactory(self, artifactory):
        """Sets the artifactory of this IoArgoprojWorkflowV1alpha1ArtifactRepository.


        :param artifactory: The artifactory of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1ArtifactoryArtifactRepository
        """

        self._artifactory = artifactory

    @property
    def gcs(self):
        """Gets the gcs of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501


        :return: The gcs of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1GCSArtifactRepository
        """
        return self._gcs

    @gcs.setter
    def gcs(self, gcs):
        """Sets the gcs of this IoArgoprojWorkflowV1alpha1ArtifactRepository.


        :param gcs: The gcs of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1GCSArtifactRepository
        """

        self._gcs = gcs

    @property
    def hdfs(self):
        """Gets the hdfs of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501


        :return: The hdfs of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1HDFSArtifactRepository
        """
        return self._hdfs

    @hdfs.setter
    def hdfs(self, hdfs):
        """Sets the hdfs of this IoArgoprojWorkflowV1alpha1ArtifactRepository.


        :param hdfs: The hdfs of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1HDFSArtifactRepository
        """

        self._hdfs = hdfs

    @property
    def oss(self):
        """Gets the oss of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501


        :return: The oss of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1OSSArtifactRepository
        """
        return self._oss

    @oss.setter
    def oss(self, oss):
        """Sets the oss of this IoArgoprojWorkflowV1alpha1ArtifactRepository.


        :param oss: The oss of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1OSSArtifactRepository
        """

        self._oss = oss

    @property
    def s3(self):
        """Gets the s3 of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501


        :return: The s3 of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501
        :rtype: IoArgoprojWorkflowV1alpha1S3ArtifactRepository
        """
        return self._s3

    @s3.setter
    def s3(self, s3):
        """Sets the s3 of this IoArgoprojWorkflowV1alpha1ArtifactRepository.


        :param s3: The s3 of this IoArgoprojWorkflowV1alpha1ArtifactRepository.  # noqa: E501
        :type: IoArgoprojWorkflowV1alpha1S3ArtifactRepository
        """

        self._s3 = s3

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1ArtifactRepository):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1ArtifactRepository):
            return True

        return self.to_dict() != other.to_dict()
