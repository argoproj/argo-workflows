# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.affinity import Affinity
from argo_workflows.models.container import Container
from argo_workflows.models.io_argoproj_events_v1alpha1_metadata import IoArgoprojEventsV1alpha1Metadata
from argo_workflows.models.local_object_reference import LocalObjectReference
from argo_workflows.models.pod_security_context import PodSecurityContext
from argo_workflows.models.toleration import Toleration
from argo_workflows.models.volume import Volume
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojEventsV1alpha1Template(BaseModel):
    """
    IoArgoprojEventsV1alpha1Template
    """ # noqa: E501
    affinity: Optional[Affinity] = None
    container: Optional[Container] = None
    image_pull_secrets: Optional[List[LocalObjectReference]] = Field(default=None, alias="imagePullSecrets")
    metadata: Optional[IoArgoprojEventsV1alpha1Metadata] = None
    node_selector: Optional[Dict[str, StrictStr]] = Field(default=None, alias="nodeSelector")
    priority: Optional[StrictInt] = None
    priority_class_name: Optional[StrictStr] = Field(default=None, alias="priorityClassName")
    security_context: Optional[PodSecurityContext] = Field(default=None, alias="securityContext")
    service_account_name: Optional[StrictStr] = Field(default=None, alias="serviceAccountName")
    tolerations: Optional[List[Toleration]] = None
    volumes: Optional[List[Volume]] = None
    __properties: ClassVar[List[str]] = ["affinity", "container", "imagePullSecrets", "metadata", "nodeSelector", "priority", "priorityClassName", "securityContext", "serviceAccountName", "tolerations", "volumes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1Template from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of affinity
        if self.affinity:
            _dict['affinity'] = self.affinity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container
        if self.container:
            _dict['container'] = self.container.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in image_pull_secrets (list)
        _items = []
        if self.image_pull_secrets:
            for _item in self.image_pull_secrets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['imagePullSecrets'] = _items
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_context
        if self.security_context:
            _dict['securityContext'] = self.security_context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tolerations (list)
        _items = []
        if self.tolerations:
            for _item in self.tolerations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tolerations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in volumes (list)
        _items = []
        if self.volumes:
            for _item in self.volumes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['volumes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1Template from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "affinity": Affinity.from_dict(obj["affinity"]) if obj.get("affinity") is not None else None,
            "container": Container.from_dict(obj["container"]) if obj.get("container") is not None else None,
            "imagePullSecrets": [LocalObjectReference.from_dict(_item) for _item in obj["imagePullSecrets"]] if obj.get("imagePullSecrets") is not None else None,
            "metadata": IoArgoprojEventsV1alpha1Metadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "nodeSelector": obj.get("nodeSelector"),
            "priority": obj.get("priority"),
            "priorityClassName": obj.get("priorityClassName"),
            "securityContext": PodSecurityContext.from_dict(obj["securityContext"]) if obj.get("securityContext") is not None else None,
            "serviceAccountName": obj.get("serviceAccountName"),
            "tolerations": [Toleration.from_dict(_item) for _item in obj["tolerations"]] if obj.get("tolerations") is not None else None,
            "volumes": [Volume.from_dict(_item) for _item in obj["volumes"]] if obj.get("volumes") is not None else None
        })
        return _obj


