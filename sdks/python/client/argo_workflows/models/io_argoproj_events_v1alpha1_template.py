# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class IoArgoprojEventsV1alpha1Template(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'affinity': 'Affinity',
        'container': 'Container',
        'image_pull_secrets': 'list[LocalObjectReference]',
        'metadata': 'IoArgoprojEventsV1alpha1Metadata',
        'node_selector': 'dict(str, str)',
        'priority': 'int',
        'priority_class_name': 'str',
        'security_context': 'PodSecurityContext',
        'service_account_name': 'str',
        'tolerations': 'list[Toleration]',
        'volumes': 'list[Volume]'
    }

    attribute_map = {
        'affinity': 'affinity',
        'container': 'container',
        'image_pull_secrets': 'imagePullSecrets',
        'metadata': 'metadata',
        'node_selector': 'nodeSelector',
        'priority': 'priority',
        'priority_class_name': 'priorityClassName',
        'security_context': 'securityContext',
        'service_account_name': 'serviceAccountName',
        'tolerations': 'tolerations',
        'volumes': 'volumes'
    }

    def __init__(self, affinity=None, container=None, image_pull_secrets=None, metadata=None, node_selector=None, priority=None, priority_class_name=None, security_context=None, service_account_name=None, tolerations=None, volumes=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojEventsV1alpha1Template - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._affinity = None
        self._container = None
        self._image_pull_secrets = None
        self._metadata = None
        self._node_selector = None
        self._priority = None
        self._priority_class_name = None
        self._security_context = None
        self._service_account_name = None
        self._tolerations = None
        self._volumes = None
        self.discriminator = None

        if affinity is not None:
            self.affinity = affinity
        if container is not None:
            self.container = container
        if image_pull_secrets is not None:
            self.image_pull_secrets = image_pull_secrets
        if metadata is not None:
            self.metadata = metadata
        if node_selector is not None:
            self.node_selector = node_selector
        if priority is not None:
            self.priority = priority
        if priority_class_name is not None:
            self.priority_class_name = priority_class_name
        if security_context is not None:
            self.security_context = security_context
        if service_account_name is not None:
            self.service_account_name = service_account_name
        if tolerations is not None:
            self.tolerations = tolerations
        if volumes is not None:
            self.volumes = volumes

    @property
    def affinity(self):
        """Gets the affinity of this IoArgoprojEventsV1alpha1Template.  # noqa: E501


        :return: The affinity of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :rtype: Affinity
        """
        return self._affinity

    @affinity.setter
    def affinity(self, affinity):
        """Sets the affinity of this IoArgoprojEventsV1alpha1Template.


        :param affinity: The affinity of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :type: Affinity
        """

        self._affinity = affinity

    @property
    def container(self):
        """Gets the container of this IoArgoprojEventsV1alpha1Template.  # noqa: E501


        :return: The container of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :rtype: Container
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this IoArgoprojEventsV1alpha1Template.


        :param container: The container of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :type: Container
        """

        self._container = container

    @property
    def image_pull_secrets(self):
        """Gets the image_pull_secrets of this IoArgoprojEventsV1alpha1Template.  # noqa: E501


        :return: The image_pull_secrets of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :rtype: list[LocalObjectReference]
        """
        return self._image_pull_secrets

    @image_pull_secrets.setter
    def image_pull_secrets(self, image_pull_secrets):
        """Sets the image_pull_secrets of this IoArgoprojEventsV1alpha1Template.


        :param image_pull_secrets: The image_pull_secrets of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :type: list[LocalObjectReference]
        """

        self._image_pull_secrets = image_pull_secrets

    @property
    def metadata(self):
        """Gets the metadata of this IoArgoprojEventsV1alpha1Template.  # noqa: E501


        :return: The metadata of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1Metadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IoArgoprojEventsV1alpha1Template.


        :param metadata: The metadata of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1Metadata
        """

        self._metadata = metadata

    @property
    def node_selector(self):
        """Gets the node_selector of this IoArgoprojEventsV1alpha1Template.  # noqa: E501


        :return: The node_selector of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this IoArgoprojEventsV1alpha1Template.


        :param node_selector: The node_selector of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def priority(self):
        """Gets the priority of this IoArgoprojEventsV1alpha1Template.  # noqa: E501


        :return: The priority of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this IoArgoprojEventsV1alpha1Template.


        :param priority: The priority of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def priority_class_name(self):
        """Gets the priority_class_name of this IoArgoprojEventsV1alpha1Template.  # noqa: E501


        :return: The priority_class_name of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :rtype: str
        """
        return self._priority_class_name

    @priority_class_name.setter
    def priority_class_name(self, priority_class_name):
        """Sets the priority_class_name of this IoArgoprojEventsV1alpha1Template.


        :param priority_class_name: The priority_class_name of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :type: str
        """

        self._priority_class_name = priority_class_name

    @property
    def security_context(self):
        """Gets the security_context of this IoArgoprojEventsV1alpha1Template.  # noqa: E501


        :return: The security_context of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :rtype: PodSecurityContext
        """
        return self._security_context

    @security_context.setter
    def security_context(self, security_context):
        """Sets the security_context of this IoArgoprojEventsV1alpha1Template.


        :param security_context: The security_context of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :type: PodSecurityContext
        """

        self._security_context = security_context

    @property
    def service_account_name(self):
        """Gets the service_account_name of this IoArgoprojEventsV1alpha1Template.  # noqa: E501


        :return: The service_account_name of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :rtype: str
        """
        return self._service_account_name

    @service_account_name.setter
    def service_account_name(self, service_account_name):
        """Sets the service_account_name of this IoArgoprojEventsV1alpha1Template.


        :param service_account_name: The service_account_name of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :type: str
        """

        self._service_account_name = service_account_name

    @property
    def tolerations(self):
        """Gets the tolerations of this IoArgoprojEventsV1alpha1Template.  # noqa: E501


        :return: The tolerations of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :rtype: list[Toleration]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """Sets the tolerations of this IoArgoprojEventsV1alpha1Template.


        :param tolerations: The tolerations of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :type: list[Toleration]
        """

        self._tolerations = tolerations

    @property
    def volumes(self):
        """Gets the volumes of this IoArgoprojEventsV1alpha1Template.  # noqa: E501


        :return: The volumes of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :rtype: list[Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this IoArgoprojEventsV1alpha1Template.


        :param volumes: The volumes of this IoArgoprojEventsV1alpha1Template.  # noqa: E501
        :type: list[Volume]
        """

        self._volumes = volumes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1Template):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1Template):
            return True

        return self.to_dict() != other.to_dict()
