# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'on_error': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement',
        'on_record_not_found': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement',
        'statement': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement'
    }

    attribute_map = {
        'on_error': 'onError',
        'on_record_not_found': 'onRecordNotFound',
        'statement': 'statement'
    }

    def __init__(self, on_error=None, on_record_not_found=None, statement=None, local_vars_configuration=None):  # noqa: E501
        """GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._on_error = None
        self._on_record_not_found = None
        self._statement = None
        self.discriminator = None

        if on_error is not None:
            self.on_error = on_error
        if on_record_not_found is not None:
            self.on_record_not_found = on_record_not_found
        if statement is not None:
            self.statement = statement

    @property
    def on_error(self):
        """Gets the on_error of this GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction.  # noqa: E501


        :return: The on_error of this GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement
        """
        return self._on_error

    @on_error.setter
    def on_error(self, on_error):
        """Sets the on_error of this GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction.


        :param on_error: The on_error of this GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement
        """

        self._on_error = on_error

    @property
    def on_record_not_found(self):
        """Gets the on_record_not_found of this GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction.  # noqa: E501


        :return: The on_record_not_found of this GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement
        """
        return self._on_record_not_found

    @on_record_not_found.setter
    def on_record_not_found(self, on_record_not_found):
        """Sets the on_record_not_found of this GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction.


        :param on_record_not_found: The on_record_not_found of this GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement
        """

        self._on_record_not_found = on_record_not_found

    @property
    def statement(self):
        """Gets the statement of this GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction.  # noqa: E501


        :return: The statement of this GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement
        """
        return self._statement

    @statement.setter
    def statement(self, statement):
        """Sets the statement of this GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction.


        :param statement: The statement of this GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLStatement
        """

        self._statement = statement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1SQLAction):
            return True

        return self.to_dict() != other.to_dict()
