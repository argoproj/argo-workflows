# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class GithubComArgoprojLabsArgoDataflowApiV1alpha1Interface(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fifo': 'bool',
        'http': 'object'
    }

    attribute_map = {
        'fifo': 'fifo',
        'http': 'http'
    }

    def __init__(self, fifo=None, http=None, local_vars_configuration=None):  # noqa: E501
        """GithubComArgoprojLabsArgoDataflowApiV1alpha1Interface - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._fifo = None
        self._http = None
        self.discriminator = None

        if fifo is not None:
            self.fifo = fifo
        if http is not None:
            self.http = http

    @property
    def fifo(self):
        """Gets the fifo of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Interface.  # noqa: E501


        :return: The fifo of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Interface.  # noqa: E501
        :rtype: bool
        """
        return self._fifo

    @fifo.setter
    def fifo(self, fifo):
        """Sets the fifo of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Interface.


        :param fifo: The fifo of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Interface.  # noqa: E501
        :type: bool
        """

        self._fifo = fifo

    @property
    def http(self):
        """Gets the http of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Interface.  # noqa: E501


        :return: The http of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Interface.  # noqa: E501
        :rtype: object
        """
        return self._http

    @http.setter
    def http(self, http):
        """Sets the http of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Interface.


        :param http: The http of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Interface.  # noqa: E501
        :type: object
        """

        self._http = http

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1Interface):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1Interface):
            return True

        return self.to_dict() != other.to_dict()
