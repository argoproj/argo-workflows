# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'last_scaled_at': 'datetime',
        'message': 'str',
        'phase': 'str',
        'reason': 'str',
        'replicas': 'int',
        'selector': 'str'
    }

    attribute_map = {
        'last_scaled_at': 'lastScaledAt',
        'message': 'message',
        'phase': 'phase',
        'reason': 'reason',
        'replicas': 'replicas',
        'selector': 'selector'
    }

    def __init__(self, last_scaled_at=None, message=None, phase=None, reason=None, replicas=None, selector=None, local_vars_configuration=None):  # noqa: E501
        """GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._last_scaled_at = None
        self._message = None
        self._phase = None
        self._reason = None
        self._replicas = None
        self._selector = None
        self.discriminator = None

        if last_scaled_at is not None:
            self.last_scaled_at = last_scaled_at
        if message is not None:
            self.message = message
        if phase is not None:
            self.phase = phase
        if reason is not None:
            self.reason = reason
        if replicas is not None:
            self.replicas = replicas
        if selector is not None:
            self.selector = selector

    @property
    def last_scaled_at(self):
        """Gets the last_scaled_at of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501

        Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.  # noqa: E501

        :return: The last_scaled_at of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_scaled_at

    @last_scaled_at.setter
    def last_scaled_at(self, last_scaled_at):
        """Sets the last_scaled_at of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.

        Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.  # noqa: E501

        :param last_scaled_at: The last_scaled_at of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501
        :type: datetime
        """

        self._last_scaled_at = last_scaled_at

    @property
    def message(self):
        """Gets the message of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501


        :return: The message of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.


        :param message: The message of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def phase(self):
        """Gets the phase of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501


        :return: The phase of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.


        :param phase: The phase of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501
        :type: str
        """

        self._phase = phase

    @property
    def reason(self):
        """Gets the reason of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501


        :return: The reason of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.


        :param reason: The reason of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def replicas(self):
        """Gets the replicas of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501


        :return: The replicas of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501
        :rtype: int
        """
        return self._replicas

    @replicas.setter
    def replicas(self, replicas):
        """Sets the replicas of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.


        :param replicas: The replicas of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501
        :type: int
        """

        self._replicas = replicas

    @property
    def selector(self):
        """Gets the selector of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501


        :return: The selector of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.


        :param selector: The selector of this GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus.  # noqa: E501
        :type: str
        """

        self._selector = selector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1StepStatus):
            return True

        return self.to_dict() != other.to_dict()
