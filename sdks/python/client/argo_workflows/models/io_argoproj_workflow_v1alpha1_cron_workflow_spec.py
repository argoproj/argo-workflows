# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.io_argoproj_workflow_v1alpha1_stop_strategy import IoArgoprojWorkflowV1alpha1StopStrategy
from argo_workflows.models.io_argoproj_workflow_v1alpha1_workflow_spec import IoArgoprojWorkflowV1alpha1WorkflowSpec
from argo_workflows.models.object_meta import ObjectMeta
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojWorkflowV1alpha1CronWorkflowSpec(BaseModel):
    """
    CronWorkflowSpec is the specification of a CronWorkflow
    """ # noqa: E501
    concurrency_policy: Optional[StrictStr] = Field(default=None, description="ConcurrencyPolicy is the K8s-style concurrency policy that will be used", alias="concurrencyPolicy")
    failed_jobs_history_limit: Optional[StrictInt] = Field(default=None, description="FailedJobsHistoryLimit is the number of failed jobs to be kept at a time", alias="failedJobsHistoryLimit")
    schedule: StrictStr = Field(description="Schedule is a schedule to run the Workflow in Cron format")
    schedules: Optional[List[StrictStr]] = Field(default=None, description="Schedules is a list of schedules to run the Workflow in Cron format")
    starting_deadline_seconds: Optional[StrictInt] = Field(default=None, description="StartingDeadlineSeconds is the K8s-style deadline that will limit the time a CronWorkflow will be run after its original scheduled time if it is missed.", alias="startingDeadlineSeconds")
    stop_strategy: Optional[IoArgoprojWorkflowV1alpha1StopStrategy] = Field(default=None, alias="stopStrategy")
    successful_jobs_history_limit: Optional[StrictInt] = Field(default=None, description="SuccessfulJobsHistoryLimit is the number of successful jobs to be kept at a time", alias="successfulJobsHistoryLimit")
    suspend: Optional[StrictBool] = Field(default=None, description="Suspend is a flag that will stop new CronWorkflows from running if set to true")
    timezone: Optional[StrictStr] = Field(default=None, description="Timezone is the timezone against which the cron schedule will be calculated, e.g. \"Asia/Tokyo\". Default is machine's local time.")
    workflow_metadata: Optional[ObjectMeta] = Field(default=None, alias="workflowMetadata")
    workflow_spec: IoArgoprojWorkflowV1alpha1WorkflowSpec = Field(alias="workflowSpec")
    __properties: ClassVar[List[str]] = ["concurrencyPolicy", "failedJobsHistoryLimit", "schedule", "schedules", "startingDeadlineSeconds", "stopStrategy", "successfulJobsHistoryLimit", "suspend", "timezone", "workflowMetadata", "workflowSpec"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1CronWorkflowSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of stop_strategy
        if self.stop_strategy:
            _dict['stopStrategy'] = self.stop_strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workflow_metadata
        if self.workflow_metadata:
            _dict['workflowMetadata'] = self.workflow_metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workflow_spec
        if self.workflow_spec:
            _dict['workflowSpec'] = self.workflow_spec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1CronWorkflowSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "concurrencyPolicy": obj.get("concurrencyPolicy"),
            "failedJobsHistoryLimit": obj.get("failedJobsHistoryLimit"),
            "schedule": obj.get("schedule"),
            "schedules": obj.get("schedules"),
            "startingDeadlineSeconds": obj.get("startingDeadlineSeconds"),
            "stopStrategy": IoArgoprojWorkflowV1alpha1StopStrategy.from_dict(obj["stopStrategy"]) if obj.get("stopStrategy") is not None else None,
            "successfulJobsHistoryLimit": obj.get("successfulJobsHistoryLimit"),
            "suspend": obj.get("suspend"),
            "timezone": obj.get("timezone"),
            "workflowMetadata": ObjectMeta.from_dict(obj["workflowMetadata"]) if obj.get("workflowMetadata") is not None else None,
            "workflowSpec": IoArgoprojWorkflowV1alpha1WorkflowSpec.from_dict(obj["workflowSpec"]) if obj.get("workflowSpec") is not None else None
        })
        return _obj


