# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.io_argoproj_events_v1alpha1_git_creds import IoArgoprojEventsV1alpha1GitCreds
from argo_workflows.models.io_argoproj_events_v1alpha1_git_remote_config import IoArgoprojEventsV1alpha1GitRemoteConfig
from argo_workflows.models.secret_key_selector import SecretKeySelector
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojEventsV1alpha1GitArtifact(BaseModel):
    """
    IoArgoprojEventsV1alpha1GitArtifact
    """ # noqa: E501
    branch: Optional[StrictStr] = None
    clone_directory: Optional[StrictStr] = Field(default=None, description="Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers. Hence we don't use any specific git provider client.", alias="cloneDirectory")
    creds: Optional[IoArgoprojEventsV1alpha1GitCreds] = None
    file_path: Optional[StrictStr] = Field(default=None, alias="filePath")
    insecure_ignore_host_key: Optional[StrictBool] = Field(default=None, alias="insecureIgnoreHostKey")
    ref: Optional[StrictStr] = None
    remote: Optional[IoArgoprojEventsV1alpha1GitRemoteConfig] = None
    ssh_key_secret: Optional[SecretKeySelector] = Field(default=None, alias="sshKeySecret")
    tag: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["branch", "cloneDirectory", "creds", "filePath", "insecureIgnoreHostKey", "ref", "remote", "sshKeySecret", "tag", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1GitArtifact from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creds
        if self.creds:
            _dict['creds'] = self.creds.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote
        if self.remote:
            _dict['remote'] = self.remote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssh_key_secret
        if self.ssh_key_secret:
            _dict['sshKeySecret'] = self.ssh_key_secret.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1GitArtifact from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "branch": obj.get("branch"),
            "cloneDirectory": obj.get("cloneDirectory"),
            "creds": IoArgoprojEventsV1alpha1GitCreds.from_dict(obj["creds"]) if obj.get("creds") is not None else None,
            "filePath": obj.get("filePath"),
            "insecureIgnoreHostKey": obj.get("insecureIgnoreHostKey"),
            "ref": obj.get("ref"),
            "remote": IoArgoprojEventsV1alpha1GitRemoteConfig.from_dict(obj["remote"]) if obj.get("remote") is not None else None,
            "sshKeySecret": SecretKeySelector.from_dict(obj["sshKeySecret"]) if obj.get("sshKeySecret") is not None else None,
            "tag": obj.get("tag"),
            "url": obj.get("url")
        })
        return _obj


