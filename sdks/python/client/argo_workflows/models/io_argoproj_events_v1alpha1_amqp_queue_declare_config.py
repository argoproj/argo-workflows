# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auto_delete': 'bool',
        'durable': 'bool',
        'exclusive': 'bool',
        'name': 'str',
        'no_wait': 'bool'
    }

    attribute_map = {
        'auto_delete': 'autoDelete',
        'durable': 'durable',
        'exclusive': 'exclusive',
        'name': 'name',
        'no_wait': 'noWait'
    }

    def __init__(self, auto_delete=None, durable=None, exclusive=None, name=None, no_wait=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._auto_delete = None
        self._durable = None
        self._exclusive = None
        self._name = None
        self._no_wait = None
        self.discriminator = None

        if auto_delete is not None:
            self.auto_delete = auto_delete
        if durable is not None:
            self.durable = durable
        if exclusive is not None:
            self.exclusive = exclusive
        if name is not None:
            self.name = name
        if no_wait is not None:
            self.no_wait = no_wait

    @property
    def auto_delete(self):
        """Gets the auto_delete of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.  # noqa: E501


        :return: The auto_delete of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.  # noqa: E501
        :rtype: bool
        """
        return self._auto_delete

    @auto_delete.setter
    def auto_delete(self, auto_delete):
        """Sets the auto_delete of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.


        :param auto_delete: The auto_delete of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.  # noqa: E501
        :type: bool
        """

        self._auto_delete = auto_delete

    @property
    def durable(self):
        """Gets the durable of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.  # noqa: E501


        :return: The durable of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.  # noqa: E501
        :rtype: bool
        """
        return self._durable

    @durable.setter
    def durable(self, durable):
        """Sets the durable of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.


        :param durable: The durable of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.  # noqa: E501
        :type: bool
        """

        self._durable = durable

    @property
    def exclusive(self):
        """Gets the exclusive of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.  # noqa: E501


        :return: The exclusive of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.  # noqa: E501
        :rtype: bool
        """
        return self._exclusive

    @exclusive.setter
    def exclusive(self, exclusive):
        """Sets the exclusive of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.


        :param exclusive: The exclusive of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.  # noqa: E501
        :type: bool
        """

        self._exclusive = exclusive

    @property
    def name(self):
        """Gets the name of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.  # noqa: E501


        :return: The name of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.


        :param name: The name of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def no_wait(self):
        """Gets the no_wait of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.  # noqa: E501


        :return: The no_wait of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.  # noqa: E501
        :rtype: bool
        """
        return self._no_wait

    @no_wait.setter
    def no_wait(self, no_wait):
        """Sets the no_wait of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.


        :param no_wait: The no_wait of this IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig.  # noqa: E501
        :type: bool
        """

        self._no_wait = no_wait

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1AMQPQueueDeclareConfig):
            return True

        return self.to_dict() != other.to_dict()
