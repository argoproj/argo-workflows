# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class IoArgoprojEventsV1alpha1TriggerParameterSource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'context_key': 'str',
        'context_template': 'str',
        'data_key': 'str',
        'data_template': 'str',
        'dependency_name': 'str',
        'value': 'str'
    }

    attribute_map = {
        'context_key': 'contextKey',
        'context_template': 'contextTemplate',
        'data_key': 'dataKey',
        'data_template': 'dataTemplate',
        'dependency_name': 'dependencyName',
        'value': 'value'
    }

    def __init__(self, context_key=None, context_template=None, data_key=None, data_template=None, dependency_name=None, value=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojEventsV1alpha1TriggerParameterSource - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._context_key = None
        self._context_template = None
        self._data_key = None
        self._data_template = None
        self._dependency_name = None
        self._value = None
        self.discriminator = None

        if context_key is not None:
            self.context_key = context_key
        if context_template is not None:
            self.context_template = context_template
        if data_key is not None:
            self.data_key = data_key
        if data_template is not None:
            self.data_template = data_template
        if dependency_name is not None:
            self.dependency_name = dependency_name
        if value is not None:
            self.value = value

    @property
    def context_key(self):
        """Gets the context_key of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501

        ContextKey is the JSONPath of the event's (JSON decoded) context key ContextKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.  # noqa: E501

        :return: The context_key of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501
        :rtype: str
        """
        return self._context_key

    @context_key.setter
    def context_key(self, context_key):
        """Sets the context_key of this IoArgoprojEventsV1alpha1TriggerParameterSource.

        ContextKey is the JSONPath of the event's (JSON decoded) context key ContextKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.  # noqa: E501

        :param context_key: The context_key of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501
        :type: str
        """

        self._context_key = context_key

    @property
    def context_template(self):
        """Gets the context_template of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501


        :return: The context_template of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501
        :rtype: str
        """
        return self._context_template

    @context_template.setter
    def context_template(self, context_template):
        """Sets the context_template of this IoArgoprojEventsV1alpha1TriggerParameterSource.


        :param context_template: The context_template of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501
        :type: str
        """

        self._context_template = context_template

    @property
    def data_key(self):
        """Gets the data_key of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501

        DataKey is the JSONPath of the event's (JSON decoded) data key DataKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.  # noqa: E501

        :return: The data_key of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501
        :rtype: str
        """
        return self._data_key

    @data_key.setter
    def data_key(self, data_key):
        """Sets the data_key of this IoArgoprojEventsV1alpha1TriggerParameterSource.

        DataKey is the JSONPath of the event's (JSON decoded) data key DataKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\\\\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.  # noqa: E501

        :param data_key: The data_key of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501
        :type: str
        """

        self._data_key = data_key

    @property
    def data_template(self):
        """Gets the data_template of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501


        :return: The data_template of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501
        :rtype: str
        """
        return self._data_template

    @data_template.setter
    def data_template(self, data_template):
        """Sets the data_template of this IoArgoprojEventsV1alpha1TriggerParameterSource.


        :param data_template: The data_template of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501
        :type: str
        """

        self._data_template = data_template

    @property
    def dependency_name(self):
        """Gets the dependency_name of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501

        DependencyName refers to the name of the dependency. The event which is stored for this dependency is used as payload for the parameterization. Make sure to refer to one of the dependencies you have defined under Dependencies list.  # noqa: E501

        :return: The dependency_name of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501
        :rtype: str
        """
        return self._dependency_name

    @dependency_name.setter
    def dependency_name(self, dependency_name):
        """Sets the dependency_name of this IoArgoprojEventsV1alpha1TriggerParameterSource.

        DependencyName refers to the name of the dependency. The event which is stored for this dependency is used as payload for the parameterization. Make sure to refer to one of the dependencies you have defined under Dependencies list.  # noqa: E501

        :param dependency_name: The dependency_name of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501
        :type: str
        """

        self._dependency_name = dependency_name

    @property
    def value(self):
        """Gets the value of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501

        Value is the default literal value to use for this parameter source This is only used if the DataKey is invalid. If the DataKey is invalid and this is not defined, this param source will produce an error.  # noqa: E501

        :return: The value of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this IoArgoprojEventsV1alpha1TriggerParameterSource.

        Value is the default literal value to use for this parameter source This is only used if the DataKey is invalid. If the DataKey is invalid and this is not defined, this param source will produce an error.  # noqa: E501

        :param value: The value of this IoArgoprojEventsV1alpha1TriggerParameterSource.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1TriggerParameterSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1TriggerParameterSource):
            return True

        return self.to_dict() != other.to_dict()
