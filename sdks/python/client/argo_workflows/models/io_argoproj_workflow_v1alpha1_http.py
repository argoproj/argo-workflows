# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class IoArgoprojWorkflowV1alpha1HTTP(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'body': 'str',
        'headers': 'list[IoArgoprojWorkflowV1alpha1HTTPHeader]',
        'method': 'str',
        'success_condition': 'str',
        'timeout_seconds': 'int',
        'url': 'str'
    }

    attribute_map = {
        'body': 'body',
        'headers': 'headers',
        'method': 'method',
        'success_condition': 'successCondition',
        'timeout_seconds': 'timeoutSeconds',
        'url': 'url'
    }

    def __init__(self, body=None, headers=None, method=None, success_condition=None, timeout_seconds=None, url=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojWorkflowV1alpha1HTTP - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._body = None
        self._headers = None
        self._method = None
        self._success_condition = None
        self._timeout_seconds = None
        self._url = None
        self.discriminator = None

        if body is not None:
            self.body = body
        if headers is not None:
            self.headers = headers
        if method is not None:
            self.method = method
        if success_condition is not None:
            self.success_condition = success_condition
        if timeout_seconds is not None:
            self.timeout_seconds = timeout_seconds
        self.url = url

    @property
    def body(self):
        """Gets the body of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501

        Body is content of the HTTP Request  # noqa: E501

        :return: The body of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this IoArgoprojWorkflowV1alpha1HTTP.

        Body is content of the HTTP Request  # noqa: E501

        :param body: The body of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def headers(self):
        """Gets the headers of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501

        Headers are an optional list of headers to send with HTTP requests  # noqa: E501

        :return: The headers of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501
        :rtype: list[IoArgoprojWorkflowV1alpha1HTTPHeader]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this IoArgoprojWorkflowV1alpha1HTTP.

        Headers are an optional list of headers to send with HTTP requests  # noqa: E501

        :param headers: The headers of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501
        :type: list[IoArgoprojWorkflowV1alpha1HTTPHeader]
        """

        self._headers = headers

    @property
    def method(self):
        """Gets the method of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501

        Method is HTTP methods for HTTP Request  # noqa: E501

        :return: The method of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this IoArgoprojWorkflowV1alpha1HTTP.

        Method is HTTP methods for HTTP Request  # noqa: E501

        :param method: The method of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def success_condition(self):
        """Gets the success_condition of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501

        SuccessCondition is an expression if evaluated to true is considered successful  # noqa: E501

        :return: The success_condition of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501
        :rtype: str
        """
        return self._success_condition

    @success_condition.setter
    def success_condition(self, success_condition):
        """Sets the success_condition of this IoArgoprojWorkflowV1alpha1HTTP.

        SuccessCondition is an expression if evaluated to true is considered successful  # noqa: E501

        :param success_condition: The success_condition of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501
        :type: str
        """

        self._success_condition = success_condition

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501

        TimeoutSeconds is request timeout for HTTP Request. Default is 30 seconds  # noqa: E501

        :return: The timeout_seconds of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this IoArgoprojWorkflowV1alpha1HTTP.

        TimeoutSeconds is request timeout for HTTP Request. Default is 30 seconds  # noqa: E501

        :param timeout_seconds: The timeout_seconds of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501
        :type: int
        """

        self._timeout_seconds = timeout_seconds

    @property
    def url(self):
        """Gets the url of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501

        URL of the HTTP Request  # noqa: E501

        :return: The url of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IoArgoprojWorkflowV1alpha1HTTP.

        URL of the HTTP Request  # noqa: E501

        :param url: The url of this IoArgoprojWorkflowV1alpha1HTTP.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and url is None:  # noqa: E501
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1HTTP):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojWorkflowV1alpha1HTTP):
            return True

        return self.to_dict() != other.to_dict()
