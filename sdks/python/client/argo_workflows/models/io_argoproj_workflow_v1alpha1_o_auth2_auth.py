# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.io_argoproj_workflow_v1alpha1_o_auth2_endpoint_param import IoArgoprojWorkflowV1alpha1OAuth2EndpointParam
from argo_workflows.models.secret_key_selector import SecretKeySelector
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojWorkflowV1alpha1OAuth2Auth(BaseModel):
    """
    OAuth2Auth holds all information for client authentication via OAuth2 tokens
    """ # noqa: E501
    client_id_secret: Optional[SecretKeySelector] = Field(default=None, alias="clientIDSecret")
    client_secret_secret: Optional[SecretKeySelector] = Field(default=None, alias="clientSecretSecret")
    endpoint_params: Optional[List[IoArgoprojWorkflowV1alpha1OAuth2EndpointParam]] = Field(default=None, alias="endpointParams")
    scopes: Optional[List[StrictStr]] = None
    token_url_secret: Optional[SecretKeySelector] = Field(default=None, alias="tokenURLSecret")
    __properties: ClassVar[List[str]] = ["clientIDSecret", "clientSecretSecret", "endpointParams", "scopes", "tokenURLSecret"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1OAuth2Auth from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_id_secret
        if self.client_id_secret:
            _dict['clientIDSecret'] = self.client_id_secret.to_dict()
        # override the default output from pydantic by calling `to_dict()` of client_secret_secret
        if self.client_secret_secret:
            _dict['clientSecretSecret'] = self.client_secret_secret.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in endpoint_params (list)
        _items = []
        if self.endpoint_params:
            for _item in self.endpoint_params:
                if _item:
                    _items.append(_item.to_dict())
            _dict['endpointParams'] = _items
        # override the default output from pydantic by calling `to_dict()` of token_url_secret
        if self.token_url_secret:
            _dict['tokenURLSecret'] = self.token_url_secret.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1OAuth2Auth from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "clientIDSecret": SecretKeySelector.from_dict(obj["clientIDSecret"]) if obj.get("clientIDSecret") is not None else None,
            "clientSecretSecret": SecretKeySelector.from_dict(obj["clientSecretSecret"]) if obj.get("clientSecretSecret") is not None else None,
            "endpointParams": [IoArgoprojWorkflowV1alpha1OAuth2EndpointParam.from_dict(_item) for _item in obj["endpointParams"]] if obj.get("endpointParams") is not None else None,
            "scopes": obj.get("scopes"),
            "tokenURLSecret": SecretKeySelector.from_dict(obj["tokenURLSecret"]) if obj.get("tokenURLSecret") is not None else None
        })
        return _obj


