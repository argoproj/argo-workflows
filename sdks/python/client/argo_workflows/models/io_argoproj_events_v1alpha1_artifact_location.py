# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.config_map_key_selector import ConfigMapKeySelector
from argo_workflows.models.io_argoproj_events_v1alpha1_file_artifact import IoArgoprojEventsV1alpha1FileArtifact
from argo_workflows.models.io_argoproj_events_v1alpha1_git_artifact import IoArgoprojEventsV1alpha1GitArtifact
from argo_workflows.models.io_argoproj_events_v1alpha1_resource import IoArgoprojEventsV1alpha1Resource
from argo_workflows.models.io_argoproj_events_v1alpha1_s3_artifact import IoArgoprojEventsV1alpha1S3Artifact
from argo_workflows.models.io_argoproj_events_v1alpha1_url_artifact import IoArgoprojEventsV1alpha1URLArtifact
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojEventsV1alpha1ArtifactLocation(BaseModel):
    """
    IoArgoprojEventsV1alpha1ArtifactLocation
    """ # noqa: E501
    configmap: Optional[ConfigMapKeySelector] = None
    file: Optional[IoArgoprojEventsV1alpha1FileArtifact] = None
    git: Optional[IoArgoprojEventsV1alpha1GitArtifact] = None
    inline: Optional[StrictStr] = None
    resource: Optional[IoArgoprojEventsV1alpha1Resource] = None
    s3: Optional[IoArgoprojEventsV1alpha1S3Artifact] = None
    url: Optional[IoArgoprojEventsV1alpha1URLArtifact] = None
    __properties: ClassVar[List[str]] = ["configmap", "file", "git", "inline", "resource", "s3", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1ArtifactLocation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of configmap
        if self.configmap:
            _dict['configmap'] = self.configmap.to_dict()
        # override the default output from pydantic by calling `to_dict()` of file
        if self.file:
            _dict['file'] = self.file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of git
        if self.git:
            _dict['git'] = self.git.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource
        if self.resource:
            _dict['resource'] = self.resource.to_dict()
        # override the default output from pydantic by calling `to_dict()` of s3
        if self.s3:
            _dict['s3'] = self.s3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of url
        if self.url:
            _dict['url'] = self.url.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1ArtifactLocation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "configmap": ConfigMapKeySelector.from_dict(obj["configmap"]) if obj.get("configmap") is not None else None,
            "file": IoArgoprojEventsV1alpha1FileArtifact.from_dict(obj["file"]) if obj.get("file") is not None else None,
            "git": IoArgoprojEventsV1alpha1GitArtifact.from_dict(obj["git"]) if obj.get("git") is not None else None,
            "inline": obj.get("inline"),
            "resource": IoArgoprojEventsV1alpha1Resource.from_dict(obj["resource"]) if obj.get("resource") is not None else None,
            "s3": IoArgoprojEventsV1alpha1S3Artifact.from_dict(obj["s3"]) if obj.get("s3") is not None else None,
            "url": IoArgoprojEventsV1alpha1URLArtifact.from_dict(obj["url"]) if obj.get("url") is not None else None
        })
        return _obj


