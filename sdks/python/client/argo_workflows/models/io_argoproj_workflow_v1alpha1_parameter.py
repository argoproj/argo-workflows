# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.io_argoproj_workflow_v1alpha1_value_from import IoArgoprojWorkflowV1alpha1ValueFrom
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojWorkflowV1alpha1Parameter(BaseModel):
    """
    Parameter indicate a passed string parameter to a service template with an optional default value
    """ # noqa: E501
    default: Optional[StrictStr] = Field(default=None, description="Default is the default value to use for an input parameter if a value was not supplied")
    description: Optional[StrictStr] = Field(default=None, description="Description is the parameter description")
    enum: Optional[List[StrictStr]] = Field(default=None, description="Enum holds a list of string values to choose from, for the actual value of the parameter")
    global_name: Optional[StrictStr] = Field(default=None, description="GlobalName exports an output parameter to the global scope, making it available as '{{io.argoproj.workflow.v1alpha1.outputs.parameters.XXXX}} and in workflow.status.outputs.parameters", alias="globalName")
    name: StrictStr = Field(description="Name is the parameter name")
    value: Optional[StrictStr] = Field(default=None, description="Value is the literal value to use for the parameter. If specified in the context of an input parameter, the value takes precedence over any passed values")
    value_from: Optional[IoArgoprojWorkflowV1alpha1ValueFrom] = Field(default=None, alias="valueFrom")
    __properties: ClassVar[List[str]] = ["default", "description", "enum", "globalName", "name", "value", "valueFrom"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1Parameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of value_from
        if self.value_from:
            _dict['valueFrom'] = self.value_from.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1Parameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "default": obj.get("default"),
            "description": obj.get("description"),
            "enum": obj.get("enum"),
            "globalName": obj.get("globalName"),
            "name": obj.get("name"),
            "value": obj.get("value"),
            "valueFrom": IoArgoprojWorkflowV1alpha1ValueFrom.from_dict(obj["valueFrom"]) if obj.get("valueFrom") is not None else None
        })
        return _obj


