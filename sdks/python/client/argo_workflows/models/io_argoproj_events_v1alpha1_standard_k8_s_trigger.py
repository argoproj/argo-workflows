# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class IoArgoprojEventsV1alpha1StandardK8STrigger(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'live_object': 'bool',
        'operation': 'str',
        'parameters': 'list[IoArgoprojEventsV1alpha1TriggerParameter]',
        'patch_strategy': 'str',
        'source': 'IoArgoprojEventsV1alpha1ArtifactLocation'
    }

    attribute_map = {
        'live_object': 'liveObject',
        'operation': 'operation',
        'parameters': 'parameters',
        'patch_strategy': 'patchStrategy',
        'source': 'source'
    }

    def __init__(self, live_object=None, operation=None, parameters=None, patch_strategy=None, source=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojEventsV1alpha1StandardK8STrigger - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._live_object = None
        self._operation = None
        self._parameters = None
        self._patch_strategy = None
        self._source = None
        self.discriminator = None

        if live_object is not None:
            self.live_object = live_object
        if operation is not None:
            self.operation = operation
        if parameters is not None:
            self.parameters = parameters
        if patch_strategy is not None:
            self.patch_strategy = patch_strategy
        if source is not None:
            self.source = source

    @property
    def live_object(self):
        """Gets the live_object of this IoArgoprojEventsV1alpha1StandardK8STrigger.  # noqa: E501


        :return: The live_object of this IoArgoprojEventsV1alpha1StandardK8STrigger.  # noqa: E501
        :rtype: bool
        """
        return self._live_object

    @live_object.setter
    def live_object(self, live_object):
        """Sets the live_object of this IoArgoprojEventsV1alpha1StandardK8STrigger.


        :param live_object: The live_object of this IoArgoprojEventsV1alpha1StandardK8STrigger.  # noqa: E501
        :type: bool
        """

        self._live_object = live_object

    @property
    def operation(self):
        """Gets the operation of this IoArgoprojEventsV1alpha1StandardK8STrigger.  # noqa: E501


        :return: The operation of this IoArgoprojEventsV1alpha1StandardK8STrigger.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this IoArgoprojEventsV1alpha1StandardK8STrigger.


        :param operation: The operation of this IoArgoprojEventsV1alpha1StandardK8STrigger.  # noqa: E501
        :type: str
        """

        self._operation = operation

    @property
    def parameters(self):
        """Gets the parameters of this IoArgoprojEventsV1alpha1StandardK8STrigger.  # noqa: E501

        Parameters is the list of parameters that is applied to resolved K8s trigger object.  # noqa: E501

        :return: The parameters of this IoArgoprojEventsV1alpha1StandardK8STrigger.  # noqa: E501
        :rtype: list[IoArgoprojEventsV1alpha1TriggerParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this IoArgoprojEventsV1alpha1StandardK8STrigger.

        Parameters is the list of parameters that is applied to resolved K8s trigger object.  # noqa: E501

        :param parameters: The parameters of this IoArgoprojEventsV1alpha1StandardK8STrigger.  # noqa: E501
        :type: list[IoArgoprojEventsV1alpha1TriggerParameter]
        """

        self._parameters = parameters

    @property
    def patch_strategy(self):
        """Gets the patch_strategy of this IoArgoprojEventsV1alpha1StandardK8STrigger.  # noqa: E501


        :return: The patch_strategy of this IoArgoprojEventsV1alpha1StandardK8STrigger.  # noqa: E501
        :rtype: str
        """
        return self._patch_strategy

    @patch_strategy.setter
    def patch_strategy(self, patch_strategy):
        """Sets the patch_strategy of this IoArgoprojEventsV1alpha1StandardK8STrigger.


        :param patch_strategy: The patch_strategy of this IoArgoprojEventsV1alpha1StandardK8STrigger.  # noqa: E501
        :type: str
        """

        self._patch_strategy = patch_strategy

    @property
    def source(self):
        """Gets the source of this IoArgoprojEventsV1alpha1StandardK8STrigger.  # noqa: E501


        :return: The source of this IoArgoprojEventsV1alpha1StandardK8STrigger.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1ArtifactLocation
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this IoArgoprojEventsV1alpha1StandardK8STrigger.


        :param source: The source of this IoArgoprojEventsV1alpha1StandardK8STrigger.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1ArtifactLocation
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1StandardK8STrigger):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1StandardK8STrigger):
            return True

        return self.to_dict() != other.to_dict()
