# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.io_argoproj_events_v1alpha1_event_persistence import IoArgoprojEventsV1alpha1EventPersistence
from argo_workflows.models.io_argoproj_events_v1alpha1_event_source_filter import IoArgoprojEventsV1alpha1EventSourceFilter
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojEventsV1alpha1CalendarEventSource(BaseModel):
    """
    IoArgoprojEventsV1alpha1CalendarEventSource
    """ # noqa: E501
    exclusion_dates: Optional[List[StrictStr]] = Field(default=None, description="ExclusionDates defines the list of DATE-TIME exceptions for recurring events.", alias="exclusionDates")
    filter: Optional[IoArgoprojEventsV1alpha1EventSourceFilter] = None
    interval: Optional[StrictStr] = None
    metadata: Optional[Dict[str, StrictStr]] = None
    persistence: Optional[IoArgoprojEventsV1alpha1EventPersistence] = None
    schedule: Optional[StrictStr] = None
    timezone: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["exclusionDates", "filter", "interval", "metadata", "persistence", "schedule", "timezone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1CalendarEventSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of persistence
        if self.persistence:
            _dict['persistence'] = self.persistence.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1CalendarEventSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exclusionDates": obj.get("exclusionDates"),
            "filter": IoArgoprojEventsV1alpha1EventSourceFilter.from_dict(obj["filter"]) if obj.get("filter") is not None else None,
            "interval": obj.get("interval"),
            "metadata": obj.get("metadata"),
            "persistence": IoArgoprojEventsV1alpha1EventPersistence.from_dict(obj["persistence"]) if obj.get("persistence") is not None else None,
            "schedule": obj.get("schedule"),
            "timezone": obj.get("timezone")
        })
        return _obj


