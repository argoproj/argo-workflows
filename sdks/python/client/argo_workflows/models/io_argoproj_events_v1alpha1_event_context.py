# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojEventsV1alpha1EventContext(BaseModel):
    """
    IoArgoprojEventsV1alpha1EventContext
    """ # noqa: E501
    datacontenttype: Optional[StrictStr] = Field(default=None, description="DataContentType - A MIME (RFC2046) string describing the media type of `data`.")
    id: Optional[StrictStr] = Field(default=None, description="ID of the event; must be non-empty and unique within the scope of the producer.")
    source: Optional[StrictStr] = Field(default=None, description="Source - A URI describing the event producer.")
    specversion: Optional[StrictStr] = Field(default=None, description="SpecVersion - The version of the CloudEvents specification used by the io.argoproj.workflow.v1alpha1.")
    subject: Optional[StrictStr] = None
    time: Optional[datetime] = Field(default=None, description="Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.")
    type: Optional[StrictStr] = Field(default=None, description="Type - The type of the occurrence which has happened.")
    __properties: ClassVar[List[str]] = ["datacontenttype", "id", "source", "specversion", "subject", "time", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1EventContext from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1EventContext from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "datacontenttype": obj.get("datacontenttype"),
            "id": obj.get("id"),
            "source": obj.get("source"),
            "specversion": obj.get("specversion"),
            "subject": obj.get("subject"),
            "time": obj.get("time"),
            "type": obj.get("type")
        })
        return _obj


