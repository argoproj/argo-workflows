# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class IoArgoprojEventsV1alpha1KafkaEventSource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'connection_backoff': 'IoArgoprojEventsV1alpha1Backoff',
        'consumer_group': 'IoArgoprojEventsV1alpha1KafkaConsumerGroup',
        'json_body': 'bool',
        'limit_events_per_second': 'str',
        'metadata': 'dict(str, str)',
        'partition': 'str',
        'sasl': 'IoArgoprojEventsV1alpha1SASLConfig',
        'tls': 'IoArgoprojEventsV1alpha1TLSConfig',
        'topic': 'str',
        'url': 'str',
        'version': 'str'
    }

    attribute_map = {
        'connection_backoff': 'connectionBackoff',
        'consumer_group': 'consumerGroup',
        'json_body': 'jsonBody',
        'limit_events_per_second': 'limitEventsPerSecond',
        'metadata': 'metadata',
        'partition': 'partition',
        'sasl': 'sasl',
        'tls': 'tls',
        'topic': 'topic',
        'url': 'url',
        'version': 'version'
    }

    def __init__(self, connection_backoff=None, consumer_group=None, json_body=None, limit_events_per_second=None, metadata=None, partition=None, sasl=None, tls=None, topic=None, url=None, version=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojEventsV1alpha1KafkaEventSource - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._connection_backoff = None
        self._consumer_group = None
        self._json_body = None
        self._limit_events_per_second = None
        self._metadata = None
        self._partition = None
        self._sasl = None
        self._tls = None
        self._topic = None
        self._url = None
        self._version = None
        self.discriminator = None

        if connection_backoff is not None:
            self.connection_backoff = connection_backoff
        if consumer_group is not None:
            self.consumer_group = consumer_group
        if json_body is not None:
            self.json_body = json_body
        if limit_events_per_second is not None:
            self.limit_events_per_second = limit_events_per_second
        if metadata is not None:
            self.metadata = metadata
        if partition is not None:
            self.partition = partition
        if sasl is not None:
            self.sasl = sasl
        if tls is not None:
            self.tls = tls
        if topic is not None:
            self.topic = topic
        if url is not None:
            self.url = url
        if version is not None:
            self.version = version

    @property
    def connection_backoff(self):
        """Gets the connection_backoff of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501


        :return: The connection_backoff of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1Backoff
        """
        return self._connection_backoff

    @connection_backoff.setter
    def connection_backoff(self, connection_backoff):
        """Sets the connection_backoff of this IoArgoprojEventsV1alpha1KafkaEventSource.


        :param connection_backoff: The connection_backoff of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1Backoff
        """

        self._connection_backoff = connection_backoff

    @property
    def consumer_group(self):
        """Gets the consumer_group of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501


        :return: The consumer_group of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1KafkaConsumerGroup
        """
        return self._consumer_group

    @consumer_group.setter
    def consumer_group(self, consumer_group):
        """Sets the consumer_group of this IoArgoprojEventsV1alpha1KafkaEventSource.


        :param consumer_group: The consumer_group of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1KafkaConsumerGroup
        """

        self._consumer_group = consumer_group

    @property
    def json_body(self):
        """Gets the json_body of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501


        :return: The json_body of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :rtype: bool
        """
        return self._json_body

    @json_body.setter
    def json_body(self, json_body):
        """Sets the json_body of this IoArgoprojEventsV1alpha1KafkaEventSource.


        :param json_body: The json_body of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :type: bool
        """

        self._json_body = json_body

    @property
    def limit_events_per_second(self):
        """Gets the limit_events_per_second of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501


        :return: The limit_events_per_second of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :rtype: str
        """
        return self._limit_events_per_second

    @limit_events_per_second.setter
    def limit_events_per_second(self, limit_events_per_second):
        """Sets the limit_events_per_second of this IoArgoprojEventsV1alpha1KafkaEventSource.


        :param limit_events_per_second: The limit_events_per_second of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :type: str
        """

        self._limit_events_per_second = limit_events_per_second

    @property
    def metadata(self):
        """Gets the metadata of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501


        :return: The metadata of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this IoArgoprojEventsV1alpha1KafkaEventSource.


        :param metadata: The metadata of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :type: dict(str, str)
        """

        self._metadata = metadata

    @property
    def partition(self):
        """Gets the partition of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501


        :return: The partition of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :rtype: str
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """Sets the partition of this IoArgoprojEventsV1alpha1KafkaEventSource.


        :param partition: The partition of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :type: str
        """

        self._partition = partition

    @property
    def sasl(self):
        """Gets the sasl of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501


        :return: The sasl of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1SASLConfig
        """
        return self._sasl

    @sasl.setter
    def sasl(self, sasl):
        """Sets the sasl of this IoArgoprojEventsV1alpha1KafkaEventSource.


        :param sasl: The sasl of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1SASLConfig
        """

        self._sasl = sasl

    @property
    def tls(self):
        """Gets the tls of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501


        :return: The tls of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :rtype: IoArgoprojEventsV1alpha1TLSConfig
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this IoArgoprojEventsV1alpha1KafkaEventSource.


        :param tls: The tls of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :type: IoArgoprojEventsV1alpha1TLSConfig
        """

        self._tls = tls

    @property
    def topic(self):
        """Gets the topic of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501


        :return: The topic of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this IoArgoprojEventsV1alpha1KafkaEventSource.


        :param topic: The topic of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :type: str
        """

        self._topic = topic

    @property
    def url(self):
        """Gets the url of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501


        :return: The url of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this IoArgoprojEventsV1alpha1KafkaEventSource.


        :param url: The url of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def version(self):
        """Gets the version of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501


        :return: The version of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this IoArgoprojEventsV1alpha1KafkaEventSource.


        :param version: The version of this IoArgoprojEventsV1alpha1KafkaEventSource.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1KafkaEventSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1KafkaEventSource):
            return True

        return self.to_dict() != other.to_dict()
