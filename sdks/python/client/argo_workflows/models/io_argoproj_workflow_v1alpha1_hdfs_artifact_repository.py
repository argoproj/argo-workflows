# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.config_map_key_selector import ConfigMapKeySelector
from argo_workflows.models.secret_key_selector import SecretKeySelector
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojWorkflowV1alpha1HDFSArtifactRepository(BaseModel):
    """
    HDFSArtifactRepository defines the controller configuration for an HDFS artifact repository
    """ # noqa: E501
    addresses: Optional[List[StrictStr]] = Field(default=None, description="Addresses is accessible addresses of HDFS name nodes")
    force: Optional[StrictBool] = Field(default=None, description="Force copies a file forcibly even if it exists")
    hdfs_user: Optional[StrictStr] = Field(default=None, description="HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.", alias="hdfsUser")
    krb_c_cache_secret: Optional[SecretKeySelector] = Field(default=None, alias="krbCCacheSecret")
    krb_config_config_map: Optional[ConfigMapKeySelector] = Field(default=None, alias="krbConfigConfigMap")
    krb_keytab_secret: Optional[SecretKeySelector] = Field(default=None, alias="krbKeytabSecret")
    krb_realm: Optional[StrictStr] = Field(default=None, description="KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.", alias="krbRealm")
    krb_service_principal_name: Optional[StrictStr] = Field(default=None, description="KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.", alias="krbServicePrincipalName")
    krb_username: Optional[StrictStr] = Field(default=None, description="KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.", alias="krbUsername")
    path_format: Optional[StrictStr] = Field(default=None, description="PathFormat is defines the format of path to store a file. Can reference workflow variables", alias="pathFormat")
    __properties: ClassVar[List[str]] = ["addresses", "force", "hdfsUser", "krbCCacheSecret", "krbConfigConfigMap", "krbKeytabSecret", "krbRealm", "krbServicePrincipalName", "krbUsername", "pathFormat"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1HDFSArtifactRepository from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of krb_c_cache_secret
        if self.krb_c_cache_secret:
            _dict['krbCCacheSecret'] = self.krb_c_cache_secret.to_dict()
        # override the default output from pydantic by calling `to_dict()` of krb_config_config_map
        if self.krb_config_config_map:
            _dict['krbConfigConfigMap'] = self.krb_config_config_map.to_dict()
        # override the default output from pydantic by calling `to_dict()` of krb_keytab_secret
        if self.krb_keytab_secret:
            _dict['krbKeytabSecret'] = self.krb_keytab_secret.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1HDFSArtifactRepository from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addresses": obj.get("addresses"),
            "force": obj.get("force"),
            "hdfsUser": obj.get("hdfsUser"),
            "krbCCacheSecret": SecretKeySelector.from_dict(obj["krbCCacheSecret"]) if obj.get("krbCCacheSecret") is not None else None,
            "krbConfigConfigMap": ConfigMapKeySelector.from_dict(obj["krbConfigConfigMap"]) if obj.get("krbConfigConfigMap") is not None else None,
            "krbKeytabSecret": SecretKeySelector.from_dict(obj["krbKeytabSecret"]) if obj.get("krbKeytabSecret") is not None else None,
            "krbRealm": obj.get("krbRealm"),
            "krbServicePrincipalName": obj.get("krbServicePrincipalName"),
            "krbUsername": obj.get("krbUsername"),
            "pathFormat": obj.get("pathFormat")
        })
        return _obj


