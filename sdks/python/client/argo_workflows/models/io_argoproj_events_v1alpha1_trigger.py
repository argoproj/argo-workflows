# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.io_argoproj_events_v1alpha1_backoff import IoArgoprojEventsV1alpha1Backoff
from argo_workflows.models.io_argoproj_events_v1alpha1_rate_limit import IoArgoprojEventsV1alpha1RateLimit
from argo_workflows.models.io_argoproj_events_v1alpha1_trigger_parameter import IoArgoprojEventsV1alpha1TriggerParameter
from argo_workflows.models.io_argoproj_events_v1alpha1_trigger_policy import IoArgoprojEventsV1alpha1TriggerPolicy
from argo_workflows.models.io_argoproj_events_v1alpha1_trigger_template import IoArgoprojEventsV1alpha1TriggerTemplate
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojEventsV1alpha1Trigger(BaseModel):
    """
    IoArgoprojEventsV1alpha1Trigger
    """ # noqa: E501
    at_least_once: Optional[StrictBool] = Field(default=None, alias="atLeastOnce")
    parameters: Optional[List[IoArgoprojEventsV1alpha1TriggerParameter]] = None
    policy: Optional[IoArgoprojEventsV1alpha1TriggerPolicy] = None
    rate_limit: Optional[IoArgoprojEventsV1alpha1RateLimit] = Field(default=None, alias="rateLimit")
    retry_strategy: Optional[IoArgoprojEventsV1alpha1Backoff] = Field(default=None, alias="retryStrategy")
    template: Optional[IoArgoprojEventsV1alpha1TriggerTemplate] = None
    __properties: ClassVar[List[str]] = ["atLeastOnce", "parameters", "policy", "rateLimit", "retryStrategy", "template"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1Trigger from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item in self.parameters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy:
            _dict['policy'] = self.policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rate_limit
        if self.rate_limit:
            _dict['rateLimit'] = self.rate_limit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of retry_strategy
        if self.retry_strategy:
            _dict['retryStrategy'] = self.retry_strategy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of template
        if self.template:
            _dict['template'] = self.template.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1Trigger from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "atLeastOnce": obj.get("atLeastOnce"),
            "parameters": [IoArgoprojEventsV1alpha1TriggerParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "policy": IoArgoprojEventsV1alpha1TriggerPolicy.from_dict(obj["policy"]) if obj.get("policy") is not None else None,
            "rateLimit": IoArgoprojEventsV1alpha1RateLimit.from_dict(obj["rateLimit"]) if obj.get("rateLimit") is not None else None,
            "retryStrategy": IoArgoprojEventsV1alpha1Backoff.from_dict(obj["retryStrategy"]) if obj.get("retryStrategy") is not None else None,
            "template": IoArgoprojEventsV1alpha1TriggerTemplate.from_dict(obj["template"]) if obj.get("template") is not None else None
        })
        return _obj


