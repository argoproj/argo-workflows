# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class SensorLogEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dependency_name': 'str',
        'event_context': 'str',
        'level': 'str',
        'msg': 'str',
        'namespace': 'str',
        'sensor_name': 'str',
        'time': 'datetime',
        'trigger_name': 'str'
    }

    attribute_map = {
        'dependency_name': 'dependencyName',
        'event_context': 'eventContext',
        'level': 'level',
        'msg': 'msg',
        'namespace': 'namespace',
        'sensor_name': 'sensorName',
        'time': 'time',
        'trigger_name': 'triggerName'
    }

    def __init__(self, dependency_name=None, event_context=None, level=None, msg=None, namespace=None, sensor_name=None, time=None, trigger_name=None, local_vars_configuration=None):  # noqa: E501
        """SensorLogEntry - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dependency_name = None
        self._event_context = None
        self._level = None
        self._msg = None
        self._namespace = None
        self._sensor_name = None
        self._time = None
        self._trigger_name = None
        self.discriminator = None

        if dependency_name is not None:
            self.dependency_name = dependency_name
        if event_context is not None:
            self.event_context = event_context
        if level is not None:
            self.level = level
        if msg is not None:
            self.msg = msg
        if namespace is not None:
            self.namespace = namespace
        if sensor_name is not None:
            self.sensor_name = sensor_name
        if time is not None:
            self.time = time
        if trigger_name is not None:
            self.trigger_name = trigger_name

    @property
    def dependency_name(self):
        """Gets the dependency_name of this SensorLogEntry.  # noqa: E501


        :return: The dependency_name of this SensorLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._dependency_name

    @dependency_name.setter
    def dependency_name(self, dependency_name):
        """Sets the dependency_name of this SensorLogEntry.


        :param dependency_name: The dependency_name of this SensorLogEntry.  # noqa: E501
        :type: str
        """

        self._dependency_name = dependency_name

    @property
    def event_context(self):
        """Gets the event_context of this SensorLogEntry.  # noqa: E501


        :return: The event_context of this SensorLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._event_context

    @event_context.setter
    def event_context(self, event_context):
        """Sets the event_context of this SensorLogEntry.


        :param event_context: The event_context of this SensorLogEntry.  # noqa: E501
        :type: str
        """

        self._event_context = event_context

    @property
    def level(self):
        """Gets the level of this SensorLogEntry.  # noqa: E501


        :return: The level of this SensorLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this SensorLogEntry.


        :param level: The level of this SensorLogEntry.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def msg(self):
        """Gets the msg of this SensorLogEntry.  # noqa: E501


        :return: The msg of this SensorLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this SensorLogEntry.


        :param msg: The msg of this SensorLogEntry.  # noqa: E501
        :type: str
        """

        self._msg = msg

    @property
    def namespace(self):
        """Gets the namespace of this SensorLogEntry.  # noqa: E501


        :return: The namespace of this SensorLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this SensorLogEntry.


        :param namespace: The namespace of this SensorLogEntry.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def sensor_name(self):
        """Gets the sensor_name of this SensorLogEntry.  # noqa: E501


        :return: The sensor_name of this SensorLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._sensor_name

    @sensor_name.setter
    def sensor_name(self, sensor_name):
        """Sets the sensor_name of this SensorLogEntry.


        :param sensor_name: The sensor_name of this SensorLogEntry.  # noqa: E501
        :type: str
        """

        self._sensor_name = sensor_name

    @property
    def time(self):
        """Gets the time of this SensorLogEntry.  # noqa: E501

        Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.  # noqa: E501

        :return: The time of this SensorLogEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this SensorLogEntry.

        Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.  # noqa: E501

        :param time: The time of this SensorLogEntry.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def trigger_name(self):
        """Gets the trigger_name of this SensorLogEntry.  # noqa: E501


        :return: The trigger_name of this SensorLogEntry.  # noqa: E501
        :rtype: str
        """
        return self._trigger_name

    @trigger_name.setter
    def trigger_name(self, trigger_name):
        """Sets the trigger_name of this SensorLogEntry.


        :param trigger_name: The trigger_name of this SensorLogEntry.  # noqa: E501
        :type: str
        """

        self._trigger_name = trigger_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SensorLogEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SensorLogEntry):
            return True

        return self.to_dict() != other.to_dict()
