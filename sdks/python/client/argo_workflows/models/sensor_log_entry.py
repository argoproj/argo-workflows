# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SensorLogEntry(BaseModel):
    """
    SensorLogEntry
    """ # noqa: E501
    dependency_name: Optional[StrictStr] = Field(default=None, alias="dependencyName")
    event_context: Optional[StrictStr] = Field(default=None, alias="eventContext")
    level: Optional[StrictStr] = None
    msg: Optional[StrictStr] = None
    namespace: Optional[StrictStr] = None
    sensor_name: Optional[StrictStr] = Field(default=None, alias="sensorName")
    time: Optional[datetime] = Field(default=None, description="Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.")
    trigger_name: Optional[StrictStr] = Field(default=None, alias="triggerName")
    __properties: ClassVar[List[str]] = ["dependencyName", "eventContext", "level", "msg", "namespace", "sensorName", "time", "triggerName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SensorLogEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SensorLogEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dependencyName": obj.get("dependencyName"),
            "eventContext": obj.get("eventContext"),
            "level": obj.get("level"),
            "msg": obj.get("msg"),
            "namespace": obj.get("namespace"),
            "sensorName": obj.get("sensorName"),
            "time": obj.get("time"),
            "triggerName": obj.get("triggerName")
        })
        return _obj


