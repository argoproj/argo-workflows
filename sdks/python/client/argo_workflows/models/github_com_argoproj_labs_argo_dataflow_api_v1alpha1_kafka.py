# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kafka_config': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaConfig',
        'name': 'str',
        'topic': 'str'
    }

    attribute_map = {
        'kafka_config': 'kafkaConfig',
        'name': 'name',
        'topic': 'topic'
    }

    def __init__(self, kafka_config=None, name=None, topic=None, local_vars_configuration=None):  # noqa: E501
        """GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kafka_config = None
        self._name = None
        self._topic = None
        self.discriminator = None

        if kafka_config is not None:
            self.kafka_config = kafka_config
        if name is not None:
            self.name = name
        if topic is not None:
            self.topic = topic

    @property
    def kafka_config(self):
        """Gets the kafka_config of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka.  # noqa: E501


        :return: The kafka_config of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaConfig
        """
        return self._kafka_config

    @kafka_config.setter
    def kafka_config(self, kafka_config):
        """Sets the kafka_config of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka.


        :param kafka_config: The kafka_config of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1KafkaConfig
        """

        self._kafka_config = kafka_config

    @property
    def name(self):
        """Gets the name of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka.  # noqa: E501


        :return: The name of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka.


        :param name: The name of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def topic(self):
        """Gets the topic of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka.  # noqa: E501


        :return: The topic of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka.


        :param topic: The topic of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka.  # noqa: E501
        :type: str
        """

        self._topic = topic

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1Kafka):
            return True

        return self.to_dict() != other.to_dict()
