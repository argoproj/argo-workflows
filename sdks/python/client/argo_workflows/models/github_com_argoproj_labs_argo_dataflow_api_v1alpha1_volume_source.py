# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'abstract_volume_source': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource',
        'concurrency': 'int',
        'poll_period': 'Duration',
        'read_only': 'bool'
    }

    attribute_map = {
        'abstract_volume_source': 'abstractVolumeSource',
        'concurrency': 'concurrency',
        'poll_period': 'pollPeriod',
        'read_only': 'readOnly'
    }

    def __init__(self, abstract_volume_source=None, concurrency=None, poll_period=None, read_only=None, local_vars_configuration=None):  # noqa: E501
        """GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._abstract_volume_source = None
        self._concurrency = None
        self._poll_period = None
        self._read_only = None
        self.discriminator = None

        if abstract_volume_source is not None:
            self.abstract_volume_source = abstract_volume_source
        if concurrency is not None:
            self.concurrency = concurrency
        if poll_period is not None:
            self.poll_period = poll_period
        if read_only is not None:
            self.read_only = read_only

    @property
    def abstract_volume_source(self):
        """Gets the abstract_volume_source of this GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource.  # noqa: E501


        :return: The abstract_volume_source of this GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource
        """
        return self._abstract_volume_source

    @abstract_volume_source.setter
    def abstract_volume_source(self, abstract_volume_source):
        """Sets the abstract_volume_source of this GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource.


        :param abstract_volume_source: The abstract_volume_source of this GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1AbstractVolumeSource
        """

        self._abstract_volume_source = abstract_volume_source

    @property
    def concurrency(self):
        """Gets the concurrency of this GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource.  # noqa: E501


        :return: The concurrency of this GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource.  # noqa: E501
        :rtype: int
        """
        return self._concurrency

    @concurrency.setter
    def concurrency(self, concurrency):
        """Sets the concurrency of this GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource.


        :param concurrency: The concurrency of this GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource.  # noqa: E501
        :type: int
        """

        self._concurrency = concurrency

    @property
    def poll_period(self):
        """Gets the poll_period of this GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource.  # noqa: E501


        :return: The poll_period of this GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource.  # noqa: E501
        :rtype: Duration
        """
        return self._poll_period

    @poll_period.setter
    def poll_period(self, poll_period):
        """Sets the poll_period of this GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource.


        :param poll_period: The poll_period of this GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource.  # noqa: E501
        :type: Duration
        """

        self._poll_period = poll_period

    @property
    def read_only(self):
        """Gets the read_only of this GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource.  # noqa: E501


        :return: The read_only of this GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource.


        :param read_only: The read_only of this GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1VolumeSource):
            return True

        return self.to_dict() != other.to_dict()
