# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from argo_workflows.models.io_argoproj_workflow_v1alpha1_condition import IoArgoprojWorkflowV1alpha1Condition
from argo_workflows.models.object_reference import ObjectReference
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojWorkflowV1alpha1CronWorkflowStatus(BaseModel):
    """
    CronWorkflowStatus is the status of a CronWorkflow
    """ # noqa: E501
    active: List[ObjectReference] = Field(description="Active is a list of active workflows stemming from this CronWorkflow")
    conditions: List[IoArgoprojWorkflowV1alpha1Condition] = Field(description="Conditions is a list of conditions the CronWorkflow may have")
    failed: StrictInt = Field(description="Failed is a counter of how many times a child workflow terminated in failed or errored state")
    last_scheduled_time: datetime = Field(description="Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.", alias="lastScheduledTime")
    phase: StrictStr = Field(description="Phase defines the cron workflow phase. It is changed to Stopped when the stopping condition is achieved which stops new CronWorkflows from running")
    succeeded: StrictInt = Field(description="Succeeded is a counter of how many times the child workflows had success")
    __properties: ClassVar[List[str]] = ["active", "conditions", "failed", "lastScheduledTime", "phase", "succeeded"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1CronWorkflowStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in active (list)
        _items = []
        if self.active:
            for _item in self.active:
                if _item:
                    _items.append(_item.to_dict())
            _dict['active'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item in self.conditions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['conditions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1CronWorkflowStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": [ObjectReference.from_dict(_item) for _item in obj["active"]] if obj.get("active") is not None else None,
            "conditions": [IoArgoprojWorkflowV1alpha1Condition.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "failed": obj.get("failed"),
            "lastScheduledTime": obj.get("lastScheduledTime"),
            "phase": obj.get("phase"),
            "succeeded": obj.get("succeeded")
        })
        return _obj


