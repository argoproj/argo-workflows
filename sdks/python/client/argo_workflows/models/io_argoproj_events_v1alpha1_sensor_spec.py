# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.io_argoproj_events_v1alpha1_event_dependency import IoArgoprojEventsV1alpha1EventDependency
from argo_workflows.models.io_argoproj_events_v1alpha1_template import IoArgoprojEventsV1alpha1Template
from argo_workflows.models.io_argoproj_events_v1alpha1_trigger import IoArgoprojEventsV1alpha1Trigger
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojEventsV1alpha1SensorSpec(BaseModel):
    """
    IoArgoprojEventsV1alpha1SensorSpec
    """ # noqa: E501
    dependencies: Optional[List[IoArgoprojEventsV1alpha1EventDependency]] = Field(default=None, description="Dependencies is a list of the events that this sensor is dependent on.")
    error_on_failed_round: Optional[StrictBool] = Field(default=None, description="ErrorOnFailedRound if set to true, marks sensor state as `error` if the previous trigger round fails. Once sensor state is set to `error`, no further triggers will be processed.", alias="errorOnFailedRound")
    event_bus_name: Optional[StrictStr] = Field(default=None, alias="eventBusName")
    logging_fields: Optional[Dict[str, StrictStr]] = Field(default=None, alias="loggingFields")
    replicas: Optional[StrictInt] = None
    revision_history_limit: Optional[StrictInt] = Field(default=None, alias="revisionHistoryLimit")
    template: Optional[IoArgoprojEventsV1alpha1Template] = None
    triggers: Optional[List[IoArgoprojEventsV1alpha1Trigger]] = Field(default=None, description="Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.")
    __properties: ClassVar[List[str]] = ["dependencies", "errorOnFailedRound", "eventBusName", "loggingFields", "replicas", "revisionHistoryLimit", "template", "triggers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1SensorSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in dependencies (list)
        _items = []
        if self.dependencies:
            for _item in self.dependencies:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dependencies'] = _items
        # override the default output from pydantic by calling `to_dict()` of template
        if self.template:
            _dict['template'] = self.template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in triggers (list)
        _items = []
        if self.triggers:
            for _item in self.triggers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['triggers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1SensorSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dependencies": [IoArgoprojEventsV1alpha1EventDependency.from_dict(_item) for _item in obj["dependencies"]] if obj.get("dependencies") is not None else None,
            "errorOnFailedRound": obj.get("errorOnFailedRound"),
            "eventBusName": obj.get("eventBusName"),
            "loggingFields": obj.get("loggingFields"),
            "replicas": obj.get("replicas"),
            "revisionHistoryLimit": obj.get("revisionHistoryLimit"),
            "template": IoArgoprojEventsV1alpha1Template.from_dict(obj["template"]) if obj.get("template") is not None else None,
            "triggers": [IoArgoprojEventsV1alpha1Trigger.from_dict(_item) for _item in obj["triggers"]] if obj.get("triggers") is not None else None
        })
        return _obj


