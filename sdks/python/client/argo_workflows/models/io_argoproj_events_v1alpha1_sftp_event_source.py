# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.io_argoproj_events_v1alpha1_event_source_filter import IoArgoprojEventsV1alpha1EventSourceFilter
from argo_workflows.models.io_argoproj_events_v1alpha1_watch_path_config import IoArgoprojEventsV1alpha1WatchPathConfig
from argo_workflows.models.secret_key_selector import SecretKeySelector
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojEventsV1alpha1SFTPEventSource(BaseModel):
    """
    SFTPEventSource describes an event-source for sftp related events.
    """ # noqa: E501
    address: Optional[SecretKeySelector] = None
    event_type: Optional[StrictStr] = Field(default=None, alias="eventType")
    filter: Optional[IoArgoprojEventsV1alpha1EventSourceFilter] = None
    metadata: Optional[Dict[str, StrictStr]] = None
    password: Optional[SecretKeySelector] = None
    poll_interval_duration: Optional[StrictStr] = Field(default=None, alias="pollIntervalDuration")
    ssh_key_secret: Optional[SecretKeySelector] = Field(default=None, alias="sshKeySecret")
    username: Optional[SecretKeySelector] = None
    watch_path_config: Optional[IoArgoprojEventsV1alpha1WatchPathConfig] = Field(default=None, alias="watchPathConfig")
    __properties: ClassVar[List[str]] = ["address", "eventType", "filter", "metadata", "password", "pollIntervalDuration", "sshKeySecret", "username", "watchPathConfig"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1SFTPEventSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of password
        if self.password:
            _dict['password'] = self.password.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssh_key_secret
        if self.ssh_key_secret:
            _dict['sshKeySecret'] = self.ssh_key_secret.to_dict()
        # override the default output from pydantic by calling `to_dict()` of username
        if self.username:
            _dict['username'] = self.username.to_dict()
        # override the default output from pydantic by calling `to_dict()` of watch_path_config
        if self.watch_path_config:
            _dict['watchPathConfig'] = self.watch_path_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1SFTPEventSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": SecretKeySelector.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "eventType": obj.get("eventType"),
            "filter": IoArgoprojEventsV1alpha1EventSourceFilter.from_dict(obj["filter"]) if obj.get("filter") is not None else None,
            "metadata": obj.get("metadata"),
            "password": SecretKeySelector.from_dict(obj["password"]) if obj.get("password") is not None else None,
            "pollIntervalDuration": obj.get("pollIntervalDuration"),
            "sshKeySecret": SecretKeySelector.from_dict(obj["sshKeySecret"]) if obj.get("sshKeySecret") is not None else None,
            "username": SecretKeySelector.from_dict(obj["username"]) if obj.get("username") is not None else None,
            "watchPathConfig": IoArgoprojEventsV1alpha1WatchPathConfig.from_dict(obj["watchPathConfig"]) if obj.get("watchPathConfig") is not None else None
        })
        return _obj


