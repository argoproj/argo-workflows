# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class GithubComArgoprojLabsArgoDataflowApiV1alpha1Container(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'args': 'list[str]',
        'command': 'list[str]',
        'env': 'list[EnvVar]',
        'image': 'str',
        '_in': 'GithubComArgoprojLabsArgoDataflowApiV1alpha1Interface',
        'resources': 'ResourceRequirements',
        'volume_mounts': 'list[VolumeMount]'
    }

    attribute_map = {
        'args': 'args',
        'command': 'command',
        'env': 'env',
        'image': 'image',
        '_in': 'in',
        'resources': 'resources',
        'volume_mounts': 'volumeMounts'
    }

    def __init__(self, args=None, command=None, env=None, image=None, _in=None, resources=None, volume_mounts=None, local_vars_configuration=None):  # noqa: E501
        """GithubComArgoprojLabsArgoDataflowApiV1alpha1Container - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._args = None
        self._command = None
        self._env = None
        self._image = None
        self.__in = None
        self._resources = None
        self._volume_mounts = None
        self.discriminator = None

        if args is not None:
            self.args = args
        if command is not None:
            self.command = command
        if env is not None:
            self.env = env
        if image is not None:
            self.image = image
        if _in is not None:
            self._in = _in
        if resources is not None:
            self.resources = resources
        if volume_mounts is not None:
            self.volume_mounts = volume_mounts

    @property
    def args(self):
        """Gets the args of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501


        :return: The args of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501
        :rtype: list[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.


        :param args: The args of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501
        :type: list[str]
        """

        self._args = args

    @property
    def command(self):
        """Gets the command of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501


        :return: The command of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501
        :rtype: list[str]
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.


        :param command: The command of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501
        :type: list[str]
        """

        self._command = command

    @property
    def env(self):
        """Gets the env of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501


        :return: The env of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501
        :rtype: list[EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.


        :param env: The env of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501
        :type: list[EnvVar]
        """

        self._env = env

    @property
    def image(self):
        """Gets the image of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501


        :return: The image of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.


        :param image: The image of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def _in(self):
        """Gets the _in of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501


        :return: The _in of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501
        :rtype: GithubComArgoprojLabsArgoDataflowApiV1alpha1Interface
        """
        return self.__in

    @_in.setter
    def _in(self, _in):
        """Sets the _in of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.


        :param _in: The _in of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501
        :type: GithubComArgoprojLabsArgoDataflowApiV1alpha1Interface
        """

        self.__in = _in

    @property
    def resources(self):
        """Gets the resources of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501


        :return: The resources of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501
        :rtype: ResourceRequirements
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.


        :param resources: The resources of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501
        :type: ResourceRequirements
        """

        self._resources = resources

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501


        :return: The volume_mounts of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501
        :rtype: list[VolumeMount]
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.


        :param volume_mounts: The volume_mounts of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Container.  # noqa: E501
        :type: list[VolumeMount]
        """

        self._volume_mounts = volume_mounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1Container):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1Container):
            return True

        return self.to_dict() != other.to_dict()
