# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.aws_elastic_block_store_volume_source import AWSElasticBlockStoreVolumeSource
from argo_workflows.models.azure_disk_volume_source import AzureDiskVolumeSource
from argo_workflows.models.azure_file_volume_source import AzureFileVolumeSource
from argo_workflows.models.ceph_fs_volume_source import CephFSVolumeSource
from argo_workflows.models.cinder_volume_source import CinderVolumeSource
from argo_workflows.models.config_map_volume_source import ConfigMapVolumeSource
from argo_workflows.models.csi_volume_source import CSIVolumeSource
from argo_workflows.models.downward_api_volume_source import DownwardAPIVolumeSource
from argo_workflows.models.empty_dir_volume_source import EmptyDirVolumeSource
from argo_workflows.models.ephemeral_volume_source import EphemeralVolumeSource
from argo_workflows.models.fc_volume_source import FCVolumeSource
from argo_workflows.models.flex_volume_source import FlexVolumeSource
from argo_workflows.models.flocker_volume_source import FlockerVolumeSource
from argo_workflows.models.gce_persistent_disk_volume_source import GCEPersistentDiskVolumeSource
from argo_workflows.models.git_repo_volume_source import GitRepoVolumeSource
from argo_workflows.models.glusterfs_volume_source import GlusterfsVolumeSource
from argo_workflows.models.host_path_volume_source import HostPathVolumeSource
from argo_workflows.models.iscsi_volume_source import ISCSIVolumeSource
from argo_workflows.models.nfs_volume_source import NFSVolumeSource
from argo_workflows.models.persistent_volume_claim_volume_source import PersistentVolumeClaimVolumeSource
from argo_workflows.models.photon_persistent_disk_volume_source import PhotonPersistentDiskVolumeSource
from argo_workflows.models.portworx_volume_source import PortworxVolumeSource
from argo_workflows.models.projected_volume_source import ProjectedVolumeSource
from argo_workflows.models.quobyte_volume_source import QuobyteVolumeSource
from argo_workflows.models.rbd_volume_source import RBDVolumeSource
from argo_workflows.models.scale_io_volume_source import ScaleIOVolumeSource
from argo_workflows.models.secret_volume_source import SecretVolumeSource
from argo_workflows.models.storage_os_volume_source import StorageOSVolumeSource
from argo_workflows.models.vsphere_virtual_disk_volume_source import VsphereVirtualDiskVolumeSource
from typing import Optional, Set
from typing_extensions import Self

class Volume(BaseModel):
    """
    Volume represents a named volume in a pod that may be accessed by any container in the pod.
    """ # noqa: E501
    aws_elastic_block_store: Optional[AWSElasticBlockStoreVolumeSource] = Field(default=None, alias="awsElasticBlockStore")
    azure_disk: Optional[AzureDiskVolumeSource] = Field(default=None, alias="azureDisk")
    azure_file: Optional[AzureFileVolumeSource] = Field(default=None, alias="azureFile")
    cephfs: Optional[CephFSVolumeSource] = None
    cinder: Optional[CinderVolumeSource] = None
    config_map: Optional[ConfigMapVolumeSource] = Field(default=None, alias="configMap")
    csi: Optional[CSIVolumeSource] = None
    downward_api: Optional[DownwardAPIVolumeSource] = Field(default=None, alias="downwardAPI")
    empty_dir: Optional[EmptyDirVolumeSource] = Field(default=None, alias="emptyDir")
    ephemeral: Optional[EphemeralVolumeSource] = None
    fc: Optional[FCVolumeSource] = None
    flex_volume: Optional[FlexVolumeSource] = Field(default=None, alias="flexVolume")
    flocker: Optional[FlockerVolumeSource] = None
    gce_persistent_disk: Optional[GCEPersistentDiskVolumeSource] = Field(default=None, alias="gcePersistentDisk")
    git_repo: Optional[GitRepoVolumeSource] = Field(default=None, alias="gitRepo")
    glusterfs: Optional[GlusterfsVolumeSource] = None
    host_path: Optional[HostPathVolumeSource] = Field(default=None, alias="hostPath")
    iscsi: Optional[ISCSIVolumeSource] = None
    name: StrictStr = Field(description="Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names")
    nfs: Optional[NFSVolumeSource] = None
    persistent_volume_claim: Optional[PersistentVolumeClaimVolumeSource] = Field(default=None, alias="persistentVolumeClaim")
    photon_persistent_disk: Optional[PhotonPersistentDiskVolumeSource] = Field(default=None, alias="photonPersistentDisk")
    portworx_volume: Optional[PortworxVolumeSource] = Field(default=None, alias="portworxVolume")
    projected: Optional[ProjectedVolumeSource] = None
    quobyte: Optional[QuobyteVolumeSource] = None
    rbd: Optional[RBDVolumeSource] = None
    scale_io: Optional[ScaleIOVolumeSource] = Field(default=None, alias="scaleIO")
    secret: Optional[SecretVolumeSource] = None
    storageos: Optional[StorageOSVolumeSource] = None
    vsphere_volume: Optional[VsphereVirtualDiskVolumeSource] = Field(default=None, alias="vsphereVolume")
    __properties: ClassVar[List[str]] = ["awsElasticBlockStore", "azureDisk", "azureFile", "cephfs", "cinder", "configMap", "csi", "downwardAPI", "emptyDir", "ephemeral", "fc", "flexVolume", "flocker", "gcePersistentDisk", "gitRepo", "glusterfs", "hostPath", "iscsi", "name", "nfs", "persistentVolumeClaim", "photonPersistentDisk", "portworxVolume", "projected", "quobyte", "rbd", "scaleIO", "secret", "storageos", "vsphereVolume"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Volume from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aws_elastic_block_store
        if self.aws_elastic_block_store:
            _dict['awsElasticBlockStore'] = self.aws_elastic_block_store.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_disk
        if self.azure_disk:
            _dict['azureDisk'] = self.azure_disk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_file
        if self.azure_file:
            _dict['azureFile'] = self.azure_file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cephfs
        if self.cephfs:
            _dict['cephfs'] = self.cephfs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cinder
        if self.cinder:
            _dict['cinder'] = self.cinder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config_map
        if self.config_map:
            _dict['configMap'] = self.config_map.to_dict()
        # override the default output from pydantic by calling `to_dict()` of csi
        if self.csi:
            _dict['csi'] = self.csi.to_dict()
        # override the default output from pydantic by calling `to_dict()` of downward_api
        if self.downward_api:
            _dict['downwardAPI'] = self.downward_api.to_dict()
        # override the default output from pydantic by calling `to_dict()` of empty_dir
        if self.empty_dir:
            _dict['emptyDir'] = self.empty_dir.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ephemeral
        if self.ephemeral:
            _dict['ephemeral'] = self.ephemeral.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fc
        if self.fc:
            _dict['fc'] = self.fc.to_dict()
        # override the default output from pydantic by calling `to_dict()` of flex_volume
        if self.flex_volume:
            _dict['flexVolume'] = self.flex_volume.to_dict()
        # override the default output from pydantic by calling `to_dict()` of flocker
        if self.flocker:
            _dict['flocker'] = self.flocker.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gce_persistent_disk
        if self.gce_persistent_disk:
            _dict['gcePersistentDisk'] = self.gce_persistent_disk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of git_repo
        if self.git_repo:
            _dict['gitRepo'] = self.git_repo.to_dict()
        # override the default output from pydantic by calling `to_dict()` of glusterfs
        if self.glusterfs:
            _dict['glusterfs'] = self.glusterfs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of host_path
        if self.host_path:
            _dict['hostPath'] = self.host_path.to_dict()
        # override the default output from pydantic by calling `to_dict()` of iscsi
        if self.iscsi:
            _dict['iscsi'] = self.iscsi.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nfs
        if self.nfs:
            _dict['nfs'] = self.nfs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of persistent_volume_claim
        if self.persistent_volume_claim:
            _dict['persistentVolumeClaim'] = self.persistent_volume_claim.to_dict()
        # override the default output from pydantic by calling `to_dict()` of photon_persistent_disk
        if self.photon_persistent_disk:
            _dict['photonPersistentDisk'] = self.photon_persistent_disk.to_dict()
        # override the default output from pydantic by calling `to_dict()` of portworx_volume
        if self.portworx_volume:
            _dict['portworxVolume'] = self.portworx_volume.to_dict()
        # override the default output from pydantic by calling `to_dict()` of projected
        if self.projected:
            _dict['projected'] = self.projected.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quobyte
        if self.quobyte:
            _dict['quobyte'] = self.quobyte.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rbd
        if self.rbd:
            _dict['rbd'] = self.rbd.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scale_io
        if self.scale_io:
            _dict['scaleIO'] = self.scale_io.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secret
        if self.secret:
            _dict['secret'] = self.secret.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storageos
        if self.storageos:
            _dict['storageos'] = self.storageos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vsphere_volume
        if self.vsphere_volume:
            _dict['vsphereVolume'] = self.vsphere_volume.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Volume from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "awsElasticBlockStore": AWSElasticBlockStoreVolumeSource.from_dict(obj["awsElasticBlockStore"]) if obj.get("awsElasticBlockStore") is not None else None,
            "azureDisk": AzureDiskVolumeSource.from_dict(obj["azureDisk"]) if obj.get("azureDisk") is not None else None,
            "azureFile": AzureFileVolumeSource.from_dict(obj["azureFile"]) if obj.get("azureFile") is not None else None,
            "cephfs": CephFSVolumeSource.from_dict(obj["cephfs"]) if obj.get("cephfs") is not None else None,
            "cinder": CinderVolumeSource.from_dict(obj["cinder"]) if obj.get("cinder") is not None else None,
            "configMap": ConfigMapVolumeSource.from_dict(obj["configMap"]) if obj.get("configMap") is not None else None,
            "csi": CSIVolumeSource.from_dict(obj["csi"]) if obj.get("csi") is not None else None,
            "downwardAPI": DownwardAPIVolumeSource.from_dict(obj["downwardAPI"]) if obj.get("downwardAPI") is not None else None,
            "emptyDir": EmptyDirVolumeSource.from_dict(obj["emptyDir"]) if obj.get("emptyDir") is not None else None,
            "ephemeral": EphemeralVolumeSource.from_dict(obj["ephemeral"]) if obj.get("ephemeral") is not None else None,
            "fc": FCVolumeSource.from_dict(obj["fc"]) if obj.get("fc") is not None else None,
            "flexVolume": FlexVolumeSource.from_dict(obj["flexVolume"]) if obj.get("flexVolume") is not None else None,
            "flocker": FlockerVolumeSource.from_dict(obj["flocker"]) if obj.get("flocker") is not None else None,
            "gcePersistentDisk": GCEPersistentDiskVolumeSource.from_dict(obj["gcePersistentDisk"]) if obj.get("gcePersistentDisk") is not None else None,
            "gitRepo": GitRepoVolumeSource.from_dict(obj["gitRepo"]) if obj.get("gitRepo") is not None else None,
            "glusterfs": GlusterfsVolumeSource.from_dict(obj["glusterfs"]) if obj.get("glusterfs") is not None else None,
            "hostPath": HostPathVolumeSource.from_dict(obj["hostPath"]) if obj.get("hostPath") is not None else None,
            "iscsi": ISCSIVolumeSource.from_dict(obj["iscsi"]) if obj.get("iscsi") is not None else None,
            "name": obj.get("name"),
            "nfs": NFSVolumeSource.from_dict(obj["nfs"]) if obj.get("nfs") is not None else None,
            "persistentVolumeClaim": PersistentVolumeClaimVolumeSource.from_dict(obj["persistentVolumeClaim"]) if obj.get("persistentVolumeClaim") is not None else None,
            "photonPersistentDisk": PhotonPersistentDiskVolumeSource.from_dict(obj["photonPersistentDisk"]) if obj.get("photonPersistentDisk") is not None else None,
            "portworxVolume": PortworxVolumeSource.from_dict(obj["portworxVolume"]) if obj.get("portworxVolume") is not None else None,
            "projected": ProjectedVolumeSource.from_dict(obj["projected"]) if obj.get("projected") is not None else None,
            "quobyte": QuobyteVolumeSource.from_dict(obj["quobyte"]) if obj.get("quobyte") is not None else None,
            "rbd": RBDVolumeSource.from_dict(obj["rbd"]) if obj.get("rbd") is not None else None,
            "scaleIO": ScaleIOVolumeSource.from_dict(obj["scaleIO"]) if obj.get("scaleIO") is not None else None,
            "secret": SecretVolumeSource.from_dict(obj["secret"]) if obj.get("secret") is not None else None,
            "storageos": StorageOSVolumeSource.from_dict(obj["storageos"]) if obj.get("storageos") is not None else None,
            "vsphereVolume": VsphereVirtualDiskVolumeSource.from_dict(obj["vsphereVolume"]) if obj.get("vsphereVolume") is not None else None
        })
        return _obj


