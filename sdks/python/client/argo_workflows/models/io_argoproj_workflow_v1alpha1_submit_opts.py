# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.owner_reference import OwnerReference
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojWorkflowV1alpha1SubmitOpts(BaseModel):
    """
    SubmitOpts are workflow submission options
    """ # noqa: E501
    annotations: Optional[StrictStr] = Field(default=None, description="Annotations adds to metadata.labels")
    dry_run: Optional[StrictBool] = Field(default=None, description="DryRun validates the workflow on the client-side without creating it. This option is not supported in API", alias="dryRun")
    entry_point: Optional[StrictStr] = Field(default=None, description="Entrypoint overrides spec.entrypoint", alias="entryPoint")
    generate_name: Optional[StrictStr] = Field(default=None, description="GenerateName overrides metadata.generateName", alias="generateName")
    labels: Optional[StrictStr] = Field(default=None, description="Labels adds to metadata.labels")
    name: Optional[StrictStr] = Field(default=None, description="Name overrides metadata.name")
    owner_reference: Optional[OwnerReference] = Field(default=None, alias="ownerReference")
    parameters: Optional[List[StrictStr]] = Field(default=None, description="Parameters passes input parameters to workflow")
    pod_priority_class_name: Optional[StrictStr] = Field(default=None, description="Set the podPriorityClassName of the workflow", alias="podPriorityClassName")
    priority: Optional[StrictInt] = Field(default=None, description="Priority is used if controller is configured to process limited number of workflows in parallel, higher priority workflows are processed first.")
    server_dry_run: Optional[StrictBool] = Field(default=None, description="ServerDryRun validates the workflow on the server-side without creating it", alias="serverDryRun")
    service_account: Optional[StrictStr] = Field(default=None, description="ServiceAccount runs all pods in the workflow using specified ServiceAccount.", alias="serviceAccount")
    __properties: ClassVar[List[str]] = ["annotations", "dryRun", "entryPoint", "generateName", "labels", "name", "ownerReference", "parameters", "podPriorityClassName", "priority", "serverDryRun", "serviceAccount"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1SubmitOpts from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner_reference
        if self.owner_reference:
            _dict['ownerReference'] = self.owner_reference.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojWorkflowV1alpha1SubmitOpts from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "annotations": obj.get("annotations"),
            "dryRun": obj.get("dryRun"),
            "entryPoint": obj.get("entryPoint"),
            "generateName": obj.get("generateName"),
            "labels": obj.get("labels"),
            "name": obj.get("name"),
            "ownerReference": OwnerReference.from_dict(obj["ownerReference"]) if obj.get("ownerReference") is not None else None,
            "parameters": obj.get("parameters"),
            "podPriorityClassName": obj.get("podPriorityClassName"),
            "priority": obj.get("priority"),
            "serverDryRun": obj.get("serverDryRun"),
            "serviceAccount": obj.get("serviceAccount")
        })
        return _obj


