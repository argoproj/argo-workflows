# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'conditions': 'list[Condition]',
        'last_updated': 'datetime',
        'message': 'str',
        'phase': 'str'
    }

    attribute_map = {
        'conditions': 'conditions',
        'last_updated': 'lastUpdated',
        'message': 'message',
        'phase': 'phase'
    }

    def __init__(self, conditions=None, last_updated=None, message=None, phase=None, local_vars_configuration=None):  # noqa: E501
        """GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._conditions = None
        self._last_updated = None
        self._message = None
        self._phase = None
        self.discriminator = None

        if conditions is not None:
            self.conditions = conditions
        if last_updated is not None:
            self.last_updated = last_updated
        if message is not None:
            self.message = message
        if phase is not None:
            self.phase = phase

    @property
    def conditions(self):
        """Gets the conditions of this GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus.  # noqa: E501


        :return: The conditions of this GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus.  # noqa: E501
        :rtype: list[Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus.


        :param conditions: The conditions of this GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus.  # noqa: E501
        :type: list[Condition]
        """

        self._conditions = conditions

    @property
    def last_updated(self):
        """Gets the last_updated of this GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus.  # noqa: E501

        Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.  # noqa: E501

        :return: The last_updated of this GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus.

        Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.  # noqa: E501

        :param last_updated: The last_updated of this GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def message(self):
        """Gets the message of this GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus.  # noqa: E501


        :return: The message of this GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus.


        :param message: The message of this GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def phase(self):
        """Gets the phase of this GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus.  # noqa: E501


        :return: The phase of this GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus.


        :param phase: The phase of this GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus.  # noqa: E501
        :type: str
        """

        self._phase = phase

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1PipelineStatus):
            return True

        return self.to_dict() != other.to_dict()
