# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class IoArgoprojEventsV1alpha1AzureEventHubsTrigger(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fqdn': 'str',
        'hub_name': 'str',
        'parameters': 'list[IoArgoprojEventsV1alpha1TriggerParameter]',
        'payload': 'list[IoArgoprojEventsV1alpha1TriggerParameter]',
        'shared_access_key': 'SecretKeySelector',
        'shared_access_key_name': 'SecretKeySelector'
    }

    attribute_map = {
        'fqdn': 'fqdn',
        'hub_name': 'hubName',
        'parameters': 'parameters',
        'payload': 'payload',
        'shared_access_key': 'sharedAccessKey',
        'shared_access_key_name': 'sharedAccessKeyName'
    }

    def __init__(self, fqdn=None, hub_name=None, parameters=None, payload=None, shared_access_key=None, shared_access_key_name=None, local_vars_configuration=None):  # noqa: E501
        """IoArgoprojEventsV1alpha1AzureEventHubsTrigger - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._fqdn = None
        self._hub_name = None
        self._parameters = None
        self._payload = None
        self._shared_access_key = None
        self._shared_access_key_name = None
        self.discriminator = None

        if fqdn is not None:
            self.fqdn = fqdn
        if hub_name is not None:
            self.hub_name = hub_name
        if parameters is not None:
            self.parameters = parameters
        if payload is not None:
            self.payload = payload
        if shared_access_key is not None:
            self.shared_access_key = shared_access_key
        if shared_access_key_name is not None:
            self.shared_access_key_name = shared_access_key_name

    @property
    def fqdn(self):
        """Gets the fqdn of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501


        :return: The fqdn of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.


        :param fqdn: The fqdn of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501
        :type: str
        """

        self._fqdn = fqdn

    @property
    def hub_name(self):
        """Gets the hub_name of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501


        :return: The hub_name of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501
        :rtype: str
        """
        return self._hub_name

    @hub_name.setter
    def hub_name(self, hub_name):
        """Sets the hub_name of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.


        :param hub_name: The hub_name of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501
        :type: str
        """

        self._hub_name = hub_name

    @property
    def parameters(self):
        """Gets the parameters of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501


        :return: The parameters of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501
        :rtype: list[IoArgoprojEventsV1alpha1TriggerParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.


        :param parameters: The parameters of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501
        :type: list[IoArgoprojEventsV1alpha1TriggerParameter]
        """

        self._parameters = parameters

    @property
    def payload(self):
        """Gets the payload of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501

        Payload is the list of key-value extracted from an event payload to construct the request payload.  # noqa: E501

        :return: The payload of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501
        :rtype: list[IoArgoprojEventsV1alpha1TriggerParameter]
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.

        Payload is the list of key-value extracted from an event payload to construct the request payload.  # noqa: E501

        :param payload: The payload of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501
        :type: list[IoArgoprojEventsV1alpha1TriggerParameter]
        """

        self._payload = payload

    @property
    def shared_access_key(self):
        """Gets the shared_access_key of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501


        :return: The shared_access_key of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501
        :rtype: SecretKeySelector
        """
        return self._shared_access_key

    @shared_access_key.setter
    def shared_access_key(self, shared_access_key):
        """Sets the shared_access_key of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.


        :param shared_access_key: The shared_access_key of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501
        :type: SecretKeySelector
        """

        self._shared_access_key = shared_access_key

    @property
    def shared_access_key_name(self):
        """Gets the shared_access_key_name of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501


        :return: The shared_access_key_name of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501
        :rtype: SecretKeySelector
        """
        return self._shared_access_key_name

    @shared_access_key_name.setter
    def shared_access_key_name(self, shared_access_key_name):
        """Sets the shared_access_key_name of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.


        :param shared_access_key_name: The shared_access_key_name of this IoArgoprojEventsV1alpha1AzureEventHubsTrigger.  # noqa: E501
        :type: SecretKeySelector
        """

        self._shared_access_key_name = shared_access_key_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1AzureEventHubsTrigger):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IoArgoprojEventsV1alpha1AzureEventHubsTrigger):
            return True

        return self.to_dict() != other.to_dict()
