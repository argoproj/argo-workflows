# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.io_argoproj_events_v1alpha1_event_source_filter import IoArgoprojEventsV1alpha1EventSourceFilter
from argo_workflows.models.io_argoproj_events_v1alpha1_github_app_creds import IoArgoprojEventsV1alpha1GithubAppCreds
from argo_workflows.models.io_argoproj_events_v1alpha1_owned_repositories import IoArgoprojEventsV1alpha1OwnedRepositories
from argo_workflows.models.io_argoproj_events_v1alpha1_webhook_context import IoArgoprojEventsV1alpha1WebhookContext
from argo_workflows.models.secret_key_selector import SecretKeySelector
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojEventsV1alpha1GithubEventSource(BaseModel):
    """
    IoArgoprojEventsV1alpha1GithubEventSource
    """ # noqa: E501
    active: Optional[StrictBool] = None
    api_token: Optional[SecretKeySelector] = Field(default=None, alias="apiToken")
    content_type: Optional[StrictStr] = Field(default=None, alias="contentType")
    delete_hook_on_finish: Optional[StrictBool] = Field(default=None, alias="deleteHookOnFinish")
    events: Optional[List[StrictStr]] = None
    filter: Optional[IoArgoprojEventsV1alpha1EventSourceFilter] = None
    github_app: Optional[IoArgoprojEventsV1alpha1GithubAppCreds] = Field(default=None, alias="githubApp")
    github_base_url: Optional[StrictStr] = Field(default=None, alias="githubBaseURL")
    github_upload_url: Optional[StrictStr] = Field(default=None, alias="githubUploadURL")
    id: Optional[StrictStr] = None
    insecure: Optional[StrictBool] = None
    metadata: Optional[Dict[str, StrictStr]] = None
    organizations: Optional[List[StrictStr]] = Field(default=None, description="Organizations holds the names of organizations (used for organization level webhooks). Not required if Repositories is set.")
    owner: Optional[StrictStr] = None
    repositories: Optional[List[IoArgoprojEventsV1alpha1OwnedRepositories]] = Field(default=None, description="Repositories holds the information of repositories, which uses repo owner as the key, and list of repo names as the value. Not required if Organizations is set.")
    repository: Optional[StrictStr] = None
    webhook: Optional[IoArgoprojEventsV1alpha1WebhookContext] = None
    webhook_secret: Optional[SecretKeySelector] = Field(default=None, alias="webhookSecret")
    __properties: ClassVar[List[str]] = ["active", "apiToken", "contentType", "deleteHookOnFinish", "events", "filter", "githubApp", "githubBaseURL", "githubUploadURL", "id", "insecure", "metadata", "organizations", "owner", "repositories", "repository", "webhook", "webhookSecret"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1GithubEventSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of api_token
        if self.api_token:
            _dict['apiToken'] = self.api_token.to_dict()
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of github_app
        if self.github_app:
            _dict['githubApp'] = self.github_app.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in repositories (list)
        _items = []
        if self.repositories:
            for _item in self.repositories:
                if _item:
                    _items.append(_item.to_dict())
            _dict['repositories'] = _items
        # override the default output from pydantic by calling `to_dict()` of webhook
        if self.webhook:
            _dict['webhook'] = self.webhook.to_dict()
        # override the default output from pydantic by calling `to_dict()` of webhook_secret
        if self.webhook_secret:
            _dict['webhookSecret'] = self.webhook_secret.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1GithubEventSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active": obj.get("active"),
            "apiToken": SecretKeySelector.from_dict(obj["apiToken"]) if obj.get("apiToken") is not None else None,
            "contentType": obj.get("contentType"),
            "deleteHookOnFinish": obj.get("deleteHookOnFinish"),
            "events": obj.get("events"),
            "filter": IoArgoprojEventsV1alpha1EventSourceFilter.from_dict(obj["filter"]) if obj.get("filter") is not None else None,
            "githubApp": IoArgoprojEventsV1alpha1GithubAppCreds.from_dict(obj["githubApp"]) if obj.get("githubApp") is not None else None,
            "githubBaseURL": obj.get("githubBaseURL"),
            "githubUploadURL": obj.get("githubUploadURL"),
            "id": obj.get("id"),
            "insecure": obj.get("insecure"),
            "metadata": obj.get("metadata"),
            "organizations": obj.get("organizations"),
            "owner": obj.get("owner"),
            "repositories": [IoArgoprojEventsV1alpha1OwnedRepositories.from_dict(_item) for _item in obj["repositories"]] if obj.get("repositories") is not None else None,
            "repository": obj.get("repository"),
            "webhook": IoArgoprojEventsV1alpha1WebhookContext.from_dict(obj["webhook"]) if obj.get("webhook") is not None else None,
            "webhookSecret": SecretKeySelector.from_dict(obj["webhookSecret"]) if obj.get("webhookSecret") is not None else None
        })
        return _obj


