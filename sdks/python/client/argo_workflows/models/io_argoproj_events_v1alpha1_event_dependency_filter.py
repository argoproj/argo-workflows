# coding: utf-8

"""
    Argo Workflows API

    Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argo-workflows.readthedocs.io/en/latest/

    The version of the OpenAPI document: VERSION
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from argo_workflows.models.io_argoproj_events_v1alpha1_data_filter import IoArgoprojEventsV1alpha1DataFilter
from argo_workflows.models.io_argoproj_events_v1alpha1_event_context import IoArgoprojEventsV1alpha1EventContext
from argo_workflows.models.io_argoproj_events_v1alpha1_expr_filter import IoArgoprojEventsV1alpha1ExprFilter
from argo_workflows.models.io_argoproj_events_v1alpha1_time_filter import IoArgoprojEventsV1alpha1TimeFilter
from typing import Optional, Set
from typing_extensions import Self

class IoArgoprojEventsV1alpha1EventDependencyFilter(BaseModel):
    """
    EventDependencyFilter defines filters and constraints for a io.argoproj.workflow.v1alpha1.
    """ # noqa: E501
    context: Optional[IoArgoprojEventsV1alpha1EventContext] = None
    data: Optional[List[IoArgoprojEventsV1alpha1DataFilter]] = None
    data_logical_operator: Optional[StrictStr] = Field(default=None, description="DataLogicalOperator defines how multiple Data filters (if defined) are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).", alias="dataLogicalOperator")
    expr_logical_operator: Optional[StrictStr] = Field(default=None, description="ExprLogicalOperator defines how multiple Exprs filters (if defined) are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).", alias="exprLogicalOperator")
    exprs: Optional[List[IoArgoprojEventsV1alpha1ExprFilter]] = Field(default=None, description="Exprs contains the list of expressions evaluated against the event payload.")
    script: Optional[StrictStr] = Field(default=None, description="Script refers to a Lua script evaluated to determine the validity of an io.argoproj.workflow.v1alpha1.")
    time: Optional[IoArgoprojEventsV1alpha1TimeFilter] = None
    __properties: ClassVar[List[str]] = ["context", "data", "dataLogicalOperator", "exprLogicalOperator", "exprs", "script", "time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1EventDependencyFilter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context:
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item in self.data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['data'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in exprs (list)
        _items = []
        if self.exprs:
            for _item in self.exprs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['exprs'] = _items
        # override the default output from pydantic by calling `to_dict()` of time
        if self.time:
            _dict['time'] = self.time.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IoArgoprojEventsV1alpha1EventDependencyFilter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "context": IoArgoprojEventsV1alpha1EventContext.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "data": [IoArgoprojEventsV1alpha1DataFilter.from_dict(_item) for _item in obj["data"]] if obj.get("data") is not None else None,
            "dataLogicalOperator": obj.get("dataLogicalOperator"),
            "exprLogicalOperator": obj.get("exprLogicalOperator"),
            "exprs": [IoArgoprojEventsV1alpha1ExprFilter.from_dict(_item) for _item in obj["exprs"]] if obj.get("exprs") is not None else None,
            "script": obj.get("script"),
            "time": IoArgoprojEventsV1alpha1TimeFilter.from_dict(obj["time"]) if obj.get("time") is not None else None
        })
        return _obj


