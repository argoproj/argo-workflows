# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: VERSION
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo_workflows.configuration import Configuration


class GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'factor_percentage': 'int',
        'cap': 'Duration',
        'duration': 'Duration',
        'jitter_percentage': 'int',
        'steps': 'str'
    }

    attribute_map = {
        'factor_percentage': 'FactorPercentage',
        'cap': 'cap',
        'duration': 'duration',
        'jitter_percentage': 'jitterPercentage',
        'steps': 'steps'
    }

    def __init__(self, factor_percentage=None, cap=None, duration=None, jitter_percentage=None, steps=None, local_vars_configuration=None):  # noqa: E501
        """GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._factor_percentage = None
        self._cap = None
        self._duration = None
        self._jitter_percentage = None
        self._steps = None
        self.discriminator = None

        if factor_percentage is not None:
            self.factor_percentage = factor_percentage
        if cap is not None:
            self.cap = cap
        if duration is not None:
            self.duration = duration
        if jitter_percentage is not None:
            self.jitter_percentage = jitter_percentage
        if steps is not None:
            self.steps = steps

    @property
    def factor_percentage(self):
        """Gets the factor_percentage of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.  # noqa: E501


        :return: The factor_percentage of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.  # noqa: E501
        :rtype: int
        """
        return self._factor_percentage

    @factor_percentage.setter
    def factor_percentage(self, factor_percentage):
        """Sets the factor_percentage of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.


        :param factor_percentage: The factor_percentage of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.  # noqa: E501
        :type: int
        """

        self._factor_percentage = factor_percentage

    @property
    def cap(self):
        """Gets the cap of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.  # noqa: E501


        :return: The cap of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.  # noqa: E501
        :rtype: Duration
        """
        return self._cap

    @cap.setter
    def cap(self, cap):
        """Sets the cap of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.


        :param cap: The cap of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.  # noqa: E501
        :type: Duration
        """

        self._cap = cap

    @property
    def duration(self):
        """Gets the duration of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.  # noqa: E501


        :return: The duration of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.  # noqa: E501
        :rtype: Duration
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.


        :param duration: The duration of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.  # noqa: E501
        :type: Duration
        """

        self._duration = duration

    @property
    def jitter_percentage(self):
        """Gets the jitter_percentage of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.  # noqa: E501


        :return: The jitter_percentage of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.  # noqa: E501
        :rtype: int
        """
        return self._jitter_percentage

    @jitter_percentage.setter
    def jitter_percentage(self, jitter_percentage):
        """Sets the jitter_percentage of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.


        :param jitter_percentage: The jitter_percentage of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.  # noqa: E501
        :type: int
        """

        self._jitter_percentage = jitter_percentage

    @property
    def steps(self):
        """Gets the steps of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.  # noqa: E501


        :return: The steps of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.  # noqa: E501
        :rtype: str
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.


        :param steps: The steps of this GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff.  # noqa: E501
        :type: str
        """

        self._steps = steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GithubComArgoprojLabsArgoDataflowApiV1alpha1Backoff):
            return True

        return self.to_dict() != other.to_dict()
