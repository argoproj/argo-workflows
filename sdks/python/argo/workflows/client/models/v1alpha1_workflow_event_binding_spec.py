# coding: utf-8

"""
    Argo Server API

    You can get examples of requests and responses by using the CLI with `--gloglevel=9`, e.g. `argo list --gloglevel=9`  # noqa: E501

    The version of the OpenAPI document: v2.12.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from argo.workflows.client.configuration import Configuration


class V1alpha1WorkflowEventBindingSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'event': 'V1alpha1Event',
        'submit': 'V1alpha1Submit'
    }

    attribute_map = {
        'event': 'event',
        'submit': 'submit'
    }

    def __init__(self, event=None, submit=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha1WorkflowEventBindingSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._event = None
        self._submit = None
        self.discriminator = None

        self.event = event
        if submit is not None:
            self.submit = submit

    @property
    def event(self):
        """Gets the event of this V1alpha1WorkflowEventBindingSpec.  # noqa: E501


        :return: The event of this V1alpha1WorkflowEventBindingSpec.  # noqa: E501
        :rtype: V1alpha1Event
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this V1alpha1WorkflowEventBindingSpec.


        :param event: The event of this V1alpha1WorkflowEventBindingSpec.  # noqa: E501
        :type: V1alpha1Event
        """
        if self.local_vars_configuration.client_side_validation and event is None:  # noqa: E501
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501

        self._event = event

    @property
    def submit(self):
        """Gets the submit of this V1alpha1WorkflowEventBindingSpec.  # noqa: E501


        :return: The submit of this V1alpha1WorkflowEventBindingSpec.  # noqa: E501
        :rtype: V1alpha1Submit
        """
        return self._submit

    @submit.setter
    def submit(self, submit):
        """Sets the submit of this V1alpha1WorkflowEventBindingSpec.


        :param submit: The submit of this V1alpha1WorkflowEventBindingSpec.  # noqa: E501
        :type: V1alpha1Submit
        """

        self._submit = submit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha1WorkflowEventBindingSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha1WorkflowEventBindingSpec):
            return True

        return self.to_dict() != other.to_dict()
