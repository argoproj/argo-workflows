apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: build-argo-
spec:
  # must complete in 1h
  activeDeadlineSeconds: 3600
  # keep success for 1m, failures for 3m
  ttlStrategy:
    secondsAfterSuccess: 60
    secondsAfterFailure: 180
  # delete all pods as soon as possible
  podGC:
    strategy: OnPodSuccess

  entrypoint: main

  arguments:
    parameters:
      - name: revision
        value: ci
      - name: org
        value: alexec

  volumeClaimTemplates:
    - metadata:
        name: argo-build
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 1Gi

  templates:
    - name: main
      dag:
        tasks:
          - name: checkout
            template: checkout

          - name: ui
            template: ui
            dependencies:
              - checkout


          - name: build
            template: build
            dependencies:
              - ui

          - name: test
            template: test
            dependencies:
              - build

          - name: argoexec
            template: argoexec
            dependencies:
              - build

          - name: lint
            template: lint
            dependencies:
              - test

          - name: ui-lint
            template: ui-lint
            dependencies:
              - test

          - name: install-protoc
            template: install-protoc
            dependencies:
              - checkout

          - name: codegen
            template: codegen
            dependencies:
              - test
              - install-protoc

    - name: checkout
      inputs:
        artifacts:
          - name: src
            path: /go/src/github.com/argoproj/argo
            git:
              repo: https://github.com/{{workflow.parameters.org}}/argo.git
              revision: "{{workflow.parameters.revision}}"
              depth: 1
          - name: node_modules
            path: /go/src/github.com/argoproj/argo/ui/node_modules
            optional: true
            s3:
              bucket: argo
              key: node_modules-{{workflow.parameters.revision}}
          - name: go-build-cache
            path: /root/.cache/go-build
            optional: true
            s3:
              bucket: argo
              key: go-build-cache-{{workflow.parameters.revision}}
          - name: go-mod
            path: /go/pkg/mod
            optional: true
            s3:
              bucket: argo
              key: go-mod-{{workflow.parameters.revision}}
      script:
        image: golang:1.13.4
        source: |
          go env
          stat /go/src/github.com/argoproj/argo/ui/node_modules
          stat /root/.cache/go-build
          stat /go/pkg/mod
        volumeMounts:
          - name: argo-build
            mountPath: /go

    - name: ui
      script:
        image: node:14.0.0
        command:
          - sh
          - -eux
        source: |
          yarn install --frozen-lockfile
          mkdir dist
          touch dist/node_modules.marker
          yarn build
        workingDir: /go/src/github.com/argoproj/argo/ui
        volumeMounts:
          - name: argo-build
            mountPath: /go
      outputs:
        artifacts:
          - name: node_modules
            path: /go/src/github.com/argoproj/argo/ui/node_modules
            s3:
              bucket: argo
              key: node_modules-{{workflow.parameters.revision}}

    - name: ui-lint
      script:
        image: node:14.0.0
        command:
          - sh
          - -eux
        source: |
          yarn lint
          git diff --exit-code .
        workingDir: /go/src/github.com/argoproj/argo/ui
        volumeMounts:
          - name: argo-build
            mountPath: /go

    - name: build
      script:
        image: golang:1.13.4
        command:
          - sh
          - -eux
        source: |
          make dist/argo-linux-amd64 \
            dist/argoexec-linux-amd64 \
            dist/workflow-controller-linux-amd64
          mv dist/argo-linux-amd64 argoexec
          mv dist/argoexec-linux-amd64 argo
          mv dist/workflow-controller-linux-amd64 workflow-controller
        workingDir: /go/src/github.com/argoproj/argo
        volumeMounts:
          - name: argo-build
            mountPath: /go
      outputs:
        artifacts:
          - name: go-build-cache
            path: /root/.cache/go-build
            s3:
              bucket: argo
              key: go-build-cache-{{workflow.parameters.revision}}
          - name: go-mod
            path: /go/pkg/mod
            s3:
              bucket: argo
              key: go-mod-{{workflow.parameters.revision}}

    - name: test
      script:
        image: golang:1.13.4
        command:
          - sh
          - -eux
        source: |
          trap 'make test-results/junit.html' EXIT
          make test
        workingDir: /go/src/github.com/argoproj/argo
        volumeMounts:
          - name: argo-build
            mountPath: /go
      outputs:
        artifacts:
          - name: test-report
            path: /go/src/github.com/argoproj/argo/test-results/junit.html
          - name: go-build-cache
            path: /root/.cache/go-build
            s3:
              bucket: argo
              key: go-build-cache-{{workflow.parameters.revision}}
          - name: go-mod
            path: /go/pkg/mod
            s3:
              bucket: argo
              key: go-mod-{{workflow.parameters.revision}}

    - name: lint
      container:
        image: golang:1.13.4
        command:
          - make
        args:
          - lint
        workingDir: /go/src/github.com/argoproj/argo
        volumeMounts:
          - name: argo-build
            mountPath: /go

    - name: install-protoc
      script:
        image: golang:1.13.4
        command:
          - sh
          - -eux
        source: |
          apt-get update
          apt-get install -y unzip
          PROTOC_ZIP=protoc-3.11.1-linux-x86_64.zip
          curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.11.1/$PROTOC_ZIP
          unzip -o $PROTOC_ZIP -d /usr/local bin/protoc
          unzip -o $PROTOC_ZIP -d /usr/local 'include/*'
          chmod +x /usr/local/bin/protoc
          find /usr/local/include -type f | xargs chmod a+r
          find /usr/local/include -type d | xargs chmod a+rx
          rm -f $PROTOC_ZIP
        workingDir: /go/src/github.com/argoproj/argo
        volumeMounts:
          - name: argo-build
            mountPath: /go

    - name: codegen
      script:
        image: golang:1.13.4
        command:
          - sh
          - -eux
        source: |
          make codegen
        workingDir: /go/src/github.com/argoproj/argo
        volumeMounts:
          - name: argo-build
            mountPath: /go

    - name: argoexec
      container:
        image: docker:17.10
        command:
          - docker
        args:
          - build
          - .
          - -f
          - Dockefile.dev
          - --target
          - argoexec
          - -t
          - "argoproj/argoexec:{{workflow.parameters.revision}}"
        env:
          - name: DOCKER_HOST
            value: 127.0.0.1
        workingDir: /go/src/github.com/argoproj/argo
        volumeMounts:
          - name: argo-build
            mountPath: /go
      sidecars:
        - name: dind
          image: docker:18.09.4-dind
          securityContext:
            privileged: true
          mirrorVolumeMounts: true

