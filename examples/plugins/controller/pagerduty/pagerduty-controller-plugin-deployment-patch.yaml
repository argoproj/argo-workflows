# This is an auto-generated file. DO NOT EDIT
# This is a Kustomize patch that will add the plugin to your controller.
# Example: kubectl patch -n argo deployment workflow-controller --patch-file examples/plugins/controller/pagerduty/pagerduty-controller-plugin-deployment-patch.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  name: workflow-controller
spec:
  selector: {}
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
    spec:
      containers:
      - env:
        - name: ARGO_PLUGINS
          value: "true"
        name: workflow-controller
        resources: {}
      - args:
        - |
          import json
          import os
          from http.server import BaseHTTPRequestHandler, HTTPServer
          from urllib.request import urlopen, Request


          class Plugin(BaseHTTPRequestHandler):

              def args(self):
                  return json.loads(self.rfile.read(int(self.headers.get('Content-Length'))))

              def reply(self, reply):
                  self.send_response(200)
                  self.end_headers()
                  self.wfile.write(json.dumps(reply).encode("UTF-8"))

              def unsupported(self):
                  self.send_response(404)
                  self.end_headers()

              def do_POST(self):
                  if self.path == '/api/v1/workflow.postOperate':
                      args = self.args()
                      before = args['old']['metadata'].get('labels', {}).get('workflows.argoproj.io/phase', '')
                      after = args['new']['metadata'].get('labels', {}).get('workflows.argoproj.io/phase', '')
                      if before == 'Running' and after == 'Failed':
                          workflow_name = args['new']['metadata']['name']
                          print("creating alert for " + workflow_name)
                          x = urlopen(
                              Request(os.getenv('URL', 'https://events.pagerduty.com/generic/2010-04-15/create_event.json'),
                                      data=json.dumps({
                                          "service_key": os.getenv("SERVICE_KEY"),
                                          "event_type": "trigger",
                                          "incident_key": workflow_name,
                                          "description": f"Argo Workflow ${workflow_name} Failed",
                                          "client": "Argo Workflows",
                                      }).encode()))
                          if x.status != 200:
                              raise Exception("not 2002")
                      self.reply({})
                  else:
                      self.unsupported()


          if __name__ == '__main__':
              httpd = HTTPServer(('', 7243), Plugin)
              httpd.serve_forever()
        command:
        - python
        - -c
        env:
        - name: URL
          valueFrom:
            secretKeyRef:
              key: URL
              name: pagerduty-executor-plugin
        - name: SERVICE_KEY
          valueFrom:
            secretKeyRef:
              key: SERVICE_KEY
              name: pagerduty-executor-plugin
        image: python:alpine3.6
        name: pagerduty-controller-plugin
        resources: {}
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
status: {}
