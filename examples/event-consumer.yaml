# This example demonstrates creating a workflow that waits on two CloudEvents.
# curl -X POST -d '{"context": {"id": "a", "type": "test"}}' https://localhost:2746/api/v1/events/argo -k -H 'Authorization: Bearer token:PXnB9D6CGvFYzAFa0WeOj97Ik6uLEHXq'
# curl -X POST -d '{"context": {"id": "b", "type": "test"}}' https://localhost:2746/api/v1/events/argo -k -H 'Authorization: Bearer token:PXnB9D6CGvFYzAFa0WeOj97Ik6uLEHXq'
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: event-consumer-
spec:
  entrypoint: events
  templates:
    - name: events
      dag:
        tasks:
          - name: start
            template: whalesay
          - name: a
            template: a
            dependencies: [start]
          - name: b
            template: b
            dependencies: [start]
          - name: run
            template: whalesay
            dependencies: [a, b]

    - name: a
      eventConsumer:
        expression: context.type == "test" && (context.id contains "a")

    - name: b
      eventConsumer:
        expression: context.type == "test" && (context.id contains "b")

    - name: whalesay
      container:
        image: docker/whalesay
