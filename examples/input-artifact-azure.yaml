# This example demonstrates the loading of a hard-wired input artifact from an Azure
# Storage store. Azure guards access to the storage account with an access key which
# can be stored as a regular Kubernetes secret, and referenced in the workflow using
# secret selectors. If managed identities have been applied to the pods, then the
# parameter UseSDKCreds can be set to true, and managed identity authentication will
# be used instead of the secret. If a secret is used, the required secret can be created
# with the following command:
# $ kubectl create secret generic my-azure-credentials --from-literal=accountKey=<YOUR-ACCESS-KEY>
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: input-artifact-s3-
spec:
  entrypoint: input-artifact-s3-example
  templates:
  - name: input-artifact-s3-example
    inputs:
      artifacts:
      - name: my-art
        path: /my-artifact
        azure:
          # For most people, the endpoint is in the form https://<account-name>.blob.core.windows.net.
          # In sovereign clouds, or Azure Stack clouds, the endpoint may be different.
          endpoint: https://myazurestorageaccountname.blob.core.windows.net
          # The name of the container within the storage account.
          container: my-container
          # The path (within the container) to the artifact
          blob: path/in/container
          # accountKeySecret is a secret selector. It references the k8s secret named
          # 'my-azure-credentials'. This secret is expected to have the key
          # 'accountKey', containing the Azure Storage account name and access key.
          accountKeySecret:
            name: my-azure-credentials
            key: accountKey
          # Optional: set UseSDKCreds to true and skip setting accountKeySecret if
          # you are using environment variables to configure, or a Managed Identity.
          # useSDKCreds: true
    container:
      image: debian:latest
      command: [sh, -c]
      args: ["ls -l /my-artifact"]
