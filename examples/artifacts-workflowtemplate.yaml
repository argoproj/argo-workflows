apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: artifacts
  annotations:
    workflows.argoproj.io/description: |
      This example shows how to produce different types of output that are stored as the orginal file, rather than .tgz.
spec:
  entrypoint: main
  templates:
    - name: main
      inputs:
        artifacts:
          - name: index
            path: /out/assets/argo.png
            http:
              url: https://raw.githubusercontent.com/argoproj/argo-workflows/master/docs/assets/argo.png
      container:
        image: argoproj/argosay:v2
        command:
          - sh
          - -c
        args:
          - |
            mkdir /out
            cowsay "hello world" > /out/hello.txt
            cat > /out/hello.json <<EOF
            {"hello": {"world": true}} 
            EOF
            echo '* {font-family: sans-serif}' > /out/assets/styles.css
            cat > /out/index.html <<EOF
            <html>
              <head>
                <link rel='stylesheet' href='assets/styles.css' type='text/css'/>
              </head>
              <body>
                <h1>Hello World</h1>
                <img src='assets/argo.png'/>
              </body>
            </html>
            EOF
            echo '<html><body><script>alert("XSS")</script></body></html>' > /out/xss.html
      outputs:
        artifacts:
          # saving single files
          - name: text
            path: /out/hello.txt
            s3:
              key: hello.txt
            archive:
              none: { }
          - name: png
            path: /out/assets/argo.png
            s3:
              key: argo.png
            archive:
              none: { }
          - name: json
            path: /out/hello.json
            s3:
              key: hello.json
            archive:
              none: { }
          - name: css
            path: /out/assets/styles.css
            s3:
              key: styles.css
            archive:
              none: { }
          - name: html
            path: /out/index.html
            s3:
              key: index.html
            archive:
              none: { }
          # this artifact tries to run javascript, in the UI this is prevented by our CSP sandbox
          - name: xss
            path: /out/xss.html
            s3:
              key: xss.html
            archive:
              none: { }
          # save a whole directory
          - name: dir
            path: /out
            s3:
              key: dir/
            archive:
              none: { }
          # this will be a tgz with a single file
          - name: tgz-file
            path: /out/hello.txt
            s3:
              key: file.tgz
          # this will be a tgz with two entries, one dir and one file
          - name: tgz-dir
            path: /out
            s3:
              key: dir.tgz