# yaml-language-server: $schema: https://taskfile.dev/schema.json

# Install `task` by following https://taskfile.dev/installation/
# Run `task up` to start argo.

# - `env PROFILE=mysql task up` to start with MySQL.
# - `env PROFILE=plugins ARGO_EXECUTOR_PLUGINS=true task up` to start with plugins.
# - `env PROFILE=sso ARGO_AUTH_MODE=sso task up` to start with SSO.

# The app will be up-and-running between 15s and 1m later (if hot compiled or cold).
# When using `--watch`, any changes made to the source code will be automatically recompiled and the app restarted, typically within a few seconds.

version: 3

tasks:
  go-deps:
    cmd: go mod download
    # mutex: download

  install:
    cmd: sh -c "make install PROFILE=$PROFILE"
    deps: [go-deps]
    sources: [manifests]
    env:
      PROFILE: minimal
    # mutex: docker

  build-controller:
    cmd: make ./dist/workflow-controller
    deps: [go-deps]
    sources: [cmd/workflow-controller, config, errors, persist, pkg, util, workflow]
    # mutex: build

  port-forward:
    cmd: ./hack/port-forward.sh
    deps: [install]
    # ports: 9000

  controller:
    cmd: ./dist/workflow-controller &
    deps: [install, build-controller, port-forward]
    env:
      ARGO_EXECUTOR_PLUGINS: false
      ARGO_NAMESPACE: argo
      ARGO_NAMESPACED: true
      ARGO_MANAGED_NAMESPACE: argo
      ARGO_LOG_LEVEL: info
      ARGO_REMOVE_PVC_PROTECTION_FINALIZER: true
      ARGO_PROGRESS_PATCH_TICK_DURATION: 7s
      DEFAULT_REQUEUE_TIME: 1s
      LEADER_ELECTION_IDENTITY: local
      ALWAYS_OFFLOAD_NODE_STATUS: false
      OFFLOAD_NODE_STATUS_TTL: 30s
      WORKFLOW_GC_PERIOD: 30s
      UPPERIO_DB_DEBUG: 1
      ARCHIVED_WORKFLOW_GC_PERIOD: 30s
    # ports: "9090"

  build-argo:
    cmd: make ./dist/argo
    deps: [go-deps]
    sources: [cmd/argo, config, errors, persist, pkg, util, server, workflow]
    env:
      STATIC_FILES: false
    # mutex: build

  server:
    cmd: ./dist/argo server &
    deps: [build-argo, port-forward]
    env:
      ARGO_X_FRAME_OPTIONS: SAMEORIGIN
      ARGO_SECURE: false
      ARGO_NAMESPACE: argo
      ARGO_NAMESPACED: true
      ARGO_LOG_LEVEL: info
      ARGO_AUTH_MODE: hybrid
      ARGO_MANAGED_NAMESPACE: argo
      UPPERIO_DB_DEBUG: 1
    # ports: "2746"

  ui-deps:
    cmd: yarn install
    dir: ui
    sources: [ui/package.json, ui/yarn.lock, ui/node_modules]
    # mutex: downloads

  ui:
    cmd: yarn start &
    dir: ui
    deps: [ui-deps, server]
    # ports: "8080"

  executor:
    cmd: make argoexec-image
    sources: [cmd/argoexec, config, errors, pkg, util, workflow]
    # mutex: docker

  example:
    cmd: kubectl create -f examples/hello-world.yaml
    deps: [install]
    # mutex: docker

  build:
    deps: [build-controller, build-argo]

  pre-up:
    deps: [build, install, executor, example]

  up:
    deps: [pre-up, controller, server, ui]
