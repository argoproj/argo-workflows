// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewGatekeeper creates a new instance of Gatekeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGatekeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *Gatekeeper {
	mock := &Gatekeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Gatekeeper is an autogenerated mock type for the Gatekeeper type
type Gatekeeper struct {
	mock.Mock
}

type Gatekeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *Gatekeeper) EXPECT() *Gatekeeper_Expecter {
	return &Gatekeeper_Expecter{mock: &_m.Mock}
}

// Context provides a mock function for the type Gatekeeper
func (_mock *Gatekeeper) Context(ctx context.Context) (context.Context, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (context.Context, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Gatekeeper_Context_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Context'
type Gatekeeper_Context_Call struct {
	*mock.Call
}

// Context is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Gatekeeper_Expecter) Context(ctx interface{}) *Gatekeeper_Context_Call {
	return &Gatekeeper_Context_Call{Call: _e.mock.On("Context", ctx)}
}

func (_c *Gatekeeper_Context_Call) Run(run func(ctx context.Context)) *Gatekeeper_Context_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Gatekeeper_Context_Call) Return(context1 context.Context, err error) *Gatekeeper_Context_Call {
	_c.Call.Return(context1, err)
	return _c
}

func (_c *Gatekeeper_Context_Call) RunAndReturn(run func(ctx context.Context) (context.Context, error)) *Gatekeeper_Context_Call {
	_c.Call.Return(run)
	return _c
}

// ContextWithRequest provides a mock function for the type Gatekeeper
func (_mock *Gatekeeper) ContextWithRequest(ctx context.Context, req interface{}) (context.Context, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for ContextWithRequest")
	}

	var r0 context.Context
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}) (context.Context, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}) context.Context); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Gatekeeper_ContextWithRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContextWithRequest'
type Gatekeeper_ContextWithRequest_Call struct {
	*mock.Call
}

// ContextWithRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - req interface{}
func (_e *Gatekeeper_Expecter) ContextWithRequest(ctx interface{}, req interface{}) *Gatekeeper_ContextWithRequest_Call {
	return &Gatekeeper_ContextWithRequest_Call{Call: _e.mock.On("ContextWithRequest", ctx, req)}
}

func (_c *Gatekeeper_ContextWithRequest_Call) Run(run func(ctx context.Context, req interface{})) *Gatekeeper_ContextWithRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Gatekeeper_ContextWithRequest_Call) Return(context1 context.Context, err error) *Gatekeeper_ContextWithRequest_Call {
	_c.Call.Return(context1, err)
	return _c
}

func (_c *Gatekeeper_ContextWithRequest_Call) RunAndReturn(run func(ctx context.Context, req interface{}) (context.Context, error)) *Gatekeeper_ContextWithRequest_Call {
	_c.Call.Return(run)
	return _c
}

// StreamServerInterceptor provides a mock function for the type Gatekeeper
func (_mock *Gatekeeper) StreamServerInterceptor() grpc.StreamServerInterceptor {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for StreamServerInterceptor")
	}

	var r0 grpc.StreamServerInterceptor
	if returnFunc, ok := ret.Get(0).(func() grpc.StreamServerInterceptor); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.StreamServerInterceptor)
		}
	}
	return r0
}

// Gatekeeper_StreamServerInterceptor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamServerInterceptor'
type Gatekeeper_StreamServerInterceptor_Call struct {
	*mock.Call
}

// StreamServerInterceptor is a helper method to define mock.On call
func (_e *Gatekeeper_Expecter) StreamServerInterceptor() *Gatekeeper_StreamServerInterceptor_Call {
	return &Gatekeeper_StreamServerInterceptor_Call{Call: _e.mock.On("StreamServerInterceptor")}
}

func (_c *Gatekeeper_StreamServerInterceptor_Call) Run(run func()) *Gatekeeper_StreamServerInterceptor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Gatekeeper_StreamServerInterceptor_Call) Return(streamServerInterceptor grpc.StreamServerInterceptor) *Gatekeeper_StreamServerInterceptor_Call {
	_c.Call.Return(streamServerInterceptor)
	return _c
}

func (_c *Gatekeeper_StreamServerInterceptor_Call) RunAndReturn(run func() grpc.StreamServerInterceptor) *Gatekeeper_StreamServerInterceptor_Call {
	_c.Call.Return(run)
	return _c
}

// UnaryServerInterceptor provides a mock function for the type Gatekeeper
func (_mock *Gatekeeper) UnaryServerInterceptor() grpc.UnaryServerInterceptor {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for UnaryServerInterceptor")
	}

	var r0 grpc.UnaryServerInterceptor
	if returnFunc, ok := ret.Get(0).(func() grpc.UnaryServerInterceptor); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.UnaryServerInterceptor)
		}
	}
	return r0
}

// Gatekeeper_UnaryServerInterceptor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnaryServerInterceptor'
type Gatekeeper_UnaryServerInterceptor_Call struct {
	*mock.Call
}

// UnaryServerInterceptor is a helper method to define mock.On call
func (_e *Gatekeeper_Expecter) UnaryServerInterceptor() *Gatekeeper_UnaryServerInterceptor_Call {
	return &Gatekeeper_UnaryServerInterceptor_Call{Call: _e.mock.On("UnaryServerInterceptor")}
}

func (_c *Gatekeeper_UnaryServerInterceptor_Call) Run(run func()) *Gatekeeper_UnaryServerInterceptor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Gatekeeper_UnaryServerInterceptor_Call) Return(unaryServerInterceptor grpc.UnaryServerInterceptor) *Gatekeeper_UnaryServerInterceptor_Call {
	_c.Call.Return(unaryServerInterceptor)
	return _c
}

func (_c *Gatekeeper_UnaryServerInterceptor_Call) RunAndReturn(run func() grpc.UnaryServerInterceptor) *Gatekeeper_UnaryServerInterceptor_Call {
	_c.Call.Return(run)
	return _c
}
