// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/cronworkflow/cron-workflow.proto

package cronworkflow

import (
	context "context"
	fmt "fmt"
	v1alpha1 "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateCronWorkflowRequest struct {
	Namespace            string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	CronWorkflow         *v1alpha1.CronWorkflow `protobuf:"bytes,2,opt,name=cronWorkflow,proto3" json:"cronWorkflow,omitempty"`
	CreateOptions        *v1.CreateOptions      `protobuf:"bytes,3,opt,name=createOptions,proto3" json:"createOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *CreateCronWorkflowRequest) Reset()         { *m = CreateCronWorkflowRequest{} }
func (m *CreateCronWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCronWorkflowRequest) ProtoMessage()    {}
func (*CreateCronWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_02ecfb52b8f4ca0d, []int{0}
}

func (m *CreateCronWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCronWorkflowRequest.Unmarshal(m, b)
}
func (m *CreateCronWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCronWorkflowRequest.Marshal(b, m, deterministic)
}
func (m *CreateCronWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCronWorkflowRequest.Merge(m, src)
}
func (m *CreateCronWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_CreateCronWorkflowRequest.Size(m)
}
func (m *CreateCronWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCronWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCronWorkflowRequest proto.InternalMessageInfo

func (m *CreateCronWorkflowRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CreateCronWorkflowRequest) GetCronWorkflow() *v1alpha1.CronWorkflow {
	if m != nil {
		return m.CronWorkflow
	}
	return nil
}

func (m *CreateCronWorkflowRequest) GetCreateOptions() *v1.CreateOptions {
	if m != nil {
		return m.CreateOptions
	}
	return nil
}

type ListCronWorkflowsRequest struct {
	Namespace            string          `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ListOptions          *v1.ListOptions `protobuf:"bytes,2,opt,name=listOptions,proto3" json:"listOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListCronWorkflowsRequest) Reset()         { *m = ListCronWorkflowsRequest{} }
func (m *ListCronWorkflowsRequest) String() string { return proto.CompactTextString(m) }
func (*ListCronWorkflowsRequest) ProtoMessage()    {}
func (*ListCronWorkflowsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_02ecfb52b8f4ca0d, []int{1}
}

func (m *ListCronWorkflowsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCronWorkflowsRequest.Unmarshal(m, b)
}
func (m *ListCronWorkflowsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCronWorkflowsRequest.Marshal(b, m, deterministic)
}
func (m *ListCronWorkflowsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCronWorkflowsRequest.Merge(m, src)
}
func (m *ListCronWorkflowsRequest) XXX_Size() int {
	return xxx_messageInfo_ListCronWorkflowsRequest.Size(m)
}
func (m *ListCronWorkflowsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCronWorkflowsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCronWorkflowsRequest proto.InternalMessageInfo

func (m *ListCronWorkflowsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListCronWorkflowsRequest) GetListOptions() *v1.ListOptions {
	if m != nil {
		return m.ListOptions
	}
	return nil
}

type GetCronWorkflowRequest struct {
	Name                 string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string         `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	GetOptions           *v1.GetOptions `protobuf:"bytes,3,opt,name=getOptions,proto3" json:"getOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetCronWorkflowRequest) Reset()         { *m = GetCronWorkflowRequest{} }
func (m *GetCronWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*GetCronWorkflowRequest) ProtoMessage()    {}
func (*GetCronWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_02ecfb52b8f4ca0d, []int{2}
}

func (m *GetCronWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCronWorkflowRequest.Unmarshal(m, b)
}
func (m *GetCronWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCronWorkflowRequest.Marshal(b, m, deterministic)
}
func (m *GetCronWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCronWorkflowRequest.Merge(m, src)
}
func (m *GetCronWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_GetCronWorkflowRequest.Size(m)
}
func (m *GetCronWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCronWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCronWorkflowRequest proto.InternalMessageInfo

func (m *GetCronWorkflowRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetCronWorkflowRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetCronWorkflowRequest) GetGetOptions() *v1.GetOptions {
	if m != nil {
		return m.GetOptions
	}
	return nil
}

type UpdateCronWorkflowRequest struct {
	Name                 string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string                 `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	CronWorkflow         *v1alpha1.CronWorkflow `protobuf:"bytes,3,opt,name=cronWorkflow,proto3" json:"cronWorkflow,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *UpdateCronWorkflowRequest) Reset()         { *m = UpdateCronWorkflowRequest{} }
func (m *UpdateCronWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCronWorkflowRequest) ProtoMessage()    {}
func (*UpdateCronWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_02ecfb52b8f4ca0d, []int{3}
}

func (m *UpdateCronWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCronWorkflowRequest.Unmarshal(m, b)
}
func (m *UpdateCronWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCronWorkflowRequest.Marshal(b, m, deterministic)
}
func (m *UpdateCronWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCronWorkflowRequest.Merge(m, src)
}
func (m *UpdateCronWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateCronWorkflowRequest.Size(m)
}
func (m *UpdateCronWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCronWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCronWorkflowRequest proto.InternalMessageInfo

func (m *UpdateCronWorkflowRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateCronWorkflowRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateCronWorkflowRequest) GetCronWorkflow() *v1alpha1.CronWorkflow {
	if m != nil {
		return m.CronWorkflow
	}
	return nil
}

type DeleteCronWorkflowRequest struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string            `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	DeleteOptions        *v1.DeleteOptions `protobuf:"bytes,3,opt,name=deleteOptions,proto3" json:"deleteOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DeleteCronWorkflowRequest) Reset()         { *m = DeleteCronWorkflowRequest{} }
func (m *DeleteCronWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteCronWorkflowRequest) ProtoMessage()    {}
func (*DeleteCronWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_02ecfb52b8f4ca0d, []int{4}
}

func (m *DeleteCronWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteCronWorkflowRequest.Unmarshal(m, b)
}
func (m *DeleteCronWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteCronWorkflowRequest.Marshal(b, m, deterministic)
}
func (m *DeleteCronWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCronWorkflowRequest.Merge(m, src)
}
func (m *DeleteCronWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteCronWorkflowRequest.Size(m)
}
func (m *DeleteCronWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCronWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCronWorkflowRequest proto.InternalMessageInfo

func (m *DeleteCronWorkflowRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteCronWorkflowRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteCronWorkflowRequest) GetDeleteOptions() *v1.DeleteOptions {
	if m != nil {
		return m.DeleteOptions
	}
	return nil
}

type CronWorkflowDeletedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CronWorkflowDeletedResponse) Reset()         { *m = CronWorkflowDeletedResponse{} }
func (m *CronWorkflowDeletedResponse) String() string { return proto.CompactTextString(m) }
func (*CronWorkflowDeletedResponse) ProtoMessage()    {}
func (*CronWorkflowDeletedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_02ecfb52b8f4ca0d, []int{5}
}

func (m *CronWorkflowDeletedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CronWorkflowDeletedResponse.Unmarshal(m, b)
}
func (m *CronWorkflowDeletedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CronWorkflowDeletedResponse.Marshal(b, m, deterministic)
}
func (m *CronWorkflowDeletedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronWorkflowDeletedResponse.Merge(m, src)
}
func (m *CronWorkflowDeletedResponse) XXX_Size() int {
	return xxx_messageInfo_CronWorkflowDeletedResponse.Size(m)
}
func (m *CronWorkflowDeletedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CronWorkflowDeletedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CronWorkflowDeletedResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CreateCronWorkflowRequest)(nil), "cronworkflow.CreateCronWorkflowRequest")
	proto.RegisterType((*ListCronWorkflowsRequest)(nil), "cronworkflow.ListCronWorkflowsRequest")
	proto.RegisterType((*GetCronWorkflowRequest)(nil), "cronworkflow.GetCronWorkflowRequest")
	proto.RegisterType((*UpdateCronWorkflowRequest)(nil), "cronworkflow.UpdateCronWorkflowRequest")
	proto.RegisterType((*DeleteCronWorkflowRequest)(nil), "cronworkflow.DeleteCronWorkflowRequest")
	proto.RegisterType((*CronWorkflowDeletedResponse)(nil), "cronworkflow.CronWorkflowDeletedResponse")
}

func init() {
	proto.RegisterFile("server/cronworkflow/cron-workflow.proto", fileDescriptor_02ecfb52b8f4ca0d)
}

var fileDescriptor_02ecfb52b8f4ca0d = []byte{
	// 607 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0xe5, 0x0e, 0x4d, 0x9a, 0xc7, 0x84, 0x30, 0x12, 0x6a, 0xc3, 0x90, 0x26, 0x6b, 0xa2,
	0x5b, 0x61, 0x0e, 0xdd, 0x76, 0x40, 0xdc, 0xa0, 0x43, 0xbb, 0x4c, 0x02, 0x65, 0x42, 0x68, 0xdc,
	0xbc, 0xf4, 0x25, 0x0d, 0x6d, 0xe3, 0x60, 0x7b, 0x99, 0x10, 0xda, 0x85, 0x3b, 0x27, 0x8e, 0xf0,
	0x01, 0xb8, 0x00, 0x17, 0xc4, 0x17, 0xe1, 0x2b, 0xf0, 0x2d, 0x38, 0x80, 0xe2, 0x36, 0xcd, 0x9f,
	0x36, 0x22, 0xb0, 0xee, 0xe6, 0xfc, 0x79, 0x9f, 0xf7, 0xe7, 0xa7, 0xef, 0xe3, 0x14, 0x37, 0x15,
	0xc8, 0x08, 0xa4, 0xed, 0x4a, 0x11, 0x9c, 0x0a, 0xd9, 0x7f, 0x31, 0x10, 0xa7, 0xe6, 0x62, 0x2b,
	0xb9, 0x62, 0xa1, 0x14, 0x5a, 0x90, 0xcb, 0xd9, 0x37, 0xac, 0x55, 0x4f, 0x08, 0x6f, 0x00, 0x36,
	0x0f, 0x7d, 0x9b, 0x07, 0x81, 0xd0, 0x5c, 0xfb, 0x22, 0x50, 0xa3, 0x77, 0xad, 0xdd, 0xfe, 0x3d,
	0xc5, 0x7c, 0x11, 0x3f, 0x1d, 0x72, 0xb7, 0xe7, 0x07, 0x20, 0x5f, 0xdb, 0x61, 0xdf, 0x8b, 0x6f,
	0x28, 0x7b, 0x08, 0x9a, 0xdb, 0x51, 0xdb, 0xf6, 0x20, 0x00, 0xc9, 0x35, 0x74, 0xc7, 0x55, 0x1d,
	0xcf, 0xd7, 0xbd, 0x93, 0x63, 0xe6, 0x8a, 0xa1, 0xcd, 0xa5, 0x27, 0x42, 0x29, 0x5e, 0x9a, 0x45,
	0x5a, 0x3a, 0x21, 0x8c, 0xda, 0x7c, 0x10, 0xf6, 0xf8, 0xb4, 0x08, 0x4d, 0x5b, 0xdb, 0xae, 0x90,
	0x30, 0xa3, 0x11, 0xfd, 0x85, 0x70, 0xa3, 0x23, 0x81, 0x6b, 0xe8, 0x48, 0x11, 0x3c, 0x1b, 0x6b,
	0x3a, 0xf0, 0xea, 0x04, 0x94, 0x26, 0xab, 0x78, 0x29, 0xe0, 0x43, 0x50, 0x21, 0x77, 0xa1, 0x8e,
	0xd6, 0xd0, 0xc6, 0x92, 0x93, 0xde, 0x20, 0x80, 0x8d, 0x11, 0x49, 0x51, 0xbd, 0xb6, 0x86, 0x36,
	0x96, 0xb7, 0x1f, 0xb0, 0x94, 0x9d, 0x25, 0xec, 0x66, 0xc1, 0xc2, 0xbe, 0xc7, 0x62, 0x76, 0x36,
	0xf1, 0x33, 0x61, 0x67, 0xb9, 0xee, 0x39, 0x59, 0x72, 0x84, 0x57, 0x5c, 0x43, 0xf8, 0x38, 0x34,
	0xc6, 0xd6, 0x17, 0x4c, 0x9f, 0x1d, 0x36, 0xda, 0x1e, 0xcb, 0x3a, 0x9b, 0xb6, 0x88, 0x9d, 0x65,
	0x51, 0x2c, 0x9c, 0x29, 0x75, 0xf2, 0x4a, 0xf4, 0x1d, 0xc2, 0xf5, 0x03, 0x5f, 0xe9, 0x6c, 0x77,
	0x55, 0x6d, 0xf3, 0x87, 0x78, 0x79, 0xe0, 0x2b, 0x9d, 0x30, 0x8d, 0xf6, 0xde, 0xae, 0xc6, 0x74,
	0x90, 0x16, 0x3a, 0x59, 0x15, 0xfa, 0x11, 0xe1, 0xeb, 0xfb, 0xa0, 0x67, 0xfd, 0x14, 0x04, 0x5f,
	0x8a, 0x9b, 0x8f, 0x41, 0xcc, 0x3a, 0x4f, 0x58, 0x2b, 0x12, 0x3e, 0xc1, 0xd8, 0x03, 0x9d, 0x37,
	0xed, 0x6e, 0x35, 0xc0, 0xfd, 0x49, 0x9d, 0x93, 0xd1, 0xa0, 0xdf, 0x10, 0x6e, 0x3c, 0x0d, 0xbb,
	0x25, 0xc3, 0xf2, 0xef, 0x84, 0xc5, 0x01, 0x5a, 0xb8, 0x90, 0x01, 0xa2, 0x9f, 0x10, 0x6e, 0xec,
	0xc1, 0x00, 0xe6, 0x85, 0x7d, 0x84, 0x57, 0xba, 0x46, 0xee, 0xbf, 0x06, 0x72, 0x2f, 0x5b, 0xea,
	0xe4, 0x95, 0xe8, 0x4d, 0x7c, 0x23, 0xcb, 0x38, 0x7a, 0xb7, 0xeb, 0x80, 0x0a, 0x45, 0xa0, 0x60,
	0xfb, 0xf7, 0x22, 0xbe, 0x96, 0x7d, 0x7e, 0x08, 0x32, 0xf2, 0x5d, 0x20, 0x5f, 0x11, 0x26, 0xd3,
	0x29, 0x26, 0x4d, 0x96, 0x3d, 0xa8, 0x58, 0x69, 0xce, 0xad, 0xf3, 0x5b, 0x4e, 0xb7, 0xde, 0xfe,
	0xf8, 0xf9, 0xbe, 0xd6, 0xa4, 0xd4, 0x1c, 0x37, 0x51, 0x3b, 0x7f, 0x70, 0x2a, 0xfb, 0xcd, 0xc4,
	0xbf, 0xb3, 0xfb, 0xa8, 0x45, 0xbe, 0x20, 0x7c, 0x75, 0x2a, 0x79, 0xe4, 0x56, 0x1e, 0xb8, 0x2c,
	0x9a, 0xd6, 0xa3, 0x73, 0xf3, 0xc6, 0xd2, 0xb4, 0x65, 0x98, 0xd7, 0x49, 0x05, 0x66, 0xf2, 0x19,
	0xe1, 0x2b, 0x85, 0x68, 0x92, 0xf5, 0x3c, 0xee, 0xec, 0xe4, 0xce, 0xc3, 0xdc, 0xb6, 0x01, 0xbd,
	0x4d, 0x36, 0xff, 0x0e, 0x3a, 0x5a, 0x9f, 0x91, 0xef, 0x08, 0x93, 0xe9, 0xac, 0x16, 0x47, 0xa2,
	0x34, 0xcd, 0xf3, 0xa0, 0xde, 0x35, 0xd4, 0xcc, 0xaa, 0x4e, 0x1d, 0x4f, 0xc6, 0x07, 0x84, 0xc9,
	0x74, 0x5a, 0x8b, 0xe0, 0xa5, 0x79, 0xb6, 0x36, 0x8b, 0x43, 0x5f, 0x1a, 0xa7, 0xc4, 0xd6, 0x56,
	0x75, 0xc0, 0x87, 0xec, 0xf9, 0x9d, 0xd2, 0x4f, 0xf3, 0x8c, 0xbf, 0x0f, 0xc7, 0x8b, 0xe6, 0x33,
	0xbb, 0xf3, 0x27, 0x00, 0x00, 0xff, 0xff, 0x5a, 0x6d, 0xbc, 0x28, 0x5c, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CronWorkflowServiceClient is the client API for CronWorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CronWorkflowServiceClient interface {
	CreateCronWorkflow(ctx context.Context, in *CreateCronWorkflowRequest, opts ...grpc.CallOption) (*v1alpha1.CronWorkflow, error)
	ListCronWorkflows(ctx context.Context, in *ListCronWorkflowsRequest, opts ...grpc.CallOption) (*v1alpha1.CronWorkflowList, error)
	GetCronWorkflow(ctx context.Context, in *GetCronWorkflowRequest, opts ...grpc.CallOption) (*v1alpha1.CronWorkflow, error)
	UpdateCronWorkflow(ctx context.Context, in *UpdateCronWorkflowRequest, opts ...grpc.CallOption) (*v1alpha1.CronWorkflow, error)
	DeleteCronWorkflow(ctx context.Context, in *DeleteCronWorkflowRequest, opts ...grpc.CallOption) (*CronWorkflowDeletedResponse, error)
}

type cronWorkflowServiceClient struct {
	cc *grpc.ClientConn
}

func NewCronWorkflowServiceClient(cc *grpc.ClientConn) CronWorkflowServiceClient {
	return &cronWorkflowServiceClient{cc}
}

func (c *cronWorkflowServiceClient) CreateCronWorkflow(ctx context.Context, in *CreateCronWorkflowRequest, opts ...grpc.CallOption) (*v1alpha1.CronWorkflow, error) {
	out := new(v1alpha1.CronWorkflow)
	err := c.cc.Invoke(ctx, "/cronworkflow.CronWorkflowService/CreateCronWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronWorkflowServiceClient) ListCronWorkflows(ctx context.Context, in *ListCronWorkflowsRequest, opts ...grpc.CallOption) (*v1alpha1.CronWorkflowList, error) {
	out := new(v1alpha1.CronWorkflowList)
	err := c.cc.Invoke(ctx, "/cronworkflow.CronWorkflowService/ListCronWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronWorkflowServiceClient) GetCronWorkflow(ctx context.Context, in *GetCronWorkflowRequest, opts ...grpc.CallOption) (*v1alpha1.CronWorkflow, error) {
	out := new(v1alpha1.CronWorkflow)
	err := c.cc.Invoke(ctx, "/cronworkflow.CronWorkflowService/GetCronWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronWorkflowServiceClient) UpdateCronWorkflow(ctx context.Context, in *UpdateCronWorkflowRequest, opts ...grpc.CallOption) (*v1alpha1.CronWorkflow, error) {
	out := new(v1alpha1.CronWorkflow)
	err := c.cc.Invoke(ctx, "/cronworkflow.CronWorkflowService/UpdateCronWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronWorkflowServiceClient) DeleteCronWorkflow(ctx context.Context, in *DeleteCronWorkflowRequest, opts ...grpc.CallOption) (*CronWorkflowDeletedResponse, error) {
	out := new(CronWorkflowDeletedResponse)
	err := c.cc.Invoke(ctx, "/cronworkflow.CronWorkflowService/DeleteCronWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronWorkflowServiceServer is the server API for CronWorkflowService service.
type CronWorkflowServiceServer interface {
	CreateCronWorkflow(context.Context, *CreateCronWorkflowRequest) (*v1alpha1.CronWorkflow, error)
	ListCronWorkflows(context.Context, *ListCronWorkflowsRequest) (*v1alpha1.CronWorkflowList, error)
	GetCronWorkflow(context.Context, *GetCronWorkflowRequest) (*v1alpha1.CronWorkflow, error)
	UpdateCronWorkflow(context.Context, *UpdateCronWorkflowRequest) (*v1alpha1.CronWorkflow, error)
	DeleteCronWorkflow(context.Context, *DeleteCronWorkflowRequest) (*CronWorkflowDeletedResponse, error)
}

// UnimplementedCronWorkflowServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCronWorkflowServiceServer struct {
}

func (*UnimplementedCronWorkflowServiceServer) CreateCronWorkflow(ctx context.Context, req *CreateCronWorkflowRequest) (*v1alpha1.CronWorkflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCronWorkflow not implemented")
}
func (*UnimplementedCronWorkflowServiceServer) ListCronWorkflows(ctx context.Context, req *ListCronWorkflowsRequest) (*v1alpha1.CronWorkflowList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCronWorkflows not implemented")
}
func (*UnimplementedCronWorkflowServiceServer) GetCronWorkflow(ctx context.Context, req *GetCronWorkflowRequest) (*v1alpha1.CronWorkflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronWorkflow not implemented")
}
func (*UnimplementedCronWorkflowServiceServer) UpdateCronWorkflow(ctx context.Context, req *UpdateCronWorkflowRequest) (*v1alpha1.CronWorkflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCronWorkflow not implemented")
}
func (*UnimplementedCronWorkflowServiceServer) DeleteCronWorkflow(ctx context.Context, req *DeleteCronWorkflowRequest) (*CronWorkflowDeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronWorkflow not implemented")
}

func RegisterCronWorkflowServiceServer(s *grpc.Server, srv CronWorkflowServiceServer) {
	s.RegisterService(&_CronWorkflowService_serviceDesc, srv)
}

func _CronWorkflowService_CreateCronWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCronWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWorkflowServiceServer).CreateCronWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronworkflow.CronWorkflowService/CreateCronWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWorkflowServiceServer).CreateCronWorkflow(ctx, req.(*CreateCronWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronWorkflowService_ListCronWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCronWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWorkflowServiceServer).ListCronWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronworkflow.CronWorkflowService/ListCronWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWorkflowServiceServer).ListCronWorkflows(ctx, req.(*ListCronWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronWorkflowService_GetCronWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCronWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWorkflowServiceServer).GetCronWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronworkflow.CronWorkflowService/GetCronWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWorkflowServiceServer).GetCronWorkflow(ctx, req.(*GetCronWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronWorkflowService_UpdateCronWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCronWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWorkflowServiceServer).UpdateCronWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronworkflow.CronWorkflowService/UpdateCronWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWorkflowServiceServer).UpdateCronWorkflow(ctx, req.(*UpdateCronWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronWorkflowService_DeleteCronWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCronWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWorkflowServiceServer).DeleteCronWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cronworkflow.CronWorkflowService/DeleteCronWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWorkflowServiceServer).DeleteCronWorkflow(ctx, req.(*DeleteCronWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CronWorkflowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cronworkflow.CronWorkflowService",
	HandlerType: (*CronWorkflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCronWorkflow",
			Handler:    _CronWorkflowService_CreateCronWorkflow_Handler,
		},
		{
			MethodName: "ListCronWorkflows",
			Handler:    _CronWorkflowService_ListCronWorkflows_Handler,
		},
		{
			MethodName: "GetCronWorkflow",
			Handler:    _CronWorkflowService_GetCronWorkflow_Handler,
		},
		{
			MethodName: "UpdateCronWorkflow",
			Handler:    _CronWorkflowService_UpdateCronWorkflow_Handler,
		},
		{
			MethodName: "DeleteCronWorkflow",
			Handler:    _CronWorkflowService_DeleteCronWorkflow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/cronworkflow/cron-workflow.proto",
}
