// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/argoproj/argo-workflows/v3/pkg/apiclient/workflowtemplate"
	"github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewWorkflowTemplateServiceClient creates a new instance of WorkflowTemplateServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkflowTemplateServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkflowTemplateServiceClient {
	mock := &WorkflowTemplateServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// WorkflowTemplateServiceClient is an autogenerated mock type for the WorkflowTemplateServiceClient type
type WorkflowTemplateServiceClient struct {
	mock.Mock
}

type WorkflowTemplateServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkflowTemplateServiceClient) EXPECT() *WorkflowTemplateServiceClient_Expecter {
	return &WorkflowTemplateServiceClient_Expecter{mock: &_m.Mock}
}

// CreateWorkflowTemplate provides a mock function for the type WorkflowTemplateServiceClient
func (_mock *WorkflowTemplateServiceClient) CreateWorkflowTemplate(ctx context.Context, in *workflowtemplate.WorkflowTemplateCreateRequest, opts ...grpc.CallOption) (*v1alpha1.WorkflowTemplate, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkflowTemplate")
	}

	var r0 *v1alpha1.WorkflowTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *workflowtemplate.WorkflowTemplateCreateRequest, ...grpc.CallOption) (*v1alpha1.WorkflowTemplate, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *workflowtemplate.WorkflowTemplateCreateRequest, ...grpc.CallOption) *v1alpha1.WorkflowTemplate); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.WorkflowTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *workflowtemplate.WorkflowTemplateCreateRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorkflowTemplateServiceClient_CreateWorkflowTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWorkflowTemplate'
type WorkflowTemplateServiceClient_CreateWorkflowTemplate_Call struct {
	*mock.Call
}

// CreateWorkflowTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflowtemplate.WorkflowTemplateCreateRequest
//   - opts ...grpc.CallOption
func (_e *WorkflowTemplateServiceClient_Expecter) CreateWorkflowTemplate(ctx interface{}, in interface{}, opts ...interface{}) *WorkflowTemplateServiceClient_CreateWorkflowTemplate_Call {
	return &WorkflowTemplateServiceClient_CreateWorkflowTemplate_Call{Call: _e.mock.On("CreateWorkflowTemplate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *WorkflowTemplateServiceClient_CreateWorkflowTemplate_Call) Run(run func(ctx context.Context, in *workflowtemplate.WorkflowTemplateCreateRequest, opts ...grpc.CallOption)) *WorkflowTemplateServiceClient_CreateWorkflowTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *workflowtemplate.WorkflowTemplateCreateRequest
		if args[1] != nil {
			arg1 = args[1].(*workflowtemplate.WorkflowTemplateCreateRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *WorkflowTemplateServiceClient_CreateWorkflowTemplate_Call) Return(workflowTemplate *v1alpha1.WorkflowTemplate, err error) *WorkflowTemplateServiceClient_CreateWorkflowTemplate_Call {
	_c.Call.Return(workflowTemplate, err)
	return _c
}

func (_c *WorkflowTemplateServiceClient_CreateWorkflowTemplate_Call) RunAndReturn(run func(ctx context.Context, in *workflowtemplate.WorkflowTemplateCreateRequest, opts ...grpc.CallOption) (*v1alpha1.WorkflowTemplate, error)) *WorkflowTemplateServiceClient_CreateWorkflowTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWorkflowTemplate provides a mock function for the type WorkflowTemplateServiceClient
func (_mock *WorkflowTemplateServiceClient) DeleteWorkflowTemplate(ctx context.Context, in *workflowtemplate.WorkflowTemplateDeleteRequest, opts ...grpc.CallOption) (*workflowtemplate.WorkflowTemplateDeleteResponse, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkflowTemplate")
	}

	var r0 *workflowtemplate.WorkflowTemplateDeleteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *workflowtemplate.WorkflowTemplateDeleteRequest, ...grpc.CallOption) (*workflowtemplate.WorkflowTemplateDeleteResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *workflowtemplate.WorkflowTemplateDeleteRequest, ...grpc.CallOption) *workflowtemplate.WorkflowTemplateDeleteResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflowtemplate.WorkflowTemplateDeleteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *workflowtemplate.WorkflowTemplateDeleteRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorkflowTemplateServiceClient_DeleteWorkflowTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWorkflowTemplate'
type WorkflowTemplateServiceClient_DeleteWorkflowTemplate_Call struct {
	*mock.Call
}

// DeleteWorkflowTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflowtemplate.WorkflowTemplateDeleteRequest
//   - opts ...grpc.CallOption
func (_e *WorkflowTemplateServiceClient_Expecter) DeleteWorkflowTemplate(ctx interface{}, in interface{}, opts ...interface{}) *WorkflowTemplateServiceClient_DeleteWorkflowTemplate_Call {
	return &WorkflowTemplateServiceClient_DeleteWorkflowTemplate_Call{Call: _e.mock.On("DeleteWorkflowTemplate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *WorkflowTemplateServiceClient_DeleteWorkflowTemplate_Call) Run(run func(ctx context.Context, in *workflowtemplate.WorkflowTemplateDeleteRequest, opts ...grpc.CallOption)) *WorkflowTemplateServiceClient_DeleteWorkflowTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *workflowtemplate.WorkflowTemplateDeleteRequest
		if args[1] != nil {
			arg1 = args[1].(*workflowtemplate.WorkflowTemplateDeleteRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *WorkflowTemplateServiceClient_DeleteWorkflowTemplate_Call) Return(workflowTemplateDeleteResponse *workflowtemplate.WorkflowTemplateDeleteResponse, err error) *WorkflowTemplateServiceClient_DeleteWorkflowTemplate_Call {
	_c.Call.Return(workflowTemplateDeleteResponse, err)
	return _c
}

func (_c *WorkflowTemplateServiceClient_DeleteWorkflowTemplate_Call) RunAndReturn(run func(ctx context.Context, in *workflowtemplate.WorkflowTemplateDeleteRequest, opts ...grpc.CallOption) (*workflowtemplate.WorkflowTemplateDeleteResponse, error)) *WorkflowTemplateServiceClient_DeleteWorkflowTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflowTemplate provides a mock function for the type WorkflowTemplateServiceClient
func (_mock *WorkflowTemplateServiceClient) GetWorkflowTemplate(ctx context.Context, in *workflowtemplate.WorkflowTemplateGetRequest, opts ...grpc.CallOption) (*v1alpha1.WorkflowTemplate, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowTemplate")
	}

	var r0 *v1alpha1.WorkflowTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *workflowtemplate.WorkflowTemplateGetRequest, ...grpc.CallOption) (*v1alpha1.WorkflowTemplate, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *workflowtemplate.WorkflowTemplateGetRequest, ...grpc.CallOption) *v1alpha1.WorkflowTemplate); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.WorkflowTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *workflowtemplate.WorkflowTemplateGetRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorkflowTemplateServiceClient_GetWorkflowTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflowTemplate'
type WorkflowTemplateServiceClient_GetWorkflowTemplate_Call struct {
	*mock.Call
}

// GetWorkflowTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflowtemplate.WorkflowTemplateGetRequest
//   - opts ...grpc.CallOption
func (_e *WorkflowTemplateServiceClient_Expecter) GetWorkflowTemplate(ctx interface{}, in interface{}, opts ...interface{}) *WorkflowTemplateServiceClient_GetWorkflowTemplate_Call {
	return &WorkflowTemplateServiceClient_GetWorkflowTemplate_Call{Call: _e.mock.On("GetWorkflowTemplate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *WorkflowTemplateServiceClient_GetWorkflowTemplate_Call) Run(run func(ctx context.Context, in *workflowtemplate.WorkflowTemplateGetRequest, opts ...grpc.CallOption)) *WorkflowTemplateServiceClient_GetWorkflowTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *workflowtemplate.WorkflowTemplateGetRequest
		if args[1] != nil {
			arg1 = args[1].(*workflowtemplate.WorkflowTemplateGetRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *WorkflowTemplateServiceClient_GetWorkflowTemplate_Call) Return(workflowTemplate *v1alpha1.WorkflowTemplate, err error) *WorkflowTemplateServiceClient_GetWorkflowTemplate_Call {
	_c.Call.Return(workflowTemplate, err)
	return _c
}

func (_c *WorkflowTemplateServiceClient_GetWorkflowTemplate_Call) RunAndReturn(run func(ctx context.Context, in *workflowtemplate.WorkflowTemplateGetRequest, opts ...grpc.CallOption) (*v1alpha1.WorkflowTemplate, error)) *WorkflowTemplateServiceClient_GetWorkflowTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// LintWorkflowTemplate provides a mock function for the type WorkflowTemplateServiceClient
func (_mock *WorkflowTemplateServiceClient) LintWorkflowTemplate(ctx context.Context, in *workflowtemplate.WorkflowTemplateLintRequest, opts ...grpc.CallOption) (*v1alpha1.WorkflowTemplate, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LintWorkflowTemplate")
	}

	var r0 *v1alpha1.WorkflowTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *workflowtemplate.WorkflowTemplateLintRequest, ...grpc.CallOption) (*v1alpha1.WorkflowTemplate, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *workflowtemplate.WorkflowTemplateLintRequest, ...grpc.CallOption) *v1alpha1.WorkflowTemplate); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.WorkflowTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *workflowtemplate.WorkflowTemplateLintRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorkflowTemplateServiceClient_LintWorkflowTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LintWorkflowTemplate'
type WorkflowTemplateServiceClient_LintWorkflowTemplate_Call struct {
	*mock.Call
}

// LintWorkflowTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflowtemplate.WorkflowTemplateLintRequest
//   - opts ...grpc.CallOption
func (_e *WorkflowTemplateServiceClient_Expecter) LintWorkflowTemplate(ctx interface{}, in interface{}, opts ...interface{}) *WorkflowTemplateServiceClient_LintWorkflowTemplate_Call {
	return &WorkflowTemplateServiceClient_LintWorkflowTemplate_Call{Call: _e.mock.On("LintWorkflowTemplate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *WorkflowTemplateServiceClient_LintWorkflowTemplate_Call) Run(run func(ctx context.Context, in *workflowtemplate.WorkflowTemplateLintRequest, opts ...grpc.CallOption)) *WorkflowTemplateServiceClient_LintWorkflowTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *workflowtemplate.WorkflowTemplateLintRequest
		if args[1] != nil {
			arg1 = args[1].(*workflowtemplate.WorkflowTemplateLintRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *WorkflowTemplateServiceClient_LintWorkflowTemplate_Call) Return(workflowTemplate *v1alpha1.WorkflowTemplate, err error) *WorkflowTemplateServiceClient_LintWorkflowTemplate_Call {
	_c.Call.Return(workflowTemplate, err)
	return _c
}

func (_c *WorkflowTemplateServiceClient_LintWorkflowTemplate_Call) RunAndReturn(run func(ctx context.Context, in *workflowtemplate.WorkflowTemplateLintRequest, opts ...grpc.CallOption) (*v1alpha1.WorkflowTemplate, error)) *WorkflowTemplateServiceClient_LintWorkflowTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ListWorkflowTemplates provides a mock function for the type WorkflowTemplateServiceClient
func (_mock *WorkflowTemplateServiceClient) ListWorkflowTemplates(ctx context.Context, in *workflowtemplate.WorkflowTemplateListRequest, opts ...grpc.CallOption) (*v1alpha1.WorkflowTemplateList, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflowTemplates")
	}

	var r0 *v1alpha1.WorkflowTemplateList
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *workflowtemplate.WorkflowTemplateListRequest, ...grpc.CallOption) (*v1alpha1.WorkflowTemplateList, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *workflowtemplate.WorkflowTemplateListRequest, ...grpc.CallOption) *v1alpha1.WorkflowTemplateList); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.WorkflowTemplateList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *workflowtemplate.WorkflowTemplateListRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorkflowTemplateServiceClient_ListWorkflowTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWorkflowTemplates'
type WorkflowTemplateServiceClient_ListWorkflowTemplates_Call struct {
	*mock.Call
}

// ListWorkflowTemplates is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflowtemplate.WorkflowTemplateListRequest
//   - opts ...grpc.CallOption
func (_e *WorkflowTemplateServiceClient_Expecter) ListWorkflowTemplates(ctx interface{}, in interface{}, opts ...interface{}) *WorkflowTemplateServiceClient_ListWorkflowTemplates_Call {
	return &WorkflowTemplateServiceClient_ListWorkflowTemplates_Call{Call: _e.mock.On("ListWorkflowTemplates",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *WorkflowTemplateServiceClient_ListWorkflowTemplates_Call) Run(run func(ctx context.Context, in *workflowtemplate.WorkflowTemplateListRequest, opts ...grpc.CallOption)) *WorkflowTemplateServiceClient_ListWorkflowTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *workflowtemplate.WorkflowTemplateListRequest
		if args[1] != nil {
			arg1 = args[1].(*workflowtemplate.WorkflowTemplateListRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *WorkflowTemplateServiceClient_ListWorkflowTemplates_Call) Return(workflowTemplateList *v1alpha1.WorkflowTemplateList, err error) *WorkflowTemplateServiceClient_ListWorkflowTemplates_Call {
	_c.Call.Return(workflowTemplateList, err)
	return _c
}

func (_c *WorkflowTemplateServiceClient_ListWorkflowTemplates_Call) RunAndReturn(run func(ctx context.Context, in *workflowtemplate.WorkflowTemplateListRequest, opts ...grpc.CallOption) (*v1alpha1.WorkflowTemplateList, error)) *WorkflowTemplateServiceClient_ListWorkflowTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateWorkflowTemplate provides a mock function for the type WorkflowTemplateServiceClient
func (_mock *WorkflowTemplateServiceClient) UpdateWorkflowTemplate(ctx context.Context, in *workflowtemplate.WorkflowTemplateUpdateRequest, opts ...grpc.CallOption) (*v1alpha1.WorkflowTemplate, error) {
	// grpc.CallOption
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkflowTemplate")
	}

	var r0 *v1alpha1.WorkflowTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *workflowtemplate.WorkflowTemplateUpdateRequest, ...grpc.CallOption) (*v1alpha1.WorkflowTemplate, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *workflowtemplate.WorkflowTemplateUpdateRequest, ...grpc.CallOption) *v1alpha1.WorkflowTemplate); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.WorkflowTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *workflowtemplate.WorkflowTemplateUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// WorkflowTemplateServiceClient_UpdateWorkflowTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateWorkflowTemplate'
type WorkflowTemplateServiceClient_UpdateWorkflowTemplate_Call struct {
	*mock.Call
}

// UpdateWorkflowTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - in *workflowtemplate.WorkflowTemplateUpdateRequest
//   - opts ...grpc.CallOption
func (_e *WorkflowTemplateServiceClient_Expecter) UpdateWorkflowTemplate(ctx interface{}, in interface{}, opts ...interface{}) *WorkflowTemplateServiceClient_UpdateWorkflowTemplate_Call {
	return &WorkflowTemplateServiceClient_UpdateWorkflowTemplate_Call{Call: _e.mock.On("UpdateWorkflowTemplate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *WorkflowTemplateServiceClient_UpdateWorkflowTemplate_Call) Run(run func(ctx context.Context, in *workflowtemplate.WorkflowTemplateUpdateRequest, opts ...grpc.CallOption)) *WorkflowTemplateServiceClient_UpdateWorkflowTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *workflowtemplate.WorkflowTemplateUpdateRequest
		if args[1] != nil {
			arg1 = args[1].(*workflowtemplate.WorkflowTemplateUpdateRequest)
		}
		var arg2 []grpc.CallOption
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *WorkflowTemplateServiceClient_UpdateWorkflowTemplate_Call) Return(workflowTemplate *v1alpha1.WorkflowTemplate, err error) *WorkflowTemplateServiceClient_UpdateWorkflowTemplate_Call {
	_c.Call.Return(workflowTemplate, err)
	return _c
}

func (_c *WorkflowTemplateServiceClient_UpdateWorkflowTemplate_Call) RunAndReturn(run func(ctx context.Context, in *workflowtemplate.WorkflowTemplateUpdateRequest, opts ...grpc.CallOption) (*v1alpha1.WorkflowTemplate, error)) *WorkflowTemplateServiceClient_UpdateWorkflowTemplate_Call {
	_c.Call.Return(run)
	return _c
}
