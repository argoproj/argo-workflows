syntax = "proto3";
option go_package = "github.com/argoproj/argo-workflows/pkg/apiclient/clusterworkflowtemplate";

import "google/api/annotations.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "github.com/argoproj/argo-workflows/pkg/apis/workflow/v1alpha1/generated.proto";

// Workflow Service
//
// Workflow Service API performs CRUD actions against application resources
package clusterworkflowtemplate;

message ClusterWorkflowTemplateCreateRequest {
  github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.ClusterWorkflowTemplate template = 1;
  k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions createOptions = 2;
}

message ClusterWorkflowTemplateGetRequest {
  string name = 1;
  k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions getOptions = 2;
}

message ClusterWorkflowTemplateListRequest {
  k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions listOptions = 1;
}

message ClusterWorkflowTemplateUpdateRequest {
  // DEPRECATED: This field is ignored.
  string name = 1 [ deprecated = true ];
  github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.ClusterWorkflowTemplate template = 2;
}

message ClusterWorkflowTemplateDeleteRequest {
  string name = 1;
  k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions deleteOptions = 2;
}
message ClusterWorkflowTemplateDeleteResponse {
}
message ClusterWorkflowTemplateLintRequest {
  github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.ClusterWorkflowTemplate template = 1;
  k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions createOptions = 2;
}

service ClusterWorkflowTemplateService {
  rpc CreateClusterWorkflowTemplate(ClusterWorkflowTemplateCreateRequest) returns (github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.ClusterWorkflowTemplate) {
    option (google.api.http) = {
      post : "/api/v1/cluster-workflow-templates"
      body : "*"
    };
  }

  rpc GetClusterWorkflowTemplate(ClusterWorkflowTemplateGetRequest) returns (github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.ClusterWorkflowTemplate) {
    option (google.api.http).get = "/api/v1/cluster-workflow-templates/{name}";
  }

  rpc ListClusterWorkflowTemplates(ClusterWorkflowTemplateListRequest) returns (github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.ClusterWorkflowTemplateList) {
    option (google.api.http).get = "/api/v1/cluster-workflow-templates";
  }

  rpc UpdateClusterWorkflowTemplate(ClusterWorkflowTemplateUpdateRequest) returns (github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.ClusterWorkflowTemplate) {
    option (google.api.http) = {
      put : "/api/v1/cluster-workflow-templates/{name}"
      body : "*"
    };
  }

  rpc DeleteClusterWorkflowTemplate(ClusterWorkflowTemplateDeleteRequest) returns (ClusterWorkflowTemplateDeleteResponse) {
    option (google.api.http).delete = "/api/v1/cluster-workflow-templates/{name}";
  }

  rpc LintClusterWorkflowTemplate(ClusterWorkflowTemplateLintRequest) returns (github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.ClusterWorkflowTemplate) {
    option (google.api.http) = {
      post : "/api/v1/cluster-workflow-templates/lint"
      body : "*"
    };
  }
}
