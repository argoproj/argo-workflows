{
  "swagger": "2.0",
  "info": {
    "title": "pkg/apiclient/event/event.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/events/{namespace}/{discriminator}": {
      "post": {
        "operationId": "ReceiveEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/event.EventResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace for the event. This can be empty if the client has cluster scoped permissions.\nIf empty, then the event is \"broadcast\" to workflow event binding in all namespaces.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "discriminator",
            "description": "Optional discriminator for the event. This should almost always be empty.\nUsed for edge-cases where the event payload alone is not provide enough information to discriminate the event.\nThis MUST NOT be used as security mechanism, e.g. to allow two clients to use the same access token, or\nto support webhooks on unsecured server. Instead, use access tokens.\nThis is made available as `discriminator` in the event binding selector (`/spec/event/selector)`",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The event itself can be any data.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/github.com.argoproj.argo.pkg.apis.workflow.v1alpha1.Item"
            }
          }
        ],
        "tags": [
          "EventService"
        ]
      }
    }
  },
  "definitions": {
    "event.EventResponse": {
      "type": "object"
    },
    "github.com.argoproj.argo.pkg.apis.workflow.v1alpha1.Item": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "format": "byte"
        }
      },
      "description": "+protobuf.options.(gogoproto.goproto_stringer)=false\n+kubebuilder:validation:Type=object",
      "title": "Item expands a single workflow step into multiple parallel steps\nThe value of Item can be a map, string, bool, or number"
    }
  }
}
