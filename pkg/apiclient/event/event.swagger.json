{
  "swagger": "2.0",
  "info": {
    "title": "pkg/apiclient/event/event.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/events/{namespace}": {
      "post": {
        "summary": "https://github.com/cloudevents/spec/blob/v1.0/http-webhook.md",
        "operationId": "ReceiveEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/event.EventReceived"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "All API requests must have a namespace (which can be empty string for cluster scope installations),\nbut this is not part of the CloudEvents spec.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/event.Event"
            }
          }
        ],
        "tags": [
          "EventService"
        ]
      }
    }
  },
  "definitions": {
    "event.Event": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "description": "All API requests must have a namespace (which can be empty string for cluster scope installations),\nbut this is not part of the CloudEvents spec."
        },
        "context": {
          "$ref": "#/definitions/event.EventContext"
        },
        "data": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "event.EventContext": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the event; must be non-empty and unique within the scope of the producer."
        },
        "source": {
          "type": "string",
          "description": "A URI describing the event producer."
        },
        "specversion": {
          "type": "string",
          "description": "The version of the CloudEvents specification used by the event."
        },
        "type": {
          "type": "string",
          "description": "Type - The type of the occurrence which has happened."
        },
        "datacontenttype": {
          "type": "string",
          "description": "A MIME (RFC2046) string describing the media type of `data`."
        },
        "subject": {
          "type": "string",
          "title": "The subject of the event in the context of the event producer"
        },
        "time": {
          "$ref": "#/definitions/k8s.io.apimachinery.pkg.apis.meta.v1.Time",
          "description": "When the event happened."
        }
      },
      "title": "Nhe context of the CloudEvent"
    },
    "event.EventReceived": {
      "type": "object"
    },
    "k8s.io.apimachinery.pkg.apis.meta.v1.Time": {
      "type": "object",
      "properties": {
        "seconds": {
          "type": "string",
          "format": "int64",
          "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive."
        },
        "nanos": {
          "type": "integer",
          "format": "int32",
          "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive. This field may be limited in precision depending on context."
        }
      },
      "description": "Time is a wrapper around time.Time which supports correct\nmarshaling to YAML and JSON.  Wrappers are provided for many\nof the factory methods that the time package offers.\n\n+protobuf.options.marshal=false\n+protobuf.as=Timestamp\n+protobuf.options.(gogoproto.goproto_stringer)=false"
    }
  }
}
