syntax = "proto3";
option go_package = "github.com/argoproj/argo/pkg/apiclient/event";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1/generated.proto";

package event;

message EventRequest {
    // The namespace for the event. This can be empty - i.e. the client has cluster scoped permissions and want this dispatched to all workflows in
    // all namespaces, or if set - only to workflows in the specified namespace
    string namespace = 1;
    // Optional discriminator for the event. This should almost always be empty and ignored.
    // There are edge-cases where the claim-set subject or event payload does not provide enough information
    // to discriminate the event.
    // It MUST NOT be used as security mechanism, e.g. to allow two clients to use the same access token, or
    // to support webhooks on unsecured server. Instead, secure your server and set-up appropriate access tokens.
    string discriminator = 2;
    // The event itself can be any data.
    github.com.argoproj.argo.pkg.apis.workflow.v1alpha1.Item payload = 3;
}

message EventResponse {
}

service EventService {
    rpc ReceiveEvent (EventRequest) returns (EventResponse) {
        option (google.api.http) = {
			post: "/api/v1/events/{namespace}/{discriminator}"
			body: "payload"
		};
    }
}