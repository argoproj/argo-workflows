// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/apiclient/eventsource/eventsource.proto

package eventsource

import (
	context "context"
	fmt "fmt"
	v1alpha1 "github.com/argoproj/argo-events/pkg/apis/eventsource/v1alpha1"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	v11 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateEventSourceRequest struct {
	Namespace            string                `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Evensource           *v1alpha1.EventSource `protobuf:"bytes,2,opt,name=evensource,proto3" json:"evensource,omitempty"`
	CreateOptions        *v1.CreateOptions     `protobuf:"bytes,3,opt,name=createOptions,proto3" json:"createOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CreateEventSourceRequest) Reset()         { *m = CreateEventSourceRequest{} }
func (m *CreateEventSourceRequest) String() string { return proto.CompactTextString(m) }
func (*CreateEventSourceRequest) ProtoMessage()    {}
func (*CreateEventSourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b13fbf03f636aa35, []int{0}
}
func (m *CreateEventSourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateEventSourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateEventSourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateEventSourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateEventSourceRequest.Merge(m, src)
}
func (m *CreateEventSourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateEventSourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateEventSourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateEventSourceRequest proto.InternalMessageInfo

func (m *CreateEventSourceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CreateEventSourceRequest) GetEvensource() *v1alpha1.EventSource {
	if m != nil {
		return m.Evensource
	}
	return nil
}

func (m *CreateEventSourceRequest) GetCreateOptions() *v1.CreateOptions {
	if m != nil {
		return m.CreateOptions
	}
	return nil
}

type GetEventSourceRequest struct {
	Name                 string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string         `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	GetOptions           *v1.GetOptions `protobuf:"bytes,3,opt,name=getOptions,proto3" json:"getOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetEventSourceRequest) Reset()         { *m = GetEventSourceRequest{} }
func (m *GetEventSourceRequest) String() string { return proto.CompactTextString(m) }
func (*GetEventSourceRequest) ProtoMessage()    {}
func (*GetEventSourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b13fbf03f636aa35, []int{1}
}
func (m *GetEventSourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetEventSourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetEventSourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetEventSourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetEventSourceRequest.Merge(m, src)
}
func (m *GetEventSourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetEventSourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetEventSourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetEventSourceRequest proto.InternalMessageInfo

func (m *GetEventSourceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetEventSourceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetEventSourceRequest) GetGetOptions() *v1.GetOptions {
	if m != nil {
		return m.GetOptions
	}
	return nil
}

type ListEventSourcesRequest struct {
	Namespace            string          `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ListOptions          *v1.ListOptions `protobuf:"bytes,2,opt,name=listOptions,proto3" json:"listOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListEventSourcesRequest) Reset()         { *m = ListEventSourcesRequest{} }
func (m *ListEventSourcesRequest) String() string { return proto.CompactTextString(m) }
func (*ListEventSourcesRequest) ProtoMessage()    {}
func (*ListEventSourcesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b13fbf03f636aa35, []int{2}
}
func (m *ListEventSourcesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListEventSourcesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListEventSourcesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListEventSourcesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEventSourcesRequest.Merge(m, src)
}
func (m *ListEventSourcesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListEventSourcesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEventSourcesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListEventSourcesRequest proto.InternalMessageInfo

func (m *ListEventSourcesRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListEventSourcesRequest) GetListOptions() *v1.ListOptions {
	if m != nil {
		return m.ListOptions
	}
	return nil
}

type DeleteEventSourceRequest struct {
	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string            `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	DeleteOptions        *v1.DeleteOptions `protobuf:"bytes,3,opt,name=deleteOptions,proto3" json:"deleteOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DeleteEventSourceRequest) Reset()         { *m = DeleteEventSourceRequest{} }
func (m *DeleteEventSourceRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteEventSourceRequest) ProtoMessage()    {}
func (*DeleteEventSourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b13fbf03f636aa35, []int{3}
}
func (m *DeleteEventSourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteEventSourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteEventSourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteEventSourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteEventSourceRequest.Merge(m, src)
}
func (m *DeleteEventSourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteEventSourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteEventSourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteEventSourceRequest proto.InternalMessageInfo

func (m *DeleteEventSourceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteEventSourceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteEventSourceRequest) GetDeleteOptions() *v1.DeleteOptions {
	if m != nil {
		return m.DeleteOptions
	}
	return nil
}

type UpdateEventSourceRequest struct {
	Name                 string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace            string                `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Evensource           *v1alpha1.EventSource `protobuf:"bytes,3,opt,name=evensource,proto3" json:"evensource,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UpdateEventSourceRequest) Reset()         { *m = UpdateEventSourceRequest{} }
func (m *UpdateEventSourceRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateEventSourceRequest) ProtoMessage()    {}
func (*UpdateEventSourceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b13fbf03f636aa35, []int{4}
}
func (m *UpdateEventSourceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEventSourceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEventSourceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateEventSourceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEventSourceRequest.Merge(m, src)
}
func (m *UpdateEventSourceRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEventSourceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEventSourceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEventSourceRequest proto.InternalMessageInfo

func (m *UpdateEventSourceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateEventSourceRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateEventSourceRequest) GetEvensource() *v1alpha1.EventSource {
	if m != nil {
		return m.Evensource
	}
	return nil
}

type EventSourcesLogsRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// optional - only return entries for this event source
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// optional - only return entries for this event source type (e.g. `webhook`)
	EventSourceType string `protobuf:"bytes,3,opt,name=eventSourceType,proto3" json:"eventSourceType,omitempty"`
	// optional - only return entries for this event name (e.g. `example`)
	EventName string `protobuf:"bytes,4,opt,name=eventName,proto3" json:"eventName,omitempty"`
	// optional - only return entries where `msg` matches this regular expression
	Grep                 string             `protobuf:"bytes,5,opt,name=grep,proto3" json:"grep,omitempty"`
	PodLogOptions        *v11.PodLogOptions `protobuf:"bytes,6,opt,name=podLogOptions,proto3" json:"podLogOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *EventSourcesLogsRequest) Reset()         { *m = EventSourcesLogsRequest{} }
func (m *EventSourcesLogsRequest) String() string { return proto.CompactTextString(m) }
func (*EventSourcesLogsRequest) ProtoMessage()    {}
func (*EventSourcesLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b13fbf03f636aa35, []int{5}
}
func (m *EventSourcesLogsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSourcesLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSourcesLogsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSourcesLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSourcesLogsRequest.Merge(m, src)
}
func (m *EventSourcesLogsRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventSourcesLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSourcesLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventSourcesLogsRequest proto.InternalMessageInfo

func (m *EventSourcesLogsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *EventSourcesLogsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventSourcesLogsRequest) GetEventSourceType() string {
	if m != nil {
		return m.EventSourceType
	}
	return ""
}

func (m *EventSourcesLogsRequest) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *EventSourcesLogsRequest) GetGrep() string {
	if m != nil {
		return m.Grep
	}
	return ""
}

func (m *EventSourcesLogsRequest) GetPodLogOptions() *v11.PodLogOptions {
	if m != nil {
		return m.PodLogOptions
	}
	return nil
}

// structured log entry
type LogEntry struct {
	Namespace       string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	EventSourceName string `protobuf:"bytes,2,opt,name=eventSourceName,proto3" json:"eventSourceName,omitempty"`
	// optional - the event source type (e.g. `webhook`)
	EventSourceType string `protobuf:"bytes,3,opt,name=eventSourceType,proto3" json:"eventSourceType,omitempty"`
	// optional - the event name (e.g. `example`)
	EventName            string   `protobuf:"bytes,4,opt,name=eventName,proto3" json:"eventName,omitempty"`
	Level                string   `protobuf:"bytes,5,opt,name=level,proto3" json:"level,omitempty"`
	Time                 *v1.Time `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
	Msg                  string   `protobuf:"bytes,7,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_b13fbf03f636aa35, []int{6}
}
func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(m, src)
}
func (m *LogEntry) XXX_Size() int {
	return m.Size()
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *LogEntry) GetEventSourceName() string {
	if m != nil {
		return m.EventSourceName
	}
	return ""
}

func (m *LogEntry) GetEventSourceType() string {
	if m != nil {
		return m.EventSourceType
	}
	return ""
}

func (m *LogEntry) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *LogEntry) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *LogEntry) GetTime() *v1.Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *LogEntry) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type EventSourceWatchEvent struct {
	Type                 string                `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Object               *v1alpha1.EventSource `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *EventSourceWatchEvent) Reset()         { *m = EventSourceWatchEvent{} }
func (m *EventSourceWatchEvent) String() string { return proto.CompactTextString(m) }
func (*EventSourceWatchEvent) ProtoMessage()    {}
func (*EventSourceWatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b13fbf03f636aa35, []int{7}
}
func (m *EventSourceWatchEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSourceWatchEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSourceWatchEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSourceWatchEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSourceWatchEvent.Merge(m, src)
}
func (m *EventSourceWatchEvent) XXX_Size() int {
	return m.Size()
}
func (m *EventSourceWatchEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSourceWatchEvent.DiscardUnknown(m)
}

var xxx_messageInfo_EventSourceWatchEvent proto.InternalMessageInfo

func (m *EventSourceWatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *EventSourceWatchEvent) GetObject() *v1alpha1.EventSource {
	if m != nil {
		return m.Object
	}
	return nil
}

type EventSourceDeletedResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventSourceDeletedResponse) Reset()         { *m = EventSourceDeletedResponse{} }
func (m *EventSourceDeletedResponse) String() string { return proto.CompactTextString(m) }
func (*EventSourceDeletedResponse) ProtoMessage()    {}
func (*EventSourceDeletedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b13fbf03f636aa35, []int{8}
}
func (m *EventSourceDeletedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSourceDeletedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSourceDeletedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSourceDeletedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSourceDeletedResponse.Merge(m, src)
}
func (m *EventSourceDeletedResponse) XXX_Size() int {
	return m.Size()
}
func (m *EventSourceDeletedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSourceDeletedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EventSourceDeletedResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CreateEventSourceRequest)(nil), "eventsource.CreateEventSourceRequest")
	proto.RegisterType((*GetEventSourceRequest)(nil), "eventsource.GetEventSourceRequest")
	proto.RegisterType((*ListEventSourcesRequest)(nil), "eventsource.ListEventSourcesRequest")
	proto.RegisterType((*DeleteEventSourceRequest)(nil), "eventsource.DeleteEventSourceRequest")
	proto.RegisterType((*UpdateEventSourceRequest)(nil), "eventsource.UpdateEventSourceRequest")
	proto.RegisterType((*EventSourcesLogsRequest)(nil), "eventsource.EventSourcesLogsRequest")
	proto.RegisterType((*LogEntry)(nil), "eventsource.LogEntry")
	proto.RegisterType((*EventSourceWatchEvent)(nil), "eventsource.EventSourceWatchEvent")
	proto.RegisterType((*EventSourceDeletedResponse)(nil), "eventsource.EventSourceDeletedResponse")
}

func init() {
	proto.RegisterFile("pkg/apiclient/eventsource/eventsource.proto", fileDescriptor_b13fbf03f636aa35)
}

var fileDescriptor_b13fbf03f636aa35 = []byte{
	// 877 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0xcd, 0x6e, 0xe3, 0x54,
	0x14, 0xc7, 0x75, 0xd3, 0x4e, 0xa1, 0xa7, 0x2a, 0xb4, 0x57, 0x54, 0x63, 0x59, 0x55, 0x35, 0x73,
	0xf9, 0x2a, 0x85, 0xd8, 0x49, 0x0b, 0x12, 0x62, 0x81, 0x10, 0x33, 0xa3, 0x4a, 0x28, 0x94, 0x91,
	0x3b, 0x08, 0x0d, 0x1b, 0xe4, 0x38, 0x47, 0x8e, 0x5b, 0xdb, 0xd7, 0xd8, 0xb7, 0x91, 0x2a, 0x34,
	0x9b, 0x59, 0xb1, 0x40, 0x42, 0x08, 0xb1, 0xe2, 0x01, 0x58, 0xb0, 0x03, 0x16, 0x48, 0xbc, 0x00,
	0x4b, 0x24, 0x5e, 0x00, 0x55, 0x3c, 0x00, 0x6f, 0x00, 0xba, 0xd7, 0x4e, 0x7c, 0xed, 0xc4, 0x24,
	0x33, 0x4a, 0x77, 0x27, 0x37, 0xf7, 0xfc, 0xcf, 0xef, 0x7c, 0xc4, 0xc7, 0x81, 0xd7, 0x93, 0x73,
	0xdf, 0x76, 0x93, 0xc0, 0x0b, 0x03, 0x8c, 0x85, 0x8d, 0x23, 0x8c, 0x45, 0xc6, 0x2f, 0x52, 0x0f,
	0x75, 0xdb, 0x4a, 0x52, 0x2e, 0x38, 0xdd, 0xd0, 0x8e, 0xcc, 0x5d, 0x9f, 0x73, 0x3f, 0x44, 0xe9,
	0x6c, 0xbb, 0x71, 0xcc, 0x85, 0x2b, 0x02, 0x1e, 0x67, 0xf9, 0x55, 0xf3, 0xcd, 0xf3, 0xb7, 0x33,
	0x2b, 0xe0, 0xf2, 0xdb, 0xc8, 0xf5, 0x86, 0x41, 0x8c, 0xe9, 0xa5, 0x5d, 0xc4, 0xca, 0xec, 0x08,
	0x85, 0x6b, 0x8f, 0xba, 0xb6, 0x8f, 0x31, 0xa6, 0xae, 0xc0, 0x41, 0xe1, 0xc5, 0x4a, 0x2f, 0xdb,
	0xe3, 0x29, 0xce, 0xba, 0xf3, 0xa1, 0x1f, 0x88, 0xe1, 0x45, 0xdf, 0xf2, 0x78, 0x64, 0xbb, 0xa9,
	0xcf, 0x93, 0x94, 0x9f, 0x29, 0xa3, 0x9d, 0xd3, 0x95, 0x51, 0xf4, 0x64, 0x46, 0x5d, 0x37, 0x4c,
	0x86, 0xee, 0x94, 0x1c, 0xfb, 0x97, 0x80, 0x71, 0x27, 0x45, 0x57, 0xe0, 0x3d, 0x79, 0xfd, 0x54,
	0x5d, 0x77, 0xf0, 0xf3, 0x0b, 0xcc, 0x04, 0xdd, 0x85, 0xf5, 0xd8, 0x8d, 0x30, 0x4b, 0x5c, 0x0f,
	0x0d, 0x72, 0x8b, 0xec, 0xaf, 0x3b, 0xe5, 0x01, 0x3d, 0x03, 0x90, 0x21, 0xf2, 0x08, 0x46, 0xeb,
	0x16, 0xd9, 0xdf, 0x38, 0xfc, 0xc0, 0x2a, 0xf1, 0xac, 0x31, 0x9e, 0x32, 0x3e, 0xcb, 0x71, 0xac,
	0xe4, 0xdc, 0xb7, 0x24, 0x9e, 0xa5, 0xd7, 0x77, 0x8c, 0x67, 0xe9, 0x10, 0x9a, 0x3a, 0x7d, 0x08,
	0x9b, 0x9e, 0xa2, 0xfc, 0x28, 0x51, 0x65, 0x36, 0x56, 0x54, 0xb8, 0x23, 0x2b, 0xaf, 0x98, 0xa5,
	0xd7, 0xb9, 0x0c, 0x21, 0xeb, 0x6c, 0x8d, 0xba, 0xd6, 0x1d, 0xdd, 0xd5, 0xa9, 0x2a, 0xb1, 0xef,
	0x09, 0xec, 0x1c, 0xa3, 0x98, 0x91, 0x3e, 0x85, 0x55, 0x99, 0x6d, 0x91, 0xb9, 0xb2, 0xab, 0x25,
	0x69, 0xd5, 0x4b, 0x72, 0x1f, 0xc0, 0x47, 0x51, 0x65, 0xec, 0x2c, 0xc6, 0x78, 0x3c, 0xf1, 0x73,
	0x34, 0x0d, 0xf6, 0x15, 0x81, 0x9b, 0xbd, 0x20, 0xd3, 0xf1, 0xb2, 0xc5, 0xda, 0x73, 0x0a, 0x1b,
	0x61, 0x90, 0x4d, 0x60, 0xf2, 0xfe, 0x74, 0x17, 0x83, 0xe9, 0x95, 0x8e, 0x8e, 0xae, 0xc2, 0x7e,
	0x20, 0x60, 0xdc, 0xc5, 0x10, 0x67, 0x8e, 0xcb, 0x93, 0xd7, 0xeb, 0x21, 0x6c, 0x0e, 0x94, 0xda,
	0x53, 0xb5, 0xf5, 0xae, 0xee, 0xea, 0x54, 0x95, 0xd8, 0xaf, 0x04, 0x8c, 0x8f, 0x93, 0x81, 0xbb,
	0x24, 0xd2, 0xea, 0xb0, 0xaf, 0x5c, 0xe7, 0xb0, 0xb3, 0x7f, 0x08, 0xdc, 0xd4, 0xfb, 0xdd, 0xe3,
	0xfe, 0x82, 0x3d, 0x1f, 0xe7, 0xd5, 0xd2, 0xf2, 0xda, 0x87, 0xe7, 0xb1, 0x14, 0x7b, 0x70, 0x99,
	0xe4, 0xf8, 0xeb, 0x4e, 0xfd, 0x58, 0x6a, 0xab, 0xa3, 0x13, 0x29, 0xb1, 0x9a, 0x6b, 0x4f, 0x0e,
	0xa4, 0xb6, 0x9f, 0x62, 0x62, 0xdc, 0xc8, 0xb5, 0xa5, 0x4d, 0x8f, 0x61, 0x33, 0xe1, 0x83, 0x1e,
	0xf7, 0xc7, 0xfd, 0x5b, 0x53, 0x85, 0xb9, 0xad, 0xf5, 0xcf, 0x92, 0x0f, 0x32, 0xd9, 0xad, 0xfb,
	0xfa, 0x45, 0xa7, 0xea, 0xc7, 0x1e, 0xb7, 0xe0, 0xd9, 0x1e, 0xf7, 0xef, 0xc5, 0x22, 0xbd, 0x9c,
	0x93, 0x63, 0x35, 0x9f, 0x93, 0x32, 0xdd, 0xfa, 0xf1, 0xd2, 0x32, 0x7f, 0x01, 0x6e, 0x84, 0x38,
	0xc2, 0xb0, 0x48, 0x3d, 0xff, 0x40, 0xdf, 0x85, 0x55, 0x11, 0x44, 0x58, 0xa4, 0x7c, 0xb0, 0xd8,
	0xc8, 0x3e, 0x08, 0x22, 0x74, 0x94, 0x1f, 0xdd, 0x82, 0x95, 0x28, 0xf3, 0x8d, 0x67, 0x94, 0xa6,
	0x34, 0xd9, 0xd7, 0x04, 0x76, 0xb4, 0xbe, 0x7f, 0xe2, 0x0a, 0x6f, 0xa8, 0x3e, 0xcb, 0xda, 0x0b,
	0x89, 0x5f, 0xcc, 0xab, 0xb4, 0x69, 0x1f, 0xd6, 0x78, 0xff, 0x0c, 0x3d, 0x71, 0x0d, 0x8f, 0xde,
	0x42, 0x99, 0xed, 0x82, 0xa9, 0x1d, 0xe7, 0xbf, 0xb7, 0x81, 0x83, 0x59, 0xc2, 0xe3, 0x0c, 0x0f,
	0x7f, 0x5c, 0x07, 0xaa, 0x7d, 0x7d, 0x8a, 0xe9, 0x28, 0xf0, 0x90, 0xfe, 0x42, 0x60, 0x7b, 0x6a,
	0xa5, 0xd0, 0x97, 0x2b, 0x51, 0x9b, 0x56, 0x8e, 0xb9, 0xc4, 0x2c, 0xd8, 0x1b, 0x8f, 0xff, 0xfc,
	0xfb, 0xdb, 0xd6, 0x2b, 0xec, 0xb6, 0x5a, 0xa8, 0xa3, 0x6e, 0xbe, 0x11, 0xdb, 0xb9, 0x4b, 0x66,
	0x7f, 0x31, 0x99, 0xa9, 0x47, 0xef, 0x90, 0x03, 0xfa, 0x13, 0x81, 0xe7, 0xaa, 0x7b, 0x80, 0xb2,
	0x4a, 0x8c, 0x99, 0x4b, 0x62, 0xa9, 0xc0, 0x1d, 0x05, 0x7c, 0x40, 0xf7, 0xe7, 0x02, 0xe7, 0xf6,
	0x23, 0xfa, 0x33, 0x81, 0xad, 0xfa, 0x7a, 0xa0, 0x2f, 0x55, 0x22, 0x35, 0x6c, 0x0f, 0xf3, 0x64,
	0x79, 0xe0, 0x32, 0x04, 0x7b, 0x4d, 0xc1, 0xbf, 0x48, 0xe7, 0x57, 0x9b, 0x7e, 0x47, 0x60, 0x7b,
	0x6a, 0x8b, 0xd4, 0x26, 0xa4, 0x69, 0xcb, 0x98, 0xaf, 0x56, 0xae, 0x35, 0x8f, 0xe7, 0xb8, 0x9a,
	0x07, 0x8b, 0x57, 0xf3, 0x37, 0x02, 0xdb, 0x53, 0x3b, 0xa3, 0xc6, 0xd5, 0xb4, 0x53, 0x96, 0x3a,
	0x08, 0x47, 0x0a, 0xbd, 0x6d, 0x2e, 0x8c, 0x2e, 0x07, 0xf8, 0x4b, 0x02, 0x5b, 0xf5, 0xb5, 0x51,
	0x9b, 0x85, 0x86, 0xad, 0x62, 0xee, 0x54, 0x27, 0xa6, 0x78, 0x10, 0xb3, 0xb7, 0x14, 0x86, 0x4d,
	0xdb, 0x63, 0x8c, 0x4c, 0xa4, 0xe8, 0x46, 0xff, 0x43, 0x13, 0x72, 0x3f, 0xeb, 0x10, 0xfa, 0x0d,
	0x81, 0xed, 0xf2, 0xf1, 0xf5, 0x64, 0x73, 0xc9, 0x9a, 0x88, 0x4b, 0xc1, 0xe9, 0x1f, 0xca, 0x3c,
	0xb0, 0x0e, 0x79, 0xff, 0xbd, 0xdf, 0xaf, 0xf6, 0xc8, 0x1f, 0x57, 0x7b, 0xe4, 0xaf, 0xab, 0x3d,
	0xf2, 0xe9, 0x61, 0xd3, 0x6b, 0xb4, 0xdd, 0xf8, 0x8f, 0xa0, 0xbf, 0xa6, 0x5e, 0x99, 0x8f, 0xfe,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x6c, 0x42, 0x9d, 0x35, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventSourceServiceClient is the client API for EventSourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventSourceServiceClient interface {
	CreateEventSource(ctx context.Context, in *CreateEventSourceRequest, opts ...grpc.CallOption) (*v1alpha1.EventSource, error)
	GetEventSource(ctx context.Context, in *GetEventSourceRequest, opts ...grpc.CallOption) (*v1alpha1.EventSource, error)
	ListEventSources(ctx context.Context, in *ListEventSourcesRequest, opts ...grpc.CallOption) (*v1alpha1.EventSourceList, error)
	DeleteEventSource(ctx context.Context, in *DeleteEventSourceRequest, opts ...grpc.CallOption) (*EventSourceDeletedResponse, error)
	UpdateEventSource(ctx context.Context, in *UpdateEventSourceRequest, opts ...grpc.CallOption) (*v1alpha1.EventSource, error)
	EventSourcesLogs(ctx context.Context, in *EventSourcesLogsRequest, opts ...grpc.CallOption) (EventSourceService_EventSourcesLogsClient, error)
	WatchEventSources(ctx context.Context, in *ListEventSourcesRequest, opts ...grpc.CallOption) (EventSourceService_WatchEventSourcesClient, error)
}

type eventSourceServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventSourceServiceClient(cc *grpc.ClientConn) EventSourceServiceClient {
	return &eventSourceServiceClient{cc}
}

func (c *eventSourceServiceClient) CreateEventSource(ctx context.Context, in *CreateEventSourceRequest, opts ...grpc.CallOption) (*v1alpha1.EventSource, error) {
	out := new(v1alpha1.EventSource)
	err := c.cc.Invoke(ctx, "/eventsource.EventSourceService/CreateEventSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSourceServiceClient) GetEventSource(ctx context.Context, in *GetEventSourceRequest, opts ...grpc.CallOption) (*v1alpha1.EventSource, error) {
	out := new(v1alpha1.EventSource)
	err := c.cc.Invoke(ctx, "/eventsource.EventSourceService/GetEventSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSourceServiceClient) ListEventSources(ctx context.Context, in *ListEventSourcesRequest, opts ...grpc.CallOption) (*v1alpha1.EventSourceList, error) {
	out := new(v1alpha1.EventSourceList)
	err := c.cc.Invoke(ctx, "/eventsource.EventSourceService/ListEventSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSourceServiceClient) DeleteEventSource(ctx context.Context, in *DeleteEventSourceRequest, opts ...grpc.CallOption) (*EventSourceDeletedResponse, error) {
	out := new(EventSourceDeletedResponse)
	err := c.cc.Invoke(ctx, "/eventsource.EventSourceService/DeleteEventSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSourceServiceClient) UpdateEventSource(ctx context.Context, in *UpdateEventSourceRequest, opts ...grpc.CallOption) (*v1alpha1.EventSource, error) {
	out := new(v1alpha1.EventSource)
	err := c.cc.Invoke(ctx, "/eventsource.EventSourceService/UpdateEventSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSourceServiceClient) EventSourcesLogs(ctx context.Context, in *EventSourcesLogsRequest, opts ...grpc.CallOption) (EventSourceService_EventSourcesLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventSourceService_serviceDesc.Streams[0], "/eventsource.EventSourceService/EventSourcesLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventSourceServiceEventSourcesLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventSourceService_EventSourcesLogsClient interface {
	Recv() (*LogEntry, error)
	grpc.ClientStream
}

type eventSourceServiceEventSourcesLogsClient struct {
	grpc.ClientStream
}

func (x *eventSourceServiceEventSourcesLogsClient) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventSourceServiceClient) WatchEventSources(ctx context.Context, in *ListEventSourcesRequest, opts ...grpc.CallOption) (EventSourceService_WatchEventSourcesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventSourceService_serviceDesc.Streams[1], "/eventsource.EventSourceService/WatchEventSources", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventSourceServiceWatchEventSourcesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventSourceService_WatchEventSourcesClient interface {
	Recv() (*EventSourceWatchEvent, error)
	grpc.ClientStream
}

type eventSourceServiceWatchEventSourcesClient struct {
	grpc.ClientStream
}

func (x *eventSourceServiceWatchEventSourcesClient) Recv() (*EventSourceWatchEvent, error) {
	m := new(EventSourceWatchEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventSourceServiceServer is the server API for EventSourceService service.
type EventSourceServiceServer interface {
	CreateEventSource(context.Context, *CreateEventSourceRequest) (*v1alpha1.EventSource, error)
	GetEventSource(context.Context, *GetEventSourceRequest) (*v1alpha1.EventSource, error)
	ListEventSources(context.Context, *ListEventSourcesRequest) (*v1alpha1.EventSourceList, error)
	DeleteEventSource(context.Context, *DeleteEventSourceRequest) (*EventSourceDeletedResponse, error)
	UpdateEventSource(context.Context, *UpdateEventSourceRequest) (*v1alpha1.EventSource, error)
	EventSourcesLogs(*EventSourcesLogsRequest, EventSourceService_EventSourcesLogsServer) error
	WatchEventSources(*ListEventSourcesRequest, EventSourceService_WatchEventSourcesServer) error
}

// UnimplementedEventSourceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventSourceServiceServer struct {
}

func (*UnimplementedEventSourceServiceServer) CreateEventSource(ctx context.Context, req *CreateEventSourceRequest) (*v1alpha1.EventSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventSource not implemented")
}
func (*UnimplementedEventSourceServiceServer) GetEventSource(ctx context.Context, req *GetEventSourceRequest) (*v1alpha1.EventSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventSource not implemented")
}
func (*UnimplementedEventSourceServiceServer) ListEventSources(ctx context.Context, req *ListEventSourcesRequest) (*v1alpha1.EventSourceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventSources not implemented")
}
func (*UnimplementedEventSourceServiceServer) DeleteEventSource(ctx context.Context, req *DeleteEventSourceRequest) (*EventSourceDeletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventSource not implemented")
}
func (*UnimplementedEventSourceServiceServer) UpdateEventSource(ctx context.Context, req *UpdateEventSourceRequest) (*v1alpha1.EventSource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventSource not implemented")
}
func (*UnimplementedEventSourceServiceServer) EventSourcesLogs(req *EventSourcesLogsRequest, srv EventSourceService_EventSourcesLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method EventSourcesLogs not implemented")
}
func (*UnimplementedEventSourceServiceServer) WatchEventSources(req *ListEventSourcesRequest, srv EventSourceService_WatchEventSourcesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchEventSources not implemented")
}

func RegisterEventSourceServiceServer(s *grpc.Server, srv EventSourceServiceServer) {
	s.RegisterService(&_EventSourceService_serviceDesc, srv)
}

func _EventSourceService_CreateEventSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSourceServiceServer).CreateEventSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventsource.EventSourceService/CreateEventSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSourceServiceServer).CreateEventSource(ctx, req.(*CreateEventSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSourceService_GetEventSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSourceServiceServer).GetEventSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventsource.EventSourceService/GetEventSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSourceServiceServer).GetEventSource(ctx, req.(*GetEventSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSourceService_ListEventSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSourceServiceServer).ListEventSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventsource.EventSourceService/ListEventSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSourceServiceServer).ListEventSources(ctx, req.(*ListEventSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSourceService_DeleteEventSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSourceServiceServer).DeleteEventSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventsource.EventSourceService/DeleteEventSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSourceServiceServer).DeleteEventSource(ctx, req.(*DeleteEventSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSourceService_UpdateEventSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSourceServiceServer).UpdateEventSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventsource.EventSourceService/UpdateEventSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSourceServiceServer).UpdateEventSource(ctx, req.(*UpdateEventSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSourceService_EventSourcesLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventSourcesLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventSourceServiceServer).EventSourcesLogs(m, &eventSourceServiceEventSourcesLogsServer{stream})
}

type EventSourceService_EventSourcesLogsServer interface {
	Send(*LogEntry) error
	grpc.ServerStream
}

type eventSourceServiceEventSourcesLogsServer struct {
	grpc.ServerStream
}

func (x *eventSourceServiceEventSourcesLogsServer) Send(m *LogEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _EventSourceService_WatchEventSources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListEventSourcesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventSourceServiceServer).WatchEventSources(m, &eventSourceServiceWatchEventSourcesServer{stream})
}

type EventSourceService_WatchEventSourcesServer interface {
	Send(*EventSourceWatchEvent) error
	grpc.ServerStream
}

type eventSourceServiceWatchEventSourcesServer struct {
	grpc.ServerStream
}

func (x *eventSourceServiceWatchEventSourcesServer) Send(m *EventSourceWatchEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _EventSourceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eventsource.EventSourceService",
	HandlerType: (*EventSourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEventSource",
			Handler:    _EventSourceService_CreateEventSource_Handler,
		},
		{
			MethodName: "GetEventSource",
			Handler:    _EventSourceService_GetEventSource_Handler,
		},
		{
			MethodName: "ListEventSources",
			Handler:    _EventSourceService_ListEventSources_Handler,
		},
		{
			MethodName: "DeleteEventSource",
			Handler:    _EventSourceService_DeleteEventSource_Handler,
		},
		{
			MethodName: "UpdateEventSource",
			Handler:    _EventSourceService_UpdateEventSource_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventSourcesLogs",
			Handler:       _EventSourceService_EventSourcesLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchEventSources",
			Handler:       _EventSourceService_WatchEventSources_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/apiclient/eventsource/eventsource.proto",
}

func (m *CreateEventSourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateEventSourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateEventSourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateOptions != nil {
		{
			size, err := m.CreateOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEventsource(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Evensource != nil {
		{
			size, err := m.Evensource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEventsource(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetEventSourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetEventSourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetEventSourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GetOptions != nil {
		{
			size, err := m.GetOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEventsource(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListEventSourcesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEventSourcesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListEventSourcesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ListOptions != nil {
		{
			size, err := m.ListOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEventsource(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteEventSourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteEventSourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteEventSourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.DeleteOptions != nil {
		{
			size, err := m.DeleteOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEventsource(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateEventSourceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEventSourceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateEventSourceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Evensource != nil {
		{
			size, err := m.Evensource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEventsource(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSourcesLogsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSourcesLogsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSourcesLogsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PodLogOptions != nil {
		{
			size, err := m.PodLogOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEventsource(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Grep) > 0 {
		i -= len(m.Grep)
		copy(dAtA[i:], m.Grep)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.Grep)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EventName) > 0 {
		i -= len(m.EventName)
		copy(dAtA[i:], m.EventName)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.EventName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EventSourceType) > 0 {
		i -= len(m.EventSourceType)
		copy(dAtA[i:], m.EventSourceType)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.EventSourceType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Time != nil {
		{
			size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEventsource(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EventName) > 0 {
		i -= len(m.EventName)
		copy(dAtA[i:], m.EventName)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.EventName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.EventSourceType) > 0 {
		i -= len(m.EventSourceType)
		copy(dAtA[i:], m.EventSourceType)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.EventSourceType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EventSourceName) > 0 {
		i -= len(m.EventSourceName)
		copy(dAtA[i:], m.EventSourceName)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.EventSourceName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSourceWatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSourceWatchEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSourceWatchEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEventsource(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintEventsource(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventSourceDeletedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSourceDeletedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSourceDeletedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintEventsource(dAtA []byte, offset int, v uint64) int {
	offset -= sovEventsource(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateEventSourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	if m.Evensource != nil {
		l = m.Evensource.Size()
		n += 1 + l + sovEventsource(uint64(l))
	}
	if m.CreateOptions != nil {
		l = m.CreateOptions.Size()
		n += 1 + l + sovEventsource(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetEventSourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	if m.GetOptions != nil {
		l = m.GetOptions.Size()
		n += 1 + l + sovEventsource(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListEventSourcesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	if m.ListOptions != nil {
		l = m.ListOptions.Size()
		n += 1 + l + sovEventsource(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteEventSourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	if m.DeleteOptions != nil {
		l = m.DeleteOptions.Size()
		n += 1 + l + sovEventsource(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateEventSourceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	if m.Evensource != nil {
		l = m.Evensource.Size()
		n += 1 + l + sovEventsource(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventSourcesLogsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	l = len(m.EventSourceType)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	l = len(m.EventName)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	l = len(m.Grep)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	if m.PodLogOptions != nil {
		l = m.PodLogOptions.Size()
		n += 1 + l + sovEventsource(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	l = len(m.EventSourceName)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	l = len(m.EventSourceType)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	l = len(m.EventName)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovEventsource(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventSourceWatchEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovEventsource(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovEventsource(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EventSourceDeletedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEventsource(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEventsource(x uint64) (n int) {
	return sovEventsource(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateEventSourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventsource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEventSourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEventSourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evensource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Evensource == nil {
				m.Evensource = &v1alpha1.EventSource{}
			}
			if err := m.Evensource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateOptions == nil {
				m.CreateOptions = &v1.CreateOptions{}
			}
			if err := m.CreateOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventsource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetEventSourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventsource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetEventSourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetEventSourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetOptions == nil {
				m.GetOptions = &v1.GetOptions{}
			}
			if err := m.GetOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventsource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEventSourcesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventsource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEventSourcesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEventSourcesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListOptions == nil {
				m.ListOptions = &v1.ListOptions{}
			}
			if err := m.ListOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventsource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteEventSourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventsource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteEventSourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteEventSourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeleteOptions == nil {
				m.DeleteOptions = &v1.DeleteOptions{}
			}
			if err := m.DeleteOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventsource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEventSourceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventsource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEventSourceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEventSourceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Evensource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Evensource == nil {
				m.Evensource = &v1alpha1.EventSource{}
			}
			if err := m.Evensource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventsource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSourcesLogsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventsource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSourcesLogsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSourcesLogsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventSourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventSourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grep", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grep = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodLogOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodLogOptions == nil {
				m.PodLogOptions = &v11.PodLogOptions{}
			}
			if err := m.PodLogOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventsource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventsource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventSourceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventSourceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventSourceType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventSourceType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &v1.Time{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventsource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSourceWatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventsource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSourceWatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSourceWatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEventsource
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEventsource
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &v1alpha1.EventSource{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventsource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventSourceDeletedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventsource
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSourceDeletedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSourceDeletedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEventsource(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEventsource
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEventsource(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEventsource
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventsource
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEventsource
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEventsource
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEventsource
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEventsource        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEventsource          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEventsource = fmt.Errorf("proto: unexpected end of group")
)
