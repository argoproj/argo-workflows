syntax = "proto3";
option go_package = "github.com/argoproj/argo/pkg/apiclient/eventsource";

import "google/api/annotations.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "github.com/argoproj/argo-events/pkg/apis/eventsource/v1alpha1/generated.proto";

package eventsource;

message CreateEventSourceRequest {
    string namespace = 1;
    github.com.argoproj.argo_events.pkg.apis.eventsource.v1alpha1.EventSource evensource = 2;
    k8s.io.apimachinery.pkg.apis.meta.v1.CreateOptions createOptions = 3;
}

message GetEventSourceRequest {
    string name = 1;
    string namespace = 2;
    k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions getOptions = 3;
}

message ListEventSourcesRequest {
    string namespace = 1;
    k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions listOptions = 2;
}

message DeleteEventSourceRequest {
    string name = 1;
    string namespace = 2;
    k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions deleteOptions = 3;
}

message UpdateEventSourceRequest {
    string name = 1;
    string namespace = 2;
    github.com.argoproj.argo_events.pkg.apis.eventsource.v1alpha1.EventSource evensource = 3;
}

message EventSourcesLogsRequest {
    string namespace = 1;
    // optional
    string name = 2;
    // optional
    string eventSourceType = 3;
    // optional
    string eventName = 4;
    k8s.io.api.core.v1.PodLogOptions podLogOptions = 5;
}

// structured log entry
message LogEntry {
    string namespace = 1;
    string eventSourceName = 2;
    // optional
    string eventSourceType = 3;
    // optional
    string eventName = 4;
    string level = 5;
    k8s.io.apimachinery.pkg.apis.meta.v1.Time time = 6;
    string msg = 7;
}

message EventSourceWatchEvent {
    string type = 1;
    github.com.argoproj.argo_events.pkg.apis.eventsource.v1alpha1.EventSource object = 2;
}

message EventSourceDeleteResponse {
}

service EventSourceService {

    rpc CreateEventSource (CreateEventSourceRequest) returns (github.com.argoproj.argo_events.pkg.apis.eventsource.v1alpha1.EventSource) {
        option (google.api.http) = {
			post: "/api/v1/event-sources/{namespace}"
			body: "*"
		};
    }

    rpc GetEventSource (GetEventSourceRequest) returns (github.com.argoproj.argo_events.pkg.apis.eventsource.v1alpha1.EventSource) {
        option (google.api.http).get = "/api/v1/event-sources/{namespace}/{name}";
    }

    rpc ListEventSources (ListEventSourcesRequest) returns (github.com.argoproj.argo_events.pkg.apis.eventsource.v1alpha1.EventSourceList) {
        option (google.api.http).get = "/api/v1/event-sources/{namespace}";
    }

    rpc DeleteEventSource (DeleteEventSourceRequest) returns (EventSourceDeleteResponse) {
        option (google.api.http).delete = "/api/v1/event-sources/{namespace}/{name}";
    }

    rpc UpdateEventSource (UpdateEventSourceRequest) returns (github.com.argoproj.argo_events.pkg.apis.eventsource.v1alpha1.EventSource) {
        option (google.api.http) = {
            put: "/api/v1/event-sources/{namespace}/{name}"
            body: "*"
        };
    }

    rpc EventSourcesLogs (EventSourcesLogsRequest) returns (stream LogEntry) {
        option (google.api.http).get = "/api/v1/stream/event-sources/{namespace}/logs";
    }

    rpc WatchEventSources (ListEventSourcesRequest) returns (stream EventSourceWatchEvent) {
        option (google.api.http).get = "/api/v1/stream/event-sources/{namespace}";
    }

}