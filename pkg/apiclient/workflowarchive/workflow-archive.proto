syntax = "proto3";
option go_package = "github.com/argoproj/argo-workflows/pkg/apiclient/workflowarchive";

import "google/api/annotations.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "github.com/argoproj/argo-workflows/pkg/apis/workflow/v1alpha1/generated.proto";

package workflowarchive;

message ListArchivedWorkflowsRequest {
  k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions listOptions = 1;
  string namePrefix = 2;
}
message GetArchivedWorkflowRequest {
  string uid = 1;
}
message DeleteArchivedWorkflowRequest {
  string uid = 1;
}
message ArchivedWorkflowDeletedResponse {
}
message ListArchivedWorkflowLabelKeysRequest {
}
message ListArchivedWorkflowLabelValuesRequest {
  k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions listOptions = 1;
}
message RetryArchivedWorkflowRequest {
  string uid = 1;
  string name = 2;
  string namespace = 3;
  bool restartSuccessful = 4;
  string nodeFieldSelector = 5;
}

message ResubmitArchivedWorkflowRequest {
  string uid = 1;
  string name = 2;
  string namespace = 3;
  bool memoized = 4;
}

service ArchivedWorkflowService {
  rpc ListArchivedWorkflows(ListArchivedWorkflowsRequest) returns (github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.WorkflowList) {
    option (google.api.http).get = "/api/v1/archived-workflows";
  }
  rpc GetArchivedWorkflow(GetArchivedWorkflowRequest) returns (github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.Workflow) {
    option (google.api.http).get = "/api/v1/archived-workflows/{uid}";
  }
  rpc DeleteArchivedWorkflow(DeleteArchivedWorkflowRequest) returns (ArchivedWorkflowDeletedResponse) {
    option (google.api.http).delete = "/api/v1/archived-workflows/{uid}";
  }
  rpc ListArchivedWorkflowLabelKeys(ListArchivedWorkflowLabelKeysRequest) returns (github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.LabelKeys) {
    option (google.api.http).get = "/api/v1/archived-workflows-label-keys";
  }
  rpc ListArchivedWorkflowLabelValues(ListArchivedWorkflowLabelValuesRequest) returns (github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.LabelValues) {
    option (google.api.http).get = "/api/v1/archived-workflows-label-values";
  }
  rpc RetryArchivedWorkflow(RetryArchivedWorkflowRequest) returns (github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.Workflow) {
    option (google.api.http) = {
      put : "/api/v1/archived-workflows/{uid}/retry"
      body : "*"
    };
  }
  rpc ResubmitArchivedWorkflow(ResubmitArchivedWorkflowRequest) returns (github.com.argoproj.argo_workflows.v3.pkg.apis.workflow.v1alpha1.Workflow) {
    option (google.api.http) = {
      put : "/api/v1/archived-workflows/{uid}/resubmit"
      body : "*"
    };
  }
}
