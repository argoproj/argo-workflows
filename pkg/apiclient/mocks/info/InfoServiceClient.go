// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	info "github.com/argoproj/argo/pkg/apiclient/info"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"
)

// InfoServiceClient is an autogenerated mock type for the InfoServiceClient type
type InfoServiceClient struct {
	mock.Mock
}

// GetInfo provides a mock function with given fields: ctx, in, opts
func (_m *InfoServiceClient) GetInfo(ctx context.Context, in *info.GetInfoRequest, opts ...grpc.CallOption) (*info.InfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *info.InfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *info.GetInfoRequest, ...grpc.CallOption) *info.InfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*info.InfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *info.GetInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInfo provides a mock function with given fields: ctx, in, opts
func (_m *InfoServiceClient) GetUserInfo(ctx context.Context, in *info.GetUserInfoRequest, opts ...grpc.CallOption) (*info.GetUserInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *info.GetUserInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *info.GetUserInfoRequest, ...grpc.CallOption) *info.GetUserInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*info.GetUserInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *info.GetUserInfoRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersion provides a mock function with given fields: ctx, in, opts
func (_m *InfoServiceClient) GetVersion(ctx context.Context, in *info.GetVersionRequest, opts ...grpc.CallOption) (*v1alpha1.Version, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.Version
	if rf, ok := ret.Get(0).(func(context.Context, *info.GetVersionRequest, ...grpc.CallOption) *v1alpha1.Version); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *info.GetVersionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
