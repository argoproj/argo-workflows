// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	clusterworkflowtemplate "github.com/argoproj/argo/pkg/apiclient/clusterworkflowtemplate"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"
)

// ClusterWorkflowTemplateServiceServer is an autogenerated mock type for the ClusterWorkflowTemplateServiceServer type
type ClusterWorkflowTemplateServiceServer struct {
	mock.Mock
}

// CreateClusterWorkflowTemplate provides a mock function with given fields: _a0, _a1
func (_m *ClusterWorkflowTemplateServiceServer) CreateClusterWorkflowTemplate(_a0 context.Context, _a1 *clusterworkflowtemplate.ClusterWorkflowTemplateCreateRequest) (*v1alpha1.ClusterWorkflowTemplate, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.ClusterWorkflowTemplate
	if rf, ok := ret.Get(0).(func(context.Context, *clusterworkflowtemplate.ClusterWorkflowTemplateCreateRequest) *v1alpha1.ClusterWorkflowTemplate); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ClusterWorkflowTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *clusterworkflowtemplate.ClusterWorkflowTemplateCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClusterWorkflowTemplate provides a mock function with given fields: _a0, _a1
func (_m *ClusterWorkflowTemplateServiceServer) DeleteClusterWorkflowTemplate(_a0 context.Context, _a1 *clusterworkflowtemplate.ClusterWorkflowTemplateDeleteRequest) (*clusterworkflowtemplate.ClusterWorkflowTemplateDeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *clusterworkflowtemplate.ClusterWorkflowTemplateDeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, *clusterworkflowtemplate.ClusterWorkflowTemplateDeleteRequest) *clusterworkflowtemplate.ClusterWorkflowTemplateDeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clusterworkflowtemplate.ClusterWorkflowTemplateDeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *clusterworkflowtemplate.ClusterWorkflowTemplateDeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusterWorkflowTemplate provides a mock function with given fields: _a0, _a1
func (_m *ClusterWorkflowTemplateServiceServer) GetClusterWorkflowTemplate(_a0 context.Context, _a1 *clusterworkflowtemplate.ClusterWorkflowTemplateGetRequest) (*v1alpha1.ClusterWorkflowTemplate, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.ClusterWorkflowTemplate
	if rf, ok := ret.Get(0).(func(context.Context, *clusterworkflowtemplate.ClusterWorkflowTemplateGetRequest) *v1alpha1.ClusterWorkflowTemplate); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ClusterWorkflowTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *clusterworkflowtemplate.ClusterWorkflowTemplateGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LintClusterWorkflowTemplate provides a mock function with given fields: _a0, _a1
func (_m *ClusterWorkflowTemplateServiceServer) LintClusterWorkflowTemplate(_a0 context.Context, _a1 *clusterworkflowtemplate.ClusterWorkflowTemplateLintRequest) (*v1alpha1.ClusterWorkflowTemplate, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.ClusterWorkflowTemplate
	if rf, ok := ret.Get(0).(func(context.Context, *clusterworkflowtemplate.ClusterWorkflowTemplateLintRequest) *v1alpha1.ClusterWorkflowTemplate); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ClusterWorkflowTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *clusterworkflowtemplate.ClusterWorkflowTemplateLintRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusterWorkflowTemplates provides a mock function with given fields: _a0, _a1
func (_m *ClusterWorkflowTemplateServiceServer) ListClusterWorkflowTemplates(_a0 context.Context, _a1 *clusterworkflowtemplate.ClusterWorkflowTemplateListRequest) (*v1alpha1.ClusterWorkflowTemplateList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.ClusterWorkflowTemplateList
	if rf, ok := ret.Get(0).(func(context.Context, *clusterworkflowtemplate.ClusterWorkflowTemplateListRequest) *v1alpha1.ClusterWorkflowTemplateList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ClusterWorkflowTemplateList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *clusterworkflowtemplate.ClusterWorkflowTemplateListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterWorkflowTemplate provides a mock function with given fields: _a0, _a1
func (_m *ClusterWorkflowTemplateServiceServer) UpdateClusterWorkflowTemplate(_a0 context.Context, _a1 *clusterworkflowtemplate.ClusterWorkflowTemplateUpdateRequest) (*v1alpha1.ClusterWorkflowTemplate, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.ClusterWorkflowTemplate
	if rf, ok := ret.Get(0).(func(context.Context, *clusterworkflowtemplate.ClusterWorkflowTemplateUpdateRequest) *v1alpha1.ClusterWorkflowTemplate); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ClusterWorkflowTemplate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *clusterworkflowtemplate.ClusterWorkflowTemplateUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
