// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	context "context"

	v1alpha1 "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"

	workflow "github.com/argoproj/argo/pkg/apiclient/workflow"
)

// WorkflowServiceServer is an autogenerated mock type for the WorkflowServiceServer type
type WorkflowServiceServer struct {
	mock.Mock
}

// CreateWorkflow provides a mock function with given fields: _a0, _a1
func (_m *WorkflowServiceServer) CreateWorkflow(_a0 context.Context, _a1 *workflow.WorkflowCreateRequest) (*v1alpha1.Workflow, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.Workflow
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WorkflowCreateRequest) *v1alpha1.Workflow); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Workflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WorkflowCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkflow provides a mock function with given fields: _a0, _a1
func (_m *WorkflowServiceServer) DeleteWorkflow(_a0 context.Context, _a1 *workflow.WorkflowDeleteRequest) (*workflow.WorkflowDeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *workflow.WorkflowDeleteResponse
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WorkflowDeleteRequest) *workflow.WorkflowDeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflow.WorkflowDeleteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WorkflowDeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkflow provides a mock function with given fields: _a0, _a1
func (_m *WorkflowServiceServer) GetWorkflow(_a0 context.Context, _a1 *workflow.WorkflowGetRequest) (*v1alpha1.Workflow, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.Workflow
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WorkflowGetRequest) *v1alpha1.Workflow); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Workflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WorkflowGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LintWorkflow provides a mock function with given fields: _a0, _a1
func (_m *WorkflowServiceServer) LintWorkflow(_a0 context.Context, _a1 *workflow.WorkflowLintRequest) (*v1alpha1.Workflow, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.Workflow
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WorkflowLintRequest) *v1alpha1.Workflow); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Workflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WorkflowLintRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkflows provides a mock function with given fields: _a0, _a1
func (_m *WorkflowServiceServer) ListWorkflows(_a0 context.Context, _a1 *workflow.WorkflowListRequest) (*v1alpha1.WorkflowList, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.WorkflowList
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WorkflowListRequest) *v1alpha1.WorkflowList); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.WorkflowList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WorkflowListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PodLogs provides a mock function with given fields: _a0, _a1
func (_m *WorkflowServiceServer) PodLogs(_a0 *workflow.WorkflowLogRequest, _a1 workflow.WorkflowService_PodLogsServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*workflow.WorkflowLogRequest, workflow.WorkflowService_PodLogsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResubmitWorkflow provides a mock function with given fields: _a0, _a1
func (_m *WorkflowServiceServer) ResubmitWorkflow(_a0 context.Context, _a1 *workflow.WorkflowResubmitRequest) (*v1alpha1.Workflow, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.Workflow
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WorkflowResubmitRequest) *v1alpha1.Workflow); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Workflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WorkflowResubmitRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResumeWorkflow provides a mock function with given fields: _a0, _a1
func (_m *WorkflowServiceServer) ResumeWorkflow(_a0 context.Context, _a1 *workflow.WorkflowResumeRequest) (*v1alpha1.Workflow, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.Workflow
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WorkflowResumeRequest) *v1alpha1.Workflow); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Workflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WorkflowResumeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetryWorkflow provides a mock function with given fields: _a0, _a1
func (_m *WorkflowServiceServer) RetryWorkflow(_a0 context.Context, _a1 *workflow.WorkflowRetryRequest) (*v1alpha1.Workflow, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.Workflow
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WorkflowRetryRequest) *v1alpha1.Workflow); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Workflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WorkflowRetryRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopWorkflow provides a mock function with given fields: _a0, _a1
func (_m *WorkflowServiceServer) StopWorkflow(_a0 context.Context, _a1 *workflow.WorkflowStopRequest) (*v1alpha1.Workflow, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.Workflow
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WorkflowStopRequest) *v1alpha1.Workflow); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Workflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WorkflowStopRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitWorkflow provides a mock function with given fields: _a0, _a1
func (_m *WorkflowServiceServer) SubmitWorkflow(_a0 context.Context, _a1 *workflow.WorkflowSubmitRequest) (*v1alpha1.Workflow, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.Workflow
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WorkflowSubmitRequest) *v1alpha1.Workflow); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Workflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WorkflowSubmitRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuspendWorkflow provides a mock function with given fields: _a0, _a1
func (_m *WorkflowServiceServer) SuspendWorkflow(_a0 context.Context, _a1 *workflow.WorkflowSuspendRequest) (*v1alpha1.Workflow, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.Workflow
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WorkflowSuspendRequest) *v1alpha1.Workflow); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Workflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WorkflowSuspendRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateWorkflow provides a mock function with given fields: _a0, _a1
func (_m *WorkflowServiceServer) TerminateWorkflow(_a0 context.Context, _a1 *workflow.WorkflowTerminateRequest) (*v1alpha1.Workflow, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *v1alpha1.Workflow
	if rf, ok := ret.Get(0).(func(context.Context, *workflow.WorkflowTerminateRequest) *v1alpha1.Workflow); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Workflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workflow.WorkflowTerminateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WatchWorkflows provides a mock function with given fields: _a0, _a1
func (_m *WorkflowServiceServer) WatchWorkflows(_a0 *workflow.WatchWorkflowsRequest, _a1 workflow.WorkflowService_WatchWorkflowsServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*workflow.WatchWorkflowsRequest, workflow.WorkflowService_WatchWorkflowsServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
