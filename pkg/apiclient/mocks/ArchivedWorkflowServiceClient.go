// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"

	workflowarchive "github.com/argoproj/argo/pkg/apiclient/workflowarchive"
)

// ArchivedWorkflowServiceClient is an autogenerated mock type for the ArchivedWorkflowServiceClient type
type ArchivedWorkflowServiceClient struct {
	mock.Mock
}

// DeleteArchivedWorkflow provides a mock function with given fields: ctx, in, opts
func (_m *ArchivedWorkflowServiceClient) DeleteArchivedWorkflow(ctx context.Context, in *workflowarchive.DeleteArchivedWorkflowRequest, opts ...grpc.CallOption) (*workflowarchive.ArchivedWorkflowDeletedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *workflowarchive.ArchivedWorkflowDeletedResponse
	if rf, ok := ret.Get(0).(func(context.Context, *workflowarchive.DeleteArchivedWorkflowRequest, ...grpc.CallOption) *workflowarchive.ArchivedWorkflowDeletedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workflowarchive.ArchivedWorkflowDeletedResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workflowarchive.DeleteArchivedWorkflowRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArchivedWorkflow provides a mock function with given fields: ctx, in, opts
func (_m *ArchivedWorkflowServiceClient) GetArchivedWorkflow(ctx context.Context, in *workflowarchive.GetArchivedWorkflowRequest, opts ...grpc.CallOption) (*v1alpha1.Workflow, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.Workflow
	if rf, ok := ret.Get(0).(func(context.Context, *workflowarchive.GetArchivedWorkflowRequest, ...grpc.CallOption) *v1alpha1.Workflow); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Workflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workflowarchive.GetArchivedWorkflowRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListArchivedWorkflows provides a mock function with given fields: ctx, in, opts
func (_m *ArchivedWorkflowServiceClient) ListArchivedWorkflows(ctx context.Context, in *workflowarchive.ListArchivedWorkflowsRequest, opts ...grpc.CallOption) (*v1alpha1.WorkflowList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.WorkflowList
	if rf, ok := ret.Get(0).(func(context.Context, *workflowarchive.ListArchivedWorkflowsRequest, ...grpc.CallOption) *v1alpha1.WorkflowList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.WorkflowList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *workflowarchive.ListArchivedWorkflowsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
