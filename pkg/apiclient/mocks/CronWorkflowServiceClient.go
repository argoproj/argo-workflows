// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	context "context"

	cronworkflow "github.com/argoproj/argo/pkg/apiclient/cronworkflow"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"
)

// CronWorkflowServiceClient is an autogenerated mock type for the CronWorkflowServiceClient type
type CronWorkflowServiceClient struct {
	mock.Mock
}

// CreateCronWorkflow provides a mock function with given fields: ctx, in, opts
func (_m *CronWorkflowServiceClient) CreateCronWorkflow(ctx context.Context, in *cronworkflow.CreateCronWorkflowRequest, opts ...grpc.CallOption) (*v1alpha1.CronWorkflow, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.CronWorkflow
	if rf, ok := ret.Get(0).(func(context.Context, *cronworkflow.CreateCronWorkflowRequest, ...grpc.CallOption) *v1alpha1.CronWorkflow); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.CronWorkflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cronworkflow.CreateCronWorkflowRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCronWorkflow provides a mock function with given fields: ctx, in, opts
func (_m *CronWorkflowServiceClient) DeleteCronWorkflow(ctx context.Context, in *cronworkflow.DeleteCronWorkflowRequest, opts ...grpc.CallOption) (*cronworkflow.CronWorkflowDeletedResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *cronworkflow.CronWorkflowDeletedResponse
	if rf, ok := ret.Get(0).(func(context.Context, *cronworkflow.DeleteCronWorkflowRequest, ...grpc.CallOption) *cronworkflow.CronWorkflowDeletedResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cronworkflow.CronWorkflowDeletedResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cronworkflow.DeleteCronWorkflowRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCronWorkflow provides a mock function with given fields: ctx, in, opts
func (_m *CronWorkflowServiceClient) GetCronWorkflow(ctx context.Context, in *cronworkflow.GetCronWorkflowRequest, opts ...grpc.CallOption) (*v1alpha1.CronWorkflow, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.CronWorkflow
	if rf, ok := ret.Get(0).(func(context.Context, *cronworkflow.GetCronWorkflowRequest, ...grpc.CallOption) *v1alpha1.CronWorkflow); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.CronWorkflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cronworkflow.GetCronWorkflowRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LintCronWorkflow provides a mock function with given fields: ctx, in, opts
func (_m *CronWorkflowServiceClient) LintCronWorkflow(ctx context.Context, in *cronworkflow.LintCronWorkflowRequest, opts ...grpc.CallOption) (*v1alpha1.CronWorkflow, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.CronWorkflow
	if rf, ok := ret.Get(0).(func(context.Context, *cronworkflow.LintCronWorkflowRequest, ...grpc.CallOption) *v1alpha1.CronWorkflow); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.CronWorkflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cronworkflow.LintCronWorkflowRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCronWorkflows provides a mock function with given fields: ctx, in, opts
func (_m *CronWorkflowServiceClient) ListCronWorkflows(ctx context.Context, in *cronworkflow.ListCronWorkflowsRequest, opts ...grpc.CallOption) (*v1alpha1.CronWorkflowList, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.CronWorkflowList
	if rf, ok := ret.Get(0).(func(context.Context, *cronworkflow.ListCronWorkflowsRequest, ...grpc.CallOption) *v1alpha1.CronWorkflowList); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.CronWorkflowList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cronworkflow.ListCronWorkflowsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCronWorkflow provides a mock function with given fields: ctx, in, opts
func (_m *CronWorkflowServiceClient) UpdateCronWorkflow(ctx context.Context, in *cronworkflow.UpdateCronWorkflowRequest, opts ...grpc.CallOption) (*v1alpha1.CronWorkflow, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1alpha1.CronWorkflow
	if rf, ok := ret.Get(0).(func(context.Context, *cronworkflow.UpdateCronWorkflowRequest, ...grpc.CallOption) *v1alpha1.CronWorkflow); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.CronWorkflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *cronworkflow.UpdateCronWorkflowRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
