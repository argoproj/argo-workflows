syntax = "proto3";
option go_package = "github.com/argoproj/argo-workflows/pkg/apiclient/pipeline";

import "google/api/annotations.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "github.com/argoproj-labs/argo-dataflow/api/v1alpha1/generated.proto";

package pipeline;

message ListPipelinesRequest {
  string namespace = 1;
  k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions listOptions = 2;
}

message PipelineWatchEvent {
  string type = 1;
  github.com.argoproj_labs.argo_dataflow.api.v1alpha1.Pipeline object = 2;
}

message GetPipelineRequest {
  string name = 1;
  string namespace = 2;
  k8s.io.apimachinery.pkg.apis.meta.v1.GetOptions getOptions = 3;
}

message RestartPipelineRequest {
  string name = 1;
  string namespace = 2;
}

message RestartPipelineResponse {
}

message DeletePipelineRequest {
  string name = 1;
  string namespace = 2;
  k8s.io.apimachinery.pkg.apis.meta.v1.DeleteOptions deleteOptions = 3;
}

message DeletePipelineResponse {
}

message WatchStepRequest {
  string namespace = 1;
  k8s.io.apimachinery.pkg.apis.meta.v1.ListOptions listOptions = 2;
}

message StepWatchEvent {
  string type = 1;
  github.com.argoproj_labs.argo_dataflow.api.v1alpha1.Step object = 2;
}

message PipelineLogsRequest {
  string namespace = 1;
  // optional - only return entries for this pipeline
  string name = 2;
  // optional - only return entries for this step
  string stepName = 3;
  // optional - only return entries which match this expresssion
  string grep = 4;
  k8s.io.api.core.v1.PodLogOptions podLogOptions = 5;
}

// structured log entry
message LogEntry {
  string namespace = 1;
  string pipelineName = 2;
  string stepName = 3;
  k8s.io.apimachinery.pkg.apis.meta.v1.Time time = 6;
  string msg = 7;
}

service PipelineService {
  rpc ListPipelines(ListPipelinesRequest) returns (github.com.argoproj_labs.argo_dataflow.api.v1alpha1.PipelineList) {
    option (google.api.http).get = "/api/v1/pipelines/{namespace}";
  }
  rpc WatchPipelines(ListPipelinesRequest) returns (stream PipelineWatchEvent) {
    option (google.api.http).get = "/api/v1/stream/pipelines/{namespace}";
  }
  rpc GetPipeline(GetPipelineRequest) returns (github.com.argoproj_labs.argo_dataflow.api.v1alpha1.Pipeline) {
    option (google.api.http).get = "/api/v1/pipelines/{namespace}/{name}";
  }
  rpc RestartPipeline(RestartPipelineRequest) returns (RestartPipelineResponse) {
    option (google.api.http).post = "/api/v1/pipelines/{namespace}/{name}/restart";
  }
  rpc DeletePipeline(DeletePipelineRequest) returns (DeletePipelineResponse) {
    option (google.api.http).delete = "/api/v1/pipelines/{namespace}/{name}";
  }
  rpc PipelineLogs(PipelineLogsRequest) returns (stream LogEntry) {
    option (google.api.http).get = "/api/v1/stream/pipelines/{namespace}/logs";
  }
  rpc WatchSteps(WatchStepRequest) returns (stream StepWatchEvent) {
    option (google.api.http).get = "/api/v1/stream/steps/{namespace}";
  }
}
