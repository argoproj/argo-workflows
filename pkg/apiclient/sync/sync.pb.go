// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/apiclient/sync/sync.proto

package sync

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SyncConfigType int32

const (
	SyncConfigType_CONFIG_MAP SyncConfigType = 0
	SyncConfigType_DATABASE   SyncConfigType = 1
)

var SyncConfigType_name = map[int32]string{
	0: "CONFIG_MAP",
	1: "DATABASE",
}

var SyncConfigType_value = map[string]int32{
	"CONFIG_MAP": 0,
	"DATABASE":   1,
}

func (x SyncConfigType) String() string {
	return proto.EnumName(SyncConfigType_name, int32(x))
}

func (SyncConfigType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_74ab334b2e266b46, []int{0}
}

type CreateSyncLimitRequest struct {
	Type                 SyncConfigType `protobuf:"varint,1,opt,name=type,proto3,enum=sync.SyncConfigType" json:"type,omitempty"`
	Namespace            string         `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Key                  string         `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	SizeLimit            int32          `protobuf:"varint,5,opt,name=sizeLimit,proto3" json:"sizeLimit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CreateSyncLimitRequest) Reset()         { *m = CreateSyncLimitRequest{} }
func (m *CreateSyncLimitRequest) String() string { return proto.CompactTextString(m) }
func (*CreateSyncLimitRequest) ProtoMessage()    {}
func (*CreateSyncLimitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74ab334b2e266b46, []int{0}
}
func (m *CreateSyncLimitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSyncLimitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSyncLimitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSyncLimitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSyncLimitRequest.Merge(m, src)
}
func (m *CreateSyncLimitRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateSyncLimitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSyncLimitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSyncLimitRequest proto.InternalMessageInfo

func (m *CreateSyncLimitRequest) GetType() SyncConfigType {
	if m != nil {
		return m.Type
	}
	return SyncConfigType_CONFIG_MAP
}

func (m *CreateSyncLimitRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *CreateSyncLimitRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateSyncLimitRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CreateSyncLimitRequest) GetSizeLimit() int32 {
	if m != nil {
		return m.SizeLimit
	}
	return 0
}

type SyncLimitResponse struct {
	Type                 SyncConfigType `protobuf:"varint,1,opt,name=type,proto3,enum=sync.SyncConfigType" json:"type,omitempty"`
	Namespace            string         `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Key                  string         `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	SizeLimit            int32          `protobuf:"varint,5,opt,name=sizeLimit,proto3" json:"sizeLimit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SyncLimitResponse) Reset()         { *m = SyncLimitResponse{} }
func (m *SyncLimitResponse) String() string { return proto.CompactTextString(m) }
func (*SyncLimitResponse) ProtoMessage()    {}
func (*SyncLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74ab334b2e266b46, []int{1}
}
func (m *SyncLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SyncLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SyncLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SyncLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncLimitResponse.Merge(m, src)
}
func (m *SyncLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *SyncLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncLimitResponse proto.InternalMessageInfo

func (m *SyncLimitResponse) GetType() SyncConfigType {
	if m != nil {
		return m.Type
	}
	return SyncConfigType_CONFIG_MAP
}

func (m *SyncLimitResponse) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SyncLimitResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SyncLimitResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SyncLimitResponse) GetSizeLimit() int32 {
	if m != nil {
		return m.SizeLimit
	}
	return 0
}

type GetSyncLimitRequest struct {
	Type                 SyncConfigType `protobuf:"varint,1,opt,name=type,proto3,enum=sync.SyncConfigType" json:"type,omitempty"`
	Namespace            string         `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Key                  string         `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetSyncLimitRequest) Reset()         { *m = GetSyncLimitRequest{} }
func (m *GetSyncLimitRequest) String() string { return proto.CompactTextString(m) }
func (*GetSyncLimitRequest) ProtoMessage()    {}
func (*GetSyncLimitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74ab334b2e266b46, []int{2}
}
func (m *GetSyncLimitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSyncLimitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSyncLimitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSyncLimitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSyncLimitRequest.Merge(m, src)
}
func (m *GetSyncLimitRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSyncLimitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSyncLimitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSyncLimitRequest proto.InternalMessageInfo

func (m *GetSyncLimitRequest) GetType() SyncConfigType {
	if m != nil {
		return m.Type
	}
	return SyncConfigType_CONFIG_MAP
}

func (m *GetSyncLimitRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetSyncLimitRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetSyncLimitRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type UpdateSyncLimitRequest struct {
	Type                 SyncConfigType `protobuf:"varint,1,opt,name=type,proto3,enum=sync.SyncConfigType" json:"type,omitempty"`
	Namespace            string         `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Key                  string         `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	SizeLimit            int32          `protobuf:"varint,5,opt,name=sizeLimit,proto3" json:"sizeLimit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *UpdateSyncLimitRequest) Reset()         { *m = UpdateSyncLimitRequest{} }
func (m *UpdateSyncLimitRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSyncLimitRequest) ProtoMessage()    {}
func (*UpdateSyncLimitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74ab334b2e266b46, []int{3}
}
func (m *UpdateSyncLimitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSyncLimitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSyncLimitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSyncLimitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSyncLimitRequest.Merge(m, src)
}
func (m *UpdateSyncLimitRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSyncLimitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSyncLimitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSyncLimitRequest proto.InternalMessageInfo

func (m *UpdateSyncLimitRequest) GetType() SyncConfigType {
	if m != nil {
		return m.Type
	}
	return SyncConfigType_CONFIG_MAP
}

func (m *UpdateSyncLimitRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *UpdateSyncLimitRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateSyncLimitRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UpdateSyncLimitRequest) GetSizeLimit() int32 {
	if m != nil {
		return m.SizeLimit
	}
	return 0
}

type DeleteSyncLimitRequest struct {
	Type                 SyncConfigType `protobuf:"varint,1,opt,name=type,proto3,enum=sync.SyncConfigType" json:"type,omitempty"`
	Namespace            string         `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                 string         `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Key                  string         `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DeleteSyncLimitRequest) Reset()         { *m = DeleteSyncLimitRequest{} }
func (m *DeleteSyncLimitRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteSyncLimitRequest) ProtoMessage()    {}
func (*DeleteSyncLimitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_74ab334b2e266b46, []int{4}
}
func (m *DeleteSyncLimitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteSyncLimitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteSyncLimitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteSyncLimitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSyncLimitRequest.Merge(m, src)
}
func (m *DeleteSyncLimitRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteSyncLimitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSyncLimitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSyncLimitRequest proto.InternalMessageInfo

func (m *DeleteSyncLimitRequest) GetType() SyncConfigType {
	if m != nil {
		return m.Type
	}
	return SyncConfigType_CONFIG_MAP
}

func (m *DeleteSyncLimitRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteSyncLimitRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DeleteSyncLimitRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DeleteSyncLimitResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteSyncLimitResponse) Reset()         { *m = DeleteSyncLimitResponse{} }
func (m *DeleteSyncLimitResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteSyncLimitResponse) ProtoMessage()    {}
func (*DeleteSyncLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_74ab334b2e266b46, []int{5}
}
func (m *DeleteSyncLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteSyncLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteSyncLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteSyncLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteSyncLimitResponse.Merge(m, src)
}
func (m *DeleteSyncLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteSyncLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteSyncLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteSyncLimitResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("sync.SyncConfigType", SyncConfigType_name, SyncConfigType_value)
	proto.RegisterType((*CreateSyncLimitRequest)(nil), "sync.CreateSyncLimitRequest")
	proto.RegisterType((*SyncLimitResponse)(nil), "sync.SyncLimitResponse")
	proto.RegisterType((*GetSyncLimitRequest)(nil), "sync.GetSyncLimitRequest")
	proto.RegisterType((*UpdateSyncLimitRequest)(nil), "sync.UpdateSyncLimitRequest")
	proto.RegisterType((*DeleteSyncLimitRequest)(nil), "sync.DeleteSyncLimitRequest")
	proto.RegisterType((*DeleteSyncLimitResponse)(nil), "sync.DeleteSyncLimitResponse")
}

func init() { proto.RegisterFile("pkg/apiclient/sync/sync.proto", fileDescriptor_74ab334b2e266b46) }

var fileDescriptor_74ab334b2e266b46 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x66, 0x9b, 0x14, 0xd1, 0xa1, 0x4a, 0xc2, 0x82, 0x5a, 0x37, 0x4a, 0x42, 0x30, 0x07, 0xa2,
	0x48, 0xc4, 0xa2, 0x88, 0x0b, 0xb7, 0x34, 0x85, 0x0a, 0x89, 0x3f, 0x39, 0xe5, 0xc2, 0x05, 0xb9,
	0x66, 0x6a, 0x16, 0xdb, 0xbb, 0x5b, 0xef, 0xb6, 0x91, 0x41, 0xbd, 0x80, 0xc4, 0x0b, 0xf0, 0x00,
	0x5c, 0x78, 0x18, 0x8e, 0x48, 0x88, 0x3b, 0x8a, 0x78, 0x10, 0xe4, 0xb5, 0x4a, 0x9a, 0xd4, 0x51,
	0x8e, 0xed, 0xc5, 0xfa, 0x3c, 0x3b, 0x9e, 0xef, 0x1b, 0xcf, 0x37, 0x0b, 0x4d, 0x19, 0x06, 0x8e,
	0x27, 0x99, 0x1f, 0x31, 0xe4, 0xda, 0x51, 0x29, 0xf7, 0xcd, 0xa3, 0x27, 0x13, 0xa1, 0x05, 0x2d,
	0x67, 0xb8, 0xde, 0x08, 0x84, 0x08, 0x22, 0xcc, 0xf2, 0x1c, 0x8f, 0x73, 0xa1, 0x3d, 0xcd, 0x04,
	0x57, 0x79, 0x8e, 0xfd, 0x9d, 0xc0, 0xda, 0x20, 0x41, 0x4f, 0xe3, 0x30, 0xe5, 0xfe, 0x53, 0x16,
	0x33, 0xed, 0xe2, 0xc1, 0x21, 0x2a, 0x4d, 0x3b, 0x50, 0xd6, 0xa9, 0x44, 0x8b, 0xb4, 0x49, 0xa7,
	0xb2, 0x79, 0xa3, 0x67, 0x2a, 0x67, 0x59, 0x03, 0xc1, 0xf7, 0x59, 0xb0, 0x9b, 0x4a, 0x74, 0x4d,
	0x06, 0x6d, 0xc0, 0x0a, 0xf7, 0x62, 0x54, 0xd2, 0xf3, 0xd1, 0x5a, 0x6a, 0x93, 0xce, 0x8a, 0x3b,
	0x09, 0x50, 0x0a, 0xe5, 0xec, 0xc5, 0x2a, 0x99, 0x03, 0x83, 0x69, 0x0d, 0x4a, 0x21, 0xa6, 0x56,
	0xd9, 0x84, 0x32, 0x98, 0xd5, 0x50, 0xec, 0x03, 0x1a, 0x05, 0xd6, 0x72, 0x9b, 0x74, 0x96, 0xdd,
	0x49, 0xc0, 0xfe, 0x46, 0xe0, 0xda, 0x29, 0x81, 0x4a, 0x0a, 0xae, 0xf0, 0x42, 0x29, 0xfc, 0x4c,
	0xe0, 0xfa, 0x0e, 0xea, 0xf3, 0xfd, 0x8b, 0x66, 0x9c, 0xaf, 0xe4, 0xdb, 0x8b, 0x3e, 0xce, 0x2f,
	0x04, 0xd6, 0xb6, 0x31, 0xc2, 0xf3, 0x96, 0x69, 0x6f, 0xc0, 0xfa, 0x19, 0x1d, 0xb9, 0xb9, 0xba,
	0x3d, 0xa8, 0x4c, 0xd3, 0xd2, 0x0a, 0xc0, 0xe0, 0xc5, 0xf3, 0xc7, 0x4f, 0x76, 0xde, 0x3c, 0xeb,
	0xbf, 0xac, 0x5d, 0xa2, 0xab, 0x70, 0x65, 0xbb, 0xbf, 0xdb, 0xdf, 0xea, 0x0f, 0x1f, 0xd5, 0xc8,
	0xe6, 0xef, 0x12, 0x5c, 0xcd, 0x3e, 0x18, 0x62, 0x72, 0xc4, 0x7c, 0xa4, 0x31, 0x54, 0x67, 0x16,
	0x8b, 0x36, 0xf2, 0x6e, 0x8a, 0xf7, 0xad, 0xbe, 0x3e, 0xe9, 0x75, 0x4a, 0x89, 0x7d, 0xfb, 0xd3,
	0xaf, 0xbf, 0x5f, 0x97, 0x9a, 0xb6, 0x65, 0x76, 0xf8, 0xe8, 0x5e, 0xbe, 0xe8, 0x1f, 0xff, 0xf7,
	0x7a, 0xfc, 0x90, 0x74, 0x69, 0x08, 0xab, 0xa7, 0xed, 0x47, 0x37, 0xf2, 0x6a, 0x05, 0x96, 0x9c,
	0x4f, 0x74, 0xc7, 0x10, 0xdd, 0xa2, 0x37, 0xe7, 0x11, 0xe5, 0xf8, 0x98, 0x1e, 0x40, 0x75, 0xc6,
	0x65, 0x27, 0xbd, 0x15, 0x9b, 0x6f, 0x21, 0x65, 0x7d, 0x21, 0xe5, 0x08, 0xaa, 0x33, 0x93, 0x3a,
	0xa1, 0x2c, 0x36, 0x52, 0xbd, 0x39, 0xe7, 0x74, 0x9a, 0xb8, 0xbb, 0x88, 0x78, 0x6b, 0xf0, 0x63,
	0xdc, 0x22, 0x3f, 0xc7, 0x2d, 0xf2, 0x67, 0xdc, 0x22, 0xaf, 0x1f, 0x04, 0x4c, 0xbf, 0x3b, 0xdc,
	0xeb, 0xf9, 0x22, 0x76, 0xbc, 0x24, 0x10, 0x32, 0x11, 0xef, 0x0d, 0xb8, 0x3b, 0x12, 0x49, 0xb8,
	0x1f, 0x89, 0x91, 0x72, 0xce, 0xde, 0xca, 0x7b, 0x97, 0xcd, 0x6d, 0x7b, 0xff, 0x5f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x64, 0x57, 0x68, 0x5e, 0xb2, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SyncServiceClient is the client API for SyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SyncServiceClient interface {
	CreateSyncLimit(ctx context.Context, in *CreateSyncLimitRequest, opts ...grpc.CallOption) (*SyncLimitResponse, error)
	GetSyncLimit(ctx context.Context, in *GetSyncLimitRequest, opts ...grpc.CallOption) (*SyncLimitResponse, error)
	UpdateSyncLimit(ctx context.Context, in *UpdateSyncLimitRequest, opts ...grpc.CallOption) (*SyncLimitResponse, error)
	DeleteSyncLimit(ctx context.Context, in *DeleteSyncLimitRequest, opts ...grpc.CallOption) (*DeleteSyncLimitResponse, error)
}

type syncServiceClient struct {
	cc *grpc.ClientConn
}

func NewSyncServiceClient(cc *grpc.ClientConn) SyncServiceClient {
	return &syncServiceClient{cc}
}

func (c *syncServiceClient) CreateSyncLimit(ctx context.Context, in *CreateSyncLimitRequest, opts ...grpc.CallOption) (*SyncLimitResponse, error) {
	out := new(SyncLimitResponse)
	err := c.cc.Invoke(ctx, "/sync.SyncService/CreateSyncLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) GetSyncLimit(ctx context.Context, in *GetSyncLimitRequest, opts ...grpc.CallOption) (*SyncLimitResponse, error) {
	out := new(SyncLimitResponse)
	err := c.cc.Invoke(ctx, "/sync.SyncService/GetSyncLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) UpdateSyncLimit(ctx context.Context, in *UpdateSyncLimitRequest, opts ...grpc.CallOption) (*SyncLimitResponse, error) {
	out := new(SyncLimitResponse)
	err := c.cc.Invoke(ctx, "/sync.SyncService/UpdateSyncLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncServiceClient) DeleteSyncLimit(ctx context.Context, in *DeleteSyncLimitRequest, opts ...grpc.CallOption) (*DeleteSyncLimitResponse, error) {
	out := new(DeleteSyncLimitResponse)
	err := c.cc.Invoke(ctx, "/sync.SyncService/DeleteSyncLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SyncServiceServer is the server API for SyncService service.
type SyncServiceServer interface {
	CreateSyncLimit(context.Context, *CreateSyncLimitRequest) (*SyncLimitResponse, error)
	GetSyncLimit(context.Context, *GetSyncLimitRequest) (*SyncLimitResponse, error)
	UpdateSyncLimit(context.Context, *UpdateSyncLimitRequest) (*SyncLimitResponse, error)
	DeleteSyncLimit(context.Context, *DeleteSyncLimitRequest) (*DeleteSyncLimitResponse, error)
}

// UnimplementedSyncServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSyncServiceServer struct {
}

func (*UnimplementedSyncServiceServer) CreateSyncLimit(ctx context.Context, req *CreateSyncLimitRequest) (*SyncLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSyncLimit not implemented")
}
func (*UnimplementedSyncServiceServer) GetSyncLimit(ctx context.Context, req *GetSyncLimitRequest) (*SyncLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSyncLimit not implemented")
}
func (*UnimplementedSyncServiceServer) UpdateSyncLimit(ctx context.Context, req *UpdateSyncLimitRequest) (*SyncLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSyncLimit not implemented")
}
func (*UnimplementedSyncServiceServer) DeleteSyncLimit(ctx context.Context, req *DeleteSyncLimitRequest) (*DeleteSyncLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSyncLimit not implemented")
}

func RegisterSyncServiceServer(s *grpc.Server, srv SyncServiceServer) {
	s.RegisterService(&_SyncService_serviceDesc, srv)
}

func _SyncService_CreateSyncLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSyncLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).CreateSyncLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sync.SyncService/CreateSyncLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).CreateSyncLimit(ctx, req.(*CreateSyncLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_GetSyncLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSyncLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).GetSyncLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sync.SyncService/GetSyncLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).GetSyncLimit(ctx, req.(*GetSyncLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_UpdateSyncLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSyncLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).UpdateSyncLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sync.SyncService/UpdateSyncLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).UpdateSyncLimit(ctx, req.(*UpdateSyncLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SyncService_DeleteSyncLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSyncLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServiceServer).DeleteSyncLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sync.SyncService/DeleteSyncLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServiceServer).DeleteSyncLimit(ctx, req.(*DeleteSyncLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SyncService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sync.SyncService",
	HandlerType: (*SyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSyncLimit",
			Handler:    _SyncService_CreateSyncLimit_Handler,
		},
		{
			MethodName: "GetSyncLimit",
			Handler:    _SyncService_GetSyncLimit_Handler,
		},
		{
			MethodName: "UpdateSyncLimit",
			Handler:    _SyncService_UpdateSyncLimit_Handler,
		},
		{
			MethodName: "DeleteSyncLimit",
			Handler:    _SyncService_DeleteSyncLimit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apiclient/sync/sync.proto",
}

func (m *CreateSyncLimitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSyncLimitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSyncLimitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SizeLimit != 0 {
		i = encodeVarintSync(dAtA, i, uint64(m.SizeLimit))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintSync(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SyncLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SyncLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SyncLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SizeLimit != 0 {
		i = encodeVarintSync(dAtA, i, uint64(m.SizeLimit))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintSync(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSyncLimitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSyncLimitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSyncLimitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintSync(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSyncLimitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSyncLimitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSyncLimitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SizeLimit != 0 {
		i = encodeVarintSync(dAtA, i, uint64(m.SizeLimit))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintSync(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteSyncLimitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSyncLimitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteSyncLimitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintSync(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintSync(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteSyncLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteSyncLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteSyncLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintSync(dAtA []byte, offset int, v uint64) int {
	offset -= sovSync(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateSyncLimitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSync(uint64(m.Type))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	if m.SizeLimit != 0 {
		n += 1 + sovSync(uint64(m.SizeLimit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SyncLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSync(uint64(m.Type))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	if m.SizeLimit != 0 {
		n += 1 + sovSync(uint64(m.SizeLimit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSyncLimitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSync(uint64(m.Type))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateSyncLimitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSync(uint64(m.Type))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	if m.SizeLimit != 0 {
		n += 1 + sovSync(uint64(m.SizeLimit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteSyncLimitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSync(uint64(m.Type))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSync(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteSyncLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSync(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSync(x uint64) (n int) {
	return sovSync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateSyncLimitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSyncLimitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSyncLimitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SyncConfigType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeLimit", wireType)
			}
			m.SizeLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SyncLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SyncLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SyncLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SyncConfigType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeLimit", wireType)
			}
			m.SizeLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSyncLimitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSyncLimitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSyncLimitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SyncConfigType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSyncLimitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSyncLimitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSyncLimitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SyncConfigType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeLimit", wireType)
			}
			m.SizeLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SizeLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSyncLimitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSyncLimitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSyncLimitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SyncConfigType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteSyncLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteSyncLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteSyncLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSync
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSync
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSync
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSync        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSync          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSync = fmt.Errorf("proto: unexpected end of group")
)
