// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/apiclient/workflowarchivelabel/workflow-archive-label.proto

package workflowarchivelabel

import (
	context "context"
	fmt "fmt"
	v1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListArchivedWorkflowLabelRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListArchivedWorkflowLabelRequest) Reset()         { *m = ListArchivedWorkflowLabelRequest{} }
func (m *ListArchivedWorkflowLabelRequest) String() string { return proto.CompactTextString(m) }
func (*ListArchivedWorkflowLabelRequest) ProtoMessage()    {}
func (*ListArchivedWorkflowLabelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ce451ad7cae020, []int{0}
}
func (m *ListArchivedWorkflowLabelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListArchivedWorkflowLabelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListArchivedWorkflowLabelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListArchivedWorkflowLabelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListArchivedWorkflowLabelRequest.Merge(m, src)
}
func (m *ListArchivedWorkflowLabelRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListArchivedWorkflowLabelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListArchivedWorkflowLabelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListArchivedWorkflowLabelRequest proto.InternalMessageInfo

type GetArchivedWorkflowLabelRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetArchivedWorkflowLabelRequest) Reset()         { *m = GetArchivedWorkflowLabelRequest{} }
func (m *GetArchivedWorkflowLabelRequest) String() string { return proto.CompactTextString(m) }
func (*GetArchivedWorkflowLabelRequest) ProtoMessage()    {}
func (*GetArchivedWorkflowLabelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7ce451ad7cae020, []int{1}
}
func (m *GetArchivedWorkflowLabelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetArchivedWorkflowLabelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetArchivedWorkflowLabelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetArchivedWorkflowLabelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArchivedWorkflowLabelRequest.Merge(m, src)
}
func (m *GetArchivedWorkflowLabelRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetArchivedWorkflowLabelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArchivedWorkflowLabelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetArchivedWorkflowLabelRequest proto.InternalMessageInfo

func (m *GetArchivedWorkflowLabelRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*ListArchivedWorkflowLabelRequest)(nil), "workflowarchivelabel.ListArchivedWorkflowLabelRequest")
	proto.RegisterType((*GetArchivedWorkflowLabelRequest)(nil), "workflowarchivelabel.GetArchivedWorkflowLabelRequest")
}

func init() {
	proto.RegisterFile("pkg/apiclient/workflowarchivelabel/workflow-archive-label.proto", fileDescriptor_f7ce451ad7cae020)
}

var fileDescriptor_f7ce451ad7cae020 = []byte{
	// 363 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x2f, 0xc8, 0x4e, 0xd7,
	0x4f, 0x2c, 0xc8, 0x4c, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0xd1, 0x2f, 0xcf, 0x2f, 0xca, 0x4e, 0xcb,
	0xc9, 0x2f, 0x4f, 0x2c, 0x4a, 0xce, 0xc8, 0x2c, 0x4b, 0xcd, 0x49, 0x4c, 0x4a, 0xcd, 0x81, 0x0b,
	0xea, 0x42, 0x45, 0x75, 0xc1, 0xc2, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x22, 0xd8, 0xb4,
	0x48, 0xc9, 0xa4, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0x82, 0x4c, 0xd6, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f,
	0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x86, 0xe8, 0x91, 0xf2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d,
	0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0x2c, 0x4a, 0xcf, 0x2f, 0x28, 0xca, 0xcf, 0x02, 0x33, 0x74,
	0x61, 0x86, 0x15, 0xeb, 0x43, 0xdd, 0x55, 0x0c, 0xb7, 0x5d, 0xbf, 0xcc, 0x30, 0x31, 0xa7, 0x20,
	0x23, 0xd1, 0x50, 0x3f, 0x3d, 0x35, 0x2f, 0xb5, 0x28, 0xb1, 0x24, 0x35, 0x05, 0x62, 0x9c, 0x92,
	0x12, 0x97, 0x82, 0x4f, 0x66, 0x71, 0x89, 0x23, 0xc4, 0x01, 0x29, 0xe1, 0x50, 0x0d, 0x3e, 0x20,
	0x97, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x28, 0x19, 0x73, 0xc9, 0xbb, 0xa7, 0xe2, 0x55,
	0x22, 0x24, 0xc0, 0xc5, 0x9c, 0x9d, 0x5a, 0x29, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0x62,
	0x1a, 0xed, 0x66, 0xe6, 0x92, 0xc1, 0xaa, 0x25, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0xe8,
	0x34, 0x23, 0x97, 0x24, 0x4e, 0xab, 0x85, 0xcc, 0xf4, 0xb0, 0x85, 0x8d, 0x1e, 0x21, 0xb7, 0x4a,
	0x79, 0xeb, 0x21, 0xc2, 0x47, 0x0f, 0x16, 0x3e, 0x60, 0x46, 0x3c, 0x3c, 0x7c, 0xf4, 0xca, 0x8c,
	0xf5, 0x0a, 0xb2, 0xd3, 0xf5, 0x40, 0x41, 0x04, 0xb7, 0x46, 0x0f, 0x16, 0x44, 0x7a, 0x60, 0xf3,
	0xbc, 0x53, 0x2b, 0x8b, 0x95, 0x34, 0x9b, 0x2e, 0x3f, 0x99, 0xcc, 0xa4, 0x2c, 0xa4, 0x08, 0x8e,
	0x8b, 0x32, 0x43, 0x7d, 0xa8, 0x5b, 0x52, 0x10, 0x61, 0x0d, 0x89, 0xcf, 0x62, 0xa1, 0x33, 0x8c,
	0x5c, 0x12, 0xb8, 0x02, 0x49, 0xc8, 0x14, 0xbb, 0x67, 0x08, 0x04, 0xaa, 0x94, 0x07, 0x95, 0xfc,
	0x52, 0xac, 0xa4, 0x0f, 0xf6, 0x88, 0xa6, 0x90, 0x3a, 0x41, 0x8f, 0xe8, 0x57, 0x67, 0xa7, 0x56,
	0xd6, 0x3a, 0x05, 0x9f, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c,
	0x51, 0xae, 0xc4, 0xa7, 0x39, 0x3c, 0x79, 0x21, 0x89, 0x0d, 0x9c, 0xe4, 0x8c, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x77, 0xe8, 0x67, 0xa1, 0x38, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ArchivedWorkflowLabelServiceClient is the client API for ArchivedWorkflowLabelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArchivedWorkflowLabelServiceClient interface {
	ListArchivedWorkflowLabel(ctx context.Context, in *ListArchivedWorkflowLabelRequest, opts ...grpc.CallOption) (*v1alpha1.LabelKeys, error)
	GetArchivedWorkflowLabel(ctx context.Context, in *GetArchivedWorkflowLabelRequest, opts ...grpc.CallOption) (*v1alpha1.Labels, error)
}

type archivedWorkflowLabelServiceClient struct {
	cc *grpc.ClientConn
}

func NewArchivedWorkflowLabelServiceClient(cc *grpc.ClientConn) ArchivedWorkflowLabelServiceClient {
	return &archivedWorkflowLabelServiceClient{cc}
}

func (c *archivedWorkflowLabelServiceClient) ListArchivedWorkflowLabel(ctx context.Context, in *ListArchivedWorkflowLabelRequest, opts ...grpc.CallOption) (*v1alpha1.LabelKeys, error) {
	out := new(v1alpha1.LabelKeys)
	err := c.cc.Invoke(ctx, "/workflowarchivelabel.ArchivedWorkflowLabelService/ListArchivedWorkflowLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivedWorkflowLabelServiceClient) GetArchivedWorkflowLabel(ctx context.Context, in *GetArchivedWorkflowLabelRequest, opts ...grpc.CallOption) (*v1alpha1.Labels, error) {
	out := new(v1alpha1.Labels)
	err := c.cc.Invoke(ctx, "/workflowarchivelabel.ArchivedWorkflowLabelService/GetArchivedWorkflowLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchivedWorkflowLabelServiceServer is the server API for ArchivedWorkflowLabelService service.
type ArchivedWorkflowLabelServiceServer interface {
	ListArchivedWorkflowLabel(context.Context, *ListArchivedWorkflowLabelRequest) (*v1alpha1.LabelKeys, error)
	GetArchivedWorkflowLabel(context.Context, *GetArchivedWorkflowLabelRequest) (*v1alpha1.Labels, error)
}

// UnimplementedArchivedWorkflowLabelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedArchivedWorkflowLabelServiceServer struct {
}

func (*UnimplementedArchivedWorkflowLabelServiceServer) ListArchivedWorkflowLabel(ctx context.Context, req *ListArchivedWorkflowLabelRequest) (*v1alpha1.LabelKeys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArchivedWorkflowLabel not implemented")
}
func (*UnimplementedArchivedWorkflowLabelServiceServer) GetArchivedWorkflowLabel(ctx context.Context, req *GetArchivedWorkflowLabelRequest) (*v1alpha1.Labels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchivedWorkflowLabel not implemented")
}

func RegisterArchivedWorkflowLabelServiceServer(s *grpc.Server, srv ArchivedWorkflowLabelServiceServer) {
	s.RegisterService(&_ArchivedWorkflowLabelService_serviceDesc, srv)
}

func _ArchivedWorkflowLabelService_ListArchivedWorkflowLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArchivedWorkflowLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedWorkflowLabelServiceServer).ListArchivedWorkflowLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflowarchivelabel.ArchivedWorkflowLabelService/ListArchivedWorkflowLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedWorkflowLabelServiceServer).ListArchivedWorkflowLabel(ctx, req.(*ListArchivedWorkflowLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivedWorkflowLabelService_GetArchivedWorkflowLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchivedWorkflowLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivedWorkflowLabelServiceServer).GetArchivedWorkflowLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/workflowarchivelabel.ArchivedWorkflowLabelService/GetArchivedWorkflowLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivedWorkflowLabelServiceServer).GetArchivedWorkflowLabel(ctx, req.(*GetArchivedWorkflowLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArchivedWorkflowLabelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "workflowarchivelabel.ArchivedWorkflowLabelService",
	HandlerType: (*ArchivedWorkflowLabelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListArchivedWorkflowLabel",
			Handler:    _ArchivedWorkflowLabelService_ListArchivedWorkflowLabel_Handler,
		},
		{
			MethodName: "GetArchivedWorkflowLabel",
			Handler:    _ArchivedWorkflowLabelService_GetArchivedWorkflowLabel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apiclient/workflowarchivelabel/workflow-archive-label.proto",
}

func (m *ListArchivedWorkflowLabelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListArchivedWorkflowLabelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListArchivedWorkflowLabelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetArchivedWorkflowLabelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArchivedWorkflowLabelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetArchivedWorkflowLabelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintWorkflowArchiveLabel(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWorkflowArchiveLabel(dAtA []byte, offset int, v uint64) int {
	offset -= sovWorkflowArchiveLabel(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListArchivedWorkflowLabelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetArchivedWorkflowLabelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovWorkflowArchiveLabel(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWorkflowArchiveLabel(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWorkflowArchiveLabel(x uint64) (n int) {
	return sovWorkflowArchiveLabel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListArchivedWorkflowLabelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowArchiveLabel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListArchivedWorkflowLabelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListArchivedWorkflowLabelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowArchiveLabel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowArchiveLabel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArchivedWorkflowLabelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkflowArchiveLabel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArchivedWorkflowLabelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArchivedWorkflowLabelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkflowArchiveLabel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWorkflowArchiveLabel
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWorkflowArchiveLabel
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWorkflowArchiveLabel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWorkflowArchiveLabel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkflowArchiveLabel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkflowArchiveLabel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflowArchiveLabel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkflowArchiveLabel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorkflowArchiveLabel
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWorkflowArchiveLabel
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWorkflowArchiveLabel
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWorkflowArchiveLabel        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkflowArchiveLabel          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWorkflowArchiveLabel = fmt.Errorf("proto: unexpected end of group")
)
