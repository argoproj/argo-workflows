// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WorkflowStatusResultLister helps list WorkflowStatusResults.
// All objects returned here must be treated as read-only.
type WorkflowStatusResultLister interface {
	// List lists all WorkflowStatusResults in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkflowStatusResult, err error)
	// WorkflowStatusResults returns an object that can list and get WorkflowStatusResults.
	WorkflowStatusResults(namespace string) WorkflowStatusResultNamespaceLister
	WorkflowStatusResultListerExpansion
}

// workflowStatusResultLister implements the WorkflowStatusResultLister interface.
type workflowStatusResultLister struct {
	indexer cache.Indexer
}

// NewWorkflowStatusResultLister returns a new WorkflowStatusResultLister.
func NewWorkflowStatusResultLister(indexer cache.Indexer) WorkflowStatusResultLister {
	return &workflowStatusResultLister{indexer: indexer}
}

// List lists all WorkflowStatusResults in the indexer.
func (s *workflowStatusResultLister) List(selector labels.Selector) (ret []*v1alpha1.WorkflowStatusResult, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkflowStatusResult))
	})
	return ret, err
}

// WorkflowStatusResults returns an object that can list and get WorkflowStatusResults.
func (s *workflowStatusResultLister) WorkflowStatusResults(namespace string) WorkflowStatusResultNamespaceLister {
	return workflowStatusResultNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WorkflowStatusResultNamespaceLister helps list and get WorkflowStatusResults.
// All objects returned here must be treated as read-only.
type WorkflowStatusResultNamespaceLister interface {
	// List lists all WorkflowStatusResults in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.WorkflowStatusResult, err error)
	// Get retrieves the WorkflowStatusResult from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.WorkflowStatusResult, error)
	WorkflowStatusResultNamespaceListerExpansion
}

// workflowStatusResultNamespaceLister implements the WorkflowStatusResultNamespaceLister
// interface.
type workflowStatusResultNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all WorkflowStatusResults in the indexer for a given namespace.
func (s workflowStatusResultNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.WorkflowStatusResult, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.WorkflowStatusResult))
	})
	return ret, err
}

// Get retrieves the WorkflowStatusResult from the indexer for a given namespace and name.
func (s workflowStatusResultNamespaceLister) Get(name string) (*v1alpha1.WorkflowStatusResult, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("workflowstatusresult"), name)
	}
	return obj.(*v1alpha1.WorkflowStatusResult), nil
}
