// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	_v1 "k8s.io/api/core/v1"
	_v1beta1 "k8s.io/api/policy/v1beta1"
	resource "k8s.io/apimachinery/pkg/api/resource"
	_v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(in *jlexer.Lexer, out *ZipStrategy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(out *jwriter.Writer, in ZipStrategy) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ZipStrategy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ZipStrategy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ZipStrategy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ZipStrategy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(in *jlexer.Lexer, out *WorkflowTemplateRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "clusterScope":
			out.ClusterScope = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(out *jwriter.Writer, in WorkflowTemplateRef) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.ClusterScope {
		const prefix string = ",\"clusterScope\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ClusterScope))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkflowTemplateRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkflowTemplateRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkflowTemplateRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkflowTemplateRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(in *jlexer.Lexer, out *WorkflowStep) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "template":
			out.Template = string(in.String())
		case "arguments":
			(out.Arguments).UnmarshalEasyJSON(in)
		case "templateRef":
			if in.IsNull() {
				in.Skip()
				out.TemplateRef = nil
			} else {
				if out.TemplateRef == nil {
					out.TemplateRef = new(TemplateRef)
				}
				(*out.TemplateRef).UnmarshalEasyJSON(in)
			}
		case "withItems":
			if in.IsNull() {
				in.Skip()
				out.WithItems = nil
			} else {
				in.Delim('[')
				if out.WithItems == nil {
					if !in.IsDelim(']') {
						out.WithItems = make([]Item, 0, 2)
					} else {
						out.WithItems = []Item{}
					}
				} else {
					out.WithItems = (out.WithItems)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Item
					if data := in.Raw(); in.Ok() {
						in.AddError((v1).UnmarshalJSON(data))
					}
					out.WithItems = append(out.WithItems, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "withParam":
			out.WithParam = string(in.String())
		case "withSequence":
			if in.IsNull() {
				in.Skip()
				out.WithSequence = nil
			} else {
				if out.WithSequence == nil {
					out.WithSequence = new(Sequence)
				}
				(*out.WithSequence).UnmarshalEasyJSON(in)
			}
		case "when":
			out.When = string(in.String())
		case "continueOn":
			if in.IsNull() {
				in.Skip()
				out.ContinueOn = nil
			} else {
				if out.ContinueOn == nil {
					out.ContinueOn = new(ContinueOn)
				}
				(*out.ContinueOn).UnmarshalEasyJSON(in)
			}
		case "onExit":
			out.OnExit = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(out *jwriter.Writer, in WorkflowStep) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Template != "" {
		const prefix string = ",\"template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Template))
	}
	if true {
		const prefix string = ",\"arguments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Arguments).MarshalEasyJSON(out)
	}
	if in.TemplateRef != nil {
		const prefix string = ",\"templateRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TemplateRef).MarshalEasyJSON(out)
	}
	if len(in.WithItems) != 0 {
		const prefix string = ",\"withItems\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v2, v3 := range in.WithItems {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.Raw((v3).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.WithParam != "" {
		const prefix string = ",\"withParam\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WithParam))
	}
	if in.WithSequence != nil {
		const prefix string = ",\"withSequence\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.WithSequence).MarshalEasyJSON(out)
	}
	if in.When != "" {
		const prefix string = ",\"when\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.When))
	}
	if in.ContinueOn != nil {
		const prefix string = ",\"continueOn\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ContinueOn).MarshalEasyJSON(out)
	}
	if in.OnExit != "" {
		const prefix string = ",\"onExit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnExit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkflowStep) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkflowStep) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkflowStep) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkflowStep) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha13(in *jlexer.Lexer, out *WorkflowStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "phase":
			out.Phase = NodePhase(in.String())
		case "startedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartedAt).UnmarshalJSON(data))
			}
		case "finishedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FinishedAt).UnmarshalJSON(data))
			}
		case "estimatedDuration":
			out.EstimatedDuration = EstimatedDuration(in.Int())
		case "progress":
			out.Progress = Progress(in.String())
		case "message":
			out.Message = string(in.String())
		case "compressedNodes":
			out.CompressedNodes = string(in.String())
		case "nodes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Nodes = make(Nodes)
				} else {
					out.Nodes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 NodeStatus
					(v4).UnmarshalEasyJSON(in)
					(out.Nodes)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "offloadNodeStatusVersion":
			out.OffloadNodeStatusVersion = string(in.String())
		case "storedTemplates":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.StoredTemplates = make(map[string]Template)
				} else {
					out.StoredTemplates = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 Template
					(v5).UnmarshalEasyJSON(in)
					(out.StoredTemplates)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "persistentVolumeClaims":
			if in.IsNull() {
				in.Skip()
				out.PersistentVolumeClaims = nil
			} else {
				in.Delim('[')
				if out.PersistentVolumeClaims == nil {
					if !in.IsDelim(']') {
						out.PersistentVolumeClaims = make([]_v1.Volume, 0, 0)
					} else {
						out.PersistentVolumeClaims = []_v1.Volume{}
					}
				} else {
					out.PersistentVolumeClaims = (out.PersistentVolumeClaims)[:0]
				}
				for !in.IsDelim(']') {
					var v6 _v1.Volume
					easyjson147b50d1DecodeK8sIoApiCoreV1(in, &v6)
					out.PersistentVolumeClaims = append(out.PersistentVolumeClaims, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "outputs":
			if in.IsNull() {
				in.Skip()
				out.Outputs = nil
			} else {
				if out.Outputs == nil {
					out.Outputs = new(Outputs)
				}
				(*out.Outputs).UnmarshalEasyJSON(in)
			}
		case "conditions":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make(Conditions, 0, 1)
					} else {
						out.Conditions = Conditions{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Condition
					(v7).UnmarshalEasyJSON(in)
					out.Conditions = append(out.Conditions, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resourcesDuration":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ResourcesDuration = make(ResourcesDuration)
				} else {
					out.ResourcesDuration = nil
				}
				for !in.IsDelim('}') {
					key := _v1.ResourceName(in.String())
					in.WantColon()
					var v8 ResourceDuration
					v8 = ResourceDuration(in.Int64())
					(out.ResourcesDuration)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "storedWorkflowTemplateSpec":
			if in.IsNull() {
				in.Skip()
				out.StoredWorkflowSpec = nil
			} else {
				if out.StoredWorkflowSpec == nil {
					out.StoredWorkflowSpec = new(WorkflowSpec)
				}
				(*out.StoredWorkflowSpec).UnmarshalEasyJSON(in)
			}
		case "synchronization":
			if in.IsNull() {
				in.Skip()
				out.Synchronization = nil
			} else {
				if out.Synchronization == nil {
					out.Synchronization = new(SynchronizationStatus)
				}
				(*out.Synchronization).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha13(out *jwriter.Writer, in WorkflowStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Phase != "" {
		const prefix string = ",\"phase\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Phase))
	}
	if true {
		const prefix string = ",\"startedAt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.StartedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"finishedAt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.FinishedAt).MarshalJSON())
	}
	if in.EstimatedDuration != 0 {
		const prefix string = ",\"estimatedDuration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.EstimatedDuration))
	}
	if in.Progress != "" {
		const prefix string = ",\"progress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Progress))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	if in.CompressedNodes != "" {
		const prefix string = ",\"compressedNodes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CompressedNodes))
	}
	if len(in.Nodes) != 0 {
		const prefix string = ",\"nodes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.Nodes {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				(v9Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if in.OffloadNodeStatusVersion != "" {
		const prefix string = ",\"offloadNodeStatusVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OffloadNodeStatusVersion))
	}
	if len(in.StoredTemplates) != 0 {
		const prefix string = ",\"storedTemplates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.StoredTemplates {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				(v10Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	if len(in.PersistentVolumeClaims) != 0 {
		const prefix string = ",\"persistentVolumeClaims\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.PersistentVolumeClaims {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV1(out, v12)
			}
			out.RawByte(']')
		}
	}
	if in.Outputs != nil {
		const prefix string = ",\"outputs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Outputs).MarshalEasyJSON(out)
	}
	if len(in.Conditions) != 0 {
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.Conditions {
				if v13 > 0 {
					out.RawByte(',')
				}
				(v14).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.ResourcesDuration) != 0 {
		const prefix string = ",\"resourcesDuration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.ResourcesDuration {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v15Name))
				out.RawByte(':')
				out.Int64(int64(v15Value))
			}
			out.RawByte('}')
		}
	}
	if in.StoredWorkflowSpec != nil {
		const prefix string = ",\"storedWorkflowTemplateSpec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.StoredWorkflowSpec).MarshalEasyJSON(out)
	}
	if in.Synchronization != nil {
		const prefix string = ",\"synchronization\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Synchronization).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkflowStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkflowStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkflowStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkflowStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha13(l, v)
}
func easyjson147b50d1DecodeK8sIoApiCoreV1(in *jlexer.Lexer, out *_v1.Volume) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "hostPath":
			if in.IsNull() {
				in.Skip()
				out.HostPath = nil
			} else {
				if out.HostPath == nil {
					out.HostPath = new(_v1.HostPathVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV11(in, out.HostPath)
			}
		case "emptyDir":
			if in.IsNull() {
				in.Skip()
				out.EmptyDir = nil
			} else {
				if out.EmptyDir == nil {
					out.EmptyDir = new(_v1.EmptyDirVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV12(in, out.EmptyDir)
			}
		case "gcePersistentDisk":
			if in.IsNull() {
				in.Skip()
				out.GCEPersistentDisk = nil
			} else {
				if out.GCEPersistentDisk == nil {
					out.GCEPersistentDisk = new(_v1.GCEPersistentDiskVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV13(in, out.GCEPersistentDisk)
			}
		case "awsElasticBlockStore":
			if in.IsNull() {
				in.Skip()
				out.AWSElasticBlockStore = nil
			} else {
				if out.AWSElasticBlockStore == nil {
					out.AWSElasticBlockStore = new(_v1.AWSElasticBlockStoreVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV14(in, out.AWSElasticBlockStore)
			}
		case "gitRepo":
			if in.IsNull() {
				in.Skip()
				out.GitRepo = nil
			} else {
				if out.GitRepo == nil {
					out.GitRepo = new(_v1.GitRepoVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV15(in, out.GitRepo)
			}
		case "secret":
			if in.IsNull() {
				in.Skip()
				out.Secret = nil
			} else {
				if out.Secret == nil {
					out.Secret = new(_v1.SecretVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV16(in, out.Secret)
			}
		case "nfs":
			if in.IsNull() {
				in.Skip()
				out.NFS = nil
			} else {
				if out.NFS == nil {
					out.NFS = new(_v1.NFSVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV17(in, out.NFS)
			}
		case "iscsi":
			if in.IsNull() {
				in.Skip()
				out.ISCSI = nil
			} else {
				if out.ISCSI == nil {
					out.ISCSI = new(_v1.ISCSIVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV18(in, out.ISCSI)
			}
		case "glusterfs":
			if in.IsNull() {
				in.Skip()
				out.Glusterfs = nil
			} else {
				if out.Glusterfs == nil {
					out.Glusterfs = new(_v1.GlusterfsVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV19(in, out.Glusterfs)
			}
		case "persistentVolumeClaim":
			if in.IsNull() {
				in.Skip()
				out.PersistentVolumeClaim = nil
			} else {
				if out.PersistentVolumeClaim == nil {
					out.PersistentVolumeClaim = new(_v1.PersistentVolumeClaimVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV110(in, out.PersistentVolumeClaim)
			}
		case "rbd":
			if in.IsNull() {
				in.Skip()
				out.RBD = nil
			} else {
				if out.RBD == nil {
					out.RBD = new(_v1.RBDVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV111(in, out.RBD)
			}
		case "flexVolume":
			if in.IsNull() {
				in.Skip()
				out.FlexVolume = nil
			} else {
				if out.FlexVolume == nil {
					out.FlexVolume = new(_v1.FlexVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV112(in, out.FlexVolume)
			}
		case "cinder":
			if in.IsNull() {
				in.Skip()
				out.Cinder = nil
			} else {
				if out.Cinder == nil {
					out.Cinder = new(_v1.CinderVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV113(in, out.Cinder)
			}
		case "cephfs":
			if in.IsNull() {
				in.Skip()
				out.CephFS = nil
			} else {
				if out.CephFS == nil {
					out.CephFS = new(_v1.CephFSVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV114(in, out.CephFS)
			}
		case "flocker":
			if in.IsNull() {
				in.Skip()
				out.Flocker = nil
			} else {
				if out.Flocker == nil {
					out.Flocker = new(_v1.FlockerVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV115(in, out.Flocker)
			}
		case "downwardAPI":
			if in.IsNull() {
				in.Skip()
				out.DownwardAPI = nil
			} else {
				if out.DownwardAPI == nil {
					out.DownwardAPI = new(_v1.DownwardAPIVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV116(in, out.DownwardAPI)
			}
		case "fc":
			if in.IsNull() {
				in.Skip()
				out.FC = nil
			} else {
				if out.FC == nil {
					out.FC = new(_v1.FCVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV117(in, out.FC)
			}
		case "azureFile":
			if in.IsNull() {
				in.Skip()
				out.AzureFile = nil
			} else {
				if out.AzureFile == nil {
					out.AzureFile = new(_v1.AzureFileVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV118(in, out.AzureFile)
			}
		case "configMap":
			if in.IsNull() {
				in.Skip()
				out.ConfigMap = nil
			} else {
				if out.ConfigMap == nil {
					out.ConfigMap = new(_v1.ConfigMapVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV119(in, out.ConfigMap)
			}
		case "vsphereVolume":
			if in.IsNull() {
				in.Skip()
				out.VsphereVolume = nil
			} else {
				if out.VsphereVolume == nil {
					out.VsphereVolume = new(_v1.VsphereVirtualDiskVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV120(in, out.VsphereVolume)
			}
		case "quobyte":
			if in.IsNull() {
				in.Skip()
				out.Quobyte = nil
			} else {
				if out.Quobyte == nil {
					out.Quobyte = new(_v1.QuobyteVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV121(in, out.Quobyte)
			}
		case "azureDisk":
			if in.IsNull() {
				in.Skip()
				out.AzureDisk = nil
			} else {
				if out.AzureDisk == nil {
					out.AzureDisk = new(_v1.AzureDiskVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV122(in, out.AzureDisk)
			}
		case "photonPersistentDisk":
			if in.IsNull() {
				in.Skip()
				out.PhotonPersistentDisk = nil
			} else {
				if out.PhotonPersistentDisk == nil {
					out.PhotonPersistentDisk = new(_v1.PhotonPersistentDiskVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV123(in, out.PhotonPersistentDisk)
			}
		case "projected":
			if in.IsNull() {
				in.Skip()
				out.Projected = nil
			} else {
				if out.Projected == nil {
					out.Projected = new(_v1.ProjectedVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV124(in, out.Projected)
			}
		case "portworxVolume":
			if in.IsNull() {
				in.Skip()
				out.PortworxVolume = nil
			} else {
				if out.PortworxVolume == nil {
					out.PortworxVolume = new(_v1.PortworxVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV125(in, out.PortworxVolume)
			}
		case "scaleIO":
			if in.IsNull() {
				in.Skip()
				out.ScaleIO = nil
			} else {
				if out.ScaleIO == nil {
					out.ScaleIO = new(_v1.ScaleIOVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV126(in, out.ScaleIO)
			}
		case "storageos":
			if in.IsNull() {
				in.Skip()
				out.StorageOS = nil
			} else {
				if out.StorageOS == nil {
					out.StorageOS = new(_v1.StorageOSVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV127(in, out.StorageOS)
			}
		case "csi":
			if in.IsNull() {
				in.Skip()
				out.CSI = nil
			} else {
				if out.CSI == nil {
					out.CSI = new(_v1.CSIVolumeSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV128(in, out.CSI)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV1(out *jwriter.Writer, in _v1.Volume) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.HostPath != nil {
		const prefix string = ",\"hostPath\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV11(out, *in.HostPath)
	}
	if in.EmptyDir != nil {
		const prefix string = ",\"emptyDir\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV12(out, *in.EmptyDir)
	}
	if in.GCEPersistentDisk != nil {
		const prefix string = ",\"gcePersistentDisk\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV13(out, *in.GCEPersistentDisk)
	}
	if in.AWSElasticBlockStore != nil {
		const prefix string = ",\"awsElasticBlockStore\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV14(out, *in.AWSElasticBlockStore)
	}
	if in.GitRepo != nil {
		const prefix string = ",\"gitRepo\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV15(out, *in.GitRepo)
	}
	if in.Secret != nil {
		const prefix string = ",\"secret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV16(out, *in.Secret)
	}
	if in.NFS != nil {
		const prefix string = ",\"nfs\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV17(out, *in.NFS)
	}
	if in.ISCSI != nil {
		const prefix string = ",\"iscsi\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV18(out, *in.ISCSI)
	}
	if in.Glusterfs != nil {
		const prefix string = ",\"glusterfs\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV19(out, *in.Glusterfs)
	}
	if in.PersistentVolumeClaim != nil {
		const prefix string = ",\"persistentVolumeClaim\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV110(out, *in.PersistentVolumeClaim)
	}
	if in.RBD != nil {
		const prefix string = ",\"rbd\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV111(out, *in.RBD)
	}
	if in.FlexVolume != nil {
		const prefix string = ",\"flexVolume\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV112(out, *in.FlexVolume)
	}
	if in.Cinder != nil {
		const prefix string = ",\"cinder\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV113(out, *in.Cinder)
	}
	if in.CephFS != nil {
		const prefix string = ",\"cephfs\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV114(out, *in.CephFS)
	}
	if in.Flocker != nil {
		const prefix string = ",\"flocker\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV115(out, *in.Flocker)
	}
	if in.DownwardAPI != nil {
		const prefix string = ",\"downwardAPI\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV116(out, *in.DownwardAPI)
	}
	if in.FC != nil {
		const prefix string = ",\"fc\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV117(out, *in.FC)
	}
	if in.AzureFile != nil {
		const prefix string = ",\"azureFile\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV118(out, *in.AzureFile)
	}
	if in.ConfigMap != nil {
		const prefix string = ",\"configMap\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV119(out, *in.ConfigMap)
	}
	if in.VsphereVolume != nil {
		const prefix string = ",\"vsphereVolume\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV120(out, *in.VsphereVolume)
	}
	if in.Quobyte != nil {
		const prefix string = ",\"quobyte\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV121(out, *in.Quobyte)
	}
	if in.AzureDisk != nil {
		const prefix string = ",\"azureDisk\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV122(out, *in.AzureDisk)
	}
	if in.PhotonPersistentDisk != nil {
		const prefix string = ",\"photonPersistentDisk\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV123(out, *in.PhotonPersistentDisk)
	}
	if in.Projected != nil {
		const prefix string = ",\"projected\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV124(out, *in.Projected)
	}
	if in.PortworxVolume != nil {
		const prefix string = ",\"portworxVolume\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV125(out, *in.PortworxVolume)
	}
	if in.ScaleIO != nil {
		const prefix string = ",\"scaleIO\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV126(out, *in.ScaleIO)
	}
	if in.StorageOS != nil {
		const prefix string = ",\"storageos\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV127(out, *in.StorageOS)
	}
	if in.CSI != nil {
		const prefix string = ",\"csi\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV128(out, *in.CSI)
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV128(in *jlexer.Lexer, out *_v1.CSIVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "driver":
			out.Driver = string(in.String())
		case "readOnly":
			if in.IsNull() {
				in.Skip()
				out.ReadOnly = nil
			} else {
				if out.ReadOnly == nil {
					out.ReadOnly = new(bool)
				}
				*out.ReadOnly = bool(in.Bool())
			}
		case "fsType":
			if in.IsNull() {
				in.Skip()
				out.FSType = nil
			} else {
				if out.FSType == nil {
					out.FSType = new(string)
				}
				*out.FSType = string(in.String())
			}
		case "volumeAttributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.VolumeAttributes = make(map[string]string)
				} else {
					out.VolumeAttributes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v16 string
					v16 = string(in.String())
					(out.VolumeAttributes)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		case "nodePublishSecretRef":
			if in.IsNull() {
				in.Skip()
				out.NodePublishSecretRef = nil
			} else {
				if out.NodePublishSecretRef == nil {
					out.NodePublishSecretRef = new(_v1.LocalObjectReference)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV129(in, out.NodePublishSecretRef)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV128(out *jwriter.Writer, in _v1.CSIVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"driver\":"
		out.RawString(prefix[1:])
		out.String(string(in.Driver))
	}
	if in.ReadOnly != nil {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(*in.ReadOnly))
	}
	if in.FSType != nil {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(*in.FSType))
	}
	if len(in.VolumeAttributes) != 0 {
		const prefix string = ",\"volumeAttributes\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.VolumeAttributes {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				out.String(string(v17Value))
			}
			out.RawByte('}')
		}
	}
	if in.NodePublishSecretRef != nil {
		const prefix string = ",\"nodePublishSecretRef\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV129(out, *in.NodePublishSecretRef)
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV129(in *jlexer.Lexer, out *_v1.LocalObjectReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV129(out *jwriter.Writer, in _v1.LocalObjectReference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV127(in *jlexer.Lexer, out *_v1.StorageOSVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "volumeName":
			out.VolumeName = string(in.String())
		case "volumeNamespace":
			out.VolumeNamespace = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(_v1.LocalObjectReference)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV129(in, out.SecretRef)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV127(out *jwriter.Writer, in _v1.StorageOSVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.VolumeName != "" {
		const prefix string = ",\"volumeName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.VolumeName))
	}
	if in.VolumeNamespace != "" {
		const prefix string = ",\"volumeNamespace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VolumeNamespace))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FSType))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ReadOnly))
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV129(out, *in.SecretRef)
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV126(in *jlexer.Lexer, out *_v1.ScaleIOVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gateway":
			out.Gateway = string(in.String())
		case "system":
			out.System = string(in.String())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(_v1.LocalObjectReference)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV129(in, out.SecretRef)
			}
		case "sslEnabled":
			out.SSLEnabled = bool(in.Bool())
		case "protectionDomain":
			out.ProtectionDomain = string(in.String())
		case "storagePool":
			out.StoragePool = string(in.String())
		case "storageMode":
			out.StorageMode = string(in.String())
		case "volumeName":
			out.VolumeName = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV126(out *jwriter.Writer, in _v1.ScaleIOVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"gateway\":"
		out.RawString(prefix[1:])
		out.String(string(in.Gateway))
	}
	{
		const prefix string = ",\"system\":"
		out.RawString(prefix)
		out.String(string(in.System))
	}
	{
		const prefix string = ",\"secretRef\":"
		out.RawString(prefix)
		if in.SecretRef == nil {
			out.RawString("null")
		} else {
			easyjson147b50d1EncodeK8sIoApiCoreV129(out, *in.SecretRef)
		}
	}
	if in.SSLEnabled {
		const prefix string = ",\"sslEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.SSLEnabled))
	}
	if in.ProtectionDomain != "" {
		const prefix string = ",\"protectionDomain\":"
		out.RawString(prefix)
		out.String(string(in.ProtectionDomain))
	}
	if in.StoragePool != "" {
		const prefix string = ",\"storagePool\":"
		out.RawString(prefix)
		out.String(string(in.StoragePool))
	}
	if in.StorageMode != "" {
		const prefix string = ",\"storageMode\":"
		out.RawString(prefix)
		out.String(string(in.StorageMode))
	}
	if in.VolumeName != "" {
		const prefix string = ",\"volumeName\":"
		out.RawString(prefix)
		out.String(string(in.VolumeName))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV125(in *jlexer.Lexer, out *_v1.PortworxVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "volumeID":
			out.VolumeID = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV125(out *jwriter.Writer, in _v1.PortworxVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"volumeID\":"
		out.RawString(prefix[1:])
		out.String(string(in.VolumeID))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV124(in *jlexer.Lexer, out *_v1.ProjectedVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sources":
			if in.IsNull() {
				in.Skip()
				out.Sources = nil
			} else {
				in.Delim('[')
				if out.Sources == nil {
					if !in.IsDelim(']') {
						out.Sources = make([]_v1.VolumeProjection, 0, 2)
					} else {
						out.Sources = []_v1.VolumeProjection{}
					}
				} else {
					out.Sources = (out.Sources)[:0]
				}
				for !in.IsDelim(']') {
					var v18 _v1.VolumeProjection
					easyjson147b50d1DecodeK8sIoApiCoreV130(in, &v18)
					out.Sources = append(out.Sources, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defaultMode":
			if in.IsNull() {
				in.Skip()
				out.DefaultMode = nil
			} else {
				if out.DefaultMode == nil {
					out.DefaultMode = new(int32)
				}
				*out.DefaultMode = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV124(out *jwriter.Writer, in _v1.ProjectedVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sources\":"
		out.RawString(prefix[1:])
		if in.Sources == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.Sources {
				if v19 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV130(out, v20)
			}
			out.RawByte(']')
		}
	}
	if in.DefaultMode != nil {
		const prefix string = ",\"defaultMode\":"
		out.RawString(prefix)
		out.Int32(int32(*in.DefaultMode))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV130(in *jlexer.Lexer, out *_v1.VolumeProjection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "secret":
			if in.IsNull() {
				in.Skip()
				out.Secret = nil
			} else {
				if out.Secret == nil {
					out.Secret = new(_v1.SecretProjection)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV131(in, out.Secret)
			}
		case "downwardAPI":
			if in.IsNull() {
				in.Skip()
				out.DownwardAPI = nil
			} else {
				if out.DownwardAPI == nil {
					out.DownwardAPI = new(_v1.DownwardAPIProjection)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV132(in, out.DownwardAPI)
			}
		case "configMap":
			if in.IsNull() {
				in.Skip()
				out.ConfigMap = nil
			} else {
				if out.ConfigMap == nil {
					out.ConfigMap = new(_v1.ConfigMapProjection)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV133(in, out.ConfigMap)
			}
		case "serviceAccountToken":
			if in.IsNull() {
				in.Skip()
				out.ServiceAccountToken = nil
			} else {
				if out.ServiceAccountToken == nil {
					out.ServiceAccountToken = new(_v1.ServiceAccountTokenProjection)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV134(in, out.ServiceAccountToken)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV130(out *jwriter.Writer, in _v1.VolumeProjection) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Secret != nil {
		const prefix string = ",\"secret\":"
		first = false
		out.RawString(prefix[1:])
		easyjson147b50d1EncodeK8sIoApiCoreV131(out, *in.Secret)
	}
	if in.DownwardAPI != nil {
		const prefix string = ",\"downwardAPI\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV132(out, *in.DownwardAPI)
	}
	if in.ConfigMap != nil {
		const prefix string = ",\"configMap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV133(out, *in.ConfigMap)
	}
	if in.ServiceAccountToken != nil {
		const prefix string = ",\"serviceAccountToken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV134(out, *in.ServiceAccountToken)
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV134(in *jlexer.Lexer, out *_v1.ServiceAccountTokenProjection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "audience":
			out.Audience = string(in.String())
		case "expirationSeconds":
			if in.IsNull() {
				in.Skip()
				out.ExpirationSeconds = nil
			} else {
				if out.ExpirationSeconds == nil {
					out.ExpirationSeconds = new(int64)
				}
				*out.ExpirationSeconds = int64(in.Int64())
			}
		case "path":
			out.Path = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV134(out *jwriter.Writer, in _v1.ServiceAccountTokenProjection) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Audience != "" {
		const prefix string = ",\"audience\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Audience))
	}
	if in.ExpirationSeconds != nil {
		const prefix string = ",\"expirationSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ExpirationSeconds))
	}
	{
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV133(in *jlexer.Lexer, out *_v1.ConfigMapProjection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]_v1.KeyToPath, 0, 1)
					} else {
						out.Items = []_v1.KeyToPath{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v21 _v1.KeyToPath
					easyjson147b50d1DecodeK8sIoApiCoreV135(in, &v21)
					out.Items = append(out.Items, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "optional":
			if in.IsNull() {
				in.Skip()
				out.Optional = nil
			} else {
				if out.Optional == nil {
					out.Optional = new(bool)
				}
				*out.Optional = bool(in.Bool())
			}
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV133(out *jwriter.Writer, in _v1.ConfigMapProjection) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v22, v23 := range in.Items {
				if v22 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV135(out, v23)
			}
			out.RawByte(']')
		}
	}
	if in.Optional != nil {
		const prefix string = ",\"optional\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Optional))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV135(in *jlexer.Lexer, out *_v1.KeyToPath) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "mode":
			if in.IsNull() {
				in.Skip()
				out.Mode = nil
			} else {
				if out.Mode == nil {
					out.Mode = new(int32)
				}
				*out.Mode = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV135(out *jwriter.Writer, in _v1.KeyToPath) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	if in.Mode != nil {
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.Int32(int32(*in.Mode))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV132(in *jlexer.Lexer, out *_v1.DownwardAPIProjection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]_v1.DownwardAPIVolumeFile, 0, 1)
					} else {
						out.Items = []_v1.DownwardAPIVolumeFile{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v24 _v1.DownwardAPIVolumeFile
					easyjson147b50d1DecodeK8sIoApiCoreV136(in, &v24)
					out.Items = append(out.Items, v24)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV132(out *jwriter.Writer, in _v1.DownwardAPIProjection) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v25, v26 := range in.Items {
				if v25 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV136(out, v26)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV136(in *jlexer.Lexer, out *_v1.DownwardAPIVolumeFile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "fieldRef":
			if in.IsNull() {
				in.Skip()
				out.FieldRef = nil
			} else {
				if out.FieldRef == nil {
					out.FieldRef = new(_v1.ObjectFieldSelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV137(in, out.FieldRef)
			}
		case "resourceFieldRef":
			if in.IsNull() {
				in.Skip()
				out.ResourceFieldRef = nil
			} else {
				if out.ResourceFieldRef == nil {
					out.ResourceFieldRef = new(_v1.ResourceFieldSelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV138(in, out.ResourceFieldRef)
			}
		case "mode":
			if in.IsNull() {
				in.Skip()
				out.Mode = nil
			} else {
				if out.Mode == nil {
					out.Mode = new(int32)
				}
				*out.Mode = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV136(out *jwriter.Writer, in _v1.DownwardAPIVolumeFile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	if in.FieldRef != nil {
		const prefix string = ",\"fieldRef\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV137(out, *in.FieldRef)
	}
	if in.ResourceFieldRef != nil {
		const prefix string = ",\"resourceFieldRef\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV138(out, *in.ResourceFieldRef)
	}
	if in.Mode != nil {
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.Int32(int32(*in.Mode))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV138(in *jlexer.Lexer, out *_v1.ResourceFieldSelector) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "containerName":
			out.ContainerName = string(in.String())
		case "resource":
			out.Resource = string(in.String())
		case "divisor":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Divisor).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV138(out *jwriter.Writer, in _v1.ResourceFieldSelector) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ContainerName != "" {
		const prefix string = ",\"containerName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ContainerName))
	}
	{
		const prefix string = ",\"resource\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Resource))
	}
	if true {
		const prefix string = ",\"divisor\":"
		out.RawString(prefix)
		out.Raw((in.Divisor).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV137(in *jlexer.Lexer, out *_v1.ObjectFieldSelector) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "fieldPath":
			out.FieldPath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV137(out *jwriter.Writer, in _v1.ObjectFieldSelector) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	{
		const prefix string = ",\"fieldPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FieldPath))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV131(in *jlexer.Lexer, out *_v1.SecretProjection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]_v1.KeyToPath, 0, 1)
					} else {
						out.Items = []_v1.KeyToPath{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v27 _v1.KeyToPath
					easyjson147b50d1DecodeK8sIoApiCoreV135(in, &v27)
					out.Items = append(out.Items, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "optional":
			if in.IsNull() {
				in.Skip()
				out.Optional = nil
			} else {
				if out.Optional == nil {
					out.Optional = new(bool)
				}
				*out.Optional = bool(in.Bool())
			}
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV131(out *jwriter.Writer, in _v1.SecretProjection) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v28, v29 := range in.Items {
				if v28 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV135(out, v29)
			}
			out.RawByte(']')
		}
	}
	if in.Optional != nil {
		const prefix string = ",\"optional\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Optional))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV123(in *jlexer.Lexer, out *_v1.PhotonPersistentDiskVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pdID":
			out.PdID = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV123(out *jwriter.Writer, in _v1.PhotonPersistentDiskVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pdID\":"
		out.RawString(prefix[1:])
		out.String(string(in.PdID))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV122(in *jlexer.Lexer, out *_v1.AzureDiskVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "diskName":
			out.DiskName = string(in.String())
		case "diskURI":
			out.DataDiskURI = string(in.String())
		case "cachingMode":
			if in.IsNull() {
				in.Skip()
				out.CachingMode = nil
			} else {
				if out.CachingMode == nil {
					out.CachingMode = new(_v1.AzureDataDiskCachingMode)
				}
				*out.CachingMode = _v1.AzureDataDiskCachingMode(in.String())
			}
		case "fsType":
			if in.IsNull() {
				in.Skip()
				out.FSType = nil
			} else {
				if out.FSType == nil {
					out.FSType = new(string)
				}
				*out.FSType = string(in.String())
			}
		case "readOnly":
			if in.IsNull() {
				in.Skip()
				out.ReadOnly = nil
			} else {
				if out.ReadOnly == nil {
					out.ReadOnly = new(bool)
				}
				*out.ReadOnly = bool(in.Bool())
			}
		case "kind":
			if in.IsNull() {
				in.Skip()
				out.Kind = nil
			} else {
				if out.Kind == nil {
					out.Kind = new(_v1.AzureDataDiskKind)
				}
				*out.Kind = _v1.AzureDataDiskKind(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV122(out *jwriter.Writer, in _v1.AzureDiskVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"diskName\":"
		out.RawString(prefix[1:])
		out.String(string(in.DiskName))
	}
	{
		const prefix string = ",\"diskURI\":"
		out.RawString(prefix)
		out.String(string(in.DataDiskURI))
	}
	if in.CachingMode != nil {
		const prefix string = ",\"cachingMode\":"
		out.RawString(prefix)
		out.String(string(*in.CachingMode))
	}
	if in.FSType != nil {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(*in.FSType))
	}
	if in.ReadOnly != nil {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(*in.ReadOnly))
	}
	if in.Kind != nil {
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(*in.Kind))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV121(in *jlexer.Lexer, out *_v1.QuobyteVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "registry":
			out.Registry = string(in.String())
		case "volume":
			out.Volume = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "user":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "tenant":
			out.Tenant = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV121(out *jwriter.Writer, in _v1.QuobyteVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"registry\":"
		out.RawString(prefix[1:])
		out.String(string(in.Registry))
	}
	{
		const prefix string = ",\"volume\":"
		out.RawString(prefix)
		out.String(string(in.Volume))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	if in.Tenant != "" {
		const prefix string = ",\"tenant\":"
		out.RawString(prefix)
		out.String(string(in.Tenant))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV120(in *jlexer.Lexer, out *_v1.VsphereVirtualDiskVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "volumePath":
			out.VolumePath = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "storagePolicyName":
			out.StoragePolicyName = string(in.String())
		case "storagePolicyID":
			out.StoragePolicyID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV120(out *jwriter.Writer, in _v1.VsphereVirtualDiskVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"volumePath\":"
		out.RawString(prefix[1:])
		out.String(string(in.VolumePath))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.StoragePolicyName != "" {
		const prefix string = ",\"storagePolicyName\":"
		out.RawString(prefix)
		out.String(string(in.StoragePolicyName))
	}
	if in.StoragePolicyID != "" {
		const prefix string = ",\"storagePolicyID\":"
		out.RawString(prefix)
		out.String(string(in.StoragePolicyID))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV119(in *jlexer.Lexer, out *_v1.ConfigMapVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]_v1.KeyToPath, 0, 1)
					} else {
						out.Items = []_v1.KeyToPath{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v30 _v1.KeyToPath
					easyjson147b50d1DecodeK8sIoApiCoreV135(in, &v30)
					out.Items = append(out.Items, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defaultMode":
			if in.IsNull() {
				in.Skip()
				out.DefaultMode = nil
			} else {
				if out.DefaultMode == nil {
					out.DefaultMode = new(int32)
				}
				*out.DefaultMode = int32(in.Int32())
			}
		case "optional":
			if in.IsNull() {
				in.Skip()
				out.Optional = nil
			} else {
				if out.Optional == nil {
					out.Optional = new(bool)
				}
				*out.Optional = bool(in.Bool())
			}
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV119(out *jwriter.Writer, in _v1.ConfigMapVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v31, v32 := range in.Items {
				if v31 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV135(out, v32)
			}
			out.RawByte(']')
		}
	}
	if in.DefaultMode != nil {
		const prefix string = ",\"defaultMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.DefaultMode))
	}
	if in.Optional != nil {
		const prefix string = ",\"optional\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Optional))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV118(in *jlexer.Lexer, out *_v1.AzureFileVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "secretName":
			out.SecretName = string(in.String())
		case "shareName":
			out.ShareName = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV118(out *jwriter.Writer, in _v1.AzureFileVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"secretName\":"
		out.RawString(prefix[1:])
		out.String(string(in.SecretName))
	}
	{
		const prefix string = ",\"shareName\":"
		out.RawString(prefix)
		out.String(string(in.ShareName))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV117(in *jlexer.Lexer, out *_v1.FCVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "targetWWNs":
			if in.IsNull() {
				in.Skip()
				out.TargetWWNs = nil
			} else {
				in.Delim('[')
				if out.TargetWWNs == nil {
					if !in.IsDelim(']') {
						out.TargetWWNs = make([]string, 0, 4)
					} else {
						out.TargetWWNs = []string{}
					}
				} else {
					out.TargetWWNs = (out.TargetWWNs)[:0]
				}
				for !in.IsDelim(']') {
					var v33 string
					v33 = string(in.String())
					out.TargetWWNs = append(out.TargetWWNs, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lun":
			if in.IsNull() {
				in.Skip()
				out.Lun = nil
			} else {
				if out.Lun == nil {
					out.Lun = new(int32)
				}
				*out.Lun = int32(in.Int32())
			}
		case "fsType":
			out.FSType = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "wwids":
			if in.IsNull() {
				in.Skip()
				out.WWIDs = nil
			} else {
				in.Delim('[')
				if out.WWIDs == nil {
					if !in.IsDelim(']') {
						out.WWIDs = make([]string, 0, 4)
					} else {
						out.WWIDs = []string{}
					}
				} else {
					out.WWIDs = (out.WWIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.WWIDs = append(out.WWIDs, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV117(out *jwriter.Writer, in _v1.FCVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.TargetWWNs) != 0 {
		const prefix string = ",\"targetWWNs\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v35, v36 := range in.TargetWWNs {
				if v35 > 0 {
					out.RawByte(',')
				}
				out.String(string(v36))
			}
			out.RawByte(']')
		}
	}
	if in.Lun != nil {
		const prefix string = ",\"lun\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Lun))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FSType))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ReadOnly))
	}
	if len(in.WWIDs) != 0 {
		const prefix string = ",\"wwids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v37, v38 := range in.WWIDs {
				if v37 > 0 {
					out.RawByte(',')
				}
				out.String(string(v38))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV116(in *jlexer.Lexer, out *_v1.DownwardAPIVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]_v1.DownwardAPIVolumeFile, 0, 1)
					} else {
						out.Items = []_v1.DownwardAPIVolumeFile{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v39 _v1.DownwardAPIVolumeFile
					easyjson147b50d1DecodeK8sIoApiCoreV136(in, &v39)
					out.Items = append(out.Items, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defaultMode":
			if in.IsNull() {
				in.Skip()
				out.DefaultMode = nil
			} else {
				if out.DefaultMode == nil {
					out.DefaultMode = new(int32)
				}
				*out.DefaultMode = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV116(out *jwriter.Writer, in _v1.DownwardAPIVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v40, v41 := range in.Items {
				if v40 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV136(out, v41)
			}
			out.RawByte(']')
		}
	}
	if in.DefaultMode != nil {
		const prefix string = ",\"defaultMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.DefaultMode))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV115(in *jlexer.Lexer, out *_v1.FlockerVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "datasetName":
			out.DatasetName = string(in.String())
		case "datasetUUID":
			out.DatasetUUID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV115(out *jwriter.Writer, in _v1.FlockerVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DatasetName != "" {
		const prefix string = ",\"datasetName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.DatasetName))
	}
	if in.DatasetUUID != "" {
		const prefix string = ",\"datasetUUID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DatasetUUID))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV114(in *jlexer.Lexer, out *_v1.CephFSVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "monitors":
			if in.IsNull() {
				in.Skip()
				out.Monitors = nil
			} else {
				in.Delim('[')
				if out.Monitors == nil {
					if !in.IsDelim(']') {
						out.Monitors = make([]string, 0, 4)
					} else {
						out.Monitors = []string{}
					}
				} else {
					out.Monitors = (out.Monitors)[:0]
				}
				for !in.IsDelim(']') {
					var v42 string
					v42 = string(in.String())
					out.Monitors = append(out.Monitors, v42)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "path":
			out.Path = string(in.String())
		case "user":
			out.User = string(in.String())
		case "secretFile":
			out.SecretFile = string(in.String())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(_v1.LocalObjectReference)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV129(in, out.SecretRef)
			}
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV114(out *jwriter.Writer, in _v1.CephFSVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"monitors\":"
		out.RawString(prefix[1:])
		if in.Monitors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v43, v44 := range in.Monitors {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.String(string(v44))
			}
			out.RawByte(']')
		}
	}
	if in.Path != "" {
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.SecretFile != "" {
		const prefix string = ",\"secretFile\":"
		out.RawString(prefix)
		out.String(string(in.SecretFile))
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV129(out, *in.SecretRef)
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV113(in *jlexer.Lexer, out *_v1.CinderVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "volumeID":
			out.VolumeID = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(_v1.LocalObjectReference)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV129(in, out.SecretRef)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV113(out *jwriter.Writer, in _v1.CinderVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"volumeID\":"
		out.RawString(prefix[1:])
		out.String(string(in.VolumeID))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV129(out, *in.SecretRef)
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV112(in *jlexer.Lexer, out *_v1.FlexVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "driver":
			out.Driver = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(_v1.LocalObjectReference)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV129(in, out.SecretRef)
			}
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "options":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Options = make(map[string]string)
				} else {
					out.Options = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v45 string
					v45 = string(in.String())
					(out.Options)[key] = v45
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV112(out *jwriter.Writer, in _v1.FlexVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"driver\":"
		out.RawString(prefix[1:])
		out.String(string(in.Driver))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV129(out, *in.SecretRef)
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	if len(in.Options) != 0 {
		const prefix string = ",\"options\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v46First := true
			for v46Name, v46Value := range in.Options {
				if v46First {
					v46First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v46Name))
				out.RawByte(':')
				out.String(string(v46Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV111(in *jlexer.Lexer, out *_v1.RBDVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "monitors":
			if in.IsNull() {
				in.Skip()
				out.CephMonitors = nil
			} else {
				in.Delim('[')
				if out.CephMonitors == nil {
					if !in.IsDelim(']') {
						out.CephMonitors = make([]string, 0, 4)
					} else {
						out.CephMonitors = []string{}
					}
				} else {
					out.CephMonitors = (out.CephMonitors)[:0]
				}
				for !in.IsDelim(']') {
					var v47 string
					v47 = string(in.String())
					out.CephMonitors = append(out.CephMonitors, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "image":
			out.RBDImage = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "pool":
			out.RBDPool = string(in.String())
		case "user":
			out.RadosUser = string(in.String())
		case "keyring":
			out.Keyring = string(in.String())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(_v1.LocalObjectReference)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV129(in, out.SecretRef)
			}
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV111(out *jwriter.Writer, in _v1.RBDVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"monitors\":"
		out.RawString(prefix[1:])
		if in.CephMonitors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v48, v49 := range in.CephMonitors {
				if v48 > 0 {
					out.RawByte(',')
				}
				out.String(string(v49))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.RBDImage))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.RBDPool != "" {
		const prefix string = ",\"pool\":"
		out.RawString(prefix)
		out.String(string(in.RBDPool))
	}
	if in.RadosUser != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.RadosUser))
	}
	if in.Keyring != "" {
		const prefix string = ",\"keyring\":"
		out.RawString(prefix)
		out.String(string(in.Keyring))
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV129(out, *in.SecretRef)
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV110(in *jlexer.Lexer, out *_v1.PersistentVolumeClaimVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "claimName":
			out.ClaimName = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV110(out *jwriter.Writer, in _v1.PersistentVolumeClaimVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"claimName\":"
		out.RawString(prefix[1:])
		out.String(string(in.ClaimName))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV19(in *jlexer.Lexer, out *_v1.GlusterfsVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "endpoints":
			out.EndpointsName = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV19(out *jwriter.Writer, in _v1.GlusterfsVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"endpoints\":"
		out.RawString(prefix[1:])
		out.String(string(in.EndpointsName))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV18(in *jlexer.Lexer, out *_v1.ISCSIVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "targetPortal":
			out.TargetPortal = string(in.String())
		case "iqn":
			out.IQN = string(in.String())
		case "lun":
			out.Lun = int32(in.Int32())
		case "iscsiInterface":
			out.ISCSIInterface = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "portals":
			if in.IsNull() {
				in.Skip()
				out.Portals = nil
			} else {
				in.Delim('[')
				if out.Portals == nil {
					if !in.IsDelim(']') {
						out.Portals = make([]string, 0, 4)
					} else {
						out.Portals = []string{}
					}
				} else {
					out.Portals = (out.Portals)[:0]
				}
				for !in.IsDelim(']') {
					var v50 string
					v50 = string(in.String())
					out.Portals = append(out.Portals, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "chapAuthDiscovery":
			out.DiscoveryCHAPAuth = bool(in.Bool())
		case "chapAuthSession":
			out.SessionCHAPAuth = bool(in.Bool())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(_v1.LocalObjectReference)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV129(in, out.SecretRef)
			}
		case "initiatorName":
			if in.IsNull() {
				in.Skip()
				out.InitiatorName = nil
			} else {
				if out.InitiatorName == nil {
					out.InitiatorName = new(string)
				}
				*out.InitiatorName = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV18(out *jwriter.Writer, in _v1.ISCSIVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"targetPortal\":"
		out.RawString(prefix[1:])
		out.String(string(in.TargetPortal))
	}
	{
		const prefix string = ",\"iqn\":"
		out.RawString(prefix)
		out.String(string(in.IQN))
	}
	{
		const prefix string = ",\"lun\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lun))
	}
	if in.ISCSIInterface != "" {
		const prefix string = ",\"iscsiInterface\":"
		out.RawString(prefix)
		out.String(string(in.ISCSIInterface))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	if len(in.Portals) != 0 {
		const prefix string = ",\"portals\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v51, v52 := range in.Portals {
				if v51 > 0 {
					out.RawByte(',')
				}
				out.String(string(v52))
			}
			out.RawByte(']')
		}
	}
	if in.DiscoveryCHAPAuth {
		const prefix string = ",\"chapAuthDiscovery\":"
		out.RawString(prefix)
		out.Bool(bool(in.DiscoveryCHAPAuth))
	}
	if in.SessionCHAPAuth {
		const prefix string = ",\"chapAuthSession\":"
		out.RawString(prefix)
		out.Bool(bool(in.SessionCHAPAuth))
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV129(out, *in.SecretRef)
	}
	if in.InitiatorName != nil {
		const prefix string = ",\"initiatorName\":"
		out.RawString(prefix)
		out.String(string(*in.InitiatorName))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV17(in *jlexer.Lexer, out *_v1.NFSVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "server":
			out.Server = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV17(out *jwriter.Writer, in _v1.NFSVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"server\":"
		out.RawString(prefix[1:])
		out.String(string(in.Server))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV16(in *jlexer.Lexer, out *_v1.SecretVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "secretName":
			out.SecretName = string(in.String())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]_v1.KeyToPath, 0, 1)
					} else {
						out.Items = []_v1.KeyToPath{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v53 _v1.KeyToPath
					easyjson147b50d1DecodeK8sIoApiCoreV135(in, &v53)
					out.Items = append(out.Items, v53)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defaultMode":
			if in.IsNull() {
				in.Skip()
				out.DefaultMode = nil
			} else {
				if out.DefaultMode == nil {
					out.DefaultMode = new(int32)
				}
				*out.DefaultMode = int32(in.Int32())
			}
		case "optional":
			if in.IsNull() {
				in.Skip()
				out.Optional = nil
			} else {
				if out.Optional == nil {
					out.Optional = new(bool)
				}
				*out.Optional = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV16(out *jwriter.Writer, in _v1.SecretVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SecretName != "" {
		const prefix string = ",\"secretName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.SecretName))
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v54, v55 := range in.Items {
				if v54 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV135(out, v55)
			}
			out.RawByte(']')
		}
	}
	if in.DefaultMode != nil {
		const prefix string = ",\"defaultMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.DefaultMode))
	}
	if in.Optional != nil {
		const prefix string = ",\"optional\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Optional))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV15(in *jlexer.Lexer, out *_v1.GitRepoVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "repository":
			out.Repository = string(in.String())
		case "revision":
			out.Revision = string(in.String())
		case "directory":
			out.Directory = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV15(out *jwriter.Writer, in _v1.GitRepoVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"repository\":"
		out.RawString(prefix[1:])
		out.String(string(in.Repository))
	}
	if in.Revision != "" {
		const prefix string = ",\"revision\":"
		out.RawString(prefix)
		out.String(string(in.Revision))
	}
	if in.Directory != "" {
		const prefix string = ",\"directory\":"
		out.RawString(prefix)
		out.String(string(in.Directory))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV14(in *jlexer.Lexer, out *_v1.AWSElasticBlockStoreVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "volumeID":
			out.VolumeID = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "partition":
			out.Partition = int32(in.Int32())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV14(out *jwriter.Writer, in _v1.AWSElasticBlockStoreVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"volumeID\":"
		out.RawString(prefix[1:])
		out.String(string(in.VolumeID))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.Partition != 0 {
		const prefix string = ",\"partition\":"
		out.RawString(prefix)
		out.Int32(int32(in.Partition))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV13(in *jlexer.Lexer, out *_v1.GCEPersistentDiskVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pdName":
			out.PDName = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "partition":
			out.Partition = int32(in.Int32())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV13(out *jwriter.Writer, in _v1.GCEPersistentDiskVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pdName\":"
		out.RawString(prefix[1:])
		out.String(string(in.PDName))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.Partition != 0 {
		const prefix string = ",\"partition\":"
		out.RawString(prefix)
		out.Int32(int32(in.Partition))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV12(in *jlexer.Lexer, out *_v1.EmptyDirVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "medium":
			out.Medium = _v1.StorageMedium(in.String())
		case "sizeLimit":
			if in.IsNull() {
				in.Skip()
				out.SizeLimit = nil
			} else {
				if out.SizeLimit == nil {
					out.SizeLimit = new(resource.Quantity)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.SizeLimit).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV12(out *jwriter.Writer, in _v1.EmptyDirVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Medium != "" {
		const prefix string = ",\"medium\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Medium))
	}
	if in.SizeLimit != nil {
		const prefix string = ",\"sizeLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.SizeLimit).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV11(in *jlexer.Lexer, out *_v1.HostPathVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(_v1.HostPathType)
				}
				*out.Type = _v1.HostPathType(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV11(out *jwriter.Writer, in _v1.HostPathVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(*in.Type))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha14(in *jlexer.Lexer, out *WorkflowSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "templates":
			if in.IsNull() {
				in.Skip()
				out.Templates = nil
			} else {
				in.Delim('[')
				if out.Templates == nil {
					if !in.IsDelim(']') {
						out.Templates = make([]Template, 0, 0)
					} else {
						out.Templates = []Template{}
					}
				} else {
					out.Templates = (out.Templates)[:0]
				}
				for !in.IsDelim(']') {
					var v56 Template
					(v56).UnmarshalEasyJSON(in)
					out.Templates = append(out.Templates, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "entrypoint":
			out.Entrypoint = string(in.String())
		case "arguments":
			(out.Arguments).UnmarshalEasyJSON(in)
		case "serviceAccountName":
			out.ServiceAccountName = string(in.String())
		case "automountServiceAccountToken":
			if in.IsNull() {
				in.Skip()
				out.AutomountServiceAccountToken = nil
			} else {
				if out.AutomountServiceAccountToken == nil {
					out.AutomountServiceAccountToken = new(bool)
				}
				*out.AutomountServiceAccountToken = bool(in.Bool())
			}
		case "executor":
			if in.IsNull() {
				in.Skip()
				out.Executor = nil
			} else {
				if out.Executor == nil {
					out.Executor = new(ExecutorConfig)
				}
				(*out.Executor).UnmarshalEasyJSON(in)
			}
		case "volumes":
			if in.IsNull() {
				in.Skip()
				out.Volumes = nil
			} else {
				in.Delim('[')
				if out.Volumes == nil {
					if !in.IsDelim(']') {
						out.Volumes = make([]_v1.Volume, 0, 0)
					} else {
						out.Volumes = []_v1.Volume{}
					}
				} else {
					out.Volumes = (out.Volumes)[:0]
				}
				for !in.IsDelim(']') {
					var v57 _v1.Volume
					easyjson147b50d1DecodeK8sIoApiCoreV1(in, &v57)
					out.Volumes = append(out.Volumes, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "volumeClaimTemplates":
			if in.IsNull() {
				in.Skip()
				out.VolumeClaimTemplates = nil
			} else {
				in.Delim('[')
				if out.VolumeClaimTemplates == nil {
					if !in.IsDelim(']') {
						out.VolumeClaimTemplates = make([]_v1.PersistentVolumeClaim, 0, 0)
					} else {
						out.VolumeClaimTemplates = []_v1.PersistentVolumeClaim{}
					}
				} else {
					out.VolumeClaimTemplates = (out.VolumeClaimTemplates)[:0]
				}
				for !in.IsDelim(']') {
					var v58 _v1.PersistentVolumeClaim
					easyjson147b50d1DecodeK8sIoApiCoreV139(in, &v58)
					out.VolumeClaimTemplates = append(out.VolumeClaimTemplates, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parallelism":
			if in.IsNull() {
				in.Skip()
				out.Parallelism = nil
			} else {
				if out.Parallelism == nil {
					out.Parallelism = new(int64)
				}
				*out.Parallelism = int64(in.Int64())
			}
		case "artifactRepositoryRef":
			if in.IsNull() {
				in.Skip()
				out.ArtifactRepositoryRef = nil
			} else {
				if out.ArtifactRepositoryRef == nil {
					out.ArtifactRepositoryRef = new(ArtifactRepositoryRef)
				}
				(*out.ArtifactRepositoryRef).UnmarshalEasyJSON(in)
			}
		case "suspend":
			if in.IsNull() {
				in.Skip()
				out.Suspend = nil
			} else {
				if out.Suspend == nil {
					out.Suspend = new(bool)
				}
				*out.Suspend = bool(in.Bool())
			}
		case "nodeSelector":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.NodeSelector = make(map[string]string)
				} else {
					out.NodeSelector = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v59 string
					v59 = string(in.String())
					(out.NodeSelector)[key] = v59
					in.WantComma()
				}
				in.Delim('}')
			}
		case "affinity":
			if in.IsNull() {
				in.Skip()
				out.Affinity = nil
			} else {
				if out.Affinity == nil {
					out.Affinity = new(_v1.Affinity)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV140(in, out.Affinity)
			}
		case "tolerations":
			if in.IsNull() {
				in.Skip()
				out.Tolerations = nil
			} else {
				in.Delim('[')
				if out.Tolerations == nil {
					if !in.IsDelim(']') {
						out.Tolerations = make([]_v1.Toleration, 0, 0)
					} else {
						out.Tolerations = []_v1.Toleration{}
					}
				} else {
					out.Tolerations = (out.Tolerations)[:0]
				}
				for !in.IsDelim(']') {
					var v60 _v1.Toleration
					easyjson147b50d1DecodeK8sIoApiCoreV141(in, &v60)
					out.Tolerations = append(out.Tolerations, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "imagePullSecrets":
			if in.IsNull() {
				in.Skip()
				out.ImagePullSecrets = nil
			} else {
				in.Delim('[')
				if out.ImagePullSecrets == nil {
					if !in.IsDelim(']') {
						out.ImagePullSecrets = make([]_v1.LocalObjectReference, 0, 4)
					} else {
						out.ImagePullSecrets = []_v1.LocalObjectReference{}
					}
				} else {
					out.ImagePullSecrets = (out.ImagePullSecrets)[:0]
				}
				for !in.IsDelim(']') {
					var v61 _v1.LocalObjectReference
					easyjson147b50d1DecodeK8sIoApiCoreV129(in, &v61)
					out.ImagePullSecrets = append(out.ImagePullSecrets, v61)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hostNetwork":
			if in.IsNull() {
				in.Skip()
				out.HostNetwork = nil
			} else {
				if out.HostNetwork == nil {
					out.HostNetwork = new(bool)
				}
				*out.HostNetwork = bool(in.Bool())
			}
		case "dnsPolicy":
			if in.IsNull() {
				in.Skip()
				out.DNSPolicy = nil
			} else {
				if out.DNSPolicy == nil {
					out.DNSPolicy = new(_v1.DNSPolicy)
				}
				*out.DNSPolicy = _v1.DNSPolicy(in.String())
			}
		case "dnsConfig":
			if in.IsNull() {
				in.Skip()
				out.DNSConfig = nil
			} else {
				if out.DNSConfig == nil {
					out.DNSConfig = new(_v1.PodDNSConfig)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV142(in, out.DNSConfig)
			}
		case "onExit":
			out.OnExit = string(in.String())
		case "ttlSecondsAfterFinished":
			if in.IsNull() {
				in.Skip()
				out.TTLSecondsAfterFinished = nil
			} else {
				if out.TTLSecondsAfterFinished == nil {
					out.TTLSecondsAfterFinished = new(int32)
				}
				*out.TTLSecondsAfterFinished = int32(in.Int32())
			}
		case "ttlStrategy":
			if in.IsNull() {
				in.Skip()
				out.TTLStrategy = nil
			} else {
				if out.TTLStrategy == nil {
					out.TTLStrategy = new(TTLStrategy)
				}
				(*out.TTLStrategy).UnmarshalEasyJSON(in)
			}
		case "activeDeadlineSeconds":
			if in.IsNull() {
				in.Skip()
				out.ActiveDeadlineSeconds = nil
			} else {
				if out.ActiveDeadlineSeconds == nil {
					out.ActiveDeadlineSeconds = new(int64)
				}
				*out.ActiveDeadlineSeconds = int64(in.Int64())
			}
		case "priority":
			if in.IsNull() {
				in.Skip()
				out.Priority = nil
			} else {
				if out.Priority == nil {
					out.Priority = new(int32)
				}
				*out.Priority = int32(in.Int32())
			}
		case "schedulerName":
			out.SchedulerName = string(in.String())
		case "podGC":
			if in.IsNull() {
				in.Skip()
				out.PodGC = nil
			} else {
				if out.PodGC == nil {
					out.PodGC = new(PodGC)
				}
				(*out.PodGC).UnmarshalEasyJSON(in)
			}
		case "podPriorityClassName":
			out.PodPriorityClassName = string(in.String())
		case "podPriority":
			if in.IsNull() {
				in.Skip()
				out.PodPriority = nil
			} else {
				if out.PodPriority == nil {
					out.PodPriority = new(int32)
				}
				*out.PodPriority = int32(in.Int32())
			}
		case "hostAliases":
			if in.IsNull() {
				in.Skip()
				out.HostAliases = nil
			} else {
				in.Delim('[')
				if out.HostAliases == nil {
					if !in.IsDelim(']') {
						out.HostAliases = make([]_v1.HostAlias, 0, 1)
					} else {
						out.HostAliases = []_v1.HostAlias{}
					}
				} else {
					out.HostAliases = (out.HostAliases)[:0]
				}
				for !in.IsDelim(']') {
					var v62 _v1.HostAlias
					easyjson147b50d1DecodeK8sIoApiCoreV143(in, &v62)
					out.HostAliases = append(out.HostAliases, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "securityContext":
			if in.IsNull() {
				in.Skip()
				out.SecurityContext = nil
			} else {
				if out.SecurityContext == nil {
					out.SecurityContext = new(_v1.PodSecurityContext)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV144(in, out.SecurityContext)
			}
		case "podSpecPatch":
			out.PodSpecPatch = string(in.String())
		case "podDisruptionBudget":
			if in.IsNull() {
				in.Skip()
				out.PodDisruptionBudget = nil
			} else {
				if out.PodDisruptionBudget == nil {
					out.PodDisruptionBudget = new(_v1beta1.PodDisruptionBudgetSpec)
				}
				easyjson147b50d1DecodeK8sIoApiPolicyV1beta1(in, out.PodDisruptionBudget)
			}
		case "metrics":
			if in.IsNull() {
				in.Skip()
				out.Metrics = nil
			} else {
				if out.Metrics == nil {
					out.Metrics = new(Metrics)
				}
				(*out.Metrics).UnmarshalEasyJSON(in)
			}
		case "shutdown":
			out.Shutdown = ShutdownStrategy(in.String())
		case "workflowTemplateRef":
			if in.IsNull() {
				in.Skip()
				out.WorkflowTemplateRef = nil
			} else {
				if out.WorkflowTemplateRef == nil {
					out.WorkflowTemplateRef = new(WorkflowTemplateRef)
				}
				(*out.WorkflowTemplateRef).UnmarshalEasyJSON(in)
			}
		case "synchronization":
			if in.IsNull() {
				in.Skip()
				out.Synchronization = nil
			} else {
				if out.Synchronization == nil {
					out.Synchronization = new(Synchronization)
				}
				(*out.Synchronization).UnmarshalEasyJSON(in)
			}
		case "volumeClaimGC":
			if in.IsNull() {
				in.Skip()
				out.VolumeClaimGC = nil
			} else {
				if out.VolumeClaimGC == nil {
					out.VolumeClaimGC = new(VolumeClaimGC)
				}
				(*out.VolumeClaimGC).UnmarshalEasyJSON(in)
			}
		case "retryStrategy":
			if in.IsNull() {
				in.Skip()
				out.RetryStrategy = nil
			} else {
				if out.RetryStrategy == nil {
					out.RetryStrategy = new(RetryStrategy)
				}
				(*out.RetryStrategy).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha14(out *jwriter.Writer, in WorkflowSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Templates) != 0 {
		const prefix string = ",\"templates\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v63, v64 := range in.Templates {
				if v63 > 0 {
					out.RawByte(',')
				}
				(v64).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Entrypoint != "" {
		const prefix string = ",\"entrypoint\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Entrypoint))
	}
	if true {
		const prefix string = ",\"arguments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Arguments).MarshalEasyJSON(out)
	}
	if in.ServiceAccountName != "" {
		const prefix string = ",\"serviceAccountName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServiceAccountName))
	}
	if in.AutomountServiceAccountToken != nil {
		const prefix string = ",\"automountServiceAccountToken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.AutomountServiceAccountToken))
	}
	if in.Executor != nil {
		const prefix string = ",\"executor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Executor).MarshalEasyJSON(out)
	}
	if len(in.Volumes) != 0 {
		const prefix string = ",\"volumes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v65, v66 := range in.Volumes {
				if v65 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV1(out, v66)
			}
			out.RawByte(']')
		}
	}
	if len(in.VolumeClaimTemplates) != 0 {
		const prefix string = ",\"volumeClaimTemplates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v67, v68 := range in.VolumeClaimTemplates {
				if v67 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV139(out, v68)
			}
			out.RawByte(']')
		}
	}
	if in.Parallelism != nil {
		const prefix string = ",\"parallelism\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Parallelism))
	}
	if in.ArtifactRepositoryRef != nil {
		const prefix string = ",\"artifactRepositoryRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ArtifactRepositoryRef).MarshalEasyJSON(out)
	}
	if in.Suspend != nil {
		const prefix string = ",\"suspend\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Suspend))
	}
	if len(in.NodeSelector) != 0 {
		const prefix string = ",\"nodeSelector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v69First := true
			for v69Name, v69Value := range in.NodeSelector {
				if v69First {
					v69First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v69Name))
				out.RawByte(':')
				out.String(string(v69Value))
			}
			out.RawByte('}')
		}
	}
	if in.Affinity != nil {
		const prefix string = ",\"affinity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV140(out, *in.Affinity)
	}
	if len(in.Tolerations) != 0 {
		const prefix string = ",\"tolerations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v70, v71 := range in.Tolerations {
				if v70 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV141(out, v71)
			}
			out.RawByte(']')
		}
	}
	if len(in.ImagePullSecrets) != 0 {
		const prefix string = ",\"imagePullSecrets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v72, v73 := range in.ImagePullSecrets {
				if v72 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV129(out, v73)
			}
			out.RawByte(']')
		}
	}
	if in.HostNetwork != nil {
		const prefix string = ",\"hostNetwork\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.HostNetwork))
	}
	if in.DNSPolicy != nil {
		const prefix string = ",\"dnsPolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DNSPolicy))
	}
	if in.DNSConfig != nil {
		const prefix string = ",\"dnsConfig\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV142(out, *in.DNSConfig)
	}
	if in.OnExit != "" {
		const prefix string = ",\"onExit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnExit))
	}
	if in.TTLSecondsAfterFinished != nil {
		const prefix string = ",\"ttlSecondsAfterFinished\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.TTLSecondsAfterFinished))
	}
	if in.TTLStrategy != nil {
		const prefix string = ",\"ttlStrategy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TTLStrategy).MarshalEasyJSON(out)
	}
	if in.ActiveDeadlineSeconds != nil {
		const prefix string = ",\"activeDeadlineSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ActiveDeadlineSeconds))
	}
	if in.Priority != nil {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Priority))
	}
	if in.SchedulerName != "" {
		const prefix string = ",\"schedulerName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SchedulerName))
	}
	if in.PodGC != nil {
		const prefix string = ",\"podGC\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PodGC).MarshalEasyJSON(out)
	}
	if in.PodPriorityClassName != "" {
		const prefix string = ",\"podPriorityClassName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PodPriorityClassName))
	}
	if in.PodPriority != nil {
		const prefix string = ",\"podPriority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.PodPriority))
	}
	if len(in.HostAliases) != 0 {
		const prefix string = ",\"hostAliases\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v74, v75 := range in.HostAliases {
				if v74 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV143(out, v75)
			}
			out.RawByte(']')
		}
	}
	if in.SecurityContext != nil {
		const prefix string = ",\"securityContext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV144(out, *in.SecurityContext)
	}
	if in.PodSpecPatch != "" {
		const prefix string = ",\"podSpecPatch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PodSpecPatch))
	}
	if in.PodDisruptionBudget != nil {
		const prefix string = ",\"podDisruptionBudget\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiPolicyV1beta1(out, *in.PodDisruptionBudget)
	}
	if in.Metrics != nil {
		const prefix string = ",\"metrics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Metrics).MarshalEasyJSON(out)
	}
	if in.Shutdown != "" {
		const prefix string = ",\"shutdown\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Shutdown))
	}
	if in.WorkflowTemplateRef != nil {
		const prefix string = ",\"workflowTemplateRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.WorkflowTemplateRef).MarshalEasyJSON(out)
	}
	if in.Synchronization != nil {
		const prefix string = ",\"synchronization\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Synchronization).MarshalEasyJSON(out)
	}
	if in.VolumeClaimGC != nil {
		const prefix string = ",\"volumeClaimGC\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.VolumeClaimGC).MarshalEasyJSON(out)
	}
	if in.RetryStrategy != nil {
		const prefix string = ",\"retryStrategy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.RetryStrategy).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkflowSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkflowSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkflowSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkflowSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha14(l, v)
}
func easyjson147b50d1DecodeK8sIoApiPolicyV1beta1(in *jlexer.Lexer, out *_v1beta1.PodDisruptionBudgetSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "minAvailable":
			if in.IsNull() {
				in.Skip()
				out.MinAvailable = nil
			} else {
				if out.MinAvailable == nil {
					out.MinAvailable = new(intstr.IntOrString)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.MinAvailable).UnmarshalJSON(data))
				}
			}
		case "selector":
			if in.IsNull() {
				in.Skip()
				out.Selector = nil
			} else {
				if out.Selector == nil {
					out.Selector = new(_v11.LabelSelector)
				}
				easyjson147b50d1DecodeK8sIoApimachineryPkgApisMetaV1(in, out.Selector)
			}
		case "maxUnavailable":
			if in.IsNull() {
				in.Skip()
				out.MaxUnavailable = nil
			} else {
				if out.MaxUnavailable == nil {
					out.MaxUnavailable = new(intstr.IntOrString)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.MaxUnavailable).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiPolicyV1beta1(out *jwriter.Writer, in _v1beta1.PodDisruptionBudgetSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MinAvailable != nil {
		const prefix string = ",\"minAvailable\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((*in.MinAvailable).MarshalJSON())
	}
	if in.Selector != nil {
		const prefix string = ",\"selector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApimachineryPkgApisMetaV1(out, *in.Selector)
	}
	if in.MaxUnavailable != nil {
		const prefix string = ",\"maxUnavailable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.MaxUnavailable).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApimachineryPkgApisMetaV1(in *jlexer.Lexer, out *_v11.LabelSelector) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "matchLabels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.MatchLabels = make(map[string]string)
				} else {
					out.MatchLabels = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v76 string
					v76 = string(in.String())
					(out.MatchLabels)[key] = v76
					in.WantComma()
				}
				in.Delim('}')
			}
		case "matchExpressions":
			if in.IsNull() {
				in.Skip()
				out.MatchExpressions = nil
			} else {
				in.Delim('[')
				if out.MatchExpressions == nil {
					if !in.IsDelim(']') {
						out.MatchExpressions = make([]_v11.LabelSelectorRequirement, 0, 1)
					} else {
						out.MatchExpressions = []_v11.LabelSelectorRequirement{}
					}
				} else {
					out.MatchExpressions = (out.MatchExpressions)[:0]
				}
				for !in.IsDelim(']') {
					var v77 _v11.LabelSelectorRequirement
					easyjson147b50d1DecodeK8sIoApimachineryPkgApisMetaV11(in, &v77)
					out.MatchExpressions = append(out.MatchExpressions, v77)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApimachineryPkgApisMetaV1(out *jwriter.Writer, in _v11.LabelSelector) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.MatchLabels) != 0 {
		const prefix string = ",\"matchLabels\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v78First := true
			for v78Name, v78Value := range in.MatchLabels {
				if v78First {
					v78First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v78Name))
				out.RawByte(':')
				out.String(string(v78Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.MatchExpressions) != 0 {
		const prefix string = ",\"matchExpressions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v79, v80 := range in.MatchExpressions {
				if v79 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApimachineryPkgApisMetaV11(out, v80)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApimachineryPkgApisMetaV11(in *jlexer.Lexer, out *_v11.LabelSelectorRequirement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "operator":
			out.Operator = _v11.LabelSelectorOperator(in.String())
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]string, 0, 4)
					} else {
						out.Values = []string{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v81 string
					v81 = string(in.String())
					out.Values = append(out.Values, v81)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApimachineryPkgApisMetaV11(out *jwriter.Writer, in _v11.LabelSelectorRequirement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"operator\":"
		out.RawString(prefix)
		out.String(string(in.Operator))
	}
	if len(in.Values) != 0 {
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v82, v83 := range in.Values {
				if v82 > 0 {
					out.RawByte(',')
				}
				out.String(string(v83))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV144(in *jlexer.Lexer, out *_v1.PodSecurityContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "seLinuxOptions":
			if in.IsNull() {
				in.Skip()
				out.SELinuxOptions = nil
			} else {
				if out.SELinuxOptions == nil {
					out.SELinuxOptions = new(_v1.SELinuxOptions)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV145(in, out.SELinuxOptions)
			}
		case "windowsOptions":
			if in.IsNull() {
				in.Skip()
				out.WindowsOptions = nil
			} else {
				if out.WindowsOptions == nil {
					out.WindowsOptions = new(_v1.WindowsSecurityContextOptions)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV146(in, out.WindowsOptions)
			}
		case "runAsUser":
			if in.IsNull() {
				in.Skip()
				out.RunAsUser = nil
			} else {
				if out.RunAsUser == nil {
					out.RunAsUser = new(int64)
				}
				*out.RunAsUser = int64(in.Int64())
			}
		case "runAsGroup":
			if in.IsNull() {
				in.Skip()
				out.RunAsGroup = nil
			} else {
				if out.RunAsGroup == nil {
					out.RunAsGroup = new(int64)
				}
				*out.RunAsGroup = int64(in.Int64())
			}
		case "runAsNonRoot":
			if in.IsNull() {
				in.Skip()
				out.RunAsNonRoot = nil
			} else {
				if out.RunAsNonRoot == nil {
					out.RunAsNonRoot = new(bool)
				}
				*out.RunAsNonRoot = bool(in.Bool())
			}
		case "supplementalGroups":
			if in.IsNull() {
				in.Skip()
				out.SupplementalGroups = nil
			} else {
				in.Delim('[')
				if out.SupplementalGroups == nil {
					if !in.IsDelim(']') {
						out.SupplementalGroups = make([]int64, 0, 8)
					} else {
						out.SupplementalGroups = []int64{}
					}
				} else {
					out.SupplementalGroups = (out.SupplementalGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v84 int64
					v84 = int64(in.Int64())
					out.SupplementalGroups = append(out.SupplementalGroups, v84)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fsGroup":
			if in.IsNull() {
				in.Skip()
				out.FSGroup = nil
			} else {
				if out.FSGroup == nil {
					out.FSGroup = new(int64)
				}
				*out.FSGroup = int64(in.Int64())
			}
		case "sysctls":
			if in.IsNull() {
				in.Skip()
				out.Sysctls = nil
			} else {
				in.Delim('[')
				if out.Sysctls == nil {
					if !in.IsDelim(']') {
						out.Sysctls = make([]_v1.Sysctl, 0, 2)
					} else {
						out.Sysctls = []_v1.Sysctl{}
					}
				} else {
					out.Sysctls = (out.Sysctls)[:0]
				}
				for !in.IsDelim(']') {
					var v85 _v1.Sysctl
					easyjson147b50d1DecodeK8sIoApiCoreV147(in, &v85)
					out.Sysctls = append(out.Sysctls, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV144(out *jwriter.Writer, in _v1.PodSecurityContext) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SELinuxOptions != nil {
		const prefix string = ",\"seLinuxOptions\":"
		first = false
		out.RawString(prefix[1:])
		easyjson147b50d1EncodeK8sIoApiCoreV145(out, *in.SELinuxOptions)
	}
	if in.WindowsOptions != nil {
		const prefix string = ",\"windowsOptions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV146(out, *in.WindowsOptions)
	}
	if in.RunAsUser != nil {
		const prefix string = ",\"runAsUser\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.RunAsUser))
	}
	if in.RunAsGroup != nil {
		const prefix string = ",\"runAsGroup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.RunAsGroup))
	}
	if in.RunAsNonRoot != nil {
		const prefix string = ",\"runAsNonRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.RunAsNonRoot))
	}
	if len(in.SupplementalGroups) != 0 {
		const prefix string = ",\"supplementalGroups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v86, v87 := range in.SupplementalGroups {
				if v86 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v87))
			}
			out.RawByte(']')
		}
	}
	if in.FSGroup != nil {
		const prefix string = ",\"fsGroup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.FSGroup))
	}
	if len(in.Sysctls) != 0 {
		const prefix string = ",\"sysctls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v88, v89 := range in.Sysctls {
				if v88 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV147(out, v89)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV147(in *jlexer.Lexer, out *_v1.Sysctl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV147(out *jwriter.Writer, in _v1.Sysctl) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV146(in *jlexer.Lexer, out *_v1.WindowsSecurityContextOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gmsaCredentialSpecName":
			if in.IsNull() {
				in.Skip()
				out.GMSACredentialSpecName = nil
			} else {
				if out.GMSACredentialSpecName == nil {
					out.GMSACredentialSpecName = new(string)
				}
				*out.GMSACredentialSpecName = string(in.String())
			}
		case "gmsaCredentialSpec":
			if in.IsNull() {
				in.Skip()
				out.GMSACredentialSpec = nil
			} else {
				if out.GMSACredentialSpec == nil {
					out.GMSACredentialSpec = new(string)
				}
				*out.GMSACredentialSpec = string(in.String())
			}
		case "runAsUserName":
			if in.IsNull() {
				in.Skip()
				out.RunAsUserName = nil
			} else {
				if out.RunAsUserName == nil {
					out.RunAsUserName = new(string)
				}
				*out.RunAsUserName = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV146(out *jwriter.Writer, in _v1.WindowsSecurityContextOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.GMSACredentialSpecName != nil {
		const prefix string = ",\"gmsaCredentialSpecName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.GMSACredentialSpecName))
	}
	if in.GMSACredentialSpec != nil {
		const prefix string = ",\"gmsaCredentialSpec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GMSACredentialSpec))
	}
	if in.RunAsUserName != nil {
		const prefix string = ",\"runAsUserName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.RunAsUserName))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV145(in *jlexer.Lexer, out *_v1.SELinuxOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			out.User = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "level":
			out.Level = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV145(out *jwriter.Writer, in _v1.SELinuxOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.User != "" {
		const prefix string = ",\"user\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.User))
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Role))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Level != "" {
		const prefix string = ",\"level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Level))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV143(in *jlexer.Lexer, out *_v1.HostAlias) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.IP = string(in.String())
		case "hostnames":
			if in.IsNull() {
				in.Skip()
				out.Hostnames = nil
			} else {
				in.Delim('[')
				if out.Hostnames == nil {
					if !in.IsDelim(']') {
						out.Hostnames = make([]string, 0, 4)
					} else {
						out.Hostnames = []string{}
					}
				} else {
					out.Hostnames = (out.Hostnames)[:0]
				}
				for !in.IsDelim(']') {
					var v90 string
					v90 = string(in.String())
					out.Hostnames = append(out.Hostnames, v90)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV143(out *jwriter.Writer, in _v1.HostAlias) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IP != "" {
		const prefix string = ",\"ip\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	if len(in.Hostnames) != 0 {
		const prefix string = ",\"hostnames\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v91, v92 := range in.Hostnames {
				if v91 > 0 {
					out.RawByte(',')
				}
				out.String(string(v92))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV142(in *jlexer.Lexer, out *_v1.PodDNSConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nameservers":
			if in.IsNull() {
				in.Skip()
				out.Nameservers = nil
			} else {
				in.Delim('[')
				if out.Nameservers == nil {
					if !in.IsDelim(']') {
						out.Nameservers = make([]string, 0, 4)
					} else {
						out.Nameservers = []string{}
					}
				} else {
					out.Nameservers = (out.Nameservers)[:0]
				}
				for !in.IsDelim(']') {
					var v93 string
					v93 = string(in.String())
					out.Nameservers = append(out.Nameservers, v93)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "searches":
			if in.IsNull() {
				in.Skip()
				out.Searches = nil
			} else {
				in.Delim('[')
				if out.Searches == nil {
					if !in.IsDelim(']') {
						out.Searches = make([]string, 0, 4)
					} else {
						out.Searches = []string{}
					}
				} else {
					out.Searches = (out.Searches)[:0]
				}
				for !in.IsDelim(']') {
					var v94 string
					v94 = string(in.String())
					out.Searches = append(out.Searches, v94)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "options":
			if in.IsNull() {
				in.Skip()
				out.Options = nil
			} else {
				in.Delim('[')
				if out.Options == nil {
					if !in.IsDelim(']') {
						out.Options = make([]_v1.PodDNSConfigOption, 0, 2)
					} else {
						out.Options = []_v1.PodDNSConfigOption{}
					}
				} else {
					out.Options = (out.Options)[:0]
				}
				for !in.IsDelim(']') {
					var v95 _v1.PodDNSConfigOption
					easyjson147b50d1DecodeK8sIoApiCoreV148(in, &v95)
					out.Options = append(out.Options, v95)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV142(out *jwriter.Writer, in _v1.PodDNSConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Nameservers) != 0 {
		const prefix string = ",\"nameservers\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v96, v97 := range in.Nameservers {
				if v96 > 0 {
					out.RawByte(',')
				}
				out.String(string(v97))
			}
			out.RawByte(']')
		}
	}
	if len(in.Searches) != 0 {
		const prefix string = ",\"searches\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v98, v99 := range in.Searches {
				if v98 > 0 {
					out.RawByte(',')
				}
				out.String(string(v99))
			}
			out.RawByte(']')
		}
	}
	if len(in.Options) != 0 {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v100, v101 := range in.Options {
				if v100 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV148(out, v101)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV148(in *jlexer.Lexer, out *_v1.PodDNSConfigOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(string)
				}
				*out.Value = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV148(out *jwriter.Writer, in _v1.PodDNSConfigOption) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Value != nil {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Value))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV141(in *jlexer.Lexer, out *_v1.Toleration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "operator":
			out.Operator = _v1.TolerationOperator(in.String())
		case "value":
			out.Value = string(in.String())
		case "effect":
			out.Effect = _v1.TaintEffect(in.String())
		case "tolerationSeconds":
			if in.IsNull() {
				in.Skip()
				out.TolerationSeconds = nil
			} else {
				if out.TolerationSeconds == nil {
					out.TolerationSeconds = new(int64)
				}
				*out.TolerationSeconds = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV141(out *jwriter.Writer, in _v1.Toleration) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != "" {
		const prefix string = ",\"key\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	if in.Operator != "" {
		const prefix string = ",\"operator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Operator))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	if in.Effect != "" {
		const prefix string = ",\"effect\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Effect))
	}
	if in.TolerationSeconds != nil {
		const prefix string = ",\"tolerationSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.TolerationSeconds))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV140(in *jlexer.Lexer, out *_v1.Affinity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodeAffinity":
			if in.IsNull() {
				in.Skip()
				out.NodeAffinity = nil
			} else {
				if out.NodeAffinity == nil {
					out.NodeAffinity = new(_v1.NodeAffinity)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV149(in, out.NodeAffinity)
			}
		case "podAffinity":
			if in.IsNull() {
				in.Skip()
				out.PodAffinity = nil
			} else {
				if out.PodAffinity == nil {
					out.PodAffinity = new(_v1.PodAffinity)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV150(in, out.PodAffinity)
			}
		case "podAntiAffinity":
			if in.IsNull() {
				in.Skip()
				out.PodAntiAffinity = nil
			} else {
				if out.PodAntiAffinity == nil {
					out.PodAntiAffinity = new(_v1.PodAntiAffinity)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV151(in, out.PodAntiAffinity)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV140(out *jwriter.Writer, in _v1.Affinity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.NodeAffinity != nil {
		const prefix string = ",\"nodeAffinity\":"
		first = false
		out.RawString(prefix[1:])
		easyjson147b50d1EncodeK8sIoApiCoreV149(out, *in.NodeAffinity)
	}
	if in.PodAffinity != nil {
		const prefix string = ",\"podAffinity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV150(out, *in.PodAffinity)
	}
	if in.PodAntiAffinity != nil {
		const prefix string = ",\"podAntiAffinity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV151(out, *in.PodAntiAffinity)
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV151(in *jlexer.Lexer, out *_v1.PodAntiAffinity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				in.Delim('[')
				if out.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					if !in.IsDelim(']') {
						out.RequiredDuringSchedulingIgnoredDuringExecution = make([]_v1.PodAffinityTerm, 0, 1)
					} else {
						out.RequiredDuringSchedulingIgnoredDuringExecution = []_v1.PodAffinityTerm{}
					}
				} else {
					out.RequiredDuringSchedulingIgnoredDuringExecution = (out.RequiredDuringSchedulingIgnoredDuringExecution)[:0]
				}
				for !in.IsDelim(']') {
					var v102 _v1.PodAffinityTerm
					easyjson147b50d1DecodeK8sIoApiCoreV152(in, &v102)
					out.RequiredDuringSchedulingIgnoredDuringExecution = append(out.RequiredDuringSchedulingIgnoredDuringExecution, v102)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				in.Delim('[')
				if out.PreferredDuringSchedulingIgnoredDuringExecution == nil {
					if !in.IsDelim(']') {
						out.PreferredDuringSchedulingIgnoredDuringExecution = make([]_v1.WeightedPodAffinityTerm, 0, 1)
					} else {
						out.PreferredDuringSchedulingIgnoredDuringExecution = []_v1.WeightedPodAffinityTerm{}
					}
				} else {
					out.PreferredDuringSchedulingIgnoredDuringExecution = (out.PreferredDuringSchedulingIgnoredDuringExecution)[:0]
				}
				for !in.IsDelim(']') {
					var v103 _v1.WeightedPodAffinityTerm
					easyjson147b50d1DecodeK8sIoApiCoreV153(in, &v103)
					out.PreferredDuringSchedulingIgnoredDuringExecution = append(out.PreferredDuringSchedulingIgnoredDuringExecution, v103)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV151(out *jwriter.Writer, in _v1.PodAntiAffinity) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.RequiredDuringSchedulingIgnoredDuringExecution) != 0 {
		const prefix string = ",\"requiredDuringSchedulingIgnoredDuringExecution\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v104, v105 := range in.RequiredDuringSchedulingIgnoredDuringExecution {
				if v104 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV152(out, v105)
			}
			out.RawByte(']')
		}
	}
	if len(in.PreferredDuringSchedulingIgnoredDuringExecution) != 0 {
		const prefix string = ",\"preferredDuringSchedulingIgnoredDuringExecution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v106, v107 := range in.PreferredDuringSchedulingIgnoredDuringExecution {
				if v106 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV153(out, v107)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV153(in *jlexer.Lexer, out *_v1.WeightedPodAffinityTerm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "weight":
			out.Weight = int32(in.Int32())
		case "podAffinityTerm":
			easyjson147b50d1DecodeK8sIoApiCoreV152(in, &out.PodAffinityTerm)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV153(out *jwriter.Writer, in _v1.WeightedPodAffinityTerm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Weight))
	}
	{
		const prefix string = ",\"podAffinityTerm\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV152(out, in.PodAffinityTerm)
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV152(in *jlexer.Lexer, out *_v1.PodAffinityTerm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "labelSelector":
			if in.IsNull() {
				in.Skip()
				out.LabelSelector = nil
			} else {
				if out.LabelSelector == nil {
					out.LabelSelector = new(_v11.LabelSelector)
				}
				easyjson147b50d1DecodeK8sIoApimachineryPkgApisMetaV1(in, out.LabelSelector)
			}
		case "namespaces":
			if in.IsNull() {
				in.Skip()
				out.Namespaces = nil
			} else {
				in.Delim('[')
				if out.Namespaces == nil {
					if !in.IsDelim(']') {
						out.Namespaces = make([]string, 0, 4)
					} else {
						out.Namespaces = []string{}
					}
				} else {
					out.Namespaces = (out.Namespaces)[:0]
				}
				for !in.IsDelim(']') {
					var v108 string
					v108 = string(in.String())
					out.Namespaces = append(out.Namespaces, v108)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topologyKey":
			out.TopologyKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV152(out *jwriter.Writer, in _v1.PodAffinityTerm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LabelSelector != nil {
		const prefix string = ",\"labelSelector\":"
		first = false
		out.RawString(prefix[1:])
		easyjson147b50d1EncodeK8sIoApimachineryPkgApisMetaV1(out, *in.LabelSelector)
	}
	if len(in.Namespaces) != 0 {
		const prefix string = ",\"namespaces\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v109, v110 := range in.Namespaces {
				if v109 > 0 {
					out.RawByte(',')
				}
				out.String(string(v110))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"topologyKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TopologyKey))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV150(in *jlexer.Lexer, out *_v1.PodAffinity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				in.Delim('[')
				if out.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					if !in.IsDelim(']') {
						out.RequiredDuringSchedulingIgnoredDuringExecution = make([]_v1.PodAffinityTerm, 0, 1)
					} else {
						out.RequiredDuringSchedulingIgnoredDuringExecution = []_v1.PodAffinityTerm{}
					}
				} else {
					out.RequiredDuringSchedulingIgnoredDuringExecution = (out.RequiredDuringSchedulingIgnoredDuringExecution)[:0]
				}
				for !in.IsDelim(']') {
					var v111 _v1.PodAffinityTerm
					easyjson147b50d1DecodeK8sIoApiCoreV152(in, &v111)
					out.RequiredDuringSchedulingIgnoredDuringExecution = append(out.RequiredDuringSchedulingIgnoredDuringExecution, v111)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				in.Delim('[')
				if out.PreferredDuringSchedulingIgnoredDuringExecution == nil {
					if !in.IsDelim(']') {
						out.PreferredDuringSchedulingIgnoredDuringExecution = make([]_v1.WeightedPodAffinityTerm, 0, 1)
					} else {
						out.PreferredDuringSchedulingIgnoredDuringExecution = []_v1.WeightedPodAffinityTerm{}
					}
				} else {
					out.PreferredDuringSchedulingIgnoredDuringExecution = (out.PreferredDuringSchedulingIgnoredDuringExecution)[:0]
				}
				for !in.IsDelim(']') {
					var v112 _v1.WeightedPodAffinityTerm
					easyjson147b50d1DecodeK8sIoApiCoreV153(in, &v112)
					out.PreferredDuringSchedulingIgnoredDuringExecution = append(out.PreferredDuringSchedulingIgnoredDuringExecution, v112)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV150(out *jwriter.Writer, in _v1.PodAffinity) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.RequiredDuringSchedulingIgnoredDuringExecution) != 0 {
		const prefix string = ",\"requiredDuringSchedulingIgnoredDuringExecution\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v113, v114 := range in.RequiredDuringSchedulingIgnoredDuringExecution {
				if v113 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV152(out, v114)
			}
			out.RawByte(']')
		}
	}
	if len(in.PreferredDuringSchedulingIgnoredDuringExecution) != 0 {
		const prefix string = ",\"preferredDuringSchedulingIgnoredDuringExecution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v115, v116 := range in.PreferredDuringSchedulingIgnoredDuringExecution {
				if v115 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV153(out, v116)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV149(in *jlexer.Lexer, out *_v1.NodeAffinity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				if out.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					out.RequiredDuringSchedulingIgnoredDuringExecution = new(_v1.NodeSelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV154(in, out.RequiredDuringSchedulingIgnoredDuringExecution)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				in.Delim('[')
				if out.PreferredDuringSchedulingIgnoredDuringExecution == nil {
					if !in.IsDelim(']') {
						out.PreferredDuringSchedulingIgnoredDuringExecution = make([]_v1.PreferredSchedulingTerm, 0, 1)
					} else {
						out.PreferredDuringSchedulingIgnoredDuringExecution = []_v1.PreferredSchedulingTerm{}
					}
				} else {
					out.PreferredDuringSchedulingIgnoredDuringExecution = (out.PreferredDuringSchedulingIgnoredDuringExecution)[:0]
				}
				for !in.IsDelim(']') {
					var v117 _v1.PreferredSchedulingTerm
					easyjson147b50d1DecodeK8sIoApiCoreV155(in, &v117)
					out.PreferredDuringSchedulingIgnoredDuringExecution = append(out.PreferredDuringSchedulingIgnoredDuringExecution, v117)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV149(out *jwriter.Writer, in _v1.NodeAffinity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RequiredDuringSchedulingIgnoredDuringExecution != nil {
		const prefix string = ",\"requiredDuringSchedulingIgnoredDuringExecution\":"
		first = false
		out.RawString(prefix[1:])
		easyjson147b50d1EncodeK8sIoApiCoreV154(out, *in.RequiredDuringSchedulingIgnoredDuringExecution)
	}
	if len(in.PreferredDuringSchedulingIgnoredDuringExecution) != 0 {
		const prefix string = ",\"preferredDuringSchedulingIgnoredDuringExecution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v118, v119 := range in.PreferredDuringSchedulingIgnoredDuringExecution {
				if v118 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV155(out, v119)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV155(in *jlexer.Lexer, out *_v1.PreferredSchedulingTerm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "weight":
			out.Weight = int32(in.Int32())
		case "preference":
			easyjson147b50d1DecodeK8sIoApiCoreV156(in, &out.Preference)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV155(out *jwriter.Writer, in _v1.PreferredSchedulingTerm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Weight))
	}
	{
		const prefix string = ",\"preference\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV156(out, in.Preference)
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV156(in *jlexer.Lexer, out *_v1.NodeSelectorTerm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "matchExpressions":
			if in.IsNull() {
				in.Skip()
				out.MatchExpressions = nil
			} else {
				in.Delim('[')
				if out.MatchExpressions == nil {
					if !in.IsDelim(']') {
						out.MatchExpressions = make([]_v1.NodeSelectorRequirement, 0, 1)
					} else {
						out.MatchExpressions = []_v1.NodeSelectorRequirement{}
					}
				} else {
					out.MatchExpressions = (out.MatchExpressions)[:0]
				}
				for !in.IsDelim(']') {
					var v120 _v1.NodeSelectorRequirement
					easyjson147b50d1DecodeK8sIoApiCoreV157(in, &v120)
					out.MatchExpressions = append(out.MatchExpressions, v120)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "matchFields":
			if in.IsNull() {
				in.Skip()
				out.MatchFields = nil
			} else {
				in.Delim('[')
				if out.MatchFields == nil {
					if !in.IsDelim(']') {
						out.MatchFields = make([]_v1.NodeSelectorRequirement, 0, 1)
					} else {
						out.MatchFields = []_v1.NodeSelectorRequirement{}
					}
				} else {
					out.MatchFields = (out.MatchFields)[:0]
				}
				for !in.IsDelim(']') {
					var v121 _v1.NodeSelectorRequirement
					easyjson147b50d1DecodeK8sIoApiCoreV157(in, &v121)
					out.MatchFields = append(out.MatchFields, v121)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV156(out *jwriter.Writer, in _v1.NodeSelectorTerm) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.MatchExpressions) != 0 {
		const prefix string = ",\"matchExpressions\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v122, v123 := range in.MatchExpressions {
				if v122 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV157(out, v123)
			}
			out.RawByte(']')
		}
	}
	if len(in.MatchFields) != 0 {
		const prefix string = ",\"matchFields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v124, v125 := range in.MatchFields {
				if v124 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV157(out, v125)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV157(in *jlexer.Lexer, out *_v1.NodeSelectorRequirement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "operator":
			out.Operator = _v1.NodeSelectorOperator(in.String())
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]string, 0, 4)
					} else {
						out.Values = []string{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v126 string
					v126 = string(in.String())
					out.Values = append(out.Values, v126)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV157(out *jwriter.Writer, in _v1.NodeSelectorRequirement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"operator\":"
		out.RawString(prefix)
		out.String(string(in.Operator))
	}
	if len(in.Values) != 0 {
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v127, v128 := range in.Values {
				if v127 > 0 {
					out.RawByte(',')
				}
				out.String(string(v128))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV154(in *jlexer.Lexer, out *_v1.NodeSelector) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodeSelectorTerms":
			if in.IsNull() {
				in.Skip()
				out.NodeSelectorTerms = nil
			} else {
				in.Delim('[')
				if out.NodeSelectorTerms == nil {
					if !in.IsDelim(']') {
						out.NodeSelectorTerms = make([]_v1.NodeSelectorTerm, 0, 1)
					} else {
						out.NodeSelectorTerms = []_v1.NodeSelectorTerm{}
					}
				} else {
					out.NodeSelectorTerms = (out.NodeSelectorTerms)[:0]
				}
				for !in.IsDelim(']') {
					var v129 _v1.NodeSelectorTerm
					easyjson147b50d1DecodeK8sIoApiCoreV156(in, &v129)
					out.NodeSelectorTerms = append(out.NodeSelectorTerms, v129)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV154(out *jwriter.Writer, in _v1.NodeSelector) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodeSelectorTerms\":"
		out.RawString(prefix[1:])
		if in.NodeSelectorTerms == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v130, v131 := range in.NodeSelectorTerms {
				if v130 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV156(out, v131)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV139(in *jlexer.Lexer, out *_v1.PersistentVolumeClaim) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			easyjson147b50d1DecodeK8sIoApimachineryPkgApisMetaV12(in, &out.ObjectMeta)
		case "spec":
			easyjson147b50d1DecodeK8sIoApiCoreV158(in, &out.Spec)
		case "status":
			easyjson147b50d1DecodeK8sIoApiCoreV159(in, &out.Status)
		case "kind":
			out.Kind = string(in.String())
		case "apiVersion":
			out.APIVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV139(out *jwriter.Writer, in _v1.PersistentVolumeClaim) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"metadata\":"
		first = false
		out.RawString(prefix[1:])
		easyjson147b50d1EncodeK8sIoApimachineryPkgApisMetaV12(out, in.ObjectMeta)
	}
	if true {
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV158(out, in.Spec)
	}
	if true {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV159(out, in.Status)
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.APIVersion))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV159(in *jlexer.Lexer, out *_v1.PersistentVolumeClaimStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "phase":
			out.Phase = _v1.PersistentVolumeClaimPhase(in.String())
		case "accessModes":
			if in.IsNull() {
				in.Skip()
				out.AccessModes = nil
			} else {
				in.Delim('[')
				if out.AccessModes == nil {
					if !in.IsDelim(']') {
						out.AccessModes = make([]_v1.PersistentVolumeAccessMode, 0, 4)
					} else {
						out.AccessModes = []_v1.PersistentVolumeAccessMode{}
					}
				} else {
					out.AccessModes = (out.AccessModes)[:0]
				}
				for !in.IsDelim(']') {
					var v132 _v1.PersistentVolumeAccessMode
					v132 = _v1.PersistentVolumeAccessMode(in.String())
					out.AccessModes = append(out.AccessModes, v132)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "capacity":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Capacity = make(_v1.ResourceList)
				} else {
					out.Capacity = nil
				}
				for !in.IsDelim('}') {
					key := _v1.ResourceName(in.String())
					in.WantColon()
					var v133 resource.Quantity
					if data := in.Raw(); in.Ok() {
						in.AddError((v133).UnmarshalJSON(data))
					}
					(out.Capacity)[key] = v133
					in.WantComma()
				}
				in.Delim('}')
			}
		case "conditions":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]_v1.PersistentVolumeClaimCondition, 0, 0)
					} else {
						out.Conditions = []_v1.PersistentVolumeClaimCondition{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v134 _v1.PersistentVolumeClaimCondition
					easyjson147b50d1DecodeK8sIoApiCoreV160(in, &v134)
					out.Conditions = append(out.Conditions, v134)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV159(out *jwriter.Writer, in _v1.PersistentVolumeClaimStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Phase != "" {
		const prefix string = ",\"phase\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Phase))
	}
	if len(in.AccessModes) != 0 {
		const prefix string = ",\"accessModes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v135, v136 := range in.AccessModes {
				if v135 > 0 {
					out.RawByte(',')
				}
				out.String(string(v136))
			}
			out.RawByte(']')
		}
	}
	if len(in.Capacity) != 0 {
		const prefix string = ",\"capacity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v137First := true
			for v137Name, v137Value := range in.Capacity {
				if v137First {
					v137First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v137Name))
				out.RawByte(':')
				out.Raw((v137Value).MarshalJSON())
			}
			out.RawByte('}')
		}
	}
	if len(in.Conditions) != 0 {
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v138, v139 := range in.Conditions {
				if v138 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV160(out, v139)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV160(in *jlexer.Lexer, out *_v1.PersistentVolumeClaimCondition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = _v1.PersistentVolumeClaimConditionType(in.String())
		case "status":
			out.Status = _v1.ConditionStatus(in.String())
		case "lastProbeTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastProbeTime).UnmarshalJSON(data))
			}
		case "lastTransitionTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastTransitionTime).UnmarshalJSON(data))
			}
		case "reason":
			out.Reason = string(in.String())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV160(out *jwriter.Writer, in _v1.PersistentVolumeClaimCondition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	if true {
		const prefix string = ",\"lastProbeTime\":"
		out.RawString(prefix)
		out.Raw((in.LastProbeTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"lastTransitionTime\":"
		out.RawString(prefix)
		out.Raw((in.LastTransitionTime).MarshalJSON())
	}
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV158(in *jlexer.Lexer, out *_v1.PersistentVolumeClaimSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accessModes":
			if in.IsNull() {
				in.Skip()
				out.AccessModes = nil
			} else {
				in.Delim('[')
				if out.AccessModes == nil {
					if !in.IsDelim(']') {
						out.AccessModes = make([]_v1.PersistentVolumeAccessMode, 0, 4)
					} else {
						out.AccessModes = []_v1.PersistentVolumeAccessMode{}
					}
				} else {
					out.AccessModes = (out.AccessModes)[:0]
				}
				for !in.IsDelim(']') {
					var v140 _v1.PersistentVolumeAccessMode
					v140 = _v1.PersistentVolumeAccessMode(in.String())
					out.AccessModes = append(out.AccessModes, v140)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "selector":
			if in.IsNull() {
				in.Skip()
				out.Selector = nil
			} else {
				if out.Selector == nil {
					out.Selector = new(_v11.LabelSelector)
				}
				easyjson147b50d1DecodeK8sIoApimachineryPkgApisMetaV1(in, out.Selector)
			}
		case "resources":
			easyjson147b50d1DecodeK8sIoApiCoreV161(in, &out.Resources)
		case "volumeName":
			out.VolumeName = string(in.String())
		case "storageClassName":
			if in.IsNull() {
				in.Skip()
				out.StorageClassName = nil
			} else {
				if out.StorageClassName == nil {
					out.StorageClassName = new(string)
				}
				*out.StorageClassName = string(in.String())
			}
		case "volumeMode":
			if in.IsNull() {
				in.Skip()
				out.VolumeMode = nil
			} else {
				if out.VolumeMode == nil {
					out.VolumeMode = new(_v1.PersistentVolumeMode)
				}
				*out.VolumeMode = _v1.PersistentVolumeMode(in.String())
			}
		case "dataSource":
			if in.IsNull() {
				in.Skip()
				out.DataSource = nil
			} else {
				if out.DataSource == nil {
					out.DataSource = new(_v1.TypedLocalObjectReference)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV162(in, out.DataSource)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV158(out *jwriter.Writer, in _v1.PersistentVolumeClaimSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AccessModes) != 0 {
		const prefix string = ",\"accessModes\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v141, v142 := range in.AccessModes {
				if v141 > 0 {
					out.RawByte(',')
				}
				out.String(string(v142))
			}
			out.RawByte(']')
		}
	}
	if in.Selector != nil {
		const prefix string = ",\"selector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApimachineryPkgApisMetaV1(out, *in.Selector)
	}
	if true {
		const prefix string = ",\"resources\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV161(out, in.Resources)
	}
	if in.VolumeName != "" {
		const prefix string = ",\"volumeName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VolumeName))
	}
	if in.StorageClassName != nil {
		const prefix string = ",\"storageClassName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.StorageClassName))
	}
	if in.VolumeMode != nil {
		const prefix string = ",\"volumeMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.VolumeMode))
	}
	if in.DataSource != nil {
		const prefix string = ",\"dataSource\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV162(out, *in.DataSource)
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV162(in *jlexer.Lexer, out *_v1.TypedLocalObjectReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiGroup":
			if in.IsNull() {
				in.Skip()
				out.APIGroup = nil
			} else {
				if out.APIGroup == nil {
					out.APIGroup = new(string)
				}
				*out.APIGroup = string(in.String())
			}
		case "kind":
			out.Kind = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV162(out *jwriter.Writer, in _v1.TypedLocalObjectReference) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apiGroup\":"
		out.RawString(prefix[1:])
		if in.APIGroup == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.APIGroup))
		}
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV161(in *jlexer.Lexer, out *_v1.ResourceRequirements) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limits":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Limits = make(_v1.ResourceList)
				} else {
					out.Limits = nil
				}
				for !in.IsDelim('}') {
					key := _v1.ResourceName(in.String())
					in.WantColon()
					var v143 resource.Quantity
					if data := in.Raw(); in.Ok() {
						in.AddError((v143).UnmarshalJSON(data))
					}
					(out.Limits)[key] = v143
					in.WantComma()
				}
				in.Delim('}')
			}
		case "requests":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Requests = make(_v1.ResourceList)
				} else {
					out.Requests = nil
				}
				for !in.IsDelim('}') {
					key := _v1.ResourceName(in.String())
					in.WantColon()
					var v144 resource.Quantity
					if data := in.Raw(); in.Ok() {
						in.AddError((v144).UnmarshalJSON(data))
					}
					(out.Requests)[key] = v144
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV161(out *jwriter.Writer, in _v1.ResourceRequirements) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Limits) != 0 {
		const prefix string = ",\"limits\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v145First := true
			for v145Name, v145Value := range in.Limits {
				if v145First {
					v145First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v145Name))
				out.RawByte(':')
				out.Raw((v145Value).MarshalJSON())
			}
			out.RawByte('}')
		}
	}
	if len(in.Requests) != 0 {
		const prefix string = ",\"requests\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v146First := true
			for v146Name, v146Value := range in.Requests {
				if v146First {
					v146First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v146Name))
				out.RawByte(':')
				out.Raw((v146Value).MarshalJSON())
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApimachineryPkgApisMetaV12(in *jlexer.Lexer, out *_v11.ObjectMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "generateName":
			out.GenerateName = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		case "selfLink":
			out.SelfLink = string(in.String())
		case "uid":
			out.UID = types.UID(in.String())
		case "resourceVersion":
			out.ResourceVersion = string(in.String())
		case "generation":
			out.Generation = int64(in.Int64())
		case "creationTimestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreationTimestamp).UnmarshalJSON(data))
			}
		case "deletionTimestamp":
			if in.IsNull() {
				in.Skip()
				out.DeletionTimestamp = nil
			} else {
				if out.DeletionTimestamp == nil {
					out.DeletionTimestamp = new(_v11.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletionTimestamp).UnmarshalJSON(data))
				}
			}
		case "deletionGracePeriodSeconds":
			if in.IsNull() {
				in.Skip()
				out.DeletionGracePeriodSeconds = nil
			} else {
				if out.DeletionGracePeriodSeconds == nil {
					out.DeletionGracePeriodSeconds = new(int64)
				}
				*out.DeletionGracePeriodSeconds = int64(in.Int64())
			}
		case "labels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Labels = make(map[string]string)
				} else {
					out.Labels = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v147 string
					v147 = string(in.String())
					(out.Labels)[key] = v147
					in.WantComma()
				}
				in.Delim('}')
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Annotations = make(map[string]string)
				} else {
					out.Annotations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v148 string
					v148 = string(in.String())
					(out.Annotations)[key] = v148
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ownerReferences":
			if in.IsNull() {
				in.Skip()
				out.OwnerReferences = nil
			} else {
				in.Delim('[')
				if out.OwnerReferences == nil {
					if !in.IsDelim(']') {
						out.OwnerReferences = make([]_v11.OwnerReference, 0, 0)
					} else {
						out.OwnerReferences = []_v11.OwnerReference{}
					}
				} else {
					out.OwnerReferences = (out.OwnerReferences)[:0]
				}
				for !in.IsDelim(']') {
					var v149 _v11.OwnerReference
					easyjson147b50d1DecodeK8sIoApimachineryPkgApisMetaV13(in, &v149)
					out.OwnerReferences = append(out.OwnerReferences, v149)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "finalizers":
			if in.IsNull() {
				in.Skip()
				out.Finalizers = nil
			} else {
				in.Delim('[')
				if out.Finalizers == nil {
					if !in.IsDelim(']') {
						out.Finalizers = make([]string, 0, 4)
					} else {
						out.Finalizers = []string{}
					}
				} else {
					out.Finalizers = (out.Finalizers)[:0]
				}
				for !in.IsDelim(']') {
					var v150 string
					v150 = string(in.String())
					out.Finalizers = append(out.Finalizers, v150)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "clusterName":
			out.ClusterName = string(in.String())
		case "managedFields":
			if in.IsNull() {
				in.Skip()
				out.ManagedFields = nil
			} else {
				in.Delim('[')
				if out.ManagedFields == nil {
					if !in.IsDelim(']') {
						out.ManagedFields = make([]_v11.ManagedFieldsEntry, 0, 0)
					} else {
						out.ManagedFields = []_v11.ManagedFieldsEntry{}
					}
				} else {
					out.ManagedFields = (out.ManagedFields)[:0]
				}
				for !in.IsDelim(']') {
					var v151 _v11.ManagedFieldsEntry
					easyjson147b50d1DecodeK8sIoApimachineryPkgApisMetaV14(in, &v151)
					out.ManagedFields = append(out.ManagedFields, v151)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApimachineryPkgApisMetaV12(out *jwriter.Writer, in _v11.ObjectMeta) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.GenerateName != "" {
		const prefix string = ",\"generateName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GenerateName))
	}
	if in.Namespace != "" {
		const prefix string = ",\"namespace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Namespace))
	}
	if in.SelfLink != "" {
		const prefix string = ",\"selfLink\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SelfLink))
	}
	if in.UID != "" {
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UID))
	}
	if in.ResourceVersion != "" {
		const prefix string = ",\"resourceVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResourceVersion))
	}
	if in.Generation != 0 {
		const prefix string = ",\"generation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Generation))
	}
	if true {
		const prefix string = ",\"creationTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreationTimestamp).MarshalJSON())
	}
	if in.DeletionTimestamp != nil {
		const prefix string = ",\"deletionTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.DeletionTimestamp).MarshalJSON())
	}
	if in.DeletionGracePeriodSeconds != nil {
		const prefix string = ",\"deletionGracePeriodSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.DeletionGracePeriodSeconds))
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v152First := true
			for v152Name, v152Value := range in.Labels {
				if v152First {
					v152First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v152Name))
				out.RawByte(':')
				out.String(string(v152Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v153First := true
			for v153Name, v153Value := range in.Annotations {
				if v153First {
					v153First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v153Name))
				out.RawByte(':')
				out.String(string(v153Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.OwnerReferences) != 0 {
		const prefix string = ",\"ownerReferences\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v154, v155 := range in.OwnerReferences {
				if v154 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApimachineryPkgApisMetaV13(out, v155)
			}
			out.RawByte(']')
		}
	}
	if len(in.Finalizers) != 0 {
		const prefix string = ",\"finalizers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v156, v157 := range in.Finalizers {
				if v156 > 0 {
					out.RawByte(',')
				}
				out.String(string(v157))
			}
			out.RawByte(']')
		}
	}
	if in.ClusterName != "" {
		const prefix string = ",\"clusterName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClusterName))
	}
	if len(in.ManagedFields) != 0 {
		const prefix string = ",\"managedFields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v158, v159 := range in.ManagedFields {
				if v158 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApimachineryPkgApisMetaV14(out, v159)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApimachineryPkgApisMetaV14(in *jlexer.Lexer, out *_v11.ManagedFieldsEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "manager":
			out.Manager = string(in.String())
		case "operation":
			out.Operation = _v11.ManagedFieldsOperationType(in.String())
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "time":
			if in.IsNull() {
				in.Skip()
				out.Time = nil
			} else {
				if out.Time == nil {
					out.Time = new(_v11.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Time).UnmarshalJSON(data))
				}
			}
		case "fieldsType":
			out.FieldsType = string(in.String())
		case "fieldsV1":
			if in.IsNull() {
				in.Skip()
				out.FieldsV1 = nil
			} else {
				if out.FieldsV1 == nil {
					out.FieldsV1 = new(_v11.FieldsV1)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FieldsV1).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApimachineryPkgApisMetaV14(out *jwriter.Writer, in _v11.ManagedFieldsEntry) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Manager != "" {
		const prefix string = ",\"manager\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Manager))
	}
	if in.Operation != "" {
		const prefix string = ",\"operation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Operation))
	}
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.APIVersion))
	}
	if in.Time != nil {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Time).MarshalJSON())
	}
	if in.FieldsType != "" {
		const prefix string = ",\"fieldsType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FieldsType))
	}
	if in.FieldsV1 != nil {
		const prefix string = ",\"fieldsV1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.FieldsV1).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApimachineryPkgApisMetaV13(in *jlexer.Lexer, out *_v11.OwnerReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "uid":
			out.UID = types.UID(in.String())
		case "controller":
			if in.IsNull() {
				in.Skip()
				out.Controller = nil
			} else {
				if out.Controller == nil {
					out.Controller = new(bool)
				}
				*out.Controller = bool(in.Bool())
			}
		case "blockOwnerDeletion":
			if in.IsNull() {
				in.Skip()
				out.BlockOwnerDeletion = nil
			} else {
				if out.BlockOwnerDeletion == nil {
					out.BlockOwnerDeletion = new(bool)
				}
				*out.BlockOwnerDeletion = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApimachineryPkgApisMetaV13(out *jwriter.Writer, in _v11.OwnerReference) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apiVersion\":"
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		out.String(string(in.UID))
	}
	if in.Controller != nil {
		const prefix string = ",\"controller\":"
		out.RawString(prefix)
		out.Bool(bool(*in.Controller))
	}
	if in.BlockOwnerDeletion != nil {
		const prefix string = ",\"blockOwnerDeletion\":"
		out.RawString(prefix)
		out.Bool(bool(*in.BlockOwnerDeletion))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha15(in *jlexer.Lexer, out *WorkflowList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			easyjson147b50d1DecodeK8sIoApimachineryPkgApisMetaV15(in, &out.ListMeta)
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make(Workflows, 0, 0)
					} else {
						out.Items = Workflows{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v160 Workflow
					(v160).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v160)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "kind":
			out.Kind = string(in.String())
		case "apiVersion":
			out.APIVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha15(out *jwriter.Writer, in WorkflowList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		easyjson147b50d1EncodeK8sIoApimachineryPkgApisMetaV15(out, in.ListMeta)
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v161, v162 := range in.Items {
				if v161 > 0 {
					out.RawByte(',')
				}
				(v162).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		out.RawString(prefix)
		out.String(string(in.APIVersion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkflowList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkflowList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkflowList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkflowList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha15(l, v)
}
func easyjson147b50d1DecodeK8sIoApimachineryPkgApisMetaV15(in *jlexer.Lexer, out *_v11.ListMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "selfLink":
			out.SelfLink = string(in.String())
		case "resourceVersion":
			out.ResourceVersion = string(in.String())
		case "continue":
			out.Continue = string(in.String())
		case "remainingItemCount":
			if in.IsNull() {
				in.Skip()
				out.RemainingItemCount = nil
			} else {
				if out.RemainingItemCount == nil {
					out.RemainingItemCount = new(int64)
				}
				*out.RemainingItemCount = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApimachineryPkgApisMetaV15(out *jwriter.Writer, in _v11.ListMeta) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SelfLink != "" {
		const prefix string = ",\"selfLink\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.SelfLink))
	}
	if in.ResourceVersion != "" {
		const prefix string = ",\"resourceVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResourceVersion))
	}
	if in.Continue != "" {
		const prefix string = ",\"continue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Continue))
	}
	if in.RemainingItemCount != nil {
		const prefix string = ",\"remainingItemCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.RemainingItemCount))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha16(in *jlexer.Lexer, out *Workflow) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			easyjson147b50d1DecodeK8sIoApimachineryPkgApisMetaV12(in, &out.ObjectMeta)
		case "spec":
			(out.Spec).UnmarshalEasyJSON(in)
		case "status":
			(out.Status).UnmarshalEasyJSON(in)
		case "kind":
			out.Kind = string(in.String())
		case "apiVersion":
			out.APIVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha16(out *jwriter.Writer, in Workflow) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		easyjson147b50d1EncodeK8sIoApimachineryPkgApisMetaV12(out, in.ObjectMeta)
	}
	{
		const prefix string = ",\"spec\":"
		out.RawString(prefix)
		(in.Spec).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		(in.Status).MarshalEasyJSON(out)
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		out.RawString(prefix)
		out.String(string(in.APIVersion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Workflow) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Workflow) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Workflow) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Workflow) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha16(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha17(in *jlexer.Lexer, out *VolumeClaimGC) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "strategy":
			out.Strategy = VolumeClaimGCStrategy(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha17(out *jwriter.Writer, in VolumeClaimGC) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Strategy != "" {
		const prefix string = ",\"strategy\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Strategy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VolumeClaimGC) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VolumeClaimGC) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VolumeClaimGC) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VolumeClaimGC) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha17(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha18(in *jlexer.Lexer, out *ValueFrom) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "jsonPath":
			out.JSONPath = string(in.String())
		case "jqFilter":
			out.JQFilter = string(in.String())
		case "event":
			out.Event = string(in.String())
		case "parameter":
			out.Parameter = string(in.String())
		case "supplied":
			if in.IsNull() {
				in.Skip()
				out.Supplied = nil
			} else {
				if out.Supplied == nil {
					out.Supplied = new(SuppliedValueFrom)
				}
				(*out.Supplied).UnmarshalEasyJSON(in)
			}
		case "default":
			if in.IsNull() {
				in.Skip()
				out.Default = nil
			} else {
				if out.Default == nil {
					out.Default = new(AnyString)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Default).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha18(out *jwriter.Writer, in ValueFrom) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Path != "" {
		const prefix string = ",\"path\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	if in.JSONPath != "" {
		const prefix string = ",\"jsonPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONPath))
	}
	if in.JQFilter != "" {
		const prefix string = ",\"jqFilter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JQFilter))
	}
	if in.Event != "" {
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Event))
	}
	if in.Parameter != "" {
		const prefix string = ",\"parameter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Parameter))
	}
	if in.Supplied != nil {
		const prefix string = ",\"supplied\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Supplied).MarshalEasyJSON(out)
	}
	if in.Default != nil {
		const prefix string = ",\"default\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Default).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ValueFrom) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ValueFrom) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ValueFrom) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ValueFrom) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha18(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha19(in *jlexer.Lexer, out *UserContainer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mirrorVolumeMounts":
			if in.IsNull() {
				in.Skip()
				out.MirrorVolumeMounts = nil
			} else {
				if out.MirrorVolumeMounts == nil {
					out.MirrorVolumeMounts = new(bool)
				}
				*out.MirrorVolumeMounts = bool(in.Bool())
			}
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "command":
			if in.IsNull() {
				in.Skip()
				out.Command = nil
			} else {
				in.Delim('[')
				if out.Command == nil {
					if !in.IsDelim(']') {
						out.Command = make([]string, 0, 4)
					} else {
						out.Command = []string{}
					}
				} else {
					out.Command = (out.Command)[:0]
				}
				for !in.IsDelim(']') {
					var v163 string
					v163 = string(in.String())
					out.Command = append(out.Command, v163)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v164 string
					v164 = string(in.String())
					out.Args = append(out.Args, v164)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "workingDir":
			out.WorkingDir = string(in.String())
		case "ports":
			if in.IsNull() {
				in.Skip()
				out.Ports = nil
			} else {
				in.Delim('[')
				if out.Ports == nil {
					if !in.IsDelim(']') {
						out.Ports = make([]_v1.ContainerPort, 0, 1)
					} else {
						out.Ports = []_v1.ContainerPort{}
					}
				} else {
					out.Ports = (out.Ports)[:0]
				}
				for !in.IsDelim(']') {
					var v165 _v1.ContainerPort
					easyjson147b50d1DecodeK8sIoApiCoreV163(in, &v165)
					out.Ports = append(out.Ports, v165)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "envFrom":
			if in.IsNull() {
				in.Skip()
				out.EnvFrom = nil
			} else {
				in.Delim('[')
				if out.EnvFrom == nil {
					if !in.IsDelim(']') {
						out.EnvFrom = make([]_v1.EnvFromSource, 0, 2)
					} else {
						out.EnvFrom = []_v1.EnvFromSource{}
					}
				} else {
					out.EnvFrom = (out.EnvFrom)[:0]
				}
				for !in.IsDelim(']') {
					var v166 _v1.EnvFromSource
					easyjson147b50d1DecodeK8sIoApiCoreV164(in, &v166)
					out.EnvFrom = append(out.EnvFrom, v166)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "env":
			if in.IsNull() {
				in.Skip()
				out.Env = nil
			} else {
				in.Delim('[')
				if out.Env == nil {
					if !in.IsDelim(']') {
						out.Env = make([]_v1.EnvVar, 0, 1)
					} else {
						out.Env = []_v1.EnvVar{}
					}
				} else {
					out.Env = (out.Env)[:0]
				}
				for !in.IsDelim(']') {
					var v167 _v1.EnvVar
					easyjson147b50d1DecodeK8sIoApiCoreV165(in, &v167)
					out.Env = append(out.Env, v167)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resources":
			easyjson147b50d1DecodeK8sIoApiCoreV161(in, &out.Resources)
		case "volumeMounts":
			if in.IsNull() {
				in.Skip()
				out.VolumeMounts = nil
			} else {
				in.Delim('[')
				if out.VolumeMounts == nil {
					if !in.IsDelim(']') {
						out.VolumeMounts = make([]_v1.VolumeMount, 0, 0)
					} else {
						out.VolumeMounts = []_v1.VolumeMount{}
					}
				} else {
					out.VolumeMounts = (out.VolumeMounts)[:0]
				}
				for !in.IsDelim(']') {
					var v168 _v1.VolumeMount
					easyjson147b50d1DecodeK8sIoApiCoreV166(in, &v168)
					out.VolumeMounts = append(out.VolumeMounts, v168)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "volumeDevices":
			if in.IsNull() {
				in.Skip()
				out.VolumeDevices = nil
			} else {
				in.Delim('[')
				if out.VolumeDevices == nil {
					if !in.IsDelim(']') {
						out.VolumeDevices = make([]_v1.VolumeDevice, 0, 2)
					} else {
						out.VolumeDevices = []_v1.VolumeDevice{}
					}
				} else {
					out.VolumeDevices = (out.VolumeDevices)[:0]
				}
				for !in.IsDelim(']') {
					var v169 _v1.VolumeDevice
					easyjson147b50d1DecodeK8sIoApiCoreV167(in, &v169)
					out.VolumeDevices = append(out.VolumeDevices, v169)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "livenessProbe":
			if in.IsNull() {
				in.Skip()
				out.LivenessProbe = nil
			} else {
				if out.LivenessProbe == nil {
					out.LivenessProbe = new(_v1.Probe)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV168(in, out.LivenessProbe)
			}
		case "readinessProbe":
			if in.IsNull() {
				in.Skip()
				out.ReadinessProbe = nil
			} else {
				if out.ReadinessProbe == nil {
					out.ReadinessProbe = new(_v1.Probe)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV168(in, out.ReadinessProbe)
			}
		case "startupProbe":
			if in.IsNull() {
				in.Skip()
				out.StartupProbe = nil
			} else {
				if out.StartupProbe == nil {
					out.StartupProbe = new(_v1.Probe)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV168(in, out.StartupProbe)
			}
		case "lifecycle":
			if in.IsNull() {
				in.Skip()
				out.Lifecycle = nil
			} else {
				if out.Lifecycle == nil {
					out.Lifecycle = new(_v1.Lifecycle)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV169(in, out.Lifecycle)
			}
		case "terminationMessagePath":
			out.TerminationMessagePath = string(in.String())
		case "terminationMessagePolicy":
			out.TerminationMessagePolicy = _v1.TerminationMessagePolicy(in.String())
		case "imagePullPolicy":
			out.ImagePullPolicy = _v1.PullPolicy(in.String())
		case "securityContext":
			if in.IsNull() {
				in.Skip()
				out.SecurityContext = nil
			} else {
				if out.SecurityContext == nil {
					out.SecurityContext = new(_v1.SecurityContext)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV170(in, out.SecurityContext)
			}
		case "stdin":
			out.Stdin = bool(in.Bool())
		case "stdinOnce":
			out.StdinOnce = bool(in.Bool())
		case "tty":
			out.TTY = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha19(out *jwriter.Writer, in UserContainer) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MirrorVolumeMounts != nil {
		const prefix string = ",\"mirrorVolumeMounts\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(*in.MirrorVolumeMounts))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	if len(in.Command) != 0 {
		const prefix string = ",\"command\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v170, v171 := range in.Command {
				if v170 > 0 {
					out.RawByte(',')
				}
				out.String(string(v171))
			}
			out.RawByte(']')
		}
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v172, v173 := range in.Args {
				if v172 > 0 {
					out.RawByte(',')
				}
				out.String(string(v173))
			}
			out.RawByte(']')
		}
	}
	if in.WorkingDir != "" {
		const prefix string = ",\"workingDir\":"
		out.RawString(prefix)
		out.String(string(in.WorkingDir))
	}
	if len(in.Ports) != 0 {
		const prefix string = ",\"ports\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v174, v175 := range in.Ports {
				if v174 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV163(out, v175)
			}
			out.RawByte(']')
		}
	}
	if len(in.EnvFrom) != 0 {
		const prefix string = ",\"envFrom\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v176, v177 := range in.EnvFrom {
				if v176 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV164(out, v177)
			}
			out.RawByte(']')
		}
	}
	if len(in.Env) != 0 {
		const prefix string = ",\"env\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v178, v179 := range in.Env {
				if v178 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV165(out, v179)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV161(out, in.Resources)
	}
	if len(in.VolumeMounts) != 0 {
		const prefix string = ",\"volumeMounts\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v180, v181 := range in.VolumeMounts {
				if v180 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV166(out, v181)
			}
			out.RawByte(']')
		}
	}
	if len(in.VolumeDevices) != 0 {
		const prefix string = ",\"volumeDevices\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v182, v183 := range in.VolumeDevices {
				if v182 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV167(out, v183)
			}
			out.RawByte(']')
		}
	}
	if in.LivenessProbe != nil {
		const prefix string = ",\"livenessProbe\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV168(out, *in.LivenessProbe)
	}
	if in.ReadinessProbe != nil {
		const prefix string = ",\"readinessProbe\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV168(out, *in.ReadinessProbe)
	}
	if in.StartupProbe != nil {
		const prefix string = ",\"startupProbe\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV168(out, *in.StartupProbe)
	}
	if in.Lifecycle != nil {
		const prefix string = ",\"lifecycle\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV169(out, *in.Lifecycle)
	}
	if in.TerminationMessagePath != "" {
		const prefix string = ",\"terminationMessagePath\":"
		out.RawString(prefix)
		out.String(string(in.TerminationMessagePath))
	}
	if in.TerminationMessagePolicy != "" {
		const prefix string = ",\"terminationMessagePolicy\":"
		out.RawString(prefix)
		out.String(string(in.TerminationMessagePolicy))
	}
	if in.ImagePullPolicy != "" {
		const prefix string = ",\"imagePullPolicy\":"
		out.RawString(prefix)
		out.String(string(in.ImagePullPolicy))
	}
	if in.SecurityContext != nil {
		const prefix string = ",\"securityContext\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV170(out, *in.SecurityContext)
	}
	if in.Stdin {
		const prefix string = ",\"stdin\":"
		out.RawString(prefix)
		out.Bool(bool(in.Stdin))
	}
	if in.StdinOnce {
		const prefix string = ",\"stdinOnce\":"
		out.RawString(prefix)
		out.Bool(bool(in.StdinOnce))
	}
	if in.TTY {
		const prefix string = ",\"tty\":"
		out.RawString(prefix)
		out.Bool(bool(in.TTY))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserContainer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserContainer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserContainer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserContainer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha19(l, v)
}
func easyjson147b50d1DecodeK8sIoApiCoreV170(in *jlexer.Lexer, out *_v1.SecurityContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "capabilities":
			if in.IsNull() {
				in.Skip()
				out.Capabilities = nil
			} else {
				if out.Capabilities == nil {
					out.Capabilities = new(_v1.Capabilities)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV171(in, out.Capabilities)
			}
		case "privileged":
			if in.IsNull() {
				in.Skip()
				out.Privileged = nil
			} else {
				if out.Privileged == nil {
					out.Privileged = new(bool)
				}
				*out.Privileged = bool(in.Bool())
			}
		case "seLinuxOptions":
			if in.IsNull() {
				in.Skip()
				out.SELinuxOptions = nil
			} else {
				if out.SELinuxOptions == nil {
					out.SELinuxOptions = new(_v1.SELinuxOptions)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV145(in, out.SELinuxOptions)
			}
		case "windowsOptions":
			if in.IsNull() {
				in.Skip()
				out.WindowsOptions = nil
			} else {
				if out.WindowsOptions == nil {
					out.WindowsOptions = new(_v1.WindowsSecurityContextOptions)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV146(in, out.WindowsOptions)
			}
		case "runAsUser":
			if in.IsNull() {
				in.Skip()
				out.RunAsUser = nil
			} else {
				if out.RunAsUser == nil {
					out.RunAsUser = new(int64)
				}
				*out.RunAsUser = int64(in.Int64())
			}
		case "runAsGroup":
			if in.IsNull() {
				in.Skip()
				out.RunAsGroup = nil
			} else {
				if out.RunAsGroup == nil {
					out.RunAsGroup = new(int64)
				}
				*out.RunAsGroup = int64(in.Int64())
			}
		case "runAsNonRoot":
			if in.IsNull() {
				in.Skip()
				out.RunAsNonRoot = nil
			} else {
				if out.RunAsNonRoot == nil {
					out.RunAsNonRoot = new(bool)
				}
				*out.RunAsNonRoot = bool(in.Bool())
			}
		case "readOnlyRootFilesystem":
			if in.IsNull() {
				in.Skip()
				out.ReadOnlyRootFilesystem = nil
			} else {
				if out.ReadOnlyRootFilesystem == nil {
					out.ReadOnlyRootFilesystem = new(bool)
				}
				*out.ReadOnlyRootFilesystem = bool(in.Bool())
			}
		case "allowPrivilegeEscalation":
			if in.IsNull() {
				in.Skip()
				out.AllowPrivilegeEscalation = nil
			} else {
				if out.AllowPrivilegeEscalation == nil {
					out.AllowPrivilegeEscalation = new(bool)
				}
				*out.AllowPrivilegeEscalation = bool(in.Bool())
			}
		case "procMount":
			if in.IsNull() {
				in.Skip()
				out.ProcMount = nil
			} else {
				if out.ProcMount == nil {
					out.ProcMount = new(_v1.ProcMountType)
				}
				*out.ProcMount = _v1.ProcMountType(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV170(out *jwriter.Writer, in _v1.SecurityContext) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Capabilities != nil {
		const prefix string = ",\"capabilities\":"
		first = false
		out.RawString(prefix[1:])
		easyjson147b50d1EncodeK8sIoApiCoreV171(out, *in.Capabilities)
	}
	if in.Privileged != nil {
		const prefix string = ",\"privileged\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Privileged))
	}
	if in.SELinuxOptions != nil {
		const prefix string = ",\"seLinuxOptions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV145(out, *in.SELinuxOptions)
	}
	if in.WindowsOptions != nil {
		const prefix string = ",\"windowsOptions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV146(out, *in.WindowsOptions)
	}
	if in.RunAsUser != nil {
		const prefix string = ",\"runAsUser\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.RunAsUser))
	}
	if in.RunAsGroup != nil {
		const prefix string = ",\"runAsGroup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.RunAsGroup))
	}
	if in.RunAsNonRoot != nil {
		const prefix string = ",\"runAsNonRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.RunAsNonRoot))
	}
	if in.ReadOnlyRootFilesystem != nil {
		const prefix string = ",\"readOnlyRootFilesystem\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.ReadOnlyRootFilesystem))
	}
	if in.AllowPrivilegeEscalation != nil {
		const prefix string = ",\"allowPrivilegeEscalation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.AllowPrivilegeEscalation))
	}
	if in.ProcMount != nil {
		const prefix string = ",\"procMount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ProcMount))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV171(in *jlexer.Lexer, out *_v1.Capabilities) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "add":
			if in.IsNull() {
				in.Skip()
				out.Add = nil
			} else {
				in.Delim('[')
				if out.Add == nil {
					if !in.IsDelim(']') {
						out.Add = make([]_v1.Capability, 0, 4)
					} else {
						out.Add = []_v1.Capability{}
					}
				} else {
					out.Add = (out.Add)[:0]
				}
				for !in.IsDelim(']') {
					var v184 _v1.Capability
					v184 = _v1.Capability(in.String())
					out.Add = append(out.Add, v184)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "drop":
			if in.IsNull() {
				in.Skip()
				out.Drop = nil
			} else {
				in.Delim('[')
				if out.Drop == nil {
					if !in.IsDelim(']') {
						out.Drop = make([]_v1.Capability, 0, 4)
					} else {
						out.Drop = []_v1.Capability{}
					}
				} else {
					out.Drop = (out.Drop)[:0]
				}
				for !in.IsDelim(']') {
					var v185 _v1.Capability
					v185 = _v1.Capability(in.String())
					out.Drop = append(out.Drop, v185)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV171(out *jwriter.Writer, in _v1.Capabilities) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Add) != 0 {
		const prefix string = ",\"add\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v186, v187 := range in.Add {
				if v186 > 0 {
					out.RawByte(',')
				}
				out.String(string(v187))
			}
			out.RawByte(']')
		}
	}
	if len(in.Drop) != 0 {
		const prefix string = ",\"drop\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v188, v189 := range in.Drop {
				if v188 > 0 {
					out.RawByte(',')
				}
				out.String(string(v189))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV169(in *jlexer.Lexer, out *_v1.Lifecycle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "postStart":
			if in.IsNull() {
				in.Skip()
				out.PostStart = nil
			} else {
				if out.PostStart == nil {
					out.PostStart = new(_v1.Handler)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV172(in, out.PostStart)
			}
		case "preStop":
			if in.IsNull() {
				in.Skip()
				out.PreStop = nil
			} else {
				if out.PreStop == nil {
					out.PreStop = new(_v1.Handler)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV172(in, out.PreStop)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV169(out *jwriter.Writer, in _v1.Lifecycle) {
	out.RawByte('{')
	first := true
	_ = first
	if in.PostStart != nil {
		const prefix string = ",\"postStart\":"
		first = false
		out.RawString(prefix[1:])
		easyjson147b50d1EncodeK8sIoApiCoreV172(out, *in.PostStart)
	}
	if in.PreStop != nil {
		const prefix string = ",\"preStop\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV172(out, *in.PreStop)
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV172(in *jlexer.Lexer, out *_v1.Handler) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "exec":
			if in.IsNull() {
				in.Skip()
				out.Exec = nil
			} else {
				if out.Exec == nil {
					out.Exec = new(_v1.ExecAction)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV173(in, out.Exec)
			}
		case "httpGet":
			if in.IsNull() {
				in.Skip()
				out.HTTPGet = nil
			} else {
				if out.HTTPGet == nil {
					out.HTTPGet = new(_v1.HTTPGetAction)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV174(in, out.HTTPGet)
			}
		case "tcpSocket":
			if in.IsNull() {
				in.Skip()
				out.TCPSocket = nil
			} else {
				if out.TCPSocket == nil {
					out.TCPSocket = new(_v1.TCPSocketAction)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV175(in, out.TCPSocket)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV172(out *jwriter.Writer, in _v1.Handler) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Exec != nil {
		const prefix string = ",\"exec\":"
		first = false
		out.RawString(prefix[1:])
		easyjson147b50d1EncodeK8sIoApiCoreV173(out, *in.Exec)
	}
	if in.HTTPGet != nil {
		const prefix string = ",\"httpGet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV174(out, *in.HTTPGet)
	}
	if in.TCPSocket != nil {
		const prefix string = ",\"tcpSocket\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV175(out, *in.TCPSocket)
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV175(in *jlexer.Lexer, out *_v1.TCPSocketAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "port":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Port).UnmarshalJSON(data))
			}
		case "host":
			out.Host = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV175(out *jwriter.Writer, in _v1.TCPSocketAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix[1:])
		out.Raw((in.Port).MarshalJSON())
	}
	if in.Host != "" {
		const prefix string = ",\"host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV174(in *jlexer.Lexer, out *_v1.HTTPGetAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "port":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Port).UnmarshalJSON(data))
			}
		case "host":
			out.Host = string(in.String())
		case "scheme":
			out.Scheme = _v1.URIScheme(in.String())
		case "httpHeaders":
			if in.IsNull() {
				in.Skip()
				out.HTTPHeaders = nil
			} else {
				in.Delim('[')
				if out.HTTPHeaders == nil {
					if !in.IsDelim(']') {
						out.HTTPHeaders = make([]_v1.HTTPHeader, 0, 2)
					} else {
						out.HTTPHeaders = []_v1.HTTPHeader{}
					}
				} else {
					out.HTTPHeaders = (out.HTTPHeaders)[:0]
				}
				for !in.IsDelim(']') {
					var v190 _v1.HTTPHeader
					easyjson147b50d1DecodeK8sIoApiCoreV176(in, &v190)
					out.HTTPHeaders = append(out.HTTPHeaders, v190)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV174(out *jwriter.Writer, in _v1.HTTPGetAction) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Path != "" {
		const prefix string = ",\"path\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Port).MarshalJSON())
	}
	if in.Host != "" {
		const prefix string = ",\"host\":"
		out.RawString(prefix)
		out.String(string(in.Host))
	}
	if in.Scheme != "" {
		const prefix string = ",\"scheme\":"
		out.RawString(prefix)
		out.String(string(in.Scheme))
	}
	if len(in.HTTPHeaders) != 0 {
		const prefix string = ",\"httpHeaders\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v191, v192 := range in.HTTPHeaders {
				if v191 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV176(out, v192)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV176(in *jlexer.Lexer, out *_v1.HTTPHeader) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV176(out *jwriter.Writer, in _v1.HTTPHeader) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV173(in *jlexer.Lexer, out *_v1.ExecAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "command":
			if in.IsNull() {
				in.Skip()
				out.Command = nil
			} else {
				in.Delim('[')
				if out.Command == nil {
					if !in.IsDelim(']') {
						out.Command = make([]string, 0, 4)
					} else {
						out.Command = []string{}
					}
				} else {
					out.Command = (out.Command)[:0]
				}
				for !in.IsDelim(']') {
					var v193 string
					v193 = string(in.String())
					out.Command = append(out.Command, v193)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV173(out *jwriter.Writer, in _v1.ExecAction) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Command) != 0 {
		const prefix string = ",\"command\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v194, v195 := range in.Command {
				if v194 > 0 {
					out.RawByte(',')
				}
				out.String(string(v195))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV168(in *jlexer.Lexer, out *_v1.Probe) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "initialDelaySeconds":
			out.InitialDelaySeconds = int32(in.Int32())
		case "timeoutSeconds":
			out.TimeoutSeconds = int32(in.Int32())
		case "periodSeconds":
			out.PeriodSeconds = int32(in.Int32())
		case "successThreshold":
			out.SuccessThreshold = int32(in.Int32())
		case "failureThreshold":
			out.FailureThreshold = int32(in.Int32())
		case "exec":
			if in.IsNull() {
				in.Skip()
				out.Exec = nil
			} else {
				if out.Exec == nil {
					out.Exec = new(_v1.ExecAction)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV173(in, out.Exec)
			}
		case "httpGet":
			if in.IsNull() {
				in.Skip()
				out.HTTPGet = nil
			} else {
				if out.HTTPGet == nil {
					out.HTTPGet = new(_v1.HTTPGetAction)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV174(in, out.HTTPGet)
			}
		case "tcpSocket":
			if in.IsNull() {
				in.Skip()
				out.TCPSocket = nil
			} else {
				if out.TCPSocket == nil {
					out.TCPSocket = new(_v1.TCPSocketAction)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV175(in, out.TCPSocket)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV168(out *jwriter.Writer, in _v1.Probe) {
	out.RawByte('{')
	first := true
	_ = first
	if in.InitialDelaySeconds != 0 {
		const prefix string = ",\"initialDelaySeconds\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(in.InitialDelaySeconds))
	}
	if in.TimeoutSeconds != 0 {
		const prefix string = ",\"timeoutSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.TimeoutSeconds))
	}
	if in.PeriodSeconds != 0 {
		const prefix string = ",\"periodSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.PeriodSeconds))
	}
	if in.SuccessThreshold != 0 {
		const prefix string = ",\"successThreshold\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.SuccessThreshold))
	}
	if in.FailureThreshold != 0 {
		const prefix string = ",\"failureThreshold\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.FailureThreshold))
	}
	if in.Exec != nil {
		const prefix string = ",\"exec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV173(out, *in.Exec)
	}
	if in.HTTPGet != nil {
		const prefix string = ",\"httpGet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV174(out, *in.HTTPGet)
	}
	if in.TCPSocket != nil {
		const prefix string = ",\"tcpSocket\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV175(out, *in.TCPSocket)
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV167(in *jlexer.Lexer, out *_v1.VolumeDevice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "devicePath":
			out.DevicePath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV167(out *jwriter.Writer, in _v1.VolumeDevice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"devicePath\":"
		out.RawString(prefix)
		out.String(string(in.DevicePath))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV166(in *jlexer.Lexer, out *_v1.VolumeMount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "mountPath":
			out.MountPath = string(in.String())
		case "subPath":
			out.SubPath = string(in.String())
		case "mountPropagation":
			if in.IsNull() {
				in.Skip()
				out.MountPropagation = nil
			} else {
				if out.MountPropagation == nil {
					out.MountPropagation = new(_v1.MountPropagationMode)
				}
				*out.MountPropagation = _v1.MountPropagationMode(in.String())
			}
		case "subPathExpr":
			out.SubPathExpr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV166(out *jwriter.Writer, in _v1.VolumeMount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	{
		const prefix string = ",\"mountPath\":"
		out.RawString(prefix)
		out.String(string(in.MountPath))
	}
	if in.SubPath != "" {
		const prefix string = ",\"subPath\":"
		out.RawString(prefix)
		out.String(string(in.SubPath))
	}
	if in.MountPropagation != nil {
		const prefix string = ",\"mountPropagation\":"
		out.RawString(prefix)
		out.String(string(*in.MountPropagation))
	}
	if in.SubPathExpr != "" {
		const prefix string = ",\"subPathExpr\":"
		out.RawString(prefix)
		out.String(string(in.SubPathExpr))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV165(in *jlexer.Lexer, out *_v1.EnvVar) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "valueFrom":
			if in.IsNull() {
				in.Skip()
				out.ValueFrom = nil
			} else {
				if out.ValueFrom == nil {
					out.ValueFrom = new(_v1.EnvVarSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV177(in, out.ValueFrom)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV165(out *jwriter.Writer, in _v1.EnvVar) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	if in.ValueFrom != nil {
		const prefix string = ",\"valueFrom\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV177(out, *in.ValueFrom)
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV177(in *jlexer.Lexer, out *_v1.EnvVarSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fieldRef":
			if in.IsNull() {
				in.Skip()
				out.FieldRef = nil
			} else {
				if out.FieldRef == nil {
					out.FieldRef = new(_v1.ObjectFieldSelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV137(in, out.FieldRef)
			}
		case "resourceFieldRef":
			if in.IsNull() {
				in.Skip()
				out.ResourceFieldRef = nil
			} else {
				if out.ResourceFieldRef == nil {
					out.ResourceFieldRef = new(_v1.ResourceFieldSelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV138(in, out.ResourceFieldRef)
			}
		case "configMapKeyRef":
			if in.IsNull() {
				in.Skip()
				out.ConfigMapKeyRef = nil
			} else {
				if out.ConfigMapKeyRef == nil {
					out.ConfigMapKeyRef = new(_v1.ConfigMapKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV178(in, out.ConfigMapKeyRef)
			}
		case "secretKeyRef":
			if in.IsNull() {
				in.Skip()
				out.SecretKeyRef = nil
			} else {
				if out.SecretKeyRef == nil {
					out.SecretKeyRef = new(_v1.SecretKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV179(in, out.SecretKeyRef)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV177(out *jwriter.Writer, in _v1.EnvVarSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FieldRef != nil {
		const prefix string = ",\"fieldRef\":"
		first = false
		out.RawString(prefix[1:])
		easyjson147b50d1EncodeK8sIoApiCoreV137(out, *in.FieldRef)
	}
	if in.ResourceFieldRef != nil {
		const prefix string = ",\"resourceFieldRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV138(out, *in.ResourceFieldRef)
	}
	if in.ConfigMapKeyRef != nil {
		const prefix string = ",\"configMapKeyRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV178(out, *in.ConfigMapKeyRef)
	}
	if in.SecretKeyRef != nil {
		const prefix string = ",\"secretKeyRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, *in.SecretKeyRef)
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV179(in *jlexer.Lexer, out *_v1.SecretKeySelector) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "optional":
			if in.IsNull() {
				in.Skip()
				out.Optional = nil
			} else {
				if out.Optional == nil {
					out.Optional = new(bool)
				}
				*out.Optional = bool(in.Bool())
			}
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV179(out *jwriter.Writer, in _v1.SecretKeySelector) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	if in.Optional != nil {
		const prefix string = ",\"optional\":"
		out.RawString(prefix)
		out.Bool(bool(*in.Optional))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV178(in *jlexer.Lexer, out *_v1.ConfigMapKeySelector) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "optional":
			if in.IsNull() {
				in.Skip()
				out.Optional = nil
			} else {
				if out.Optional == nil {
					out.Optional = new(bool)
				}
				*out.Optional = bool(in.Bool())
			}
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV178(out *jwriter.Writer, in _v1.ConfigMapKeySelector) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	if in.Optional != nil {
		const prefix string = ",\"optional\":"
		out.RawString(prefix)
		out.Bool(bool(*in.Optional))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV164(in *jlexer.Lexer, out *_v1.EnvFromSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "prefix":
			out.Prefix = string(in.String())
		case "configMapRef":
			if in.IsNull() {
				in.Skip()
				out.ConfigMapRef = nil
			} else {
				if out.ConfigMapRef == nil {
					out.ConfigMapRef = new(_v1.ConfigMapEnvSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV180(in, out.ConfigMapRef)
			}
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(_v1.SecretEnvSource)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV181(in, out.SecretRef)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV164(out *jwriter.Writer, in _v1.EnvFromSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Prefix != "" {
		const prefix string = ",\"prefix\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Prefix))
	}
	if in.ConfigMapRef != nil {
		const prefix string = ",\"configMapRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV180(out, *in.ConfigMapRef)
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV181(out, *in.SecretRef)
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV181(in *jlexer.Lexer, out *_v1.SecretEnvSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "optional":
			if in.IsNull() {
				in.Skip()
				out.Optional = nil
			} else {
				if out.Optional == nil {
					out.Optional = new(bool)
				}
				*out.Optional = bool(in.Bool())
			}
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV181(out *jwriter.Writer, in _v1.SecretEnvSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Optional != nil {
		const prefix string = ",\"optional\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(*in.Optional))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV180(in *jlexer.Lexer, out *_v1.ConfigMapEnvSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "optional":
			if in.IsNull() {
				in.Skip()
				out.Optional = nil
			} else {
				if out.Optional == nil {
					out.Optional = new(bool)
				}
				*out.Optional = bool(in.Bool())
			}
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV180(out *jwriter.Writer, in _v1.ConfigMapEnvSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Optional != nil {
		const prefix string = ",\"optional\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(*in.Optional))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeK8sIoApiCoreV163(in *jlexer.Lexer, out *_v1.ContainerPort) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "hostPort":
			out.HostPort = int32(in.Int32())
		case "containerPort":
			out.ContainerPort = int32(in.Int32())
		case "protocol":
			out.Protocol = _v1.Protocol(in.String())
		case "hostIP":
			out.HostIP = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV163(out *jwriter.Writer, in _v1.ContainerPort) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.HostPort != 0 {
		const prefix string = ",\"hostPort\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.HostPort))
	}
	{
		const prefix string = ",\"containerPort\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.ContainerPort))
	}
	if in.Protocol != "" {
		const prefix string = ",\"protocol\":"
		out.RawString(prefix)
		out.String(string(in.Protocol))
	}
	if in.HostIP != "" {
		const prefix string = ",\"hostIP\":"
		out.RawString(prefix)
		out.String(string(in.HostIP))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha110(in *jlexer.Lexer, out *TemplateRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "template":
			out.Template = string(in.String())
		case "runtimeResolution":
			out.RuntimeResolution = bool(in.Bool())
		case "clusterScope":
			out.ClusterScope = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha110(out *jwriter.Writer, in TemplateRef) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Template != "" {
		const prefix string = ",\"template\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Template))
	}
	if in.RuntimeResolution {
		const prefix string = ",\"runtimeResolution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.RuntimeResolution))
	}
	if in.ClusterScope {
		const prefix string = ",\"clusterScope\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ClusterScope))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TemplateRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha110(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TemplateRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha110(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TemplateRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha110(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TemplateRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha110(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha111(in *jlexer.Lexer, out *Template) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "template":
			out.Template = string(in.String())
		case "arguments":
			(out.Arguments).UnmarshalEasyJSON(in)
		case "templateRef":
			if in.IsNull() {
				in.Skip()
				out.TemplateRef = nil
			} else {
				if out.TemplateRef == nil {
					out.TemplateRef = new(TemplateRef)
				}
				(*out.TemplateRef).UnmarshalEasyJSON(in)
			}
		case "inputs":
			(out.Inputs).UnmarshalEasyJSON(in)
		case "outputs":
			(out.Outputs).UnmarshalEasyJSON(in)
		case "nodeSelector":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.NodeSelector = make(map[string]string)
				} else {
					out.NodeSelector = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v196 string
					v196 = string(in.String())
					(out.NodeSelector)[key] = v196
					in.WantComma()
				}
				in.Delim('}')
			}
		case "affinity":
			if in.IsNull() {
				in.Skip()
				out.Affinity = nil
			} else {
				if out.Affinity == nil {
					out.Affinity = new(_v1.Affinity)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV140(in, out.Affinity)
			}
		case "metadata":
			(out.Metadata).UnmarshalEasyJSON(in)
		case "daemon":
			if in.IsNull() {
				in.Skip()
				out.Daemon = nil
			} else {
				if out.Daemon == nil {
					out.Daemon = new(bool)
				}
				*out.Daemon = bool(in.Bool())
			}
		case "steps":
			if in.IsNull() {
				in.Skip()
				out.Steps = nil
			} else {
				in.Delim('[')
				if out.Steps == nil {
					if !in.IsDelim(']') {
						out.Steps = make([]ParallelSteps, 0, 2)
					} else {
						out.Steps = []ParallelSteps{}
					}
				} else {
					out.Steps = (out.Steps)[:0]
				}
				for !in.IsDelim(']') {
					var v197 ParallelSteps
					if data := in.Raw(); in.Ok() {
						in.AddError((v197).UnmarshalJSON(data))
					}
					out.Steps = append(out.Steps, v197)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "container":
			if in.IsNull() {
				in.Skip()
				out.Container = nil
			} else {
				if out.Container == nil {
					out.Container = new(_v1.Container)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV182(in, out.Container)
			}
		case "script":
			if in.IsNull() {
				in.Skip()
				out.Script = nil
			} else {
				if out.Script == nil {
					out.Script = new(ScriptTemplate)
				}
				(*out.Script).UnmarshalEasyJSON(in)
			}
		case "resource":
			if in.IsNull() {
				in.Skip()
				out.Resource = nil
			} else {
				if out.Resource == nil {
					out.Resource = new(ResourceTemplate)
				}
				(*out.Resource).UnmarshalEasyJSON(in)
			}
		case "dag":
			if in.IsNull() {
				in.Skip()
				out.DAG = nil
			} else {
				if out.DAG == nil {
					out.DAG = new(DAGTemplate)
				}
				(*out.DAG).UnmarshalEasyJSON(in)
			}
		case "suspend":
			if in.IsNull() {
				in.Skip()
				out.Suspend = nil
			} else {
				if out.Suspend == nil {
					out.Suspend = new(SuspendTemplate)
				}
				(*out.Suspend).UnmarshalEasyJSON(in)
			}
		case "volumes":
			if in.IsNull() {
				in.Skip()
				out.Volumes = nil
			} else {
				in.Delim('[')
				if out.Volumes == nil {
					if !in.IsDelim(']') {
						out.Volumes = make([]_v1.Volume, 0, 0)
					} else {
						out.Volumes = []_v1.Volume{}
					}
				} else {
					out.Volumes = (out.Volumes)[:0]
				}
				for !in.IsDelim(']') {
					var v198 _v1.Volume
					easyjson147b50d1DecodeK8sIoApiCoreV1(in, &v198)
					out.Volumes = append(out.Volumes, v198)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "initContainers":
			if in.IsNull() {
				in.Skip()
				out.InitContainers = nil
			} else {
				in.Delim('[')
				if out.InitContainers == nil {
					if !in.IsDelim(']') {
						out.InitContainers = make([]UserContainer, 0, 0)
					} else {
						out.InitContainers = []UserContainer{}
					}
				} else {
					out.InitContainers = (out.InitContainers)[:0]
				}
				for !in.IsDelim(']') {
					var v199 UserContainer
					(v199).UnmarshalEasyJSON(in)
					out.InitContainers = append(out.InitContainers, v199)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sidecars":
			if in.IsNull() {
				in.Skip()
				out.Sidecars = nil
			} else {
				in.Delim('[')
				if out.Sidecars == nil {
					if !in.IsDelim(']') {
						out.Sidecars = make([]UserContainer, 0, 0)
					} else {
						out.Sidecars = []UserContainer{}
					}
				} else {
					out.Sidecars = (out.Sidecars)[:0]
				}
				for !in.IsDelim(']') {
					var v200 UserContainer
					(v200).UnmarshalEasyJSON(in)
					out.Sidecars = append(out.Sidecars, v200)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "archiveLocation":
			if in.IsNull() {
				in.Skip()
				out.ArchiveLocation = nil
			} else {
				if out.ArchiveLocation == nil {
					out.ArchiveLocation = new(ArtifactLocation)
				}
				(*out.ArchiveLocation).UnmarshalEasyJSON(in)
			}
		case "activeDeadlineSeconds":
			if in.IsNull() {
				in.Skip()
				out.ActiveDeadlineSeconds = nil
			} else {
				if out.ActiveDeadlineSeconds == nil {
					out.ActiveDeadlineSeconds = new(intstr.IntOrString)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ActiveDeadlineSeconds).UnmarshalJSON(data))
				}
			}
		case "retryStrategy":
			if in.IsNull() {
				in.Skip()
				out.RetryStrategy = nil
			} else {
				if out.RetryStrategy == nil {
					out.RetryStrategy = new(RetryStrategy)
				}
				(*out.RetryStrategy).UnmarshalEasyJSON(in)
			}
		case "parallelism":
			if in.IsNull() {
				in.Skip()
				out.Parallelism = nil
			} else {
				if out.Parallelism == nil {
					out.Parallelism = new(int64)
				}
				*out.Parallelism = int64(in.Int64())
			}
		case "tolerations":
			if in.IsNull() {
				in.Skip()
				out.Tolerations = nil
			} else {
				in.Delim('[')
				if out.Tolerations == nil {
					if !in.IsDelim(']') {
						out.Tolerations = make([]_v1.Toleration, 0, 0)
					} else {
						out.Tolerations = []_v1.Toleration{}
					}
				} else {
					out.Tolerations = (out.Tolerations)[:0]
				}
				for !in.IsDelim(']') {
					var v201 _v1.Toleration
					easyjson147b50d1DecodeK8sIoApiCoreV141(in, &v201)
					out.Tolerations = append(out.Tolerations, v201)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "schedulerName":
			out.SchedulerName = string(in.String())
		case "priorityClassName":
			out.PriorityClassName = string(in.String())
		case "priority":
			if in.IsNull() {
				in.Skip()
				out.Priority = nil
			} else {
				if out.Priority == nil {
					out.Priority = new(int32)
				}
				*out.Priority = int32(in.Int32())
			}
		case "serviceAccountName":
			out.ServiceAccountName = string(in.String())
		case "automountServiceAccountToken":
			if in.IsNull() {
				in.Skip()
				out.AutomountServiceAccountToken = nil
			} else {
				if out.AutomountServiceAccountToken == nil {
					out.AutomountServiceAccountToken = new(bool)
				}
				*out.AutomountServiceAccountToken = bool(in.Bool())
			}
		case "executor":
			if in.IsNull() {
				in.Skip()
				out.Executor = nil
			} else {
				if out.Executor == nil {
					out.Executor = new(ExecutorConfig)
				}
				(*out.Executor).UnmarshalEasyJSON(in)
			}
		case "hostAliases":
			if in.IsNull() {
				in.Skip()
				out.HostAliases = nil
			} else {
				in.Delim('[')
				if out.HostAliases == nil {
					if !in.IsDelim(']') {
						out.HostAliases = make([]_v1.HostAlias, 0, 1)
					} else {
						out.HostAliases = []_v1.HostAlias{}
					}
				} else {
					out.HostAliases = (out.HostAliases)[:0]
				}
				for !in.IsDelim(']') {
					var v202 _v1.HostAlias
					easyjson147b50d1DecodeK8sIoApiCoreV143(in, &v202)
					out.HostAliases = append(out.HostAliases, v202)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "securityContext":
			if in.IsNull() {
				in.Skip()
				out.SecurityContext = nil
			} else {
				if out.SecurityContext == nil {
					out.SecurityContext = new(_v1.PodSecurityContext)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV144(in, out.SecurityContext)
			}
		case "podSpecPatch":
			out.PodSpecPatch = string(in.String())
		case "metrics":
			if in.IsNull() {
				in.Skip()
				out.Metrics = nil
			} else {
				if out.Metrics == nil {
					out.Metrics = new(Metrics)
				}
				(*out.Metrics).UnmarshalEasyJSON(in)
			}
		case "synchronization":
			if in.IsNull() {
				in.Skip()
				out.Synchronization = nil
			} else {
				if out.Synchronization == nil {
					out.Synchronization = new(Synchronization)
				}
				(*out.Synchronization).UnmarshalEasyJSON(in)
			}
		case "memoize":
			if in.IsNull() {
				in.Skip()
				out.Memoize = nil
			} else {
				if out.Memoize == nil {
					out.Memoize = new(Memoize)
				}
				(*out.Memoize).UnmarshalEasyJSON(in)
			}
		case "timeout":
			out.Timeout = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha111(out *jwriter.Writer, in Template) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Template != "" {
		const prefix string = ",\"template\":"
		out.RawString(prefix)
		out.String(string(in.Template))
	}
	if true {
		const prefix string = ",\"arguments\":"
		out.RawString(prefix)
		(in.Arguments).MarshalEasyJSON(out)
	}
	if in.TemplateRef != nil {
		const prefix string = ",\"templateRef\":"
		out.RawString(prefix)
		(*in.TemplateRef).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"inputs\":"
		out.RawString(prefix)
		(in.Inputs).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"outputs\":"
		out.RawString(prefix)
		(in.Outputs).MarshalEasyJSON(out)
	}
	if len(in.NodeSelector) != 0 {
		const prefix string = ",\"nodeSelector\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v203First := true
			for v203Name, v203Value := range in.NodeSelector {
				if v203First {
					v203First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v203Name))
				out.RawByte(':')
				out.String(string(v203Value))
			}
			out.RawByte('}')
		}
	}
	if in.Affinity != nil {
		const prefix string = ",\"affinity\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV140(out, *in.Affinity)
	}
	if true {
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		(in.Metadata).MarshalEasyJSON(out)
	}
	if in.Daemon != nil {
		const prefix string = ",\"daemon\":"
		out.RawString(prefix)
		out.Bool(bool(*in.Daemon))
	}
	if len(in.Steps) != 0 {
		const prefix string = ",\"steps\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v204, v205 := range in.Steps {
				if v204 > 0 {
					out.RawByte(',')
				}
				out.Raw((v205).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.Container != nil {
		const prefix string = ",\"container\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV182(out, *in.Container)
	}
	if in.Script != nil {
		const prefix string = ",\"script\":"
		out.RawString(prefix)
		(*in.Script).MarshalEasyJSON(out)
	}
	if in.Resource != nil {
		const prefix string = ",\"resource\":"
		out.RawString(prefix)
		(*in.Resource).MarshalEasyJSON(out)
	}
	if in.DAG != nil {
		const prefix string = ",\"dag\":"
		out.RawString(prefix)
		(*in.DAG).MarshalEasyJSON(out)
	}
	if in.Suspend != nil {
		const prefix string = ",\"suspend\":"
		out.RawString(prefix)
		(*in.Suspend).MarshalEasyJSON(out)
	}
	if len(in.Volumes) != 0 {
		const prefix string = ",\"volumes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v206, v207 := range in.Volumes {
				if v206 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV1(out, v207)
			}
			out.RawByte(']')
		}
	}
	if len(in.InitContainers) != 0 {
		const prefix string = ",\"initContainers\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v208, v209 := range in.InitContainers {
				if v208 > 0 {
					out.RawByte(',')
				}
				(v209).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Sidecars) != 0 {
		const prefix string = ",\"sidecars\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v210, v211 := range in.Sidecars {
				if v210 > 0 {
					out.RawByte(',')
				}
				(v211).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.ArchiveLocation != nil {
		const prefix string = ",\"archiveLocation\":"
		out.RawString(prefix)
		(*in.ArchiveLocation).MarshalEasyJSON(out)
	}
	if in.ActiveDeadlineSeconds != nil {
		const prefix string = ",\"activeDeadlineSeconds\":"
		out.RawString(prefix)
		out.Raw((*in.ActiveDeadlineSeconds).MarshalJSON())
	}
	if in.RetryStrategy != nil {
		const prefix string = ",\"retryStrategy\":"
		out.RawString(prefix)
		(*in.RetryStrategy).MarshalEasyJSON(out)
	}
	if in.Parallelism != nil {
		const prefix string = ",\"parallelism\":"
		out.RawString(prefix)
		out.Int64(int64(*in.Parallelism))
	}
	if len(in.Tolerations) != 0 {
		const prefix string = ",\"tolerations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v212, v213 := range in.Tolerations {
				if v212 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV141(out, v213)
			}
			out.RawByte(']')
		}
	}
	if in.SchedulerName != "" {
		const prefix string = ",\"schedulerName\":"
		out.RawString(prefix)
		out.String(string(in.SchedulerName))
	}
	if in.PriorityClassName != "" {
		const prefix string = ",\"priorityClassName\":"
		out.RawString(prefix)
		out.String(string(in.PriorityClassName))
	}
	if in.Priority != nil {
		const prefix string = ",\"priority\":"
		out.RawString(prefix)
		out.Int32(int32(*in.Priority))
	}
	if in.ServiceAccountName != "" {
		const prefix string = ",\"serviceAccountName\":"
		out.RawString(prefix)
		out.String(string(in.ServiceAccountName))
	}
	if in.AutomountServiceAccountToken != nil {
		const prefix string = ",\"automountServiceAccountToken\":"
		out.RawString(prefix)
		out.Bool(bool(*in.AutomountServiceAccountToken))
	}
	if in.Executor != nil {
		const prefix string = ",\"executor\":"
		out.RawString(prefix)
		(*in.Executor).MarshalEasyJSON(out)
	}
	if len(in.HostAliases) != 0 {
		const prefix string = ",\"hostAliases\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v214, v215 := range in.HostAliases {
				if v214 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV143(out, v215)
			}
			out.RawByte(']')
		}
	}
	if in.SecurityContext != nil {
		const prefix string = ",\"securityContext\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV144(out, *in.SecurityContext)
	}
	if in.PodSpecPatch != "" {
		const prefix string = ",\"podSpecPatch\":"
		out.RawString(prefix)
		out.String(string(in.PodSpecPatch))
	}
	if in.Metrics != nil {
		const prefix string = ",\"metrics\":"
		out.RawString(prefix)
		(*in.Metrics).MarshalEasyJSON(out)
	}
	if in.Synchronization != nil {
		const prefix string = ",\"synchronization\":"
		out.RawString(prefix)
		(*in.Synchronization).MarshalEasyJSON(out)
	}
	if in.Memoize != nil {
		const prefix string = ",\"memoize\":"
		out.RawString(prefix)
		(*in.Memoize).MarshalEasyJSON(out)
	}
	if in.Timeout != "" {
		const prefix string = ",\"timeout\":"
		out.RawString(prefix)
		out.String(string(in.Timeout))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Template) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha111(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Template) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha111(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Template) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha111(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Template) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha111(l, v)
}
func easyjson147b50d1DecodeK8sIoApiCoreV182(in *jlexer.Lexer, out *_v1.Container) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "command":
			if in.IsNull() {
				in.Skip()
				out.Command = nil
			} else {
				in.Delim('[')
				if out.Command == nil {
					if !in.IsDelim(']') {
						out.Command = make([]string, 0, 4)
					} else {
						out.Command = []string{}
					}
				} else {
					out.Command = (out.Command)[:0]
				}
				for !in.IsDelim(']') {
					var v216 string
					v216 = string(in.String())
					out.Command = append(out.Command, v216)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v217 string
					v217 = string(in.String())
					out.Args = append(out.Args, v217)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "workingDir":
			out.WorkingDir = string(in.String())
		case "ports":
			if in.IsNull() {
				in.Skip()
				out.Ports = nil
			} else {
				in.Delim('[')
				if out.Ports == nil {
					if !in.IsDelim(']') {
						out.Ports = make([]_v1.ContainerPort, 0, 1)
					} else {
						out.Ports = []_v1.ContainerPort{}
					}
				} else {
					out.Ports = (out.Ports)[:0]
				}
				for !in.IsDelim(']') {
					var v218 _v1.ContainerPort
					easyjson147b50d1DecodeK8sIoApiCoreV163(in, &v218)
					out.Ports = append(out.Ports, v218)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "envFrom":
			if in.IsNull() {
				in.Skip()
				out.EnvFrom = nil
			} else {
				in.Delim('[')
				if out.EnvFrom == nil {
					if !in.IsDelim(']') {
						out.EnvFrom = make([]_v1.EnvFromSource, 0, 2)
					} else {
						out.EnvFrom = []_v1.EnvFromSource{}
					}
				} else {
					out.EnvFrom = (out.EnvFrom)[:0]
				}
				for !in.IsDelim(']') {
					var v219 _v1.EnvFromSource
					easyjson147b50d1DecodeK8sIoApiCoreV164(in, &v219)
					out.EnvFrom = append(out.EnvFrom, v219)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "env":
			if in.IsNull() {
				in.Skip()
				out.Env = nil
			} else {
				in.Delim('[')
				if out.Env == nil {
					if !in.IsDelim(']') {
						out.Env = make([]_v1.EnvVar, 0, 1)
					} else {
						out.Env = []_v1.EnvVar{}
					}
				} else {
					out.Env = (out.Env)[:0]
				}
				for !in.IsDelim(']') {
					var v220 _v1.EnvVar
					easyjson147b50d1DecodeK8sIoApiCoreV165(in, &v220)
					out.Env = append(out.Env, v220)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resources":
			easyjson147b50d1DecodeK8sIoApiCoreV161(in, &out.Resources)
		case "volumeMounts":
			if in.IsNull() {
				in.Skip()
				out.VolumeMounts = nil
			} else {
				in.Delim('[')
				if out.VolumeMounts == nil {
					if !in.IsDelim(']') {
						out.VolumeMounts = make([]_v1.VolumeMount, 0, 0)
					} else {
						out.VolumeMounts = []_v1.VolumeMount{}
					}
				} else {
					out.VolumeMounts = (out.VolumeMounts)[:0]
				}
				for !in.IsDelim(']') {
					var v221 _v1.VolumeMount
					easyjson147b50d1DecodeK8sIoApiCoreV166(in, &v221)
					out.VolumeMounts = append(out.VolumeMounts, v221)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "volumeDevices":
			if in.IsNull() {
				in.Skip()
				out.VolumeDevices = nil
			} else {
				in.Delim('[')
				if out.VolumeDevices == nil {
					if !in.IsDelim(']') {
						out.VolumeDevices = make([]_v1.VolumeDevice, 0, 2)
					} else {
						out.VolumeDevices = []_v1.VolumeDevice{}
					}
				} else {
					out.VolumeDevices = (out.VolumeDevices)[:0]
				}
				for !in.IsDelim(']') {
					var v222 _v1.VolumeDevice
					easyjson147b50d1DecodeK8sIoApiCoreV167(in, &v222)
					out.VolumeDevices = append(out.VolumeDevices, v222)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "livenessProbe":
			if in.IsNull() {
				in.Skip()
				out.LivenessProbe = nil
			} else {
				if out.LivenessProbe == nil {
					out.LivenessProbe = new(_v1.Probe)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV168(in, out.LivenessProbe)
			}
		case "readinessProbe":
			if in.IsNull() {
				in.Skip()
				out.ReadinessProbe = nil
			} else {
				if out.ReadinessProbe == nil {
					out.ReadinessProbe = new(_v1.Probe)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV168(in, out.ReadinessProbe)
			}
		case "startupProbe":
			if in.IsNull() {
				in.Skip()
				out.StartupProbe = nil
			} else {
				if out.StartupProbe == nil {
					out.StartupProbe = new(_v1.Probe)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV168(in, out.StartupProbe)
			}
		case "lifecycle":
			if in.IsNull() {
				in.Skip()
				out.Lifecycle = nil
			} else {
				if out.Lifecycle == nil {
					out.Lifecycle = new(_v1.Lifecycle)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV169(in, out.Lifecycle)
			}
		case "terminationMessagePath":
			out.TerminationMessagePath = string(in.String())
		case "terminationMessagePolicy":
			out.TerminationMessagePolicy = _v1.TerminationMessagePolicy(in.String())
		case "imagePullPolicy":
			out.ImagePullPolicy = _v1.PullPolicy(in.String())
		case "securityContext":
			if in.IsNull() {
				in.Skip()
				out.SecurityContext = nil
			} else {
				if out.SecurityContext == nil {
					out.SecurityContext = new(_v1.SecurityContext)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV170(in, out.SecurityContext)
			}
		case "stdin":
			out.Stdin = bool(in.Bool())
		case "stdinOnce":
			out.StdinOnce = bool(in.Bool())
		case "tty":
			out.TTY = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeK8sIoApiCoreV182(out *jwriter.Writer, in _v1.Container) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	if len(in.Command) != 0 {
		const prefix string = ",\"command\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v223, v224 := range in.Command {
				if v223 > 0 {
					out.RawByte(',')
				}
				out.String(string(v224))
			}
			out.RawByte(']')
		}
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v225, v226 := range in.Args {
				if v225 > 0 {
					out.RawByte(',')
				}
				out.String(string(v226))
			}
			out.RawByte(']')
		}
	}
	if in.WorkingDir != "" {
		const prefix string = ",\"workingDir\":"
		out.RawString(prefix)
		out.String(string(in.WorkingDir))
	}
	if len(in.Ports) != 0 {
		const prefix string = ",\"ports\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v227, v228 := range in.Ports {
				if v227 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV163(out, v228)
			}
			out.RawByte(']')
		}
	}
	if len(in.EnvFrom) != 0 {
		const prefix string = ",\"envFrom\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v229, v230 := range in.EnvFrom {
				if v229 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV164(out, v230)
			}
			out.RawByte(']')
		}
	}
	if len(in.Env) != 0 {
		const prefix string = ",\"env\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v231, v232 := range in.Env {
				if v231 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV165(out, v232)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV161(out, in.Resources)
	}
	if len(in.VolumeMounts) != 0 {
		const prefix string = ",\"volumeMounts\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v233, v234 := range in.VolumeMounts {
				if v233 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV166(out, v234)
			}
			out.RawByte(']')
		}
	}
	if len(in.VolumeDevices) != 0 {
		const prefix string = ",\"volumeDevices\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v235, v236 := range in.VolumeDevices {
				if v235 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV167(out, v236)
			}
			out.RawByte(']')
		}
	}
	if in.LivenessProbe != nil {
		const prefix string = ",\"livenessProbe\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV168(out, *in.LivenessProbe)
	}
	if in.ReadinessProbe != nil {
		const prefix string = ",\"readinessProbe\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV168(out, *in.ReadinessProbe)
	}
	if in.StartupProbe != nil {
		const prefix string = ",\"startupProbe\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV168(out, *in.StartupProbe)
	}
	if in.Lifecycle != nil {
		const prefix string = ",\"lifecycle\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV169(out, *in.Lifecycle)
	}
	if in.TerminationMessagePath != "" {
		const prefix string = ",\"terminationMessagePath\":"
		out.RawString(prefix)
		out.String(string(in.TerminationMessagePath))
	}
	if in.TerminationMessagePolicy != "" {
		const prefix string = ",\"terminationMessagePolicy\":"
		out.RawString(prefix)
		out.String(string(in.TerminationMessagePolicy))
	}
	if in.ImagePullPolicy != "" {
		const prefix string = ",\"imagePullPolicy\":"
		out.RawString(prefix)
		out.String(string(in.ImagePullPolicy))
	}
	if in.SecurityContext != nil {
		const prefix string = ",\"securityContext\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV170(out, *in.SecurityContext)
	}
	if in.Stdin {
		const prefix string = ",\"stdin\":"
		out.RawString(prefix)
		out.Bool(bool(in.Stdin))
	}
	if in.StdinOnce {
		const prefix string = ",\"stdinOnce\":"
		out.RawString(prefix)
		out.Bool(bool(in.StdinOnce))
	}
	if in.TTY {
		const prefix string = ",\"tty\":"
		out.RawString(prefix)
		out.Bool(bool(in.TTY))
	}
	out.RawByte('}')
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha112(in *jlexer.Lexer, out *TarStrategy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "compressionLevel":
			if in.IsNull() {
				in.Skip()
				out.CompressionLevel = nil
			} else {
				if out.CompressionLevel == nil {
					out.CompressionLevel = new(int32)
				}
				*out.CompressionLevel = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha112(out *jwriter.Writer, in TarStrategy) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CompressionLevel != nil {
		const prefix string = ",\"compressionLevel\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(*in.CompressionLevel))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TarStrategy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha112(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TarStrategy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha112(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TarStrategy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha112(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TarStrategy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha112(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha113(in *jlexer.Lexer, out *TTLStrategy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "secondsAfterCompletion":
			if in.IsNull() {
				in.Skip()
				out.SecondsAfterCompletion = nil
			} else {
				if out.SecondsAfterCompletion == nil {
					out.SecondsAfterCompletion = new(int32)
				}
				*out.SecondsAfterCompletion = int32(in.Int32())
			}
		case "secondsAfterSuccess":
			if in.IsNull() {
				in.Skip()
				out.SecondsAfterSuccess = nil
			} else {
				if out.SecondsAfterSuccess == nil {
					out.SecondsAfterSuccess = new(int32)
				}
				*out.SecondsAfterSuccess = int32(in.Int32())
			}
		case "secondsAfterFailure":
			if in.IsNull() {
				in.Skip()
				out.SecondsAfterFailure = nil
			} else {
				if out.SecondsAfterFailure == nil {
					out.SecondsAfterFailure = new(int32)
				}
				*out.SecondsAfterFailure = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha113(out *jwriter.Writer, in TTLStrategy) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SecondsAfterCompletion != nil {
		const prefix string = ",\"secondsAfterCompletion\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(*in.SecondsAfterCompletion))
	}
	if in.SecondsAfterSuccess != nil {
		const prefix string = ",\"secondsAfterSuccess\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.SecondsAfterSuccess))
	}
	if in.SecondsAfterFailure != nil {
		const prefix string = ",\"secondsAfterFailure\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.SecondsAfterFailure))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TTLStrategy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha113(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TTLStrategy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha113(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TTLStrategy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha113(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TTLStrategy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha113(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha114(in *jlexer.Lexer, out *SynchronizationStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "semaphore":
			if in.IsNull() {
				in.Skip()
				out.Semaphore = nil
			} else {
				if out.Semaphore == nil {
					out.Semaphore = new(SemaphoreStatus)
				}
				(*out.Semaphore).UnmarshalEasyJSON(in)
			}
		case "mutex":
			if in.IsNull() {
				in.Skip()
				out.Mutex = nil
			} else {
				if out.Mutex == nil {
					out.Mutex = new(MutexStatus)
				}
				(*out.Mutex).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha114(out *jwriter.Writer, in SynchronizationStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Semaphore != nil {
		const prefix string = ",\"semaphore\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Semaphore).MarshalEasyJSON(out)
	}
	if in.Mutex != nil {
		const prefix string = ",\"mutex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Mutex).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SynchronizationStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha114(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SynchronizationStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha114(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SynchronizationStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha114(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SynchronizationStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha114(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha115(in *jlexer.Lexer, out *Synchronization) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "semaphore":
			if in.IsNull() {
				in.Skip()
				out.Semaphore = nil
			} else {
				if out.Semaphore == nil {
					out.Semaphore = new(SemaphoreRef)
				}
				(*out.Semaphore).UnmarshalEasyJSON(in)
			}
		case "mutex":
			if in.IsNull() {
				in.Skip()
				out.Mutex = nil
			} else {
				if out.Mutex == nil {
					out.Mutex = new(Mutex)
				}
				(*out.Mutex).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha115(out *jwriter.Writer, in Synchronization) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Semaphore != nil {
		const prefix string = ",\"semaphore\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Semaphore).MarshalEasyJSON(out)
	}
	if in.Mutex != nil {
		const prefix string = ",\"mutex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Mutex).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Synchronization) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha115(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Synchronization) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha115(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Synchronization) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha115(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Synchronization) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha115(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha116(in *jlexer.Lexer, out *SuspendTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "duration":
			out.Duration = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha116(out *jwriter.Writer, in SuspendTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Duration != "" {
		const prefix string = ",\"duration\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Duration))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SuspendTemplate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha116(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SuspendTemplate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha116(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SuspendTemplate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha116(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SuspendTemplate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha116(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha117(in *jlexer.Lexer, out *SuppliedValueFrom) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha117(out *jwriter.Writer, in SuppliedValueFrom) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SuppliedValueFrom) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha117(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SuppliedValueFrom) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha117(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SuppliedValueFrom) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha117(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SuppliedValueFrom) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha117(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha118(in *jlexer.Lexer, out *Sequence) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			if in.IsNull() {
				in.Skip()
				out.Count = nil
			} else {
				if out.Count == nil {
					out.Count = new(intstr.IntOrString)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Count).UnmarshalJSON(data))
				}
			}
		case "start":
			if in.IsNull() {
				in.Skip()
				out.Start = nil
			} else {
				if out.Start == nil {
					out.Start = new(intstr.IntOrString)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Start).UnmarshalJSON(data))
				}
			}
		case "end":
			if in.IsNull() {
				in.Skip()
				out.End = nil
			} else {
				if out.End == nil {
					out.End = new(intstr.IntOrString)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.End).UnmarshalJSON(data))
				}
			}
		case "format":
			out.Format = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha118(out *jwriter.Writer, in Sequence) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Count != nil {
		const prefix string = ",\"count\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((*in.Count).MarshalJSON())
	}
	if in.Start != nil {
		const prefix string = ",\"start\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Start).MarshalJSON())
	}
	if in.End != nil {
		const prefix string = ",\"end\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.End).MarshalJSON())
	}
	if in.Format != "" {
		const prefix string = ",\"format\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Format))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Sequence) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha118(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Sequence) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha118(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Sequence) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha118(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Sequence) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha118(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha119(in *jlexer.Lexer, out *SemaphoreStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "holding":
			if in.IsNull() {
				in.Skip()
				out.Holding = nil
			} else {
				in.Delim('[')
				if out.Holding == nil {
					if !in.IsDelim(']') {
						out.Holding = make([]SemaphoreHolding, 0, 1)
					} else {
						out.Holding = []SemaphoreHolding{}
					}
				} else {
					out.Holding = (out.Holding)[:0]
				}
				for !in.IsDelim(']') {
					var v237 SemaphoreHolding
					(v237).UnmarshalEasyJSON(in)
					out.Holding = append(out.Holding, v237)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "waiting":
			if in.IsNull() {
				in.Skip()
				out.Waiting = nil
			} else {
				in.Delim('[')
				if out.Waiting == nil {
					if !in.IsDelim(']') {
						out.Waiting = make([]SemaphoreHolding, 0, 1)
					} else {
						out.Waiting = []SemaphoreHolding{}
					}
				} else {
					out.Waiting = (out.Waiting)[:0]
				}
				for !in.IsDelim(']') {
					var v238 SemaphoreHolding
					(v238).UnmarshalEasyJSON(in)
					out.Waiting = append(out.Waiting, v238)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha119(out *jwriter.Writer, in SemaphoreStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Holding) != 0 {
		const prefix string = ",\"holding\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v239, v240 := range in.Holding {
				if v239 > 0 {
					out.RawByte(',')
				}
				(v240).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Waiting) != 0 {
		const prefix string = ",\"waiting\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v241, v242 := range in.Waiting {
				if v241 > 0 {
					out.RawByte(',')
				}
				(v242).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SemaphoreStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha119(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SemaphoreStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha119(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SemaphoreStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha119(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SemaphoreStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha119(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha120(in *jlexer.Lexer, out *SemaphoreRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "configMapKeyRef":
			if in.IsNull() {
				in.Skip()
				out.ConfigMapKeyRef = nil
			} else {
				if out.ConfigMapKeyRef == nil {
					out.ConfigMapKeyRef = new(_v1.ConfigMapKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV178(in, out.ConfigMapKeyRef)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha120(out *jwriter.Writer, in SemaphoreRef) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ConfigMapKeyRef != nil {
		const prefix string = ",\"configMapKeyRef\":"
		first = false
		out.RawString(prefix[1:])
		easyjson147b50d1EncodeK8sIoApiCoreV178(out, *in.ConfigMapKeyRef)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SemaphoreRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha120(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SemaphoreRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha120(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SemaphoreRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha120(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SemaphoreRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha120(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha121(in *jlexer.Lexer, out *SemaphoreHolding) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "semaphore":
			out.Semaphore = string(in.String())
		case "holders":
			if in.IsNull() {
				in.Skip()
				out.Holders = nil
			} else {
				in.Delim('[')
				if out.Holders == nil {
					if !in.IsDelim(']') {
						out.Holders = make([]string, 0, 4)
					} else {
						out.Holders = []string{}
					}
				} else {
					out.Holders = (out.Holders)[:0]
				}
				for !in.IsDelim(']') {
					var v243 string
					v243 = string(in.String())
					out.Holders = append(out.Holders, v243)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha121(out *jwriter.Writer, in SemaphoreHolding) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Semaphore != "" {
		const prefix string = ",\"semaphore\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Semaphore))
	}
	if len(in.Holders) != 0 {
		const prefix string = ",\"holders\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v244, v245 := range in.Holders {
				if v244 > 0 {
					out.RawByte(',')
				}
				out.String(string(v245))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SemaphoreHolding) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha121(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SemaphoreHolding) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha121(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SemaphoreHolding) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha121(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SemaphoreHolding) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha121(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha122(in *jlexer.Lexer, out *ScriptTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "source":
			out.Source = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "command":
			if in.IsNull() {
				in.Skip()
				out.Command = nil
			} else {
				in.Delim('[')
				if out.Command == nil {
					if !in.IsDelim(']') {
						out.Command = make([]string, 0, 4)
					} else {
						out.Command = []string{}
					}
				} else {
					out.Command = (out.Command)[:0]
				}
				for !in.IsDelim(']') {
					var v246 string
					v246 = string(in.String())
					out.Command = append(out.Command, v246)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v247 string
					v247 = string(in.String())
					out.Args = append(out.Args, v247)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "workingDir":
			out.WorkingDir = string(in.String())
		case "ports":
			if in.IsNull() {
				in.Skip()
				out.Ports = nil
			} else {
				in.Delim('[')
				if out.Ports == nil {
					if !in.IsDelim(']') {
						out.Ports = make([]_v1.ContainerPort, 0, 1)
					} else {
						out.Ports = []_v1.ContainerPort{}
					}
				} else {
					out.Ports = (out.Ports)[:0]
				}
				for !in.IsDelim(']') {
					var v248 _v1.ContainerPort
					easyjson147b50d1DecodeK8sIoApiCoreV163(in, &v248)
					out.Ports = append(out.Ports, v248)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "envFrom":
			if in.IsNull() {
				in.Skip()
				out.EnvFrom = nil
			} else {
				in.Delim('[')
				if out.EnvFrom == nil {
					if !in.IsDelim(']') {
						out.EnvFrom = make([]_v1.EnvFromSource, 0, 2)
					} else {
						out.EnvFrom = []_v1.EnvFromSource{}
					}
				} else {
					out.EnvFrom = (out.EnvFrom)[:0]
				}
				for !in.IsDelim(']') {
					var v249 _v1.EnvFromSource
					easyjson147b50d1DecodeK8sIoApiCoreV164(in, &v249)
					out.EnvFrom = append(out.EnvFrom, v249)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "env":
			if in.IsNull() {
				in.Skip()
				out.Env = nil
			} else {
				in.Delim('[')
				if out.Env == nil {
					if !in.IsDelim(']') {
						out.Env = make([]_v1.EnvVar, 0, 1)
					} else {
						out.Env = []_v1.EnvVar{}
					}
				} else {
					out.Env = (out.Env)[:0]
				}
				for !in.IsDelim(']') {
					var v250 _v1.EnvVar
					easyjson147b50d1DecodeK8sIoApiCoreV165(in, &v250)
					out.Env = append(out.Env, v250)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "resources":
			easyjson147b50d1DecodeK8sIoApiCoreV161(in, &out.Resources)
		case "volumeMounts":
			if in.IsNull() {
				in.Skip()
				out.VolumeMounts = nil
			} else {
				in.Delim('[')
				if out.VolumeMounts == nil {
					if !in.IsDelim(']') {
						out.VolumeMounts = make([]_v1.VolumeMount, 0, 0)
					} else {
						out.VolumeMounts = []_v1.VolumeMount{}
					}
				} else {
					out.VolumeMounts = (out.VolumeMounts)[:0]
				}
				for !in.IsDelim(']') {
					var v251 _v1.VolumeMount
					easyjson147b50d1DecodeK8sIoApiCoreV166(in, &v251)
					out.VolumeMounts = append(out.VolumeMounts, v251)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "volumeDevices":
			if in.IsNull() {
				in.Skip()
				out.VolumeDevices = nil
			} else {
				in.Delim('[')
				if out.VolumeDevices == nil {
					if !in.IsDelim(']') {
						out.VolumeDevices = make([]_v1.VolumeDevice, 0, 2)
					} else {
						out.VolumeDevices = []_v1.VolumeDevice{}
					}
				} else {
					out.VolumeDevices = (out.VolumeDevices)[:0]
				}
				for !in.IsDelim(']') {
					var v252 _v1.VolumeDevice
					easyjson147b50d1DecodeK8sIoApiCoreV167(in, &v252)
					out.VolumeDevices = append(out.VolumeDevices, v252)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "livenessProbe":
			if in.IsNull() {
				in.Skip()
				out.LivenessProbe = nil
			} else {
				if out.LivenessProbe == nil {
					out.LivenessProbe = new(_v1.Probe)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV168(in, out.LivenessProbe)
			}
		case "readinessProbe":
			if in.IsNull() {
				in.Skip()
				out.ReadinessProbe = nil
			} else {
				if out.ReadinessProbe == nil {
					out.ReadinessProbe = new(_v1.Probe)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV168(in, out.ReadinessProbe)
			}
		case "startupProbe":
			if in.IsNull() {
				in.Skip()
				out.StartupProbe = nil
			} else {
				if out.StartupProbe == nil {
					out.StartupProbe = new(_v1.Probe)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV168(in, out.StartupProbe)
			}
		case "lifecycle":
			if in.IsNull() {
				in.Skip()
				out.Lifecycle = nil
			} else {
				if out.Lifecycle == nil {
					out.Lifecycle = new(_v1.Lifecycle)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV169(in, out.Lifecycle)
			}
		case "terminationMessagePath":
			out.TerminationMessagePath = string(in.String())
		case "terminationMessagePolicy":
			out.TerminationMessagePolicy = _v1.TerminationMessagePolicy(in.String())
		case "imagePullPolicy":
			out.ImagePullPolicy = _v1.PullPolicy(in.String())
		case "securityContext":
			if in.IsNull() {
				in.Skip()
				out.SecurityContext = nil
			} else {
				if out.SecurityContext == nil {
					out.SecurityContext = new(_v1.SecurityContext)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV170(in, out.SecurityContext)
			}
		case "stdin":
			out.Stdin = bool(in.Bool())
		case "stdinOnce":
			out.StdinOnce = bool(in.Bool())
		case "tty":
			out.TTY = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha122(out *jwriter.Writer, in ScriptTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix[1:])
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Image != "" {
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	if len(in.Command) != 0 {
		const prefix string = ",\"command\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v253, v254 := range in.Command {
				if v253 > 0 {
					out.RawByte(',')
				}
				out.String(string(v254))
			}
			out.RawByte(']')
		}
	}
	if len(in.Args) != 0 {
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v255, v256 := range in.Args {
				if v255 > 0 {
					out.RawByte(',')
				}
				out.String(string(v256))
			}
			out.RawByte(']')
		}
	}
	if in.WorkingDir != "" {
		const prefix string = ",\"workingDir\":"
		out.RawString(prefix)
		out.String(string(in.WorkingDir))
	}
	if len(in.Ports) != 0 {
		const prefix string = ",\"ports\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v257, v258 := range in.Ports {
				if v257 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV163(out, v258)
			}
			out.RawByte(']')
		}
	}
	if len(in.EnvFrom) != 0 {
		const prefix string = ",\"envFrom\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v259, v260 := range in.EnvFrom {
				if v259 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV164(out, v260)
			}
			out.RawByte(']')
		}
	}
	if len(in.Env) != 0 {
		const prefix string = ",\"env\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v261, v262 := range in.Env {
				if v261 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV165(out, v262)
			}
			out.RawByte(']')
		}
	}
	if true {
		const prefix string = ",\"resources\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV161(out, in.Resources)
	}
	if len(in.VolumeMounts) != 0 {
		const prefix string = ",\"volumeMounts\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v263, v264 := range in.VolumeMounts {
				if v263 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV166(out, v264)
			}
			out.RawByte(']')
		}
	}
	if len(in.VolumeDevices) != 0 {
		const prefix string = ",\"volumeDevices\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v265, v266 := range in.VolumeDevices {
				if v265 > 0 {
					out.RawByte(',')
				}
				easyjson147b50d1EncodeK8sIoApiCoreV167(out, v266)
			}
			out.RawByte(']')
		}
	}
	if in.LivenessProbe != nil {
		const prefix string = ",\"livenessProbe\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV168(out, *in.LivenessProbe)
	}
	if in.ReadinessProbe != nil {
		const prefix string = ",\"readinessProbe\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV168(out, *in.ReadinessProbe)
	}
	if in.StartupProbe != nil {
		const prefix string = ",\"startupProbe\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV168(out, *in.StartupProbe)
	}
	if in.Lifecycle != nil {
		const prefix string = ",\"lifecycle\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV169(out, *in.Lifecycle)
	}
	if in.TerminationMessagePath != "" {
		const prefix string = ",\"terminationMessagePath\":"
		out.RawString(prefix)
		out.String(string(in.TerminationMessagePath))
	}
	if in.TerminationMessagePolicy != "" {
		const prefix string = ",\"terminationMessagePolicy\":"
		out.RawString(prefix)
		out.String(string(in.TerminationMessagePolicy))
	}
	if in.ImagePullPolicy != "" {
		const prefix string = ",\"imagePullPolicy\":"
		out.RawString(prefix)
		out.String(string(in.ImagePullPolicy))
	}
	if in.SecurityContext != nil {
		const prefix string = ",\"securityContext\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV170(out, *in.SecurityContext)
	}
	if in.Stdin {
		const prefix string = ",\"stdin\":"
		out.RawString(prefix)
		out.Bool(bool(in.Stdin))
	}
	if in.StdinOnce {
		const prefix string = ",\"stdinOnce\":"
		out.RawString(prefix)
		out.Bool(bool(in.StdinOnce))
	}
	if in.TTY {
		const prefix string = ",\"tty\":"
		out.RawString(prefix)
		out.Bool(bool(in.TTY))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ScriptTemplate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha122(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ScriptTemplate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha122(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ScriptTemplate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha122(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ScriptTemplate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha122(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha123(in *jlexer.Lexer, out *S3Bucket) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "endpoint":
			out.Endpoint = string(in.String())
		case "bucket":
			out.Bucket = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "insecure":
			if in.IsNull() {
				in.Skip()
				out.Insecure = nil
			} else {
				if out.Insecure == nil {
					out.Insecure = new(bool)
				}
				*out.Insecure = bool(in.Bool())
			}
		case "accessKeySecret":
			easyjson147b50d1DecodeK8sIoApiCoreV179(in, &out.AccessKeySecret)
		case "secretKeySecret":
			easyjson147b50d1DecodeK8sIoApiCoreV179(in, &out.SecretKeySecret)
		case "roleARN":
			out.RoleARN = string(in.String())
		case "useSDKCreds":
			out.UseSDKCreds = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha123(out *jwriter.Writer, in S3Bucket) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"endpoint\":"
		out.RawString(prefix[1:])
		out.String(string(in.Endpoint))
	}
	{
		const prefix string = ",\"bucket\":"
		out.RawString(prefix)
		out.String(string(in.Bucket))
	}
	if in.Region != "" {
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	if in.Insecure != nil {
		const prefix string = ",\"insecure\":"
		out.RawString(prefix)
		out.Bool(bool(*in.Insecure))
	}
	{
		const prefix string = ",\"accessKeySecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, in.AccessKeySecret)
	}
	{
		const prefix string = ",\"secretKeySecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, in.SecretKeySecret)
	}
	if in.RoleARN != "" {
		const prefix string = ",\"roleARN\":"
		out.RawString(prefix)
		out.String(string(in.RoleARN))
	}
	if in.UseSDKCreds {
		const prefix string = ",\"useSDKCreds\":"
		out.RawString(prefix)
		out.Bool(bool(in.UseSDKCreds))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v S3Bucket) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha123(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v S3Bucket) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha123(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *S3Bucket) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha123(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *S3Bucket) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha123(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha124(in *jlexer.Lexer, out *S3Artifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "endpoint":
			out.Endpoint = string(in.String())
		case "bucket":
			out.Bucket = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "insecure":
			if in.IsNull() {
				in.Skip()
				out.Insecure = nil
			} else {
				if out.Insecure == nil {
					out.Insecure = new(bool)
				}
				*out.Insecure = bool(in.Bool())
			}
		case "accessKeySecret":
			easyjson147b50d1DecodeK8sIoApiCoreV179(in, &out.AccessKeySecret)
		case "secretKeySecret":
			easyjson147b50d1DecodeK8sIoApiCoreV179(in, &out.SecretKeySecret)
		case "roleARN":
			out.RoleARN = string(in.String())
		case "useSDKCreds":
			out.UseSDKCreds = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha124(out *jwriter.Writer, in S3Artifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"endpoint\":"
		out.RawString(prefix)
		out.String(string(in.Endpoint))
	}
	{
		const prefix string = ",\"bucket\":"
		out.RawString(prefix)
		out.String(string(in.Bucket))
	}
	if in.Region != "" {
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	if in.Insecure != nil {
		const prefix string = ",\"insecure\":"
		out.RawString(prefix)
		out.Bool(bool(*in.Insecure))
	}
	{
		const prefix string = ",\"accessKeySecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, in.AccessKeySecret)
	}
	{
		const prefix string = ",\"secretKeySecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, in.SecretKeySecret)
	}
	if in.RoleARN != "" {
		const prefix string = ",\"roleARN\":"
		out.RawString(prefix)
		out.String(string(in.RoleARN))
	}
	if in.UseSDKCreds {
		const prefix string = ",\"useSDKCreds\":"
		out.RawString(prefix)
		out.Bool(bool(in.UseSDKCreds))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v S3Artifact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha124(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v S3Artifact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha124(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *S3Artifact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha124(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *S3Artifact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha124(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha125(in *jlexer.Lexer, out *RetryStrategy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limit":
			if in.IsNull() {
				in.Skip()
				out.Limit = nil
			} else {
				if out.Limit == nil {
					out.Limit = new(intstr.IntOrString)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Limit).UnmarshalJSON(data))
				}
			}
		case "retryPolicy":
			out.RetryPolicy = RetryPolicy(in.String())
		case "backoff":
			if in.IsNull() {
				in.Skip()
				out.Backoff = nil
			} else {
				if out.Backoff == nil {
					out.Backoff = new(Backoff)
				}
				(*out.Backoff).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha125(out *jwriter.Writer, in RetryStrategy) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Limit != nil {
		const prefix string = ",\"limit\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((*in.Limit).MarshalJSON())
	}
	if in.RetryPolicy != "" {
		const prefix string = ",\"retryPolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RetryPolicy))
	}
	if in.Backoff != nil {
		const prefix string = ",\"backoff\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Backoff).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RetryStrategy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha125(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RetryStrategy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha125(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RetryStrategy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha125(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RetryStrategy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha125(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha126(in *jlexer.Lexer, out *ResourceTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "action":
			out.Action = string(in.String())
		case "mergeStrategy":
			out.MergeStrategy = string(in.String())
		case "manifest":
			out.Manifest = string(in.String())
		case "setOwnerReference":
			out.SetOwnerReference = bool(in.Bool())
		case "successCondition":
			out.SuccessCondition = string(in.String())
		case "failureCondition":
			out.FailureCondition = string(in.String())
		case "flags":
			if in.IsNull() {
				in.Skip()
				out.Flags = nil
			} else {
				in.Delim('[')
				if out.Flags == nil {
					if !in.IsDelim(']') {
						out.Flags = make([]string, 0, 4)
					} else {
						out.Flags = []string{}
					}
				} else {
					out.Flags = (out.Flags)[:0]
				}
				for !in.IsDelim(']') {
					var v267 string
					v267 = string(in.String())
					out.Flags = append(out.Flags, v267)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha126(out *jwriter.Writer, in ResourceTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"action\":"
		out.RawString(prefix[1:])
		out.String(string(in.Action))
	}
	if in.MergeStrategy != "" {
		const prefix string = ",\"mergeStrategy\":"
		out.RawString(prefix)
		out.String(string(in.MergeStrategy))
	}
	if in.Manifest != "" {
		const prefix string = ",\"manifest\":"
		out.RawString(prefix)
		out.String(string(in.Manifest))
	}
	if in.SetOwnerReference {
		const prefix string = ",\"setOwnerReference\":"
		out.RawString(prefix)
		out.Bool(bool(in.SetOwnerReference))
	}
	if in.SuccessCondition != "" {
		const prefix string = ",\"successCondition\":"
		out.RawString(prefix)
		out.String(string(in.SuccessCondition))
	}
	if in.FailureCondition != "" {
		const prefix string = ",\"failureCondition\":"
		out.RawString(prefix)
		out.String(string(in.FailureCondition))
	}
	if len(in.Flags) != 0 {
		const prefix string = ",\"flags\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v268, v269 := range in.Flags {
				if v268 > 0 {
					out.RawByte(',')
				}
				out.String(string(v269))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResourceTemplate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha126(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResourceTemplate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha126(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResourceTemplate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha126(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResourceTemplate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha126(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha127(in *jlexer.Lexer, out *RawArtifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			out.Data = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha127(out *jwriter.Writer, in RawArtifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		out.String(string(in.Data))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RawArtifact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha127(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RawArtifact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha127(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RawArtifact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha127(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RawArtifact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha127(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha128(in *jlexer.Lexer, out *Prometheus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "labels":
			if in.IsNull() {
				in.Skip()
				out.Labels = nil
			} else {
				in.Delim('[')
				if out.Labels == nil {
					if !in.IsDelim(']') {
						out.Labels = make([]*MetricLabel, 0, 8)
					} else {
						out.Labels = []*MetricLabel{}
					}
				} else {
					out.Labels = (out.Labels)[:0]
				}
				for !in.IsDelim(']') {
					var v270 *MetricLabel
					if in.IsNull() {
						in.Skip()
						v270 = nil
					} else {
						if v270 == nil {
							v270 = new(MetricLabel)
						}
						(*v270).UnmarshalEasyJSON(in)
					}
					out.Labels = append(out.Labels, v270)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "help":
			out.Help = string(in.String())
		case "when":
			out.When = string(in.String())
		case "gauge":
			if in.IsNull() {
				in.Skip()
				out.Gauge = nil
			} else {
				if out.Gauge == nil {
					out.Gauge = new(Gauge)
				}
				(*out.Gauge).UnmarshalEasyJSON(in)
			}
		case "histogram":
			if in.IsNull() {
				in.Skip()
				out.Histogram = nil
			} else {
				if out.Histogram == nil {
					out.Histogram = new(Histogram)
				}
				(*out.Histogram).UnmarshalEasyJSON(in)
			}
		case "counter":
			if in.IsNull() {
				in.Skip()
				out.Counter = nil
			} else {
				if out.Counter == nil {
					out.Counter = new(Counter)
				}
				(*out.Counter).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha128(out *jwriter.Writer, in Prometheus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v271, v272 := range in.Labels {
				if v271 > 0 {
					out.RawByte(',')
				}
				if v272 == nil {
					out.RawString("null")
				} else {
					(*v272).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"help\":"
		out.RawString(prefix)
		out.String(string(in.Help))
	}
	if in.When != "" {
		const prefix string = ",\"when\":"
		out.RawString(prefix)
		out.String(string(in.When))
	}
	if in.Gauge != nil {
		const prefix string = ",\"gauge\":"
		out.RawString(prefix)
		(*in.Gauge).MarshalEasyJSON(out)
	}
	if in.Histogram != nil {
		const prefix string = ",\"histogram\":"
		out.RawString(prefix)
		(*in.Histogram).MarshalEasyJSON(out)
	}
	if in.Counter != nil {
		const prefix string = ",\"counter\":"
		out.RawString(prefix)
		(*in.Counter).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Prometheus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha128(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Prometheus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha128(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Prometheus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha128(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Prometheus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha128(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha129(in *jlexer.Lexer, out *PodGC) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "strategy":
			out.Strategy = PodGCStrategy(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha129(out *jwriter.Writer, in PodGC) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Strategy != "" {
		const prefix string = ",\"strategy\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Strategy))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PodGC) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha129(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PodGC) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha129(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PodGC) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha129(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PodGC) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha129(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha130(in *jlexer.Lexer, out *Parameter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "default":
			if in.IsNull() {
				in.Skip()
				out.Default = nil
			} else {
				if out.Default == nil {
					out.Default = new(AnyString)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Default).UnmarshalJSON(data))
				}
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(AnyString)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Value).UnmarshalJSON(data))
				}
			}
		case "valueFrom":
			if in.IsNull() {
				in.Skip()
				out.ValueFrom = nil
			} else {
				if out.ValueFrom == nil {
					out.ValueFrom = new(ValueFrom)
				}
				(*out.ValueFrom).UnmarshalEasyJSON(in)
			}
		case "globalName":
			out.GlobalName = string(in.String())
		case "enum":
			if in.IsNull() {
				in.Skip()
				out.Enum = nil
			} else {
				in.Delim('[')
				if out.Enum == nil {
					if !in.IsDelim(']') {
						out.Enum = make([]AnyString, 0, 4)
					} else {
						out.Enum = []AnyString{}
					}
				} else {
					out.Enum = (out.Enum)[:0]
				}
				for !in.IsDelim(']') {
					var v273 AnyString
					if data := in.Raw(); in.Ok() {
						in.AddError((v273).UnmarshalJSON(data))
					}
					out.Enum = append(out.Enum, v273)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha130(out *jwriter.Writer, in Parameter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Default != nil {
		const prefix string = ",\"default\":"
		out.RawString(prefix)
		out.Raw((*in.Default).MarshalJSON())
	}
	if in.Value != nil {
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Raw((*in.Value).MarshalJSON())
	}
	if in.ValueFrom != nil {
		const prefix string = ",\"valueFrom\":"
		out.RawString(prefix)
		(*in.ValueFrom).MarshalEasyJSON(out)
	}
	if in.GlobalName != "" {
		const prefix string = ",\"globalName\":"
		out.RawString(prefix)
		out.String(string(in.GlobalName))
	}
	if len(in.Enum) != 0 {
		const prefix string = ",\"enum\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v274, v275 := range in.Enum {
				if v274 > 0 {
					out.RawByte(',')
				}
				out.Raw((v275).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Parameter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha130(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Parameter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha130(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Parameter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha130(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Parameter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha130(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha131(in *jlexer.Lexer, out *Outputs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]Parameter, 0, 0)
					} else {
						out.Parameters = []Parameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v276 Parameter
					(v276).UnmarshalEasyJSON(in)
					out.Parameters = append(out.Parameters, v276)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "artifacts":
			if in.IsNull() {
				in.Skip()
				out.Artifacts = nil
			} else {
				in.Delim('[')
				if out.Artifacts == nil {
					if !in.IsDelim(']') {
						out.Artifacts = make(Artifacts, 0, 0)
					} else {
						out.Artifacts = Artifacts{}
					}
				} else {
					out.Artifacts = (out.Artifacts)[:0]
				}
				for !in.IsDelim(']') {
					var v277 Artifact
					(v277).UnmarshalEasyJSON(in)
					out.Artifacts = append(out.Artifacts, v277)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(string)
				}
				*out.Result = string(in.String())
			}
		case "exitCode":
			if in.IsNull() {
				in.Skip()
				out.ExitCode = nil
			} else {
				if out.ExitCode == nil {
					out.ExitCode = new(string)
				}
				*out.ExitCode = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha131(out *jwriter.Writer, in Outputs) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Parameters) != 0 {
		const prefix string = ",\"parameters\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v278, v279 := range in.Parameters {
				if v278 > 0 {
					out.RawByte(',')
				}
				(v279).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Artifacts) != 0 {
		const prefix string = ",\"artifacts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v280, v281 := range in.Artifacts {
				if v280 > 0 {
					out.RawByte(',')
				}
				(v281).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Result != nil {
		const prefix string = ",\"result\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Result))
	}
	if in.ExitCode != nil {
		const prefix string = ",\"exitCode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.ExitCode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Outputs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha131(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Outputs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha131(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Outputs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha131(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Outputs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha131(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha132(in *jlexer.Lexer, out *OSSBucket) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "endpoint":
			out.Endpoint = string(in.String())
		case "bucket":
			out.Bucket = string(in.String())
		case "accessKeySecret":
			easyjson147b50d1DecodeK8sIoApiCoreV179(in, &out.AccessKeySecret)
		case "secretKeySecret":
			easyjson147b50d1DecodeK8sIoApiCoreV179(in, &out.SecretKeySecret)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha132(out *jwriter.Writer, in OSSBucket) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"endpoint\":"
		out.RawString(prefix[1:])
		out.String(string(in.Endpoint))
	}
	{
		const prefix string = ",\"bucket\":"
		out.RawString(prefix)
		out.String(string(in.Bucket))
	}
	{
		const prefix string = ",\"accessKeySecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, in.AccessKeySecret)
	}
	{
		const prefix string = ",\"secretKeySecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, in.SecretKeySecret)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OSSBucket) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha132(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OSSBucket) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha132(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OSSBucket) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha132(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OSSBucket) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha132(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha133(in *jlexer.Lexer, out *OSSArtifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "endpoint":
			out.Endpoint = string(in.String())
		case "bucket":
			out.Bucket = string(in.String())
		case "accessKeySecret":
			easyjson147b50d1DecodeK8sIoApiCoreV179(in, &out.AccessKeySecret)
		case "secretKeySecret":
			easyjson147b50d1DecodeK8sIoApiCoreV179(in, &out.SecretKeySecret)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha133(out *jwriter.Writer, in OSSArtifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"endpoint\":"
		out.RawString(prefix)
		out.String(string(in.Endpoint))
	}
	{
		const prefix string = ",\"bucket\":"
		out.RawString(prefix)
		out.String(string(in.Bucket))
	}
	{
		const prefix string = ",\"accessKeySecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, in.AccessKeySecret)
	}
	{
		const prefix string = ",\"secretKeySecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, in.SecretKeySecret)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OSSArtifact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha133(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OSSArtifact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha133(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OSSArtifact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha133(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OSSArtifact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha133(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha134(in *jlexer.Lexer, out *NoneStrategy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha134(out *jwriter.Writer, in NoneStrategy) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NoneStrategy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha134(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NoneStrategy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha134(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NoneStrategy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha134(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NoneStrategy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha134(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha135(in *jlexer.Lexer, out *NodeSynchronizationStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "waiting":
			out.Waiting = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha135(out *jwriter.Writer, in NodeSynchronizationStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Waiting != "" {
		const prefix string = ",\"waiting\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Waiting))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NodeSynchronizationStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha135(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NodeSynchronizationStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha135(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NodeSynchronizationStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha135(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NodeSynchronizationStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha135(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha136(in *jlexer.Lexer, out *NodeStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "displayName":
			out.DisplayName = string(in.String())
		case "type":
			out.Type = NodeType(in.String())
		case "templateName":
			out.TemplateName = string(in.String())
		case "templateRef":
			if in.IsNull() {
				in.Skip()
				out.TemplateRef = nil
			} else {
				if out.TemplateRef == nil {
					out.TemplateRef = new(TemplateRef)
				}
				(*out.TemplateRef).UnmarshalEasyJSON(in)
			}
		case "storedTemplateID":
			out.StoredTemplateID = string(in.String())
		case "workflowTemplateName":
			out.WorkflowTemplateName = string(in.String())
		case "templateScope":
			out.TemplateScope = string(in.String())
		case "phase":
			out.Phase = NodePhase(in.String())
		case "boundaryID":
			out.BoundaryID = string(in.String())
		case "message":
			out.Message = string(in.String())
		case "startedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartedAt).UnmarshalJSON(data))
			}
		case "finishedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.FinishedAt).UnmarshalJSON(data))
			}
		case "estimatedDuration":
			out.EstimatedDuration = EstimatedDuration(in.Int())
		case "progress":
			out.Progress = Progress(in.String())
		case "resourcesDuration":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.ResourcesDuration = make(ResourcesDuration)
				} else {
					out.ResourcesDuration = nil
				}
				for !in.IsDelim('}') {
					key := _v1.ResourceName(in.String())
					in.WantColon()
					var v282 ResourceDuration
					v282 = ResourceDuration(in.Int64())
					(out.ResourcesDuration)[key] = v282
					in.WantComma()
				}
				in.Delim('}')
			}
		case "podIP":
			out.PodIP = string(in.String())
		case "daemoned":
			if in.IsNull() {
				in.Skip()
				out.Daemoned = nil
			} else {
				if out.Daemoned == nil {
					out.Daemoned = new(bool)
				}
				*out.Daemoned = bool(in.Bool())
			}
		case "inputs":
			if in.IsNull() {
				in.Skip()
				out.Inputs = nil
			} else {
				if out.Inputs == nil {
					out.Inputs = new(Inputs)
				}
				(*out.Inputs).UnmarshalEasyJSON(in)
			}
		case "outputs":
			if in.IsNull() {
				in.Skip()
				out.Outputs = nil
			} else {
				if out.Outputs == nil {
					out.Outputs = new(Outputs)
				}
				(*out.Outputs).UnmarshalEasyJSON(in)
			}
		case "children":
			if in.IsNull() {
				in.Skip()
				out.Children = nil
			} else {
				in.Delim('[')
				if out.Children == nil {
					if !in.IsDelim(']') {
						out.Children = make([]string, 0, 4)
					} else {
						out.Children = []string{}
					}
				} else {
					out.Children = (out.Children)[:0]
				}
				for !in.IsDelim(']') {
					var v283 string
					v283 = string(in.String())
					out.Children = append(out.Children, v283)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "outboundNodes":
			if in.IsNull() {
				in.Skip()
				out.OutboundNodes = nil
			} else {
				in.Delim('[')
				if out.OutboundNodes == nil {
					if !in.IsDelim(']') {
						out.OutboundNodes = make([]string, 0, 4)
					} else {
						out.OutboundNodes = []string{}
					}
				} else {
					out.OutboundNodes = (out.OutboundNodes)[:0]
				}
				for !in.IsDelim(']') {
					var v284 string
					v284 = string(in.String())
					out.OutboundNodes = append(out.OutboundNodes, v284)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hostNodeName":
			out.HostNodeName = string(in.String())
		case "memoizationStatus":
			if in.IsNull() {
				in.Skip()
				out.MemoizationStatus = nil
			} else {
				if out.MemoizationStatus == nil {
					out.MemoizationStatus = new(MemoizationStatus)
				}
				(*out.MemoizationStatus).UnmarshalEasyJSON(in)
			}
		case "synchronizationStatus":
			if in.IsNull() {
				in.Skip()
				out.SynchronizationStatus = nil
			} else {
				if out.SynchronizationStatus == nil {
					out.SynchronizationStatus = new(NodeSynchronizationStatus)
				}
				(*out.SynchronizationStatus).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha136(out *jwriter.Writer, in NodeStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.DisplayName != "" {
		const prefix string = ",\"displayName\":"
		out.RawString(prefix)
		out.String(string(in.DisplayName))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	if in.TemplateName != "" {
		const prefix string = ",\"templateName\":"
		out.RawString(prefix)
		out.String(string(in.TemplateName))
	}
	if in.TemplateRef != nil {
		const prefix string = ",\"templateRef\":"
		out.RawString(prefix)
		(*in.TemplateRef).MarshalEasyJSON(out)
	}
	if in.StoredTemplateID != "" {
		const prefix string = ",\"storedTemplateID\":"
		out.RawString(prefix)
		out.String(string(in.StoredTemplateID))
	}
	if in.WorkflowTemplateName != "" {
		const prefix string = ",\"workflowTemplateName\":"
		out.RawString(prefix)
		out.String(string(in.WorkflowTemplateName))
	}
	if in.TemplateScope != "" {
		const prefix string = ",\"templateScope\":"
		out.RawString(prefix)
		out.String(string(in.TemplateScope))
	}
	if in.Phase != "" {
		const prefix string = ",\"phase\":"
		out.RawString(prefix)
		out.String(string(in.Phase))
	}
	if in.BoundaryID != "" {
		const prefix string = ",\"boundaryID\":"
		out.RawString(prefix)
		out.String(string(in.BoundaryID))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	if true {
		const prefix string = ",\"startedAt\":"
		out.RawString(prefix)
		out.Raw((in.StartedAt).MarshalJSON())
	}
	if true {
		const prefix string = ",\"finishedAt\":"
		out.RawString(prefix)
		out.Raw((in.FinishedAt).MarshalJSON())
	}
	if in.EstimatedDuration != 0 {
		const prefix string = ",\"estimatedDuration\":"
		out.RawString(prefix)
		out.Int(int(in.EstimatedDuration))
	}
	if in.Progress != "" {
		const prefix string = ",\"progress\":"
		out.RawString(prefix)
		out.String(string(in.Progress))
	}
	if len(in.ResourcesDuration) != 0 {
		const prefix string = ",\"resourcesDuration\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v285First := true
			for v285Name, v285Value := range in.ResourcesDuration {
				if v285First {
					v285First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v285Name))
				out.RawByte(':')
				out.Int64(int64(v285Value))
			}
			out.RawByte('}')
		}
	}
	if in.PodIP != "" {
		const prefix string = ",\"podIP\":"
		out.RawString(prefix)
		out.String(string(in.PodIP))
	}
	if in.Daemoned != nil {
		const prefix string = ",\"daemoned\":"
		out.RawString(prefix)
		out.Bool(bool(*in.Daemoned))
	}
	if in.Inputs != nil {
		const prefix string = ",\"inputs\":"
		out.RawString(prefix)
		(*in.Inputs).MarshalEasyJSON(out)
	}
	if in.Outputs != nil {
		const prefix string = ",\"outputs\":"
		out.RawString(prefix)
		(*in.Outputs).MarshalEasyJSON(out)
	}
	if len(in.Children) != 0 {
		const prefix string = ",\"children\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v286, v287 := range in.Children {
				if v286 > 0 {
					out.RawByte(',')
				}
				out.String(string(v287))
			}
			out.RawByte(']')
		}
	}
	if len(in.OutboundNodes) != 0 {
		const prefix string = ",\"outboundNodes\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v288, v289 := range in.OutboundNodes {
				if v288 > 0 {
					out.RawByte(',')
				}
				out.String(string(v289))
			}
			out.RawByte(']')
		}
	}
	if in.HostNodeName != "" {
		const prefix string = ",\"hostNodeName\":"
		out.RawString(prefix)
		out.String(string(in.HostNodeName))
	}
	if in.MemoizationStatus != nil {
		const prefix string = ",\"memoizationStatus\":"
		out.RawString(prefix)
		(*in.MemoizationStatus).MarshalEasyJSON(out)
	}
	if in.SynchronizationStatus != nil {
		const prefix string = ",\"synchronizationStatus\":"
		out.RawString(prefix)
		(*in.SynchronizationStatus).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NodeStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha136(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NodeStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha136(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NodeStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha136(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NodeStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha136(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha137(in *jlexer.Lexer, out *MutexStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "holding":
			if in.IsNull() {
				in.Skip()
				out.Holding = nil
			} else {
				in.Delim('[')
				if out.Holding == nil {
					if !in.IsDelim(']') {
						out.Holding = make([]MutexHolding, 0, 2)
					} else {
						out.Holding = []MutexHolding{}
					}
				} else {
					out.Holding = (out.Holding)[:0]
				}
				for !in.IsDelim(']') {
					var v290 MutexHolding
					(v290).UnmarshalEasyJSON(in)
					out.Holding = append(out.Holding, v290)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "waiting":
			if in.IsNull() {
				in.Skip()
				out.Waiting = nil
			} else {
				in.Delim('[')
				if out.Waiting == nil {
					if !in.IsDelim(']') {
						out.Waiting = make([]MutexHolding, 0, 2)
					} else {
						out.Waiting = []MutexHolding{}
					}
				} else {
					out.Waiting = (out.Waiting)[:0]
				}
				for !in.IsDelim(']') {
					var v291 MutexHolding
					(v291).UnmarshalEasyJSON(in)
					out.Waiting = append(out.Waiting, v291)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha137(out *jwriter.Writer, in MutexStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Holding) != 0 {
		const prefix string = ",\"holding\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v292, v293 := range in.Holding {
				if v292 > 0 {
					out.RawByte(',')
				}
				(v293).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Waiting) != 0 {
		const prefix string = ",\"waiting\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v294, v295 := range in.Waiting {
				if v294 > 0 {
					out.RawByte(',')
				}
				(v295).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MutexStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha137(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MutexStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha137(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MutexStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha137(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MutexStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha137(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha138(in *jlexer.Lexer, out *MutexHolding) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mutex":
			out.Mutex = string(in.String())
		case "holder":
			out.Holder = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha138(out *jwriter.Writer, in MutexHolding) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Mutex != "" {
		const prefix string = ",\"mutex\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Mutex))
	}
	if in.Holder != "" {
		const prefix string = ",\"holder\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Holder))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MutexHolding) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha138(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MutexHolding) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha138(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MutexHolding) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha138(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MutexHolding) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha138(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha139(in *jlexer.Lexer, out *Mutex) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha139(out *jwriter.Writer, in Mutex) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Mutex) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha139(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Mutex) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha139(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Mutex) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha139(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Mutex) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha139(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha140(in *jlexer.Lexer, out *Metrics) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "prometheus":
			if in.IsNull() {
				in.Skip()
				out.Prometheus = nil
			} else {
				in.Delim('[')
				if out.Prometheus == nil {
					if !in.IsDelim(']') {
						out.Prometheus = make([]*Prometheus, 0, 8)
					} else {
						out.Prometheus = []*Prometheus{}
					}
				} else {
					out.Prometheus = (out.Prometheus)[:0]
				}
				for !in.IsDelim(']') {
					var v296 *Prometheus
					if in.IsNull() {
						in.Skip()
						v296 = nil
					} else {
						if v296 == nil {
							v296 = new(Prometheus)
						}
						(*v296).UnmarshalEasyJSON(in)
					}
					out.Prometheus = append(out.Prometheus, v296)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha140(out *jwriter.Writer, in Metrics) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"prometheus\":"
		out.RawString(prefix[1:])
		if in.Prometheus == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v297, v298 := range in.Prometheus {
				if v297 > 0 {
					out.RawByte(',')
				}
				if v298 == nil {
					out.RawString("null")
				} else {
					(*v298).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Metrics) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha140(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metrics) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha140(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Metrics) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha140(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metrics) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha140(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha141(in *jlexer.Lexer, out *MetricLabel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha141(out *jwriter.Writer, in MetricLabel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetricLabel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha141(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricLabel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha141(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetricLabel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha141(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricLabel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha141(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha142(in *jlexer.Lexer, out *Metadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Annotations = make(map[string]string)
				} else {
					out.Annotations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v299 string
					v299 = string(in.String())
					(out.Annotations)[key] = v299
					in.WantComma()
				}
				in.Delim('}')
			}
		case "labels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Labels = make(map[string]string)
				} else {
					out.Labels = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v300 string
					v300 = string(in.String())
					(out.Labels)[key] = v300
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha142(out *jwriter.Writer, in Metadata) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v301First := true
			for v301Name, v301Value := range in.Annotations {
				if v301First {
					v301First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v301Name))
				out.RawByte(':')
				out.String(string(v301Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v302First := true
			for v302Name, v302Value := range in.Labels {
				if v302First {
					v302First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v302Name))
				out.RawByte(':')
				out.String(string(v302Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Metadata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha142(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Metadata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha142(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Metadata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha142(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Metadata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha142(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha143(in *jlexer.Lexer, out *Memoize) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "cache":
			if in.IsNull() {
				in.Skip()
				out.Cache = nil
			} else {
				if out.Cache == nil {
					out.Cache = new(Cache)
				}
				(*out.Cache).UnmarshalEasyJSON(in)
			}
		case "maxAge":
			out.MaxAge = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha143(out *jwriter.Writer, in Memoize) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"cache\":"
		out.RawString(prefix)
		if in.Cache == nil {
			out.RawString("null")
		} else {
			(*in.Cache).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"maxAge\":"
		out.RawString(prefix)
		out.String(string(in.MaxAge))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Memoize) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha143(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Memoize) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha143(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Memoize) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha143(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Memoize) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha143(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha144(in *jlexer.Lexer, out *MemoizationStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hit":
			out.Hit = bool(in.Bool())
		case "key":
			out.Key = string(in.String())
		case "cacheName":
			out.CacheName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha144(out *jwriter.Writer, in MemoizationStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hit\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Hit))
	}
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"cacheName\":"
		out.RawString(prefix)
		out.String(string(in.CacheName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MemoizationStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha144(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MemoizationStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha144(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MemoizationStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha144(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MemoizationStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha144(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha145(in *jlexer.Lexer, out *Inputs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]Parameter, 0, 0)
					} else {
						out.Parameters = []Parameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v303 Parameter
					(v303).UnmarshalEasyJSON(in)
					out.Parameters = append(out.Parameters, v303)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "artifacts":
			if in.IsNull() {
				in.Skip()
				out.Artifacts = nil
			} else {
				in.Delim('[')
				if out.Artifacts == nil {
					if !in.IsDelim(']') {
						out.Artifacts = make(Artifacts, 0, 0)
					} else {
						out.Artifacts = Artifacts{}
					}
				} else {
					out.Artifacts = (out.Artifacts)[:0]
				}
				for !in.IsDelim(']') {
					var v304 Artifact
					(v304).UnmarshalEasyJSON(in)
					out.Artifacts = append(out.Artifacts, v304)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha145(out *jwriter.Writer, in Inputs) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Parameters) != 0 {
		const prefix string = ",\"parameters\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v305, v306 := range in.Parameters {
				if v305 > 0 {
					out.RawByte(',')
				}
				(v306).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Artifacts) != 0 {
		const prefix string = ",\"artifacts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v307, v308 := range in.Artifacts {
				if v307 > 0 {
					out.RawByte(',')
				}
				(v308).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Inputs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha145(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Inputs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha145(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Inputs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha145(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Inputs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha145(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha146(in *jlexer.Lexer, out *Histogram) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "buckets":
			if in.IsNull() {
				in.Skip()
				out.Buckets = nil
			} else {
				in.Delim('[')
				if out.Buckets == nil {
					if !in.IsDelim(']') {
						out.Buckets = make([]Amount, 0, 4)
					} else {
						out.Buckets = []Amount{}
					}
				} else {
					out.Buckets = (out.Buckets)[:0]
				}
				for !in.IsDelim(']') {
					var v309 Amount
					if data := in.Raw(); in.Ok() {
						in.AddError((v309).UnmarshalJSON(data))
					}
					out.Buckets = append(out.Buckets, v309)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha146(out *jwriter.Writer, in Histogram) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"buckets\":"
		out.RawString(prefix)
		if in.Buckets == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v310, v311 := range in.Buckets {
				if v310 > 0 {
					out.RawByte(',')
				}
				out.Raw((v311).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Histogram) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha146(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Histogram) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha146(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Histogram) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha146(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Histogram) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha146(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha147(in *jlexer.Lexer, out *Header) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha147(out *jwriter.Writer, in Header) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Header) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha147(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Header) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha147(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Header) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha147(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Header) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha147(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha148(in *jlexer.Lexer, out *HTTPArtifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "headers":
			if in.IsNull() {
				in.Skip()
				out.Headers = nil
			} else {
				in.Delim('[')
				if out.Headers == nil {
					if !in.IsDelim(']') {
						out.Headers = make([]Header, 0, 2)
					} else {
						out.Headers = []Header{}
					}
				} else {
					out.Headers = (out.Headers)[:0]
				}
				for !in.IsDelim(']') {
					var v312 Header
					(v312).UnmarshalEasyJSON(in)
					out.Headers = append(out.Headers, v312)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha148(out *jwriter.Writer, in HTTPArtifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	if len(in.Headers) != 0 {
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v313, v314 := range in.Headers {
				if v313 > 0 {
					out.RawByte(',')
				}
				(v314).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HTTPArtifact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha148(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HTTPArtifact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha148(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HTTPArtifact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha148(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HTTPArtifact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha148(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha149(in *jlexer.Lexer, out *HDFSKrbConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "krbCCacheSecret":
			if in.IsNull() {
				in.Skip()
				out.KrbCCacheSecret = nil
			} else {
				if out.KrbCCacheSecret == nil {
					out.KrbCCacheSecret = new(_v1.SecretKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV179(in, out.KrbCCacheSecret)
			}
		case "krbKeytabSecret":
			if in.IsNull() {
				in.Skip()
				out.KrbKeytabSecret = nil
			} else {
				if out.KrbKeytabSecret == nil {
					out.KrbKeytabSecret = new(_v1.SecretKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV179(in, out.KrbKeytabSecret)
			}
		case "krbUsername":
			out.KrbUsername = string(in.String())
		case "krbRealm":
			out.KrbRealm = string(in.String())
		case "krbConfigConfigMap":
			if in.IsNull() {
				in.Skip()
				out.KrbConfigConfigMap = nil
			} else {
				if out.KrbConfigConfigMap == nil {
					out.KrbConfigConfigMap = new(_v1.ConfigMapKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV178(in, out.KrbConfigConfigMap)
			}
		case "krbServicePrincipalName":
			out.KrbServicePrincipalName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha149(out *jwriter.Writer, in HDFSKrbConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.KrbCCacheSecret != nil {
		const prefix string = ",\"krbCCacheSecret\":"
		first = false
		out.RawString(prefix[1:])
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, *in.KrbCCacheSecret)
	}
	if in.KrbKeytabSecret != nil {
		const prefix string = ",\"krbKeytabSecret\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, *in.KrbKeytabSecret)
	}
	if in.KrbUsername != "" {
		const prefix string = ",\"krbUsername\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KrbUsername))
	}
	if in.KrbRealm != "" {
		const prefix string = ",\"krbRealm\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KrbRealm))
	}
	if in.KrbConfigConfigMap != nil {
		const prefix string = ",\"krbConfigConfigMap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV178(out, *in.KrbConfigConfigMap)
	}
	if in.KrbServicePrincipalName != "" {
		const prefix string = ",\"krbServicePrincipalName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.KrbServicePrincipalName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HDFSKrbConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha149(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HDFSKrbConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha149(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HDFSKrbConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha149(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HDFSKrbConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha149(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha150(in *jlexer.Lexer, out *HDFSConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addresses":
			if in.IsNull() {
				in.Skip()
				out.Addresses = nil
			} else {
				in.Delim('[')
				if out.Addresses == nil {
					if !in.IsDelim(']') {
						out.Addresses = make([]string, 0, 4)
					} else {
						out.Addresses = []string{}
					}
				} else {
					out.Addresses = (out.Addresses)[:0]
				}
				for !in.IsDelim(']') {
					var v315 string
					v315 = string(in.String())
					out.Addresses = append(out.Addresses, v315)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hdfsUser":
			out.HDFSUser = string(in.String())
		case "krbCCacheSecret":
			if in.IsNull() {
				in.Skip()
				out.KrbCCacheSecret = nil
			} else {
				if out.KrbCCacheSecret == nil {
					out.KrbCCacheSecret = new(_v1.SecretKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV179(in, out.KrbCCacheSecret)
			}
		case "krbKeytabSecret":
			if in.IsNull() {
				in.Skip()
				out.KrbKeytabSecret = nil
			} else {
				if out.KrbKeytabSecret == nil {
					out.KrbKeytabSecret = new(_v1.SecretKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV179(in, out.KrbKeytabSecret)
			}
		case "krbUsername":
			out.KrbUsername = string(in.String())
		case "krbRealm":
			out.KrbRealm = string(in.String())
		case "krbConfigConfigMap":
			if in.IsNull() {
				in.Skip()
				out.KrbConfigConfigMap = nil
			} else {
				if out.KrbConfigConfigMap == nil {
					out.KrbConfigConfigMap = new(_v1.ConfigMapKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV178(in, out.KrbConfigConfigMap)
			}
		case "krbServicePrincipalName":
			out.KrbServicePrincipalName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha150(out *jwriter.Writer, in HDFSConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addresses\":"
		out.RawString(prefix[1:])
		if in.Addresses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v316, v317 := range in.Addresses {
				if v316 > 0 {
					out.RawByte(',')
				}
				out.String(string(v317))
			}
			out.RawByte(']')
		}
	}
	if in.HDFSUser != "" {
		const prefix string = ",\"hdfsUser\":"
		out.RawString(prefix)
		out.String(string(in.HDFSUser))
	}
	if in.KrbCCacheSecret != nil {
		const prefix string = ",\"krbCCacheSecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, *in.KrbCCacheSecret)
	}
	if in.KrbKeytabSecret != nil {
		const prefix string = ",\"krbKeytabSecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, *in.KrbKeytabSecret)
	}
	if in.KrbUsername != "" {
		const prefix string = ",\"krbUsername\":"
		out.RawString(prefix)
		out.String(string(in.KrbUsername))
	}
	if in.KrbRealm != "" {
		const prefix string = ",\"krbRealm\":"
		out.RawString(prefix)
		out.String(string(in.KrbRealm))
	}
	if in.KrbConfigConfigMap != nil {
		const prefix string = ",\"krbConfigConfigMap\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV178(out, *in.KrbConfigConfigMap)
	}
	if in.KrbServicePrincipalName != "" {
		const prefix string = ",\"krbServicePrincipalName\":"
		out.RawString(prefix)
		out.String(string(in.KrbServicePrincipalName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HDFSConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha150(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HDFSConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha150(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HDFSConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha150(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HDFSConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha150(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha151(in *jlexer.Lexer, out *HDFSArtifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "force":
			out.Force = bool(in.Bool())
		case "addresses":
			if in.IsNull() {
				in.Skip()
				out.Addresses = nil
			} else {
				in.Delim('[')
				if out.Addresses == nil {
					if !in.IsDelim(']') {
						out.Addresses = make([]string, 0, 4)
					} else {
						out.Addresses = []string{}
					}
				} else {
					out.Addresses = (out.Addresses)[:0]
				}
				for !in.IsDelim(']') {
					var v318 string
					v318 = string(in.String())
					out.Addresses = append(out.Addresses, v318)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hdfsUser":
			out.HDFSUser = string(in.String())
		case "krbCCacheSecret":
			if in.IsNull() {
				in.Skip()
				out.KrbCCacheSecret = nil
			} else {
				if out.KrbCCacheSecret == nil {
					out.KrbCCacheSecret = new(_v1.SecretKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV179(in, out.KrbCCacheSecret)
			}
		case "krbKeytabSecret":
			if in.IsNull() {
				in.Skip()
				out.KrbKeytabSecret = nil
			} else {
				if out.KrbKeytabSecret == nil {
					out.KrbKeytabSecret = new(_v1.SecretKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV179(in, out.KrbKeytabSecret)
			}
		case "krbUsername":
			out.KrbUsername = string(in.String())
		case "krbRealm":
			out.KrbRealm = string(in.String())
		case "krbConfigConfigMap":
			if in.IsNull() {
				in.Skip()
				out.KrbConfigConfigMap = nil
			} else {
				if out.KrbConfigConfigMap == nil {
					out.KrbConfigConfigMap = new(_v1.ConfigMapKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV178(in, out.KrbConfigConfigMap)
			}
		case "krbServicePrincipalName":
			out.KrbServicePrincipalName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha151(out *jwriter.Writer, in HDFSArtifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	if in.Force {
		const prefix string = ",\"force\":"
		out.RawString(prefix)
		out.Bool(bool(in.Force))
	}
	{
		const prefix string = ",\"addresses\":"
		out.RawString(prefix)
		if in.Addresses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v319, v320 := range in.Addresses {
				if v319 > 0 {
					out.RawByte(',')
				}
				out.String(string(v320))
			}
			out.RawByte(']')
		}
	}
	if in.HDFSUser != "" {
		const prefix string = ",\"hdfsUser\":"
		out.RawString(prefix)
		out.String(string(in.HDFSUser))
	}
	if in.KrbCCacheSecret != nil {
		const prefix string = ",\"krbCCacheSecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, *in.KrbCCacheSecret)
	}
	if in.KrbKeytabSecret != nil {
		const prefix string = ",\"krbKeytabSecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, *in.KrbKeytabSecret)
	}
	if in.KrbUsername != "" {
		const prefix string = ",\"krbUsername\":"
		out.RawString(prefix)
		out.String(string(in.KrbUsername))
	}
	if in.KrbRealm != "" {
		const prefix string = ",\"krbRealm\":"
		out.RawString(prefix)
		out.String(string(in.KrbRealm))
	}
	if in.KrbConfigConfigMap != nil {
		const prefix string = ",\"krbConfigConfigMap\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV178(out, *in.KrbConfigConfigMap)
	}
	if in.KrbServicePrincipalName != "" {
		const prefix string = ",\"krbServicePrincipalName\":"
		out.RawString(prefix)
		out.String(string(in.KrbServicePrincipalName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HDFSArtifact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha151(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HDFSArtifact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha151(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HDFSArtifact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha151(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HDFSArtifact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha151(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha152(in *jlexer.Lexer, out *GitArtifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "repo":
			out.Repo = string(in.String())
		case "revision":
			out.Revision = string(in.String())
		case "depth":
			if in.IsNull() {
				in.Skip()
				out.Depth = nil
			} else {
				if out.Depth == nil {
					out.Depth = new(uint64)
				}
				*out.Depth = uint64(in.Uint64())
			}
		case "fetch":
			if in.IsNull() {
				in.Skip()
				out.Fetch = nil
			} else {
				in.Delim('[')
				if out.Fetch == nil {
					if !in.IsDelim(']') {
						out.Fetch = make([]string, 0, 4)
					} else {
						out.Fetch = []string{}
					}
				} else {
					out.Fetch = (out.Fetch)[:0]
				}
				for !in.IsDelim(']') {
					var v321 string
					v321 = string(in.String())
					out.Fetch = append(out.Fetch, v321)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "usernameSecret":
			if in.IsNull() {
				in.Skip()
				out.UsernameSecret = nil
			} else {
				if out.UsernameSecret == nil {
					out.UsernameSecret = new(_v1.SecretKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV179(in, out.UsernameSecret)
			}
		case "passwordSecret":
			if in.IsNull() {
				in.Skip()
				out.PasswordSecret = nil
			} else {
				if out.PasswordSecret == nil {
					out.PasswordSecret = new(_v1.SecretKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV179(in, out.PasswordSecret)
			}
		case "sshPrivateKeySecret":
			if in.IsNull() {
				in.Skip()
				out.SSHPrivateKeySecret = nil
			} else {
				if out.SSHPrivateKeySecret == nil {
					out.SSHPrivateKeySecret = new(_v1.SecretKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV179(in, out.SSHPrivateKeySecret)
			}
		case "insecureIgnoreHostKey":
			out.InsecureIgnoreHostKey = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha152(out *jwriter.Writer, in GitArtifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"repo\":"
		out.RawString(prefix[1:])
		out.String(string(in.Repo))
	}
	if in.Revision != "" {
		const prefix string = ",\"revision\":"
		out.RawString(prefix)
		out.String(string(in.Revision))
	}
	if in.Depth != nil {
		const prefix string = ",\"depth\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.Depth))
	}
	if len(in.Fetch) != 0 {
		const prefix string = ",\"fetch\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v322, v323 := range in.Fetch {
				if v322 > 0 {
					out.RawByte(',')
				}
				out.String(string(v323))
			}
			out.RawByte(']')
		}
	}
	if in.UsernameSecret != nil {
		const prefix string = ",\"usernameSecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, *in.UsernameSecret)
	}
	if in.PasswordSecret != nil {
		const prefix string = ",\"passwordSecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, *in.PasswordSecret)
	}
	if in.SSHPrivateKeySecret != nil {
		const prefix string = ",\"sshPrivateKeySecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, *in.SSHPrivateKeySecret)
	}
	if in.InsecureIgnoreHostKey {
		const prefix string = ",\"insecureIgnoreHostKey\":"
		out.RawString(prefix)
		out.Bool(bool(in.InsecureIgnoreHostKey))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GitArtifact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha152(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GitArtifact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha152(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GitArtifact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha152(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GitArtifact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha152(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha153(in *jlexer.Lexer, out *Gauge) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		case "realtime":
			if in.IsNull() {
				in.Skip()
				out.Realtime = nil
			} else {
				if out.Realtime == nil {
					out.Realtime = new(bool)
				}
				*out.Realtime = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha153(out *jwriter.Writer, in Gauge) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"realtime\":"
		out.RawString(prefix)
		if in.Realtime == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.Realtime))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Gauge) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha153(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Gauge) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha153(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Gauge) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha153(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Gauge) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha153(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha154(in *jlexer.Lexer, out *GCSBucket) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "bucket":
			out.Bucket = string(in.String())
		case "serviceAccountKeySecret":
			easyjson147b50d1DecodeK8sIoApiCoreV179(in, &out.ServiceAccountKeySecret)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha154(out *jwriter.Writer, in GCSBucket) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"bucket\":"
		out.RawString(prefix[1:])
		out.String(string(in.Bucket))
	}
	if true {
		const prefix string = ",\"serviceAccountKeySecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, in.ServiceAccountKeySecret)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GCSBucket) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha154(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GCSBucket) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha154(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GCSBucket) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha154(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GCSBucket) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha154(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha155(in *jlexer.Lexer, out *GCSArtifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "bucket":
			out.Bucket = string(in.String())
		case "serviceAccountKeySecret":
			easyjson147b50d1DecodeK8sIoApiCoreV179(in, &out.ServiceAccountKeySecret)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha155(out *jwriter.Writer, in GCSArtifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"bucket\":"
		out.RawString(prefix)
		out.String(string(in.Bucket))
	}
	if true {
		const prefix string = ",\"serviceAccountKeySecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, in.ServiceAccountKeySecret)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GCSArtifact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha155(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GCSArtifact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha155(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GCSArtifact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha155(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GCSArtifact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha155(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha156(in *jlexer.Lexer, out *ExecutorConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "serviceAccountName":
			out.ServiceAccountName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha156(out *jwriter.Writer, in ExecutorConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ServiceAccountName != "" {
		const prefix string = ",\"serviceAccountName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ServiceAccountName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExecutorConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha156(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExecutorConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha156(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExecutorConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha156(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExecutorConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha156(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha157(in *jlexer.Lexer, out *DAGTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "target":
			out.Target = string(in.String())
		case "tasks":
			if in.IsNull() {
				in.Skip()
				out.Tasks = nil
			} else {
				in.Delim('[')
				if out.Tasks == nil {
					if !in.IsDelim(']') {
						out.Tasks = make([]DAGTask, 0, 0)
					} else {
						out.Tasks = []DAGTask{}
					}
				} else {
					out.Tasks = (out.Tasks)[:0]
				}
				for !in.IsDelim(']') {
					var v324 DAGTask
					(v324).UnmarshalEasyJSON(in)
					out.Tasks = append(out.Tasks, v324)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "failFast":
			if in.IsNull() {
				in.Skip()
				out.FailFast = nil
			} else {
				if out.FailFast == nil {
					out.FailFast = new(bool)
				}
				*out.FailFast = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha157(out *jwriter.Writer, in DAGTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Target != "" {
		const prefix string = ",\"target\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Target))
	}
	{
		const prefix string = ",\"tasks\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Tasks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v325, v326 := range in.Tasks {
				if v325 > 0 {
					out.RawByte(',')
				}
				(v326).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.FailFast != nil {
		const prefix string = ",\"failFast\":"
		out.RawString(prefix)
		out.Bool(bool(*in.FailFast))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DAGTemplate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha157(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DAGTemplate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha157(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DAGTemplate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha157(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DAGTemplate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha157(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha158(in *jlexer.Lexer, out *DAGTask) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "template":
			out.Template = string(in.String())
		case "arguments":
			(out.Arguments).UnmarshalEasyJSON(in)
		case "templateRef":
			if in.IsNull() {
				in.Skip()
				out.TemplateRef = nil
			} else {
				if out.TemplateRef == nil {
					out.TemplateRef = new(TemplateRef)
				}
				(*out.TemplateRef).UnmarshalEasyJSON(in)
			}
		case "dependencies":
			if in.IsNull() {
				in.Skip()
				out.Dependencies = nil
			} else {
				in.Delim('[')
				if out.Dependencies == nil {
					if !in.IsDelim(']') {
						out.Dependencies = make([]string, 0, 4)
					} else {
						out.Dependencies = []string{}
					}
				} else {
					out.Dependencies = (out.Dependencies)[:0]
				}
				for !in.IsDelim(']') {
					var v327 string
					v327 = string(in.String())
					out.Dependencies = append(out.Dependencies, v327)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "withItems":
			if in.IsNull() {
				in.Skip()
				out.WithItems = nil
			} else {
				in.Delim('[')
				if out.WithItems == nil {
					if !in.IsDelim(']') {
						out.WithItems = make([]Item, 0, 2)
					} else {
						out.WithItems = []Item{}
					}
				} else {
					out.WithItems = (out.WithItems)[:0]
				}
				for !in.IsDelim(']') {
					var v328 Item
					if data := in.Raw(); in.Ok() {
						in.AddError((v328).UnmarshalJSON(data))
					}
					out.WithItems = append(out.WithItems, v328)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "withParam":
			out.WithParam = string(in.String())
		case "withSequence":
			if in.IsNull() {
				in.Skip()
				out.WithSequence = nil
			} else {
				if out.WithSequence == nil {
					out.WithSequence = new(Sequence)
				}
				(*out.WithSequence).UnmarshalEasyJSON(in)
			}
		case "when":
			out.When = string(in.String())
		case "continueOn":
			if in.IsNull() {
				in.Skip()
				out.ContinueOn = nil
			} else {
				if out.ContinueOn == nil {
					out.ContinueOn = new(ContinueOn)
				}
				(*out.ContinueOn).UnmarshalEasyJSON(in)
			}
		case "onExit":
			out.OnExit = string(in.String())
		case "depends":
			out.Depends = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha158(out *jwriter.Writer, in DAGTask) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"template\":"
		out.RawString(prefix)
		out.String(string(in.Template))
	}
	if true {
		const prefix string = ",\"arguments\":"
		out.RawString(prefix)
		(in.Arguments).MarshalEasyJSON(out)
	}
	if in.TemplateRef != nil {
		const prefix string = ",\"templateRef\":"
		out.RawString(prefix)
		(*in.TemplateRef).MarshalEasyJSON(out)
	}
	if len(in.Dependencies) != 0 {
		const prefix string = ",\"dependencies\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v329, v330 := range in.Dependencies {
				if v329 > 0 {
					out.RawByte(',')
				}
				out.String(string(v330))
			}
			out.RawByte(']')
		}
	}
	if len(in.WithItems) != 0 {
		const prefix string = ",\"withItems\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v331, v332 := range in.WithItems {
				if v331 > 0 {
					out.RawByte(',')
				}
				out.Raw((v332).MarshalJSON())
			}
			out.RawByte(']')
		}
	}
	if in.WithParam != "" {
		const prefix string = ",\"withParam\":"
		out.RawString(prefix)
		out.String(string(in.WithParam))
	}
	if in.WithSequence != nil {
		const prefix string = ",\"withSequence\":"
		out.RawString(prefix)
		(*in.WithSequence).MarshalEasyJSON(out)
	}
	if in.When != "" {
		const prefix string = ",\"when\":"
		out.RawString(prefix)
		out.String(string(in.When))
	}
	if in.ContinueOn != nil {
		const prefix string = ",\"continueOn\":"
		out.RawString(prefix)
		(*in.ContinueOn).MarshalEasyJSON(out)
	}
	if in.OnExit != "" {
		const prefix string = ",\"onExit\":"
		out.RawString(prefix)
		out.String(string(in.OnExit))
	}
	if in.Depends != "" {
		const prefix string = ",\"depends\":"
		out.RawString(prefix)
		out.String(string(in.Depends))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DAGTask) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha158(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DAGTask) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha158(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DAGTask) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha158(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DAGTask) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha158(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha159(in *jlexer.Lexer, out *Counter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha159(out *jwriter.Writer, in Counter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Counter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha159(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Counter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha159(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Counter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha159(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Counter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha159(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha160(in *jlexer.Lexer, out *ContinueOn) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Error = bool(in.Bool())
		case "failed":
			out.Failed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha160(out *jwriter.Writer, in ContinueOn) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Error {
		const prefix string = ",\"error\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Error))
	}
	if in.Failed {
		const prefix string = ",\"failed\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Failed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContinueOn) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha160(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContinueOn) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha160(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContinueOn) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha160(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContinueOn) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha160(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha161(in *jlexer.Lexer, out *Condition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = ConditionType(in.String())
		case "status":
			out.Status = _v11.ConditionStatus(in.String())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha161(out *jwriter.Writer, in Condition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Type != "" {
		const prefix string = ",\"type\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	if in.Status != "" {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Status))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Message))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Condition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha161(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Condition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha161(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Condition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha161(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Condition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha161(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha162(in *jlexer.Lexer, out *Cache) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "configMap":
			if in.IsNull() {
				in.Skip()
				out.ConfigMap = nil
			} else {
				if out.ConfigMap == nil {
					out.ConfigMap = new(_v1.ConfigMapKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV178(in, out.ConfigMap)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha162(out *jwriter.Writer, in Cache) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"configMap\":"
		out.RawString(prefix[1:])
		if in.ConfigMap == nil {
			out.RawString("null")
		} else {
			easyjson147b50d1EncodeK8sIoApiCoreV178(out, *in.ConfigMap)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cache) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha162(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cache) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha162(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cache) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha162(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cache) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha162(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha163(in *jlexer.Lexer, out *Backoff) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "duration":
			out.Duration = string(in.String())
		case "factor":
			if in.IsNull() {
				in.Skip()
				out.Factor = nil
			} else {
				if out.Factor == nil {
					out.Factor = new(intstr.IntOrString)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Factor).UnmarshalJSON(data))
				}
			}
		case "maxDuration":
			out.MaxDuration = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha163(out *jwriter.Writer, in Backoff) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Duration != "" {
		const prefix string = ",\"duration\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Duration))
	}
	if in.Factor != nil {
		const prefix string = ",\"factor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Factor).MarshalJSON())
	}
	if in.MaxDuration != "" {
		const prefix string = ",\"maxDuration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MaxDuration))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Backoff) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha163(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Backoff) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha163(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Backoff) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha163(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Backoff) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha163(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha164(in *jlexer.Lexer, out *ArtifactoryAuth) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "usernameSecret":
			if in.IsNull() {
				in.Skip()
				out.UsernameSecret = nil
			} else {
				if out.UsernameSecret == nil {
					out.UsernameSecret = new(_v1.SecretKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV179(in, out.UsernameSecret)
			}
		case "passwordSecret":
			if in.IsNull() {
				in.Skip()
				out.PasswordSecret = nil
			} else {
				if out.PasswordSecret == nil {
					out.PasswordSecret = new(_v1.SecretKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV179(in, out.PasswordSecret)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha164(out *jwriter.Writer, in ArtifactoryAuth) {
	out.RawByte('{')
	first := true
	_ = first
	if in.UsernameSecret != nil {
		const prefix string = ",\"usernameSecret\":"
		first = false
		out.RawString(prefix[1:])
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, *in.UsernameSecret)
	}
	if in.PasswordSecret != nil {
		const prefix string = ",\"passwordSecret\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, *in.PasswordSecret)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArtifactoryAuth) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha164(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArtifactoryAuth) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha164(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArtifactoryAuth) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha164(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArtifactoryAuth) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha164(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha165(in *jlexer.Lexer, out *ArtifactoryArtifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "usernameSecret":
			if in.IsNull() {
				in.Skip()
				out.UsernameSecret = nil
			} else {
				if out.UsernameSecret == nil {
					out.UsernameSecret = new(_v1.SecretKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV179(in, out.UsernameSecret)
			}
		case "passwordSecret":
			if in.IsNull() {
				in.Skip()
				out.PasswordSecret = nil
			} else {
				if out.PasswordSecret == nil {
					out.PasswordSecret = new(_v1.SecretKeySelector)
				}
				easyjson147b50d1DecodeK8sIoApiCoreV179(in, out.PasswordSecret)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha165(out *jwriter.Writer, in ArtifactoryArtifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	if in.UsernameSecret != nil {
		const prefix string = ",\"usernameSecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, *in.UsernameSecret)
	}
	if in.PasswordSecret != nil {
		const prefix string = ",\"passwordSecret\":"
		out.RawString(prefix)
		easyjson147b50d1EncodeK8sIoApiCoreV179(out, *in.PasswordSecret)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArtifactoryArtifact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha165(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArtifactoryArtifact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha165(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArtifactoryArtifact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha165(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArtifactoryArtifact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha165(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha166(in *jlexer.Lexer, out *ArtifactRepositoryRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "configMap":
			out.ConfigMap = string(in.String())
		case "key":
			out.Key = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha166(out *jwriter.Writer, in ArtifactRepositoryRef) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ConfigMap != "" {
		const prefix string = ",\"configMap\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ConfigMap))
	}
	if in.Key != "" {
		const prefix string = ",\"key\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Key))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArtifactRepositoryRef) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha166(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArtifactRepositoryRef) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha166(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArtifactRepositoryRef) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha166(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArtifactRepositoryRef) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha166(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha167(in *jlexer.Lexer, out *ArtifactLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "archiveLogs":
			if in.IsNull() {
				in.Skip()
				out.ArchiveLogs = nil
			} else {
				if out.ArchiveLogs == nil {
					out.ArchiveLogs = new(bool)
				}
				*out.ArchiveLogs = bool(in.Bool())
			}
		case "s3":
			if in.IsNull() {
				in.Skip()
				out.S3 = nil
			} else {
				if out.S3 == nil {
					out.S3 = new(S3Artifact)
				}
				(*out.S3).UnmarshalEasyJSON(in)
			}
		case "git":
			if in.IsNull() {
				in.Skip()
				out.Git = nil
			} else {
				if out.Git == nil {
					out.Git = new(GitArtifact)
				}
				(*out.Git).UnmarshalEasyJSON(in)
			}
		case "http":
			if in.IsNull() {
				in.Skip()
				out.HTTP = nil
			} else {
				if out.HTTP == nil {
					out.HTTP = new(HTTPArtifact)
				}
				(*out.HTTP).UnmarshalEasyJSON(in)
			}
		case "artifactory":
			if in.IsNull() {
				in.Skip()
				out.Artifactory = nil
			} else {
				if out.Artifactory == nil {
					out.Artifactory = new(ArtifactoryArtifact)
				}
				(*out.Artifactory).UnmarshalEasyJSON(in)
			}
		case "hdfs":
			if in.IsNull() {
				in.Skip()
				out.HDFS = nil
			} else {
				if out.HDFS == nil {
					out.HDFS = new(HDFSArtifact)
				}
				(*out.HDFS).UnmarshalEasyJSON(in)
			}
		case "raw":
			if in.IsNull() {
				in.Skip()
				out.Raw = nil
			} else {
				if out.Raw == nil {
					out.Raw = new(RawArtifact)
				}
				(*out.Raw).UnmarshalEasyJSON(in)
			}
		case "oss":
			if in.IsNull() {
				in.Skip()
				out.OSS = nil
			} else {
				if out.OSS == nil {
					out.OSS = new(OSSArtifact)
				}
				(*out.OSS).UnmarshalEasyJSON(in)
			}
		case "gcs":
			if in.IsNull() {
				in.Skip()
				out.GCS = nil
			} else {
				if out.GCS == nil {
					out.GCS = new(GCSArtifact)
				}
				(*out.GCS).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha167(out *jwriter.Writer, in ArtifactLocation) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ArchiveLogs != nil {
		const prefix string = ",\"archiveLogs\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(*in.ArchiveLogs))
	}
	if in.S3 != nil {
		const prefix string = ",\"s3\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.S3).MarshalEasyJSON(out)
	}
	if in.Git != nil {
		const prefix string = ",\"git\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Git).MarshalEasyJSON(out)
	}
	if in.HTTP != nil {
		const prefix string = ",\"http\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.HTTP).MarshalEasyJSON(out)
	}
	if in.Artifactory != nil {
		const prefix string = ",\"artifactory\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Artifactory).MarshalEasyJSON(out)
	}
	if in.HDFS != nil {
		const prefix string = ",\"hdfs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.HDFS).MarshalEasyJSON(out)
	}
	if in.Raw != nil {
		const prefix string = ",\"raw\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Raw).MarshalEasyJSON(out)
	}
	if in.OSS != nil {
		const prefix string = ",\"oss\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.OSS).MarshalEasyJSON(out)
	}
	if in.GCS != nil {
		const prefix string = ",\"gcs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.GCS).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArtifactLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha167(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArtifactLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha167(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArtifactLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha167(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArtifactLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha167(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha168(in *jlexer.Lexer, out *Artifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "mode":
			if in.IsNull() {
				in.Skip()
				out.Mode = nil
			} else {
				if out.Mode == nil {
					out.Mode = new(int32)
				}
				*out.Mode = int32(in.Int32())
			}
		case "from":
			out.From = string(in.String())
		case "globalName":
			out.GlobalName = string(in.String())
		case "archive":
			if in.IsNull() {
				in.Skip()
				out.Archive = nil
			} else {
				if out.Archive == nil {
					out.Archive = new(ArchiveStrategy)
				}
				(*out.Archive).UnmarshalEasyJSON(in)
			}
		case "optional":
			out.Optional = bool(in.Bool())
		case "subPath":
			out.SubPath = string(in.String())
		case "recurseMode":
			out.RecurseMode = bool(in.Bool())
		case "archiveLogs":
			if in.IsNull() {
				in.Skip()
				out.ArchiveLogs = nil
			} else {
				if out.ArchiveLogs == nil {
					out.ArchiveLogs = new(bool)
				}
				*out.ArchiveLogs = bool(in.Bool())
			}
		case "s3":
			if in.IsNull() {
				in.Skip()
				out.S3 = nil
			} else {
				if out.S3 == nil {
					out.S3 = new(S3Artifact)
				}
				(*out.S3).UnmarshalEasyJSON(in)
			}
		case "git":
			if in.IsNull() {
				in.Skip()
				out.Git = nil
			} else {
				if out.Git == nil {
					out.Git = new(GitArtifact)
				}
				(*out.Git).UnmarshalEasyJSON(in)
			}
		case "http":
			if in.IsNull() {
				in.Skip()
				out.HTTP = nil
			} else {
				if out.HTTP == nil {
					out.HTTP = new(HTTPArtifact)
				}
				(*out.HTTP).UnmarshalEasyJSON(in)
			}
		case "artifactory":
			if in.IsNull() {
				in.Skip()
				out.Artifactory = nil
			} else {
				if out.Artifactory == nil {
					out.Artifactory = new(ArtifactoryArtifact)
				}
				(*out.Artifactory).UnmarshalEasyJSON(in)
			}
		case "hdfs":
			if in.IsNull() {
				in.Skip()
				out.HDFS = nil
			} else {
				if out.HDFS == nil {
					out.HDFS = new(HDFSArtifact)
				}
				(*out.HDFS).UnmarshalEasyJSON(in)
			}
		case "raw":
			if in.IsNull() {
				in.Skip()
				out.Raw = nil
			} else {
				if out.Raw == nil {
					out.Raw = new(RawArtifact)
				}
				(*out.Raw).UnmarshalEasyJSON(in)
			}
		case "oss":
			if in.IsNull() {
				in.Skip()
				out.OSS = nil
			} else {
				if out.OSS == nil {
					out.OSS = new(OSSArtifact)
				}
				(*out.OSS).UnmarshalEasyJSON(in)
			}
		case "gcs":
			if in.IsNull() {
				in.Skip()
				out.GCS = nil
			} else {
				if out.GCS == nil {
					out.GCS = new(GCSArtifact)
				}
				(*out.GCS).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha168(out *jwriter.Writer, in Artifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Path != "" {
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	if in.Mode != nil {
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.Int32(int32(*in.Mode))
	}
	if in.From != "" {
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	if in.GlobalName != "" {
		const prefix string = ",\"globalName\":"
		out.RawString(prefix)
		out.String(string(in.GlobalName))
	}
	if in.Archive != nil {
		const prefix string = ",\"archive\":"
		out.RawString(prefix)
		(*in.Archive).MarshalEasyJSON(out)
	}
	if in.Optional {
		const prefix string = ",\"optional\":"
		out.RawString(prefix)
		out.Bool(bool(in.Optional))
	}
	if in.SubPath != "" {
		const prefix string = ",\"subPath\":"
		out.RawString(prefix)
		out.String(string(in.SubPath))
	}
	if in.RecurseMode {
		const prefix string = ",\"recurseMode\":"
		out.RawString(prefix)
		out.Bool(bool(in.RecurseMode))
	}
	if in.ArchiveLogs != nil {
		const prefix string = ",\"archiveLogs\":"
		out.RawString(prefix)
		out.Bool(bool(*in.ArchiveLogs))
	}
	if in.S3 != nil {
		const prefix string = ",\"s3\":"
		out.RawString(prefix)
		(*in.S3).MarshalEasyJSON(out)
	}
	if in.Git != nil {
		const prefix string = ",\"git\":"
		out.RawString(prefix)
		(*in.Git).MarshalEasyJSON(out)
	}
	if in.HTTP != nil {
		const prefix string = ",\"http\":"
		out.RawString(prefix)
		(*in.HTTP).MarshalEasyJSON(out)
	}
	if in.Artifactory != nil {
		const prefix string = ",\"artifactory\":"
		out.RawString(prefix)
		(*in.Artifactory).MarshalEasyJSON(out)
	}
	if in.HDFS != nil {
		const prefix string = ",\"hdfs\":"
		out.RawString(prefix)
		(*in.HDFS).MarshalEasyJSON(out)
	}
	if in.Raw != nil {
		const prefix string = ",\"raw\":"
		out.RawString(prefix)
		(*in.Raw).MarshalEasyJSON(out)
	}
	if in.OSS != nil {
		const prefix string = ",\"oss\":"
		out.RawString(prefix)
		(*in.OSS).MarshalEasyJSON(out)
	}
	if in.GCS != nil {
		const prefix string = ",\"gcs\":"
		out.RawString(prefix)
		(*in.GCS).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Artifact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha168(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Artifact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha168(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Artifact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha168(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Artifact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha168(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha169(in *jlexer.Lexer, out *Arguments) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]Parameter, 0, 0)
					} else {
						out.Parameters = []Parameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v333 Parameter
					(v333).UnmarshalEasyJSON(in)
					out.Parameters = append(out.Parameters, v333)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "artifacts":
			if in.IsNull() {
				in.Skip()
				out.Artifacts = nil
			} else {
				in.Delim('[')
				if out.Artifacts == nil {
					if !in.IsDelim(']') {
						out.Artifacts = make(Artifacts, 0, 0)
					} else {
						out.Artifacts = Artifacts{}
					}
				} else {
					out.Artifacts = (out.Artifacts)[:0]
				}
				for !in.IsDelim(']') {
					var v334 Artifact
					(v334).UnmarshalEasyJSON(in)
					out.Artifacts = append(out.Artifacts, v334)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha169(out *jwriter.Writer, in Arguments) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Parameters) != 0 {
		const prefix string = ",\"parameters\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v335, v336 := range in.Parameters {
				if v335 > 0 {
					out.RawByte(',')
				}
				(v336).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Artifacts) != 0 {
		const prefix string = ",\"artifacts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v337, v338 := range in.Artifacts {
				if v337 > 0 {
					out.RawByte(',')
				}
				(v338).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Arguments) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha169(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Arguments) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha169(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Arguments) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha169(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Arguments) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha169(l, v)
}
func easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha170(in *jlexer.Lexer, out *ArchiveStrategy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tar":
			if in.IsNull() {
				in.Skip()
				out.Tar = nil
			} else {
				if out.Tar == nil {
					out.Tar = new(TarStrategy)
				}
				(*out.Tar).UnmarshalEasyJSON(in)
			}
		case "none":
			if in.IsNull() {
				in.Skip()
				out.None = nil
			} else {
				if out.None == nil {
					out.None = new(NoneStrategy)
				}
				(*out.None).UnmarshalEasyJSON(in)
			}
		case "zip":
			if in.IsNull() {
				in.Skip()
				out.Zip = nil
			} else {
				if out.Zip == nil {
					out.Zip = new(ZipStrategy)
				}
				(*out.Zip).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha170(out *jwriter.Writer, in ArchiveStrategy) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Tar != nil {
		const prefix string = ",\"tar\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Tar).MarshalEasyJSON(out)
	}
	if in.None != nil {
		const prefix string = ",\"none\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.None).MarshalEasyJSON(out)
	}
	if in.Zip != nil {
		const prefix string = ",\"zip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Zip).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ArchiveStrategy) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha170(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ArchiveStrategy) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson147b50d1EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha170(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ArchiveStrategy) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha170(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ArchiveStrategy) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson147b50d1DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha170(l, v)
}
