// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	_v11 "k8s.io/api/core/v1"
	_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(in *jlexer.Lexer, out *WorkflowEventBindingSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event":
			(out.Event).UnmarshalEasyJSON(in)
		case "submit":
			if in.IsNull() {
				in.Skip()
				out.Submit = nil
			} else {
				if out.Submit == nil {
					out.Submit = new(Submit)
				}
				(*out.Submit).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(out *jwriter.Writer, in WorkflowEventBindingSpec) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix[1:])
		(in.Event).MarshalEasyJSON(out)
	}
	if in.Submit != nil {
		const prefix string = ",\"submit\":"
		out.RawString(prefix)
		(*in.Submit).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkflowEventBindingSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkflowEventBindingSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkflowEventBindingSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkflowEventBindingSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(l, v)
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(in *jlexer.Lexer, out *WorkflowEventBindingList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			easyjsonDc809a28DecodeK8sIoApimachineryPkgApisMetaV1(in, &out.ListMeta)
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]WorkflowEventBinding, 0, 0)
					} else {
						out.Items = []WorkflowEventBinding{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 WorkflowEventBinding
					(v1).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "kind":
			out.Kind = string(in.String())
		case "apiVersion":
			out.APIVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(out *jwriter.Writer, in WorkflowEventBindingList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		easyjsonDc809a28EncodeK8sIoApimachineryPkgApisMetaV1(out, in.ListMeta)
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		out.RawString(prefix)
		out.String(string(in.APIVersion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkflowEventBindingList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkflowEventBindingList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkflowEventBindingList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkflowEventBindingList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(l, v)
}
func easyjsonDc809a28DecodeK8sIoApimachineryPkgApisMetaV1(in *jlexer.Lexer, out *_v1.ListMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "selfLink":
			out.SelfLink = string(in.String())
		case "resourceVersion":
			out.ResourceVersion = string(in.String())
		case "continue":
			out.Continue = string(in.String())
		case "remainingItemCount":
			if in.IsNull() {
				in.Skip()
				out.RemainingItemCount = nil
			} else {
				if out.RemainingItemCount == nil {
					out.RemainingItemCount = new(int64)
				}
				*out.RemainingItemCount = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeK8sIoApimachineryPkgApisMetaV1(out *jwriter.Writer, in _v1.ListMeta) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SelfLink != "" {
		const prefix string = ",\"selfLink\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.SelfLink))
	}
	if in.ResourceVersion != "" {
		const prefix string = ",\"resourceVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResourceVersion))
	}
	if in.Continue != "" {
		const prefix string = ",\"continue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Continue))
	}
	if in.RemainingItemCount != nil {
		const prefix string = ",\"remainingItemCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.RemainingItemCount))
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(in *jlexer.Lexer, out *WorkflowEventBinding) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			easyjsonDc809a28DecodeK8sIoApimachineryPkgApisMetaV11(in, &out.ObjectMeta)
		case "spec":
			(out.Spec).UnmarshalEasyJSON(in)
		case "kind":
			out.Kind = string(in.String())
		case "apiVersion":
			out.APIVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(out *jwriter.Writer, in WorkflowEventBinding) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		easyjsonDc809a28EncodeK8sIoApimachineryPkgApisMetaV11(out, in.ObjectMeta)
	}
	{
		const prefix string = ",\"spec\":"
		out.RawString(prefix)
		(in.Spec).MarshalEasyJSON(out)
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		out.RawString(prefix)
		out.String(string(in.APIVersion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkflowEventBinding) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkflowEventBinding) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkflowEventBinding) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkflowEventBinding) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(l, v)
}
func easyjsonDc809a28DecodeK8sIoApimachineryPkgApisMetaV11(in *jlexer.Lexer, out *_v1.ObjectMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "generateName":
			out.GenerateName = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		case "selfLink":
			out.SelfLink = string(in.String())
		case "uid":
			out.UID = types.UID(in.String())
		case "resourceVersion":
			out.ResourceVersion = string(in.String())
		case "generation":
			out.Generation = int64(in.Int64())
		case "creationTimestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreationTimestamp).UnmarshalJSON(data))
			}
		case "deletionTimestamp":
			if in.IsNull() {
				in.Skip()
				out.DeletionTimestamp = nil
			} else {
				if out.DeletionTimestamp == nil {
					out.DeletionTimestamp = new(_v1.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletionTimestamp).UnmarshalJSON(data))
				}
			}
		case "deletionGracePeriodSeconds":
			if in.IsNull() {
				in.Skip()
				out.DeletionGracePeriodSeconds = nil
			} else {
				if out.DeletionGracePeriodSeconds == nil {
					out.DeletionGracePeriodSeconds = new(int64)
				}
				*out.DeletionGracePeriodSeconds = int64(in.Int64())
			}
		case "labels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Labels = make(map[string]string)
				} else {
					out.Labels = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 string
					v4 = string(in.String())
					(out.Labels)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Annotations = make(map[string]string)
				} else {
					out.Annotations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 string
					v5 = string(in.String())
					(out.Annotations)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ownerReferences":
			if in.IsNull() {
				in.Skip()
				out.OwnerReferences = nil
			} else {
				in.Delim('[')
				if out.OwnerReferences == nil {
					if !in.IsDelim(']') {
						out.OwnerReferences = make([]_v1.OwnerReference, 0, 0)
					} else {
						out.OwnerReferences = []_v1.OwnerReference{}
					}
				} else {
					out.OwnerReferences = (out.OwnerReferences)[:0]
				}
				for !in.IsDelim(']') {
					var v6 _v1.OwnerReference
					easyjsonDc809a28DecodeK8sIoApimachineryPkgApisMetaV12(in, &v6)
					out.OwnerReferences = append(out.OwnerReferences, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "finalizers":
			if in.IsNull() {
				in.Skip()
				out.Finalizers = nil
			} else {
				in.Delim('[')
				if out.Finalizers == nil {
					if !in.IsDelim(']') {
						out.Finalizers = make([]string, 0, 4)
					} else {
						out.Finalizers = []string{}
					}
				} else {
					out.Finalizers = (out.Finalizers)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Finalizers = append(out.Finalizers, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "clusterName":
			out.ClusterName = string(in.String())
		case "managedFields":
			if in.IsNull() {
				in.Skip()
				out.ManagedFields = nil
			} else {
				in.Delim('[')
				if out.ManagedFields == nil {
					if !in.IsDelim(']') {
						out.ManagedFields = make([]_v1.ManagedFieldsEntry, 0, 0)
					} else {
						out.ManagedFields = []_v1.ManagedFieldsEntry{}
					}
				} else {
					out.ManagedFields = (out.ManagedFields)[:0]
				}
				for !in.IsDelim(']') {
					var v8 _v1.ManagedFieldsEntry
					easyjsonDc809a28DecodeK8sIoApimachineryPkgApisMetaV13(in, &v8)
					out.ManagedFields = append(out.ManagedFields, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeK8sIoApimachineryPkgApisMetaV11(out *jwriter.Writer, in _v1.ObjectMeta) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.GenerateName != "" {
		const prefix string = ",\"generateName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GenerateName))
	}
	if in.Namespace != "" {
		const prefix string = ",\"namespace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Namespace))
	}
	if in.SelfLink != "" {
		const prefix string = ",\"selfLink\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SelfLink))
	}
	if in.UID != "" {
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UID))
	}
	if in.ResourceVersion != "" {
		const prefix string = ",\"resourceVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResourceVersion))
	}
	if in.Generation != 0 {
		const prefix string = ",\"generation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Generation))
	}
	if true {
		const prefix string = ",\"creationTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreationTimestamp).MarshalJSON())
	}
	if in.DeletionTimestamp != nil {
		const prefix string = ",\"deletionTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.DeletionTimestamp).MarshalJSON())
	}
	if in.DeletionGracePeriodSeconds != nil {
		const prefix string = ",\"deletionGracePeriodSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.DeletionGracePeriodSeconds))
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.Labels {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				out.String(string(v9Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.Annotations {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				out.String(string(v10Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.OwnerReferences) != 0 {
		const prefix string = ",\"ownerReferences\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v11, v12 := range in.OwnerReferences {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjsonDc809a28EncodeK8sIoApimachineryPkgApisMetaV12(out, v12)
			}
			out.RawByte(']')
		}
	}
	if len(in.Finalizers) != 0 {
		const prefix string = ",\"finalizers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v13, v14 := range in.Finalizers {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if in.ClusterName != "" {
		const prefix string = ",\"clusterName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClusterName))
	}
	if len(in.ManagedFields) != 0 {
		const prefix string = ",\"managedFields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.ManagedFields {
				if v15 > 0 {
					out.RawByte(',')
				}
				easyjsonDc809a28EncodeK8sIoApimachineryPkgApisMetaV13(out, v16)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeK8sIoApimachineryPkgApisMetaV13(in *jlexer.Lexer, out *_v1.ManagedFieldsEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "manager":
			out.Manager = string(in.String())
		case "operation":
			out.Operation = _v1.ManagedFieldsOperationType(in.String())
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "time":
			if in.IsNull() {
				in.Skip()
				out.Time = nil
			} else {
				if out.Time == nil {
					out.Time = new(_v1.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Time).UnmarshalJSON(data))
				}
			}
		case "fieldsType":
			out.FieldsType = string(in.String())
		case "fieldsV1":
			if in.IsNull() {
				in.Skip()
				out.FieldsV1 = nil
			} else {
				if out.FieldsV1 == nil {
					out.FieldsV1 = new(_v1.FieldsV1)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FieldsV1).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeK8sIoApimachineryPkgApisMetaV13(out *jwriter.Writer, in _v1.ManagedFieldsEntry) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Manager != "" {
		const prefix string = ",\"manager\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Manager))
	}
	if in.Operation != "" {
		const prefix string = ",\"operation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Operation))
	}
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.APIVersion))
	}
	if in.Time != nil {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Time).MarshalJSON())
	}
	if in.FieldsType != "" {
		const prefix string = ",\"fieldsType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FieldsType))
	}
	if in.FieldsV1 != nil {
		const prefix string = ",\"fieldsV1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.FieldsV1).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeK8sIoApimachineryPkgApisMetaV12(in *jlexer.Lexer, out *_v1.OwnerReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "uid":
			out.UID = types.UID(in.String())
		case "controller":
			if in.IsNull() {
				in.Skip()
				out.Controller = nil
			} else {
				if out.Controller == nil {
					out.Controller = new(bool)
				}
				*out.Controller = bool(in.Bool())
			}
		case "blockOwnerDeletion":
			if in.IsNull() {
				in.Skip()
				out.BlockOwnerDeletion = nil
			} else {
				if out.BlockOwnerDeletion == nil {
					out.BlockOwnerDeletion = new(bool)
				}
				*out.BlockOwnerDeletion = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeK8sIoApimachineryPkgApisMetaV12(out *jwriter.Writer, in _v1.OwnerReference) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apiVersion\":"
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		out.String(string(in.UID))
	}
	if in.Controller != nil {
		const prefix string = ",\"controller\":"
		out.RawString(prefix)
		out.Bool(bool(*in.Controller))
	}
	if in.BlockOwnerDeletion != nil {
		const prefix string = ",\"blockOwnerDeletion\":"
		out.RawString(prefix)
		out.Bool(bool(*in.BlockOwnerDeletion))
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha13(in *jlexer.Lexer, out *Submit) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workflowTemplateRef":
			easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha14(in, &out.WorkflowTemplateRef)
		case "arguments":
			if in.IsNull() {
				in.Skip()
				out.Arguments = nil
			} else {
				if out.Arguments == nil {
					out.Arguments = new(Arguments)
				}
				easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha15(in, out.Arguments)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha13(out *jwriter.Writer, in Submit) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"workflowTemplateRef\":"
		out.RawString(prefix[1:])
		easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha14(out, in.WorkflowTemplateRef)
	}
	if in.Arguments != nil {
		const prefix string = ",\"arguments\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha15(out, *in.Arguments)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Submit) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Submit) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Submit) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Submit) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha13(l, v)
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha15(in *jlexer.Lexer, out *Arguments) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "parameters":
			if in.IsNull() {
				in.Skip()
				out.Parameters = nil
			} else {
				in.Delim('[')
				if out.Parameters == nil {
					if !in.IsDelim(']') {
						out.Parameters = make([]Parameter, 0, 1)
					} else {
						out.Parameters = []Parameter{}
					}
				} else {
					out.Parameters = (out.Parameters)[:0]
				}
				for !in.IsDelim(']') {
					var v17 Parameter
					easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha16(in, &v17)
					out.Parameters = append(out.Parameters, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "artifacts":
			if in.IsNull() {
				in.Skip()
				out.Artifacts = nil
			} else {
				in.Delim('[')
				if out.Artifacts == nil {
					if !in.IsDelim(']') {
						out.Artifacts = make(Artifacts, 0, 0)
					} else {
						out.Artifacts = Artifacts{}
					}
				} else {
					out.Artifacts = (out.Artifacts)[:0]
				}
				for !in.IsDelim(']') {
					var v18 Artifact
					easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha17(in, &v18)
					out.Artifacts = append(out.Artifacts, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha15(out *jwriter.Writer, in Arguments) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Parameters) != 0 {
		const prefix string = ",\"parameters\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v19, v20 := range in.Parameters {
				if v19 > 0 {
					out.RawByte(',')
				}
				easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha16(out, v20)
			}
			out.RawByte(']')
		}
	}
	if len(in.Artifacts) != 0 {
		const prefix string = ",\"artifacts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v21, v22 := range in.Artifacts {
				if v21 > 0 {
					out.RawByte(',')
				}
				easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha17(out, v22)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha17(in *jlexer.Lexer, out *Artifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "mode":
			if in.IsNull() {
				in.Skip()
				out.Mode = nil
			} else {
				if out.Mode == nil {
					out.Mode = new(int32)
				}
				*out.Mode = int32(in.Int32())
			}
		case "from":
			out.From = string(in.String())
		case "globalName":
			out.GlobalName = string(in.String())
		case "archive":
			if in.IsNull() {
				in.Skip()
				out.Archive = nil
			} else {
				if out.Archive == nil {
					out.Archive = new(ArchiveStrategy)
				}
				easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha18(in, out.Archive)
			}
		case "optional":
			out.Optional = bool(in.Bool())
		case "subPath":
			out.SubPath = string(in.String())
		case "recurseMode":
			out.RecurseMode = bool(in.Bool())
		case "archiveLogs":
			if in.IsNull() {
				in.Skip()
				out.ArchiveLogs = nil
			} else {
				if out.ArchiveLogs == nil {
					out.ArchiveLogs = new(bool)
				}
				*out.ArchiveLogs = bool(in.Bool())
			}
		case "s3":
			if in.IsNull() {
				in.Skip()
				out.S3 = nil
			} else {
				if out.S3 == nil {
					out.S3 = new(S3Artifact)
				}
				easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha19(in, out.S3)
			}
		case "git":
			if in.IsNull() {
				in.Skip()
				out.Git = nil
			} else {
				if out.Git == nil {
					out.Git = new(GitArtifact)
				}
				easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha110(in, out.Git)
			}
		case "http":
			if in.IsNull() {
				in.Skip()
				out.HTTP = nil
			} else {
				if out.HTTP == nil {
					out.HTTP = new(HTTPArtifact)
				}
				easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha111(in, out.HTTP)
			}
		case "artifactory":
			if in.IsNull() {
				in.Skip()
				out.Artifactory = nil
			} else {
				if out.Artifactory == nil {
					out.Artifactory = new(ArtifactoryArtifact)
				}
				easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha112(in, out.Artifactory)
			}
		case "hdfs":
			if in.IsNull() {
				in.Skip()
				out.HDFS = nil
			} else {
				if out.HDFS == nil {
					out.HDFS = new(HDFSArtifact)
				}
				easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha113(in, out.HDFS)
			}
		case "raw":
			if in.IsNull() {
				in.Skip()
				out.Raw = nil
			} else {
				if out.Raw == nil {
					out.Raw = new(RawArtifact)
				}
				easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha114(in, out.Raw)
			}
		case "oss":
			if in.IsNull() {
				in.Skip()
				out.OSS = nil
			} else {
				if out.OSS == nil {
					out.OSS = new(OSSArtifact)
				}
				easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha115(in, out.OSS)
			}
		case "gcs":
			if in.IsNull() {
				in.Skip()
				out.GCS = nil
			} else {
				if out.GCS == nil {
					out.GCS = new(GCSArtifact)
				}
				easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha116(in, out.GCS)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha17(out *jwriter.Writer, in Artifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Path != "" {
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	if in.Mode != nil {
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.Int32(int32(*in.Mode))
	}
	if in.From != "" {
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	if in.GlobalName != "" {
		const prefix string = ",\"globalName\":"
		out.RawString(prefix)
		out.String(string(in.GlobalName))
	}
	if in.Archive != nil {
		const prefix string = ",\"archive\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha18(out, *in.Archive)
	}
	if in.Optional {
		const prefix string = ",\"optional\":"
		out.RawString(prefix)
		out.Bool(bool(in.Optional))
	}
	if in.SubPath != "" {
		const prefix string = ",\"subPath\":"
		out.RawString(prefix)
		out.String(string(in.SubPath))
	}
	if in.RecurseMode {
		const prefix string = ",\"recurseMode\":"
		out.RawString(prefix)
		out.Bool(bool(in.RecurseMode))
	}
	if in.ArchiveLogs != nil {
		const prefix string = ",\"archiveLogs\":"
		out.RawString(prefix)
		out.Bool(bool(*in.ArchiveLogs))
	}
	if in.S3 != nil {
		const prefix string = ",\"s3\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha19(out, *in.S3)
	}
	if in.Git != nil {
		const prefix string = ",\"git\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha110(out, *in.Git)
	}
	if in.HTTP != nil {
		const prefix string = ",\"http\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha111(out, *in.HTTP)
	}
	if in.Artifactory != nil {
		const prefix string = ",\"artifactory\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha112(out, *in.Artifactory)
	}
	if in.HDFS != nil {
		const prefix string = ",\"hdfs\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha113(out, *in.HDFS)
	}
	if in.Raw != nil {
		const prefix string = ",\"raw\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha114(out, *in.Raw)
	}
	if in.OSS != nil {
		const prefix string = ",\"oss\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha115(out, *in.OSS)
	}
	if in.GCS != nil {
		const prefix string = ",\"gcs\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha116(out, *in.GCS)
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha116(in *jlexer.Lexer, out *GCSArtifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "bucket":
			out.Bucket = string(in.String())
		case "serviceAccountKeySecret":
			easyjsonDc809a28DecodeK8sIoApiCoreV1(in, &out.ServiceAccountKeySecret)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha116(out *jwriter.Writer, in GCSArtifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"bucket\":"
		out.RawString(prefix)
		out.String(string(in.Bucket))
	}
	if true {
		const prefix string = ",\"serviceAccountKeySecret\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeK8sIoApiCoreV1(out, in.ServiceAccountKeySecret)
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeK8sIoApiCoreV1(in *jlexer.Lexer, out *_v11.SecretKeySelector) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "optional":
			if in.IsNull() {
				in.Skip()
				out.Optional = nil
			} else {
				if out.Optional == nil {
					out.Optional = new(bool)
				}
				*out.Optional = bool(in.Bool())
			}
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeK8sIoApiCoreV1(out *jwriter.Writer, in _v11.SecretKeySelector) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	if in.Optional != nil {
		const prefix string = ",\"optional\":"
		out.RawString(prefix)
		out.Bool(bool(*in.Optional))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha115(in *jlexer.Lexer, out *OSSArtifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "endpoint":
			out.Endpoint = string(in.String())
		case "bucket":
			out.Bucket = string(in.String())
		case "accessKeySecret":
			easyjsonDc809a28DecodeK8sIoApiCoreV1(in, &out.AccessKeySecret)
		case "secretKeySecret":
			easyjsonDc809a28DecodeK8sIoApiCoreV1(in, &out.SecretKeySecret)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha115(out *jwriter.Writer, in OSSArtifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"endpoint\":"
		out.RawString(prefix)
		out.String(string(in.Endpoint))
	}
	{
		const prefix string = ",\"bucket\":"
		out.RawString(prefix)
		out.String(string(in.Bucket))
	}
	{
		const prefix string = ",\"accessKeySecret\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeK8sIoApiCoreV1(out, in.AccessKeySecret)
	}
	{
		const prefix string = ",\"secretKeySecret\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeK8sIoApiCoreV1(out, in.SecretKeySecret)
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha114(in *jlexer.Lexer, out *RawArtifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			out.Data = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha114(out *jwriter.Writer, in RawArtifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		out.String(string(in.Data))
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha113(in *jlexer.Lexer, out *HDFSArtifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "force":
			out.Force = bool(in.Bool())
		case "addresses":
			if in.IsNull() {
				in.Skip()
				out.Addresses = nil
			} else {
				in.Delim('[')
				if out.Addresses == nil {
					if !in.IsDelim(']') {
						out.Addresses = make([]string, 0, 4)
					} else {
						out.Addresses = []string{}
					}
				} else {
					out.Addresses = (out.Addresses)[:0]
				}
				for !in.IsDelim(']') {
					var v23 string
					v23 = string(in.String())
					out.Addresses = append(out.Addresses, v23)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hdfsUser":
			out.HDFSUser = string(in.String())
		case "krbCCacheSecret":
			if in.IsNull() {
				in.Skip()
				out.KrbCCacheSecret = nil
			} else {
				if out.KrbCCacheSecret == nil {
					out.KrbCCacheSecret = new(_v11.SecretKeySelector)
				}
				easyjsonDc809a28DecodeK8sIoApiCoreV1(in, out.KrbCCacheSecret)
			}
		case "krbKeytabSecret":
			if in.IsNull() {
				in.Skip()
				out.KrbKeytabSecret = nil
			} else {
				if out.KrbKeytabSecret == nil {
					out.KrbKeytabSecret = new(_v11.SecretKeySelector)
				}
				easyjsonDc809a28DecodeK8sIoApiCoreV1(in, out.KrbKeytabSecret)
			}
		case "krbUsername":
			out.KrbUsername = string(in.String())
		case "krbRealm":
			out.KrbRealm = string(in.String())
		case "krbConfigConfigMap":
			if in.IsNull() {
				in.Skip()
				out.KrbConfigConfigMap = nil
			} else {
				if out.KrbConfigConfigMap == nil {
					out.KrbConfigConfigMap = new(_v11.ConfigMapKeySelector)
				}
				easyjsonDc809a28DecodeK8sIoApiCoreV11(in, out.KrbConfigConfigMap)
			}
		case "krbServicePrincipalName":
			out.KrbServicePrincipalName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha113(out *jwriter.Writer, in HDFSArtifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	if in.Force {
		const prefix string = ",\"force\":"
		out.RawString(prefix)
		out.Bool(bool(in.Force))
	}
	{
		const prefix string = ",\"addresses\":"
		out.RawString(prefix)
		if in.Addresses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.Addresses {
				if v24 > 0 {
					out.RawByte(',')
				}
				out.String(string(v25))
			}
			out.RawByte(']')
		}
	}
	if in.HDFSUser != "" {
		const prefix string = ",\"hdfsUser\":"
		out.RawString(prefix)
		out.String(string(in.HDFSUser))
	}
	if in.KrbCCacheSecret != nil {
		const prefix string = ",\"krbCCacheSecret\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeK8sIoApiCoreV1(out, *in.KrbCCacheSecret)
	}
	if in.KrbKeytabSecret != nil {
		const prefix string = ",\"krbKeytabSecret\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeK8sIoApiCoreV1(out, *in.KrbKeytabSecret)
	}
	if in.KrbUsername != "" {
		const prefix string = ",\"krbUsername\":"
		out.RawString(prefix)
		out.String(string(in.KrbUsername))
	}
	if in.KrbRealm != "" {
		const prefix string = ",\"krbRealm\":"
		out.RawString(prefix)
		out.String(string(in.KrbRealm))
	}
	if in.KrbConfigConfigMap != nil {
		const prefix string = ",\"krbConfigConfigMap\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeK8sIoApiCoreV11(out, *in.KrbConfigConfigMap)
	}
	if in.KrbServicePrincipalName != "" {
		const prefix string = ",\"krbServicePrincipalName\":"
		out.RawString(prefix)
		out.String(string(in.KrbServicePrincipalName))
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeK8sIoApiCoreV11(in *jlexer.Lexer, out *_v11.ConfigMapKeySelector) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "optional":
			if in.IsNull() {
				in.Skip()
				out.Optional = nil
			} else {
				if out.Optional == nil {
					out.Optional = new(bool)
				}
				*out.Optional = bool(in.Bool())
			}
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeK8sIoApiCoreV11(out *jwriter.Writer, in _v11.ConfigMapKeySelector) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	if in.Optional != nil {
		const prefix string = ",\"optional\":"
		out.RawString(prefix)
		out.Bool(bool(*in.Optional))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha112(in *jlexer.Lexer, out *ArtifactoryArtifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "usernameSecret":
			if in.IsNull() {
				in.Skip()
				out.UsernameSecret = nil
			} else {
				if out.UsernameSecret == nil {
					out.UsernameSecret = new(_v11.SecretKeySelector)
				}
				easyjsonDc809a28DecodeK8sIoApiCoreV1(in, out.UsernameSecret)
			}
		case "passwordSecret":
			if in.IsNull() {
				in.Skip()
				out.PasswordSecret = nil
			} else {
				if out.PasswordSecret == nil {
					out.PasswordSecret = new(_v11.SecretKeySelector)
				}
				easyjsonDc809a28DecodeK8sIoApiCoreV1(in, out.PasswordSecret)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha112(out *jwriter.Writer, in ArtifactoryArtifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	if in.UsernameSecret != nil {
		const prefix string = ",\"usernameSecret\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeK8sIoApiCoreV1(out, *in.UsernameSecret)
	}
	if in.PasswordSecret != nil {
		const prefix string = ",\"passwordSecret\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeK8sIoApiCoreV1(out, *in.PasswordSecret)
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha111(in *jlexer.Lexer, out *HTTPArtifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "url":
			out.URL = string(in.String())
		case "headers":
			if in.IsNull() {
				in.Skip()
				out.Headers = nil
			} else {
				in.Delim('[')
				if out.Headers == nil {
					if !in.IsDelim(']') {
						out.Headers = make([]Header, 0, 2)
					} else {
						out.Headers = []Header{}
					}
				} else {
					out.Headers = (out.Headers)[:0]
				}
				for !in.IsDelim(']') {
					var v26 Header
					easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha117(in, &v26)
					out.Headers = append(out.Headers, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha111(out *jwriter.Writer, in HTTPArtifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix[1:])
		out.String(string(in.URL))
	}
	if len(in.Headers) != 0 {
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v27, v28 := range in.Headers {
				if v27 > 0 {
					out.RawByte(',')
				}
				easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha117(out, v28)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha117(in *jlexer.Lexer, out *Header) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha117(out *jwriter.Writer, in Header) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha110(in *jlexer.Lexer, out *GitArtifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "repo":
			out.Repo = string(in.String())
		case "revision":
			out.Revision = string(in.String())
		case "depth":
			if in.IsNull() {
				in.Skip()
				out.Depth = nil
			} else {
				if out.Depth == nil {
					out.Depth = new(uint64)
				}
				*out.Depth = uint64(in.Uint64())
			}
		case "fetch":
			if in.IsNull() {
				in.Skip()
				out.Fetch = nil
			} else {
				in.Delim('[')
				if out.Fetch == nil {
					if !in.IsDelim(']') {
						out.Fetch = make([]string, 0, 4)
					} else {
						out.Fetch = []string{}
					}
				} else {
					out.Fetch = (out.Fetch)[:0]
				}
				for !in.IsDelim(']') {
					var v29 string
					v29 = string(in.String())
					out.Fetch = append(out.Fetch, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "usernameSecret":
			if in.IsNull() {
				in.Skip()
				out.UsernameSecret = nil
			} else {
				if out.UsernameSecret == nil {
					out.UsernameSecret = new(_v11.SecretKeySelector)
				}
				easyjsonDc809a28DecodeK8sIoApiCoreV1(in, out.UsernameSecret)
			}
		case "passwordSecret":
			if in.IsNull() {
				in.Skip()
				out.PasswordSecret = nil
			} else {
				if out.PasswordSecret == nil {
					out.PasswordSecret = new(_v11.SecretKeySelector)
				}
				easyjsonDc809a28DecodeK8sIoApiCoreV1(in, out.PasswordSecret)
			}
		case "sshPrivateKeySecret":
			if in.IsNull() {
				in.Skip()
				out.SSHPrivateKeySecret = nil
			} else {
				if out.SSHPrivateKeySecret == nil {
					out.SSHPrivateKeySecret = new(_v11.SecretKeySelector)
				}
				easyjsonDc809a28DecodeK8sIoApiCoreV1(in, out.SSHPrivateKeySecret)
			}
		case "insecureIgnoreHostKey":
			out.InsecureIgnoreHostKey = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha110(out *jwriter.Writer, in GitArtifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"repo\":"
		out.RawString(prefix[1:])
		out.String(string(in.Repo))
	}
	if in.Revision != "" {
		const prefix string = ",\"revision\":"
		out.RawString(prefix)
		out.String(string(in.Revision))
	}
	if in.Depth != nil {
		const prefix string = ",\"depth\":"
		out.RawString(prefix)
		out.Uint64(uint64(*in.Depth))
	}
	if len(in.Fetch) != 0 {
		const prefix string = ",\"fetch\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v30, v31 := range in.Fetch {
				if v30 > 0 {
					out.RawByte(',')
				}
				out.String(string(v31))
			}
			out.RawByte(']')
		}
	}
	if in.UsernameSecret != nil {
		const prefix string = ",\"usernameSecret\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeK8sIoApiCoreV1(out, *in.UsernameSecret)
	}
	if in.PasswordSecret != nil {
		const prefix string = ",\"passwordSecret\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeK8sIoApiCoreV1(out, *in.PasswordSecret)
	}
	if in.SSHPrivateKeySecret != nil {
		const prefix string = ",\"sshPrivateKeySecret\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeK8sIoApiCoreV1(out, *in.SSHPrivateKeySecret)
	}
	if in.InsecureIgnoreHostKey {
		const prefix string = ",\"insecureIgnoreHostKey\":"
		out.RawString(prefix)
		out.Bool(bool(in.InsecureIgnoreHostKey))
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha19(in *jlexer.Lexer, out *S3Artifact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "endpoint":
			out.Endpoint = string(in.String())
		case "bucket":
			out.Bucket = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "insecure":
			if in.IsNull() {
				in.Skip()
				out.Insecure = nil
			} else {
				if out.Insecure == nil {
					out.Insecure = new(bool)
				}
				*out.Insecure = bool(in.Bool())
			}
		case "accessKeySecret":
			easyjsonDc809a28DecodeK8sIoApiCoreV1(in, &out.AccessKeySecret)
		case "secretKeySecret":
			easyjsonDc809a28DecodeK8sIoApiCoreV1(in, &out.SecretKeySecret)
		case "roleARN":
			out.RoleARN = string(in.String())
		case "useSDKCreds":
			out.UseSDKCreds = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha19(out *jwriter.Writer, in S3Artifact) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"endpoint\":"
		out.RawString(prefix)
		out.String(string(in.Endpoint))
	}
	{
		const prefix string = ",\"bucket\":"
		out.RawString(prefix)
		out.String(string(in.Bucket))
	}
	if in.Region != "" {
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	if in.Insecure != nil {
		const prefix string = ",\"insecure\":"
		out.RawString(prefix)
		out.Bool(bool(*in.Insecure))
	}
	{
		const prefix string = ",\"accessKeySecret\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeK8sIoApiCoreV1(out, in.AccessKeySecret)
	}
	{
		const prefix string = ",\"secretKeySecret\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeK8sIoApiCoreV1(out, in.SecretKeySecret)
	}
	if in.RoleARN != "" {
		const prefix string = ",\"roleARN\":"
		out.RawString(prefix)
		out.String(string(in.RoleARN))
	}
	if in.UseSDKCreds {
		const prefix string = ",\"useSDKCreds\":"
		out.RawString(prefix)
		out.Bool(bool(in.UseSDKCreds))
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha18(in *jlexer.Lexer, out *ArchiveStrategy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "tar":
			if in.IsNull() {
				in.Skip()
				out.Tar = nil
			} else {
				if out.Tar == nil {
					out.Tar = new(TarStrategy)
				}
				easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha118(in, out.Tar)
			}
		case "none":
			if in.IsNull() {
				in.Skip()
				out.None = nil
			} else {
				if out.None == nil {
					out.None = new(NoneStrategy)
				}
				easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha119(in, out.None)
			}
		case "zip":
			if in.IsNull() {
				in.Skip()
				out.Zip = nil
			} else {
				if out.Zip == nil {
					out.Zip = new(ZipStrategy)
				}
				easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha120(in, out.Zip)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha18(out *jwriter.Writer, in ArchiveStrategy) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Tar != nil {
		const prefix string = ",\"tar\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha118(out, *in.Tar)
	}
	if in.None != nil {
		const prefix string = ",\"none\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha119(out, *in.None)
	}
	if in.Zip != nil {
		const prefix string = ",\"zip\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha120(out, *in.Zip)
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha120(in *jlexer.Lexer, out *ZipStrategy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha120(out *jwriter.Writer, in ZipStrategy) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha119(in *jlexer.Lexer, out *NoneStrategy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha119(out *jwriter.Writer, in NoneStrategy) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha118(in *jlexer.Lexer, out *TarStrategy) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "compressionLevel":
			if in.IsNull() {
				in.Skip()
				out.CompressionLevel = nil
			} else {
				if out.CompressionLevel == nil {
					out.CompressionLevel = new(int32)
				}
				*out.CompressionLevel = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha118(out *jwriter.Writer, in TarStrategy) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CompressionLevel != nil {
		const prefix string = ",\"compressionLevel\":"
		first = false
		out.RawString(prefix[1:])
		out.Int32(int32(*in.CompressionLevel))
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha16(in *jlexer.Lexer, out *Parameter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "default":
			if in.IsNull() {
				in.Skip()
				out.Default = nil
			} else {
				if out.Default == nil {
					out.Default = new(Int64OrString)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Default).UnmarshalJSON(data))
				}
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(Int64OrString)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Value).UnmarshalJSON(data))
				}
			}
		case "valueFrom":
			if in.IsNull() {
				in.Skip()
				out.ValueFrom = nil
			} else {
				if out.ValueFrom == nil {
					out.ValueFrom = new(ValueFrom)
				}
				easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha121(in, out.ValueFrom)
			}
		case "globalName":
			out.GlobalName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha16(out *jwriter.Writer, in Parameter) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Default != nil {
		const prefix string = ",\"default\":"
		out.RawString(prefix)
		out.Raw((*in.Default).MarshalJSON())
	}
	if in.Value != nil {
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Raw((*in.Value).MarshalJSON())
	}
	if in.ValueFrom != nil {
		const prefix string = ",\"valueFrom\":"
		out.RawString(prefix)
		easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha121(out, *in.ValueFrom)
	}
	if in.GlobalName != "" {
		const prefix string = ",\"globalName\":"
		out.RawString(prefix)
		out.String(string(in.GlobalName))
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha121(in *jlexer.Lexer, out *ValueFrom) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "jsonPath":
			out.JSONPath = string(in.String())
		case "jqFilter":
			out.JQFilter = string(in.String())
		case "event":
			out.Event = string(in.String())
		case "parameter":
			out.Parameter = string(in.String())
		case "supplied":
			if in.IsNull() {
				in.Skip()
				out.Supplied = nil
			} else {
				if out.Supplied == nil {
					out.Supplied = new(SuppliedValueFrom)
				}
				easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha122(in, out.Supplied)
			}
		case "default":
			if in.IsNull() {
				in.Skip()
				out.Default = nil
			} else {
				if out.Default == nil {
					out.Default = new(Int64OrString)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Default).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha121(out *jwriter.Writer, in ValueFrom) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Path != "" {
		const prefix string = ",\"path\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	if in.JSONPath != "" {
		const prefix string = ",\"jsonPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JSONPath))
	}
	if in.JQFilter != "" {
		const prefix string = ",\"jqFilter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.JQFilter))
	}
	if in.Event != "" {
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Event))
	}
	if in.Parameter != "" {
		const prefix string = ",\"parameter\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Parameter))
	}
	if in.Supplied != nil {
		const prefix string = ",\"supplied\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha122(out, *in.Supplied)
	}
	if in.Default != nil {
		const prefix string = ",\"default\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Default).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha122(in *jlexer.Lexer, out *SuppliedValueFrom) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha122(out *jwriter.Writer, in SuppliedValueFrom) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha14(in *jlexer.Lexer, out *WorkflowTemplateRef) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "clusterScope":
			out.ClusterScope = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha14(out *jwriter.Writer, in WorkflowTemplateRef) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.ClusterScope {
		const prefix string = ",\"clusterScope\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ClusterScope))
	}
	out.RawByte('}')
}
func easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha123(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "selector":
			out.Selector = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha123(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"selector\":"
		out.RawString(prefix[1:])
		out.String(string(in.Selector))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha123(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDc809a28EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha123(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha123(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDc809a28DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha123(l, v)
}
