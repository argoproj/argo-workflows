// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	_v11 "k8s.io/api/core/v1"
	_v1beta1 "k8s.io/api/policy/v1beta1"
	resource "k8s.io/apimachinery/pkg/api/resource"
	_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC6c1f4dcDecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(in *jlexer.Lexer, out *WorkflowTemplateSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "workflowMetadata":
			if in.IsNull() {
				in.Skip()
				out.WorkflowMetadata = nil
			} else {
				if out.WorkflowMetadata == nil {
					out.WorkflowMetadata = new(_v1.ObjectMeta)
				}
				easyjsonC6c1f4dcDecodeK8sIoApimachineryPkgApisMetaV1(in, out.WorkflowMetadata)
			}
		case "templates":
			if in.IsNull() {
				in.Skip()
				out.Templates = nil
			} else {
				in.Delim('[')
				if out.Templates == nil {
					if !in.IsDelim(']') {
						out.Templates = make([]Template, 0, 0)
					} else {
						out.Templates = []Template{}
					}
				} else {
					out.Templates = (out.Templates)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Template
					(v1).UnmarshalEasyJSON(in)
					out.Templates = append(out.Templates, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "entrypoint":
			out.Entrypoint = string(in.String())
		case "arguments":
			(out.Arguments).UnmarshalEasyJSON(in)
		case "serviceAccountName":
			out.ServiceAccountName = string(in.String())
		case "automountServiceAccountToken":
			if in.IsNull() {
				in.Skip()
				out.AutomountServiceAccountToken = nil
			} else {
				if out.AutomountServiceAccountToken == nil {
					out.AutomountServiceAccountToken = new(bool)
				}
				*out.AutomountServiceAccountToken = bool(in.Bool())
			}
		case "executor":
			if in.IsNull() {
				in.Skip()
				out.Executor = nil
			} else {
				if out.Executor == nil {
					out.Executor = new(ExecutorConfig)
				}
				(*out.Executor).UnmarshalEasyJSON(in)
			}
		case "volumes":
			if in.IsNull() {
				in.Skip()
				out.Volumes = nil
			} else {
				in.Delim('[')
				if out.Volumes == nil {
					if !in.IsDelim(']') {
						out.Volumes = make([]_v11.Volume, 0, 0)
					} else {
						out.Volumes = []_v11.Volume{}
					}
				} else {
					out.Volumes = (out.Volumes)[:0]
				}
				for !in.IsDelim(']') {
					var v2 _v11.Volume
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV1(in, &v2)
					out.Volumes = append(out.Volumes, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "volumeClaimTemplates":
			if in.IsNull() {
				in.Skip()
				out.VolumeClaimTemplates = nil
			} else {
				in.Delim('[')
				if out.VolumeClaimTemplates == nil {
					if !in.IsDelim(']') {
						out.VolumeClaimTemplates = make([]_v11.PersistentVolumeClaim, 0, 0)
					} else {
						out.VolumeClaimTemplates = []_v11.PersistentVolumeClaim{}
					}
				} else {
					out.VolumeClaimTemplates = (out.VolumeClaimTemplates)[:0]
				}
				for !in.IsDelim(']') {
					var v3 _v11.PersistentVolumeClaim
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV11(in, &v3)
					out.VolumeClaimTemplates = append(out.VolumeClaimTemplates, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "parallelism":
			if in.IsNull() {
				in.Skip()
				out.Parallelism = nil
			} else {
				if out.Parallelism == nil {
					out.Parallelism = new(int64)
				}
				*out.Parallelism = int64(in.Int64())
			}
		case "artifactRepositoryRef":
			if in.IsNull() {
				in.Skip()
				out.ArtifactRepositoryRef = nil
			} else {
				if out.ArtifactRepositoryRef == nil {
					out.ArtifactRepositoryRef = new(ArtifactRepositoryRef)
				}
				(*out.ArtifactRepositoryRef).UnmarshalEasyJSON(in)
			}
		case "suspend":
			if in.IsNull() {
				in.Skip()
				out.Suspend = nil
			} else {
				if out.Suspend == nil {
					out.Suspend = new(bool)
				}
				*out.Suspend = bool(in.Bool())
			}
		case "nodeSelector":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.NodeSelector = make(map[string]string)
				} else {
					out.NodeSelector = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 string
					v4 = string(in.String())
					(out.NodeSelector)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "affinity":
			if in.IsNull() {
				in.Skip()
				out.Affinity = nil
			} else {
				if out.Affinity == nil {
					out.Affinity = new(_v11.Affinity)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV12(in, out.Affinity)
			}
		case "tolerations":
			if in.IsNull() {
				in.Skip()
				out.Tolerations = nil
			} else {
				in.Delim('[')
				if out.Tolerations == nil {
					if !in.IsDelim(']') {
						out.Tolerations = make([]_v11.Toleration, 0, 0)
					} else {
						out.Tolerations = []_v11.Toleration{}
					}
				} else {
					out.Tolerations = (out.Tolerations)[:0]
				}
				for !in.IsDelim(']') {
					var v5 _v11.Toleration
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV13(in, &v5)
					out.Tolerations = append(out.Tolerations, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "imagePullSecrets":
			if in.IsNull() {
				in.Skip()
				out.ImagePullSecrets = nil
			} else {
				in.Delim('[')
				if out.ImagePullSecrets == nil {
					if !in.IsDelim(']') {
						out.ImagePullSecrets = make([]_v11.LocalObjectReference, 0, 4)
					} else {
						out.ImagePullSecrets = []_v11.LocalObjectReference{}
					}
				} else {
					out.ImagePullSecrets = (out.ImagePullSecrets)[:0]
				}
				for !in.IsDelim(']') {
					var v6 _v11.LocalObjectReference
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV14(in, &v6)
					out.ImagePullSecrets = append(out.ImagePullSecrets, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hostNetwork":
			if in.IsNull() {
				in.Skip()
				out.HostNetwork = nil
			} else {
				if out.HostNetwork == nil {
					out.HostNetwork = new(bool)
				}
				*out.HostNetwork = bool(in.Bool())
			}
		case "dnsPolicy":
			if in.IsNull() {
				in.Skip()
				out.DNSPolicy = nil
			} else {
				if out.DNSPolicy == nil {
					out.DNSPolicy = new(_v11.DNSPolicy)
				}
				*out.DNSPolicy = _v11.DNSPolicy(in.String())
			}
		case "dnsConfig":
			if in.IsNull() {
				in.Skip()
				out.DNSConfig = nil
			} else {
				if out.DNSConfig == nil {
					out.DNSConfig = new(_v11.PodDNSConfig)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV15(in, out.DNSConfig)
			}
		case "onExit":
			out.OnExit = string(in.String())
		case "ttlSecondsAfterFinished":
			if in.IsNull() {
				in.Skip()
				out.TTLSecondsAfterFinished = nil
			} else {
				if out.TTLSecondsAfterFinished == nil {
					out.TTLSecondsAfterFinished = new(int32)
				}
				*out.TTLSecondsAfterFinished = int32(in.Int32())
			}
		case "ttlStrategy":
			if in.IsNull() {
				in.Skip()
				out.TTLStrategy = nil
			} else {
				if out.TTLStrategy == nil {
					out.TTLStrategy = new(TTLStrategy)
				}
				(*out.TTLStrategy).UnmarshalEasyJSON(in)
			}
		case "activeDeadlineSeconds":
			if in.IsNull() {
				in.Skip()
				out.ActiveDeadlineSeconds = nil
			} else {
				if out.ActiveDeadlineSeconds == nil {
					out.ActiveDeadlineSeconds = new(int64)
				}
				*out.ActiveDeadlineSeconds = int64(in.Int64())
			}
		case "priority":
			if in.IsNull() {
				in.Skip()
				out.Priority = nil
			} else {
				if out.Priority == nil {
					out.Priority = new(int32)
				}
				*out.Priority = int32(in.Int32())
			}
		case "schedulerName":
			out.SchedulerName = string(in.String())
		case "podGC":
			if in.IsNull() {
				in.Skip()
				out.PodGC = nil
			} else {
				if out.PodGC == nil {
					out.PodGC = new(PodGC)
				}
				(*out.PodGC).UnmarshalEasyJSON(in)
			}
		case "podPriorityClassName":
			out.PodPriorityClassName = string(in.String())
		case "podPriority":
			if in.IsNull() {
				in.Skip()
				out.PodPriority = nil
			} else {
				if out.PodPriority == nil {
					out.PodPriority = new(int32)
				}
				*out.PodPriority = int32(in.Int32())
			}
		case "hostAliases":
			if in.IsNull() {
				in.Skip()
				out.HostAliases = nil
			} else {
				in.Delim('[')
				if out.HostAliases == nil {
					if !in.IsDelim(']') {
						out.HostAliases = make([]_v11.HostAlias, 0, 1)
					} else {
						out.HostAliases = []_v11.HostAlias{}
					}
				} else {
					out.HostAliases = (out.HostAliases)[:0]
				}
				for !in.IsDelim(']') {
					var v7 _v11.HostAlias
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV16(in, &v7)
					out.HostAliases = append(out.HostAliases, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "securityContext":
			if in.IsNull() {
				in.Skip()
				out.SecurityContext = nil
			} else {
				if out.SecurityContext == nil {
					out.SecurityContext = new(_v11.PodSecurityContext)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV17(in, out.SecurityContext)
			}
		case "podSpecPatch":
			out.PodSpecPatch = string(in.String())
		case "podDisruptionBudget":
			if in.IsNull() {
				in.Skip()
				out.PodDisruptionBudget = nil
			} else {
				if out.PodDisruptionBudget == nil {
					out.PodDisruptionBudget = new(_v1beta1.PodDisruptionBudgetSpec)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiPolicyV1beta1(in, out.PodDisruptionBudget)
			}
		case "metrics":
			if in.IsNull() {
				in.Skip()
				out.Metrics = nil
			} else {
				if out.Metrics == nil {
					out.Metrics = new(Metrics)
				}
				(*out.Metrics).UnmarshalEasyJSON(in)
			}
		case "shutdown":
			out.Shutdown = ShutdownStrategy(in.String())
		case "workflowTemplateRef":
			if in.IsNull() {
				in.Skip()
				out.WorkflowTemplateRef = nil
			} else {
				if out.WorkflowTemplateRef == nil {
					out.WorkflowTemplateRef = new(WorkflowTemplateRef)
				}
				(*out.WorkflowTemplateRef).UnmarshalEasyJSON(in)
			}
		case "synchronization":
			if in.IsNull() {
				in.Skip()
				out.Synchronization = nil
			} else {
				if out.Synchronization == nil {
					out.Synchronization = new(Synchronization)
				}
				(*out.Synchronization).UnmarshalEasyJSON(in)
			}
		case "volumeClaimGC":
			if in.IsNull() {
				in.Skip()
				out.VolumeClaimGC = nil
			} else {
				if out.VolumeClaimGC == nil {
					out.VolumeClaimGC = new(VolumeClaimGC)
				}
				(*out.VolumeClaimGC).UnmarshalEasyJSON(in)
			}
		case "retryStrategy":
			if in.IsNull() {
				in.Skip()
				out.RetryStrategy = nil
			} else {
				if out.RetryStrategy == nil {
					out.RetryStrategy = new(RetryStrategy)
				}
				(*out.RetryStrategy).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(out *jwriter.Writer, in WorkflowTemplateSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.WorkflowMetadata != nil {
		const prefix string = ",\"workflowMetadata\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonC6c1f4dcEncodeK8sIoApimachineryPkgApisMetaV1(out, *in.WorkflowMetadata)
	}
	if len(in.Templates) != 0 {
		const prefix string = ",\"templates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v8, v9 := range in.Templates {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Entrypoint != "" {
		const prefix string = ",\"entrypoint\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Entrypoint))
	}
	if true {
		const prefix string = ",\"arguments\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Arguments).MarshalEasyJSON(out)
	}
	if in.ServiceAccountName != "" {
		const prefix string = ",\"serviceAccountName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ServiceAccountName))
	}
	if in.AutomountServiceAccountToken != nil {
		const prefix string = ",\"automountServiceAccountToken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.AutomountServiceAccountToken))
	}
	if in.Executor != nil {
		const prefix string = ",\"executor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Executor).MarshalEasyJSON(out)
	}
	if len(in.Volumes) != 0 {
		const prefix string = ",\"volumes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v10, v11 := range in.Volumes {
				if v10 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV1(out, v11)
			}
			out.RawByte(']')
		}
	}
	if len(in.VolumeClaimTemplates) != 0 {
		const prefix string = ",\"volumeClaimTemplates\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v12, v13 := range in.VolumeClaimTemplates {
				if v12 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV11(out, v13)
			}
			out.RawByte(']')
		}
	}
	if in.Parallelism != nil {
		const prefix string = ",\"parallelism\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.Parallelism))
	}
	if in.ArtifactRepositoryRef != nil {
		const prefix string = ",\"artifactRepositoryRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.ArtifactRepositoryRef).MarshalEasyJSON(out)
	}
	if in.Suspend != nil {
		const prefix string = ",\"suspend\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Suspend))
	}
	if len(in.NodeSelector) != 0 {
		const prefix string = ",\"nodeSelector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v14First := true
			for v14Name, v14Value := range in.NodeSelector {
				if v14First {
					v14First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v14Name))
				out.RawByte(':')
				out.String(string(v14Value))
			}
			out.RawByte('}')
		}
	}
	if in.Affinity != nil {
		const prefix string = ",\"affinity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV12(out, *in.Affinity)
	}
	if len(in.Tolerations) != 0 {
		const prefix string = ",\"tolerations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.Tolerations {
				if v15 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV13(out, v16)
			}
			out.RawByte(']')
		}
	}
	if len(in.ImagePullSecrets) != 0 {
		const prefix string = ",\"imagePullSecrets\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v17, v18 := range in.ImagePullSecrets {
				if v17 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV14(out, v18)
			}
			out.RawByte(']')
		}
	}
	if in.HostNetwork != nil {
		const prefix string = ",\"hostNetwork\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.HostNetwork))
	}
	if in.DNSPolicy != nil {
		const prefix string = ",\"dnsPolicy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.DNSPolicy))
	}
	if in.DNSConfig != nil {
		const prefix string = ",\"dnsConfig\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV15(out, *in.DNSConfig)
	}
	if in.OnExit != "" {
		const prefix string = ",\"onExit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OnExit))
	}
	if in.TTLSecondsAfterFinished != nil {
		const prefix string = ",\"ttlSecondsAfterFinished\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.TTLSecondsAfterFinished))
	}
	if in.TTLStrategy != nil {
		const prefix string = ",\"ttlStrategy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.TTLStrategy).MarshalEasyJSON(out)
	}
	if in.ActiveDeadlineSeconds != nil {
		const prefix string = ",\"activeDeadlineSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ActiveDeadlineSeconds))
	}
	if in.Priority != nil {
		const prefix string = ",\"priority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Priority))
	}
	if in.SchedulerName != "" {
		const prefix string = ",\"schedulerName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SchedulerName))
	}
	if in.PodGC != nil {
		const prefix string = ",\"podGC\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.PodGC).MarshalEasyJSON(out)
	}
	if in.PodPriorityClassName != "" {
		const prefix string = ",\"podPriorityClassName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PodPriorityClassName))
	}
	if in.PodPriority != nil {
		const prefix string = ",\"podPriority\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.PodPriority))
	}
	if len(in.HostAliases) != 0 {
		const prefix string = ",\"hostAliases\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v19, v20 := range in.HostAliases {
				if v19 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV16(out, v20)
			}
			out.RawByte(']')
		}
	}
	if in.SecurityContext != nil {
		const prefix string = ",\"securityContext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV17(out, *in.SecurityContext)
	}
	if in.PodSpecPatch != "" {
		const prefix string = ",\"podSpecPatch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PodSpecPatch))
	}
	if in.PodDisruptionBudget != nil {
		const prefix string = ",\"podDisruptionBudget\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC6c1f4dcEncodeK8sIoApiPolicyV1beta1(out, *in.PodDisruptionBudget)
	}
	if in.Metrics != nil {
		const prefix string = ",\"metrics\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Metrics).MarshalEasyJSON(out)
	}
	if in.Shutdown != "" {
		const prefix string = ",\"shutdown\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Shutdown))
	}
	if in.WorkflowTemplateRef != nil {
		const prefix string = ",\"workflowTemplateRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.WorkflowTemplateRef).MarshalEasyJSON(out)
	}
	if in.Synchronization != nil {
		const prefix string = ",\"synchronization\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Synchronization).MarshalEasyJSON(out)
	}
	if in.VolumeClaimGC != nil {
		const prefix string = ",\"volumeClaimGC\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.VolumeClaimGC).MarshalEasyJSON(out)
	}
	if in.RetryStrategy != nil {
		const prefix string = ",\"retryStrategy\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.RetryStrategy).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkflowTemplateSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC6c1f4dcEncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkflowTemplateSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC6c1f4dcEncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkflowTemplateSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC6c1f4dcDecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkflowTemplateSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC6c1f4dcDecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(l, v)
}
func easyjsonC6c1f4dcDecodeK8sIoApiPolicyV1beta1(in *jlexer.Lexer, out *_v1beta1.PodDisruptionBudgetSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "minAvailable":
			if in.IsNull() {
				in.Skip()
				out.MinAvailable = nil
			} else {
				if out.MinAvailable == nil {
					out.MinAvailable = new(intstr.IntOrString)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.MinAvailable).UnmarshalJSON(data))
				}
			}
		case "selector":
			if in.IsNull() {
				in.Skip()
				out.Selector = nil
			} else {
				if out.Selector == nil {
					out.Selector = new(_v1.LabelSelector)
				}
				easyjsonC6c1f4dcDecodeK8sIoApimachineryPkgApisMetaV11(in, out.Selector)
			}
		case "maxUnavailable":
			if in.IsNull() {
				in.Skip()
				out.MaxUnavailable = nil
			} else {
				if out.MaxUnavailable == nil {
					out.MaxUnavailable = new(intstr.IntOrString)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.MaxUnavailable).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiPolicyV1beta1(out *jwriter.Writer, in _v1beta1.PodDisruptionBudgetSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MinAvailable != nil {
		const prefix string = ",\"minAvailable\":"
		first = false
		out.RawString(prefix[1:])
		out.Raw((*in.MinAvailable).MarshalJSON())
	}
	if in.Selector != nil {
		const prefix string = ",\"selector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC6c1f4dcEncodeK8sIoApimachineryPkgApisMetaV11(out, *in.Selector)
	}
	if in.MaxUnavailable != nil {
		const prefix string = ",\"maxUnavailable\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.MaxUnavailable).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApimachineryPkgApisMetaV11(in *jlexer.Lexer, out *_v1.LabelSelector) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "matchLabels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.MatchLabels = make(map[string]string)
				} else {
					out.MatchLabels = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v21 string
					v21 = string(in.String())
					(out.MatchLabels)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		case "matchExpressions":
			if in.IsNull() {
				in.Skip()
				out.MatchExpressions = nil
			} else {
				in.Delim('[')
				if out.MatchExpressions == nil {
					if !in.IsDelim(']') {
						out.MatchExpressions = make([]_v1.LabelSelectorRequirement, 0, 1)
					} else {
						out.MatchExpressions = []_v1.LabelSelectorRequirement{}
					}
				} else {
					out.MatchExpressions = (out.MatchExpressions)[:0]
				}
				for !in.IsDelim(']') {
					var v22 _v1.LabelSelectorRequirement
					easyjsonC6c1f4dcDecodeK8sIoApimachineryPkgApisMetaV12(in, &v22)
					out.MatchExpressions = append(out.MatchExpressions, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApimachineryPkgApisMetaV11(out *jwriter.Writer, in _v1.LabelSelector) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.MatchLabels) != 0 {
		const prefix string = ",\"matchLabels\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v23First := true
			for v23Name, v23Value := range in.MatchLabels {
				if v23First {
					v23First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v23Name))
				out.RawByte(':')
				out.String(string(v23Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.MatchExpressions) != 0 {
		const prefix string = ",\"matchExpressions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v24, v25 := range in.MatchExpressions {
				if v24 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApimachineryPkgApisMetaV12(out, v25)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApimachineryPkgApisMetaV12(in *jlexer.Lexer, out *_v1.LabelSelectorRequirement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "operator":
			out.Operator = _v1.LabelSelectorOperator(in.String())
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]string, 0, 4)
					} else {
						out.Values = []string{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v26 string
					v26 = string(in.String())
					out.Values = append(out.Values, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApimachineryPkgApisMetaV12(out *jwriter.Writer, in _v1.LabelSelectorRequirement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"operator\":"
		out.RawString(prefix)
		out.String(string(in.Operator))
	}
	if len(in.Values) != 0 {
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v27, v28 := range in.Values {
				if v27 > 0 {
					out.RawByte(',')
				}
				out.String(string(v28))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV17(in *jlexer.Lexer, out *_v11.PodSecurityContext) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "seLinuxOptions":
			if in.IsNull() {
				in.Skip()
				out.SELinuxOptions = nil
			} else {
				if out.SELinuxOptions == nil {
					out.SELinuxOptions = new(_v11.SELinuxOptions)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV18(in, out.SELinuxOptions)
			}
		case "windowsOptions":
			if in.IsNull() {
				in.Skip()
				out.WindowsOptions = nil
			} else {
				if out.WindowsOptions == nil {
					out.WindowsOptions = new(_v11.WindowsSecurityContextOptions)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV19(in, out.WindowsOptions)
			}
		case "runAsUser":
			if in.IsNull() {
				in.Skip()
				out.RunAsUser = nil
			} else {
				if out.RunAsUser == nil {
					out.RunAsUser = new(int64)
				}
				*out.RunAsUser = int64(in.Int64())
			}
		case "runAsGroup":
			if in.IsNull() {
				in.Skip()
				out.RunAsGroup = nil
			} else {
				if out.RunAsGroup == nil {
					out.RunAsGroup = new(int64)
				}
				*out.RunAsGroup = int64(in.Int64())
			}
		case "runAsNonRoot":
			if in.IsNull() {
				in.Skip()
				out.RunAsNonRoot = nil
			} else {
				if out.RunAsNonRoot == nil {
					out.RunAsNonRoot = new(bool)
				}
				*out.RunAsNonRoot = bool(in.Bool())
			}
		case "supplementalGroups":
			if in.IsNull() {
				in.Skip()
				out.SupplementalGroups = nil
			} else {
				in.Delim('[')
				if out.SupplementalGroups == nil {
					if !in.IsDelim(']') {
						out.SupplementalGroups = make([]int64, 0, 8)
					} else {
						out.SupplementalGroups = []int64{}
					}
				} else {
					out.SupplementalGroups = (out.SupplementalGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v29 int64
					v29 = int64(in.Int64())
					out.SupplementalGroups = append(out.SupplementalGroups, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "fsGroup":
			if in.IsNull() {
				in.Skip()
				out.FSGroup = nil
			} else {
				if out.FSGroup == nil {
					out.FSGroup = new(int64)
				}
				*out.FSGroup = int64(in.Int64())
			}
		case "sysctls":
			if in.IsNull() {
				in.Skip()
				out.Sysctls = nil
			} else {
				in.Delim('[')
				if out.Sysctls == nil {
					if !in.IsDelim(']') {
						out.Sysctls = make([]_v11.Sysctl, 0, 2)
					} else {
						out.Sysctls = []_v11.Sysctl{}
					}
				} else {
					out.Sysctls = (out.Sysctls)[:0]
				}
				for !in.IsDelim(']') {
					var v30 _v11.Sysctl
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV110(in, &v30)
					out.Sysctls = append(out.Sysctls, v30)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV17(out *jwriter.Writer, in _v11.PodSecurityContext) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SELinuxOptions != nil {
		const prefix string = ",\"seLinuxOptions\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV18(out, *in.SELinuxOptions)
	}
	if in.WindowsOptions != nil {
		const prefix string = ",\"windowsOptions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV19(out, *in.WindowsOptions)
	}
	if in.RunAsUser != nil {
		const prefix string = ",\"runAsUser\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.RunAsUser))
	}
	if in.RunAsGroup != nil {
		const prefix string = ",\"runAsGroup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.RunAsGroup))
	}
	if in.RunAsNonRoot != nil {
		const prefix string = ",\"runAsNonRoot\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.RunAsNonRoot))
	}
	if len(in.SupplementalGroups) != 0 {
		const prefix string = ",\"supplementalGroups\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v31, v32 := range in.SupplementalGroups {
				if v31 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v32))
			}
			out.RawByte(']')
		}
	}
	if in.FSGroup != nil {
		const prefix string = ",\"fsGroup\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.FSGroup))
	}
	if len(in.Sysctls) != 0 {
		const prefix string = ",\"sysctls\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v33, v34 := range in.Sysctls {
				if v33 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV110(out, v34)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV110(in *jlexer.Lexer, out *_v11.Sysctl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV110(out *jwriter.Writer, in _v11.Sysctl) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV19(in *jlexer.Lexer, out *_v11.WindowsSecurityContextOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gmsaCredentialSpecName":
			if in.IsNull() {
				in.Skip()
				out.GMSACredentialSpecName = nil
			} else {
				if out.GMSACredentialSpecName == nil {
					out.GMSACredentialSpecName = new(string)
				}
				*out.GMSACredentialSpecName = string(in.String())
			}
		case "gmsaCredentialSpec":
			if in.IsNull() {
				in.Skip()
				out.GMSACredentialSpec = nil
			} else {
				if out.GMSACredentialSpec == nil {
					out.GMSACredentialSpec = new(string)
				}
				*out.GMSACredentialSpec = string(in.String())
			}
		case "runAsUserName":
			if in.IsNull() {
				in.Skip()
				out.RunAsUserName = nil
			} else {
				if out.RunAsUserName == nil {
					out.RunAsUserName = new(string)
				}
				*out.RunAsUserName = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV19(out *jwriter.Writer, in _v11.WindowsSecurityContextOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.GMSACredentialSpecName != nil {
		const prefix string = ",\"gmsaCredentialSpecName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.GMSACredentialSpecName))
	}
	if in.GMSACredentialSpec != nil {
		const prefix string = ",\"gmsaCredentialSpec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.GMSACredentialSpec))
	}
	if in.RunAsUserName != nil {
		const prefix string = ",\"runAsUserName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.RunAsUserName))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV18(in *jlexer.Lexer, out *_v11.SELinuxOptions) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			out.User = string(in.String())
		case "role":
			out.Role = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "level":
			out.Level = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV18(out *jwriter.Writer, in _v11.SELinuxOptions) {
	out.RawByte('{')
	first := true
	_ = first
	if in.User != "" {
		const prefix string = ",\"user\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.User))
	}
	if in.Role != "" {
		const prefix string = ",\"role\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Role))
	}
	if in.Type != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	if in.Level != "" {
		const prefix string = ",\"level\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Level))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV16(in *jlexer.Lexer, out *_v11.HostAlias) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.IP = string(in.String())
		case "hostnames":
			if in.IsNull() {
				in.Skip()
				out.Hostnames = nil
			} else {
				in.Delim('[')
				if out.Hostnames == nil {
					if !in.IsDelim(']') {
						out.Hostnames = make([]string, 0, 4)
					} else {
						out.Hostnames = []string{}
					}
				} else {
					out.Hostnames = (out.Hostnames)[:0]
				}
				for !in.IsDelim(']') {
					var v35 string
					v35 = string(in.String())
					out.Hostnames = append(out.Hostnames, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV16(out *jwriter.Writer, in _v11.HostAlias) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IP != "" {
		const prefix string = ",\"ip\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.IP))
	}
	if len(in.Hostnames) != 0 {
		const prefix string = ",\"hostnames\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v36, v37 := range in.Hostnames {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.String(string(v37))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV15(in *jlexer.Lexer, out *_v11.PodDNSConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nameservers":
			if in.IsNull() {
				in.Skip()
				out.Nameservers = nil
			} else {
				in.Delim('[')
				if out.Nameservers == nil {
					if !in.IsDelim(']') {
						out.Nameservers = make([]string, 0, 4)
					} else {
						out.Nameservers = []string{}
					}
				} else {
					out.Nameservers = (out.Nameservers)[:0]
				}
				for !in.IsDelim(']') {
					var v38 string
					v38 = string(in.String())
					out.Nameservers = append(out.Nameservers, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "searches":
			if in.IsNull() {
				in.Skip()
				out.Searches = nil
			} else {
				in.Delim('[')
				if out.Searches == nil {
					if !in.IsDelim(']') {
						out.Searches = make([]string, 0, 4)
					} else {
						out.Searches = []string{}
					}
				} else {
					out.Searches = (out.Searches)[:0]
				}
				for !in.IsDelim(']') {
					var v39 string
					v39 = string(in.String())
					out.Searches = append(out.Searches, v39)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "options":
			if in.IsNull() {
				in.Skip()
				out.Options = nil
			} else {
				in.Delim('[')
				if out.Options == nil {
					if !in.IsDelim(']') {
						out.Options = make([]_v11.PodDNSConfigOption, 0, 2)
					} else {
						out.Options = []_v11.PodDNSConfigOption{}
					}
				} else {
					out.Options = (out.Options)[:0]
				}
				for !in.IsDelim(']') {
					var v40 _v11.PodDNSConfigOption
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV111(in, &v40)
					out.Options = append(out.Options, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV15(out *jwriter.Writer, in _v11.PodDNSConfig) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Nameservers) != 0 {
		const prefix string = ",\"nameservers\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v41, v42 := range in.Nameservers {
				if v41 > 0 {
					out.RawByte(',')
				}
				out.String(string(v42))
			}
			out.RawByte(']')
		}
	}
	if len(in.Searches) != 0 {
		const prefix string = ",\"searches\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v43, v44 := range in.Searches {
				if v43 > 0 {
					out.RawByte(',')
				}
				out.String(string(v44))
			}
			out.RawByte(']')
		}
	}
	if len(in.Options) != 0 {
		const prefix string = ",\"options\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v45, v46 := range in.Options {
				if v45 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV111(out, v46)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV111(in *jlexer.Lexer, out *_v11.PodDNSConfigOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(string)
				}
				*out.Value = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV111(out *jwriter.Writer, in _v11.PodDNSConfigOption) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Value != nil {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Value))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV14(in *jlexer.Lexer, out *_v11.LocalObjectReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV14(out *jwriter.Writer, in _v11.LocalObjectReference) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV13(in *jlexer.Lexer, out *_v11.Toleration) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "operator":
			out.Operator = _v11.TolerationOperator(in.String())
		case "value":
			out.Value = string(in.String())
		case "effect":
			out.Effect = _v11.TaintEffect(in.String())
		case "tolerationSeconds":
			if in.IsNull() {
				in.Skip()
				out.TolerationSeconds = nil
			} else {
				if out.TolerationSeconds == nil {
					out.TolerationSeconds = new(int64)
				}
				*out.TolerationSeconds = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV13(out *jwriter.Writer, in _v11.Toleration) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Key != "" {
		const prefix string = ",\"key\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	if in.Operator != "" {
		const prefix string = ",\"operator\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Operator))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Value))
	}
	if in.Effect != "" {
		const prefix string = ",\"effect\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Effect))
	}
	if in.TolerationSeconds != nil {
		const prefix string = ",\"tolerationSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.TolerationSeconds))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV12(in *jlexer.Lexer, out *_v11.Affinity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodeAffinity":
			if in.IsNull() {
				in.Skip()
				out.NodeAffinity = nil
			} else {
				if out.NodeAffinity == nil {
					out.NodeAffinity = new(_v11.NodeAffinity)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV112(in, out.NodeAffinity)
			}
		case "podAffinity":
			if in.IsNull() {
				in.Skip()
				out.PodAffinity = nil
			} else {
				if out.PodAffinity == nil {
					out.PodAffinity = new(_v11.PodAffinity)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV113(in, out.PodAffinity)
			}
		case "podAntiAffinity":
			if in.IsNull() {
				in.Skip()
				out.PodAntiAffinity = nil
			} else {
				if out.PodAntiAffinity == nil {
					out.PodAntiAffinity = new(_v11.PodAntiAffinity)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV114(in, out.PodAntiAffinity)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV12(out *jwriter.Writer, in _v11.Affinity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.NodeAffinity != nil {
		const prefix string = ",\"nodeAffinity\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV112(out, *in.NodeAffinity)
	}
	if in.PodAffinity != nil {
		const prefix string = ",\"podAffinity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV113(out, *in.PodAffinity)
	}
	if in.PodAntiAffinity != nil {
		const prefix string = ",\"podAntiAffinity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV114(out, *in.PodAntiAffinity)
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV114(in *jlexer.Lexer, out *_v11.PodAntiAffinity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				in.Delim('[')
				if out.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					if !in.IsDelim(']') {
						out.RequiredDuringSchedulingIgnoredDuringExecution = make([]_v11.PodAffinityTerm, 0, 1)
					} else {
						out.RequiredDuringSchedulingIgnoredDuringExecution = []_v11.PodAffinityTerm{}
					}
				} else {
					out.RequiredDuringSchedulingIgnoredDuringExecution = (out.RequiredDuringSchedulingIgnoredDuringExecution)[:0]
				}
				for !in.IsDelim(']') {
					var v47 _v11.PodAffinityTerm
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV115(in, &v47)
					out.RequiredDuringSchedulingIgnoredDuringExecution = append(out.RequiredDuringSchedulingIgnoredDuringExecution, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				in.Delim('[')
				if out.PreferredDuringSchedulingIgnoredDuringExecution == nil {
					if !in.IsDelim(']') {
						out.PreferredDuringSchedulingIgnoredDuringExecution = make([]_v11.WeightedPodAffinityTerm, 0, 1)
					} else {
						out.PreferredDuringSchedulingIgnoredDuringExecution = []_v11.WeightedPodAffinityTerm{}
					}
				} else {
					out.PreferredDuringSchedulingIgnoredDuringExecution = (out.PreferredDuringSchedulingIgnoredDuringExecution)[:0]
				}
				for !in.IsDelim(']') {
					var v48 _v11.WeightedPodAffinityTerm
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV116(in, &v48)
					out.PreferredDuringSchedulingIgnoredDuringExecution = append(out.PreferredDuringSchedulingIgnoredDuringExecution, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV114(out *jwriter.Writer, in _v11.PodAntiAffinity) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.RequiredDuringSchedulingIgnoredDuringExecution) != 0 {
		const prefix string = ",\"requiredDuringSchedulingIgnoredDuringExecution\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v49, v50 := range in.RequiredDuringSchedulingIgnoredDuringExecution {
				if v49 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV115(out, v50)
			}
			out.RawByte(']')
		}
	}
	if len(in.PreferredDuringSchedulingIgnoredDuringExecution) != 0 {
		const prefix string = ",\"preferredDuringSchedulingIgnoredDuringExecution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v51, v52 := range in.PreferredDuringSchedulingIgnoredDuringExecution {
				if v51 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV116(out, v52)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV116(in *jlexer.Lexer, out *_v11.WeightedPodAffinityTerm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "weight":
			out.Weight = int32(in.Int32())
		case "podAffinityTerm":
			easyjsonC6c1f4dcDecodeK8sIoApiCoreV115(in, &out.PodAffinityTerm)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV116(out *jwriter.Writer, in _v11.WeightedPodAffinityTerm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Weight))
	}
	{
		const prefix string = ",\"podAffinityTerm\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV115(out, in.PodAffinityTerm)
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV115(in *jlexer.Lexer, out *_v11.PodAffinityTerm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "labelSelector":
			if in.IsNull() {
				in.Skip()
				out.LabelSelector = nil
			} else {
				if out.LabelSelector == nil {
					out.LabelSelector = new(_v1.LabelSelector)
				}
				easyjsonC6c1f4dcDecodeK8sIoApimachineryPkgApisMetaV11(in, out.LabelSelector)
			}
		case "namespaces":
			if in.IsNull() {
				in.Skip()
				out.Namespaces = nil
			} else {
				in.Delim('[')
				if out.Namespaces == nil {
					if !in.IsDelim(']') {
						out.Namespaces = make([]string, 0, 4)
					} else {
						out.Namespaces = []string{}
					}
				} else {
					out.Namespaces = (out.Namespaces)[:0]
				}
				for !in.IsDelim(']') {
					var v53 string
					v53 = string(in.String())
					out.Namespaces = append(out.Namespaces, v53)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "topologyKey":
			out.TopologyKey = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV115(out *jwriter.Writer, in _v11.PodAffinityTerm) {
	out.RawByte('{')
	first := true
	_ = first
	if in.LabelSelector != nil {
		const prefix string = ",\"labelSelector\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonC6c1f4dcEncodeK8sIoApimachineryPkgApisMetaV11(out, *in.LabelSelector)
	}
	if len(in.Namespaces) != 0 {
		const prefix string = ",\"namespaces\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v54, v55 := range in.Namespaces {
				if v54 > 0 {
					out.RawByte(',')
				}
				out.String(string(v55))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"topologyKey\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TopologyKey))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV113(in *jlexer.Lexer, out *_v11.PodAffinity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				in.Delim('[')
				if out.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					if !in.IsDelim(']') {
						out.RequiredDuringSchedulingIgnoredDuringExecution = make([]_v11.PodAffinityTerm, 0, 1)
					} else {
						out.RequiredDuringSchedulingIgnoredDuringExecution = []_v11.PodAffinityTerm{}
					}
				} else {
					out.RequiredDuringSchedulingIgnoredDuringExecution = (out.RequiredDuringSchedulingIgnoredDuringExecution)[:0]
				}
				for !in.IsDelim(']') {
					var v56 _v11.PodAffinityTerm
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV115(in, &v56)
					out.RequiredDuringSchedulingIgnoredDuringExecution = append(out.RequiredDuringSchedulingIgnoredDuringExecution, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				in.Delim('[')
				if out.PreferredDuringSchedulingIgnoredDuringExecution == nil {
					if !in.IsDelim(']') {
						out.PreferredDuringSchedulingIgnoredDuringExecution = make([]_v11.WeightedPodAffinityTerm, 0, 1)
					} else {
						out.PreferredDuringSchedulingIgnoredDuringExecution = []_v11.WeightedPodAffinityTerm{}
					}
				} else {
					out.PreferredDuringSchedulingIgnoredDuringExecution = (out.PreferredDuringSchedulingIgnoredDuringExecution)[:0]
				}
				for !in.IsDelim(']') {
					var v57 _v11.WeightedPodAffinityTerm
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV116(in, &v57)
					out.PreferredDuringSchedulingIgnoredDuringExecution = append(out.PreferredDuringSchedulingIgnoredDuringExecution, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV113(out *jwriter.Writer, in _v11.PodAffinity) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.RequiredDuringSchedulingIgnoredDuringExecution) != 0 {
		const prefix string = ",\"requiredDuringSchedulingIgnoredDuringExecution\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v58, v59 := range in.RequiredDuringSchedulingIgnoredDuringExecution {
				if v58 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV115(out, v59)
			}
			out.RawByte(']')
		}
	}
	if len(in.PreferredDuringSchedulingIgnoredDuringExecution) != 0 {
		const prefix string = ",\"preferredDuringSchedulingIgnoredDuringExecution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v60, v61 := range in.PreferredDuringSchedulingIgnoredDuringExecution {
				if v60 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV116(out, v61)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV112(in *jlexer.Lexer, out *_v11.NodeAffinity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				if out.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					out.RequiredDuringSchedulingIgnoredDuringExecution = new(_v11.NodeSelector)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV117(in, out.RequiredDuringSchedulingIgnoredDuringExecution)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if in.IsNull() {
				in.Skip()
				out.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				in.Delim('[')
				if out.PreferredDuringSchedulingIgnoredDuringExecution == nil {
					if !in.IsDelim(']') {
						out.PreferredDuringSchedulingIgnoredDuringExecution = make([]_v11.PreferredSchedulingTerm, 0, 1)
					} else {
						out.PreferredDuringSchedulingIgnoredDuringExecution = []_v11.PreferredSchedulingTerm{}
					}
				} else {
					out.PreferredDuringSchedulingIgnoredDuringExecution = (out.PreferredDuringSchedulingIgnoredDuringExecution)[:0]
				}
				for !in.IsDelim(']') {
					var v62 _v11.PreferredSchedulingTerm
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV118(in, &v62)
					out.PreferredDuringSchedulingIgnoredDuringExecution = append(out.PreferredDuringSchedulingIgnoredDuringExecution, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV112(out *jwriter.Writer, in _v11.NodeAffinity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RequiredDuringSchedulingIgnoredDuringExecution != nil {
		const prefix string = ",\"requiredDuringSchedulingIgnoredDuringExecution\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV117(out, *in.RequiredDuringSchedulingIgnoredDuringExecution)
	}
	if len(in.PreferredDuringSchedulingIgnoredDuringExecution) != 0 {
		const prefix string = ",\"preferredDuringSchedulingIgnoredDuringExecution\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v63, v64 := range in.PreferredDuringSchedulingIgnoredDuringExecution {
				if v63 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV118(out, v64)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV118(in *jlexer.Lexer, out *_v11.PreferredSchedulingTerm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "weight":
			out.Weight = int32(in.Int32())
		case "preference":
			easyjsonC6c1f4dcDecodeK8sIoApiCoreV119(in, &out.Preference)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV118(out *jwriter.Writer, in _v11.PreferredSchedulingTerm) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix[1:])
		out.Int32(int32(in.Weight))
	}
	{
		const prefix string = ",\"preference\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV119(out, in.Preference)
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV119(in *jlexer.Lexer, out *_v11.NodeSelectorTerm) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "matchExpressions":
			if in.IsNull() {
				in.Skip()
				out.MatchExpressions = nil
			} else {
				in.Delim('[')
				if out.MatchExpressions == nil {
					if !in.IsDelim(']') {
						out.MatchExpressions = make([]_v11.NodeSelectorRequirement, 0, 1)
					} else {
						out.MatchExpressions = []_v11.NodeSelectorRequirement{}
					}
				} else {
					out.MatchExpressions = (out.MatchExpressions)[:0]
				}
				for !in.IsDelim(']') {
					var v65 _v11.NodeSelectorRequirement
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV120(in, &v65)
					out.MatchExpressions = append(out.MatchExpressions, v65)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "matchFields":
			if in.IsNull() {
				in.Skip()
				out.MatchFields = nil
			} else {
				in.Delim('[')
				if out.MatchFields == nil {
					if !in.IsDelim(']') {
						out.MatchFields = make([]_v11.NodeSelectorRequirement, 0, 1)
					} else {
						out.MatchFields = []_v11.NodeSelectorRequirement{}
					}
				} else {
					out.MatchFields = (out.MatchFields)[:0]
				}
				for !in.IsDelim(']') {
					var v66 _v11.NodeSelectorRequirement
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV120(in, &v66)
					out.MatchFields = append(out.MatchFields, v66)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV119(out *jwriter.Writer, in _v11.NodeSelectorTerm) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.MatchExpressions) != 0 {
		const prefix string = ",\"matchExpressions\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v67, v68 := range in.MatchExpressions {
				if v67 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV120(out, v68)
			}
			out.RawByte(']')
		}
	}
	if len(in.MatchFields) != 0 {
		const prefix string = ",\"matchFields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v69, v70 := range in.MatchFields {
				if v69 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV120(out, v70)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV120(in *jlexer.Lexer, out *_v11.NodeSelectorRequirement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "operator":
			out.Operator = _v11.NodeSelectorOperator(in.String())
		case "values":
			if in.IsNull() {
				in.Skip()
				out.Values = nil
			} else {
				in.Delim('[')
				if out.Values == nil {
					if !in.IsDelim(']') {
						out.Values = make([]string, 0, 4)
					} else {
						out.Values = []string{}
					}
				} else {
					out.Values = (out.Values)[:0]
				}
				for !in.IsDelim(']') {
					var v71 string
					v71 = string(in.String())
					out.Values = append(out.Values, v71)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV120(out *jwriter.Writer, in _v11.NodeSelectorRequirement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"operator\":"
		out.RawString(prefix)
		out.String(string(in.Operator))
	}
	if len(in.Values) != 0 {
		const prefix string = ",\"values\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v72, v73 := range in.Values {
				if v72 > 0 {
					out.RawByte(',')
				}
				out.String(string(v73))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV117(in *jlexer.Lexer, out *_v11.NodeSelector) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "nodeSelectorTerms":
			if in.IsNull() {
				in.Skip()
				out.NodeSelectorTerms = nil
			} else {
				in.Delim('[')
				if out.NodeSelectorTerms == nil {
					if !in.IsDelim(']') {
						out.NodeSelectorTerms = make([]_v11.NodeSelectorTerm, 0, 1)
					} else {
						out.NodeSelectorTerms = []_v11.NodeSelectorTerm{}
					}
				} else {
					out.NodeSelectorTerms = (out.NodeSelectorTerms)[:0]
				}
				for !in.IsDelim(']') {
					var v74 _v11.NodeSelectorTerm
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV119(in, &v74)
					out.NodeSelectorTerms = append(out.NodeSelectorTerms, v74)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV117(out *jwriter.Writer, in _v11.NodeSelector) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"nodeSelectorTerms\":"
		out.RawString(prefix[1:])
		if in.NodeSelectorTerms == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v75, v76 := range in.NodeSelectorTerms {
				if v75 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV119(out, v76)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV11(in *jlexer.Lexer, out *_v11.PersistentVolumeClaim) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			easyjsonC6c1f4dcDecodeK8sIoApimachineryPkgApisMetaV1(in, &out.ObjectMeta)
		case "spec":
			easyjsonC6c1f4dcDecodeK8sIoApiCoreV121(in, &out.Spec)
		case "status":
			easyjsonC6c1f4dcDecodeK8sIoApiCoreV122(in, &out.Status)
		case "kind":
			out.Kind = string(in.String())
		case "apiVersion":
			out.APIVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV11(out *jwriter.Writer, in _v11.PersistentVolumeClaim) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"metadata\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonC6c1f4dcEncodeK8sIoApimachineryPkgApisMetaV1(out, in.ObjectMeta)
	}
	if true {
		const prefix string = ",\"spec\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV121(out, in.Spec)
	}
	if true {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV122(out, in.Status)
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Kind))
	}
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.APIVersion))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV122(in *jlexer.Lexer, out *_v11.PersistentVolumeClaimStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "phase":
			out.Phase = _v11.PersistentVolumeClaimPhase(in.String())
		case "accessModes":
			if in.IsNull() {
				in.Skip()
				out.AccessModes = nil
			} else {
				in.Delim('[')
				if out.AccessModes == nil {
					if !in.IsDelim(']') {
						out.AccessModes = make([]_v11.PersistentVolumeAccessMode, 0, 4)
					} else {
						out.AccessModes = []_v11.PersistentVolumeAccessMode{}
					}
				} else {
					out.AccessModes = (out.AccessModes)[:0]
				}
				for !in.IsDelim(']') {
					var v77 _v11.PersistentVolumeAccessMode
					v77 = _v11.PersistentVolumeAccessMode(in.String())
					out.AccessModes = append(out.AccessModes, v77)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "capacity":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Capacity = make(_v11.ResourceList)
				} else {
					out.Capacity = nil
				}
				for !in.IsDelim('}') {
					key := _v11.ResourceName(in.String())
					in.WantColon()
					var v78 resource.Quantity
					if data := in.Raw(); in.Ok() {
						in.AddError((v78).UnmarshalJSON(data))
					}
					(out.Capacity)[key] = v78
					in.WantComma()
				}
				in.Delim('}')
			}
		case "conditions":
			if in.IsNull() {
				in.Skip()
				out.Conditions = nil
			} else {
				in.Delim('[')
				if out.Conditions == nil {
					if !in.IsDelim(']') {
						out.Conditions = make([]_v11.PersistentVolumeClaimCondition, 0, 0)
					} else {
						out.Conditions = []_v11.PersistentVolumeClaimCondition{}
					}
				} else {
					out.Conditions = (out.Conditions)[:0]
				}
				for !in.IsDelim(']') {
					var v79 _v11.PersistentVolumeClaimCondition
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV123(in, &v79)
					out.Conditions = append(out.Conditions, v79)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV122(out *jwriter.Writer, in _v11.PersistentVolumeClaimStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Phase != "" {
		const prefix string = ",\"phase\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Phase))
	}
	if len(in.AccessModes) != 0 {
		const prefix string = ",\"accessModes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v80, v81 := range in.AccessModes {
				if v80 > 0 {
					out.RawByte(',')
				}
				out.String(string(v81))
			}
			out.RawByte(']')
		}
	}
	if len(in.Capacity) != 0 {
		const prefix string = ",\"capacity\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v82First := true
			for v82Name, v82Value := range in.Capacity {
				if v82First {
					v82First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v82Name))
				out.RawByte(':')
				out.Raw((v82Value).MarshalJSON())
			}
			out.RawByte('}')
		}
	}
	if len(in.Conditions) != 0 {
		const prefix string = ",\"conditions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v83, v84 := range in.Conditions {
				if v83 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV123(out, v84)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV123(in *jlexer.Lexer, out *_v11.PersistentVolumeClaimCondition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = _v11.PersistentVolumeClaimConditionType(in.String())
		case "status":
			out.Status = _v11.ConditionStatus(in.String())
		case "lastProbeTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastProbeTime).UnmarshalJSON(data))
			}
		case "lastTransitionTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastTransitionTime).UnmarshalJSON(data))
			}
		case "reason":
			out.Reason = string(in.String())
		case "message":
			out.Message = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV123(out *jwriter.Writer, in _v11.PersistentVolumeClaimCondition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	if true {
		const prefix string = ",\"lastProbeTime\":"
		out.RawString(prefix)
		out.Raw((in.LastProbeTime).MarshalJSON())
	}
	if true {
		const prefix string = ",\"lastTransitionTime\":"
		out.RawString(prefix)
		out.Raw((in.LastTransitionTime).MarshalJSON())
	}
	if in.Reason != "" {
		const prefix string = ",\"reason\":"
		out.RawString(prefix)
		out.String(string(in.Reason))
	}
	if in.Message != "" {
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV121(in *jlexer.Lexer, out *_v11.PersistentVolumeClaimSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accessModes":
			if in.IsNull() {
				in.Skip()
				out.AccessModes = nil
			} else {
				in.Delim('[')
				if out.AccessModes == nil {
					if !in.IsDelim(']') {
						out.AccessModes = make([]_v11.PersistentVolumeAccessMode, 0, 4)
					} else {
						out.AccessModes = []_v11.PersistentVolumeAccessMode{}
					}
				} else {
					out.AccessModes = (out.AccessModes)[:0]
				}
				for !in.IsDelim(']') {
					var v85 _v11.PersistentVolumeAccessMode
					v85 = _v11.PersistentVolumeAccessMode(in.String())
					out.AccessModes = append(out.AccessModes, v85)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "selector":
			if in.IsNull() {
				in.Skip()
				out.Selector = nil
			} else {
				if out.Selector == nil {
					out.Selector = new(_v1.LabelSelector)
				}
				easyjsonC6c1f4dcDecodeK8sIoApimachineryPkgApisMetaV11(in, out.Selector)
			}
		case "resources":
			easyjsonC6c1f4dcDecodeK8sIoApiCoreV124(in, &out.Resources)
		case "volumeName":
			out.VolumeName = string(in.String())
		case "storageClassName":
			if in.IsNull() {
				in.Skip()
				out.StorageClassName = nil
			} else {
				if out.StorageClassName == nil {
					out.StorageClassName = new(string)
				}
				*out.StorageClassName = string(in.String())
			}
		case "volumeMode":
			if in.IsNull() {
				in.Skip()
				out.VolumeMode = nil
			} else {
				if out.VolumeMode == nil {
					out.VolumeMode = new(_v11.PersistentVolumeMode)
				}
				*out.VolumeMode = _v11.PersistentVolumeMode(in.String())
			}
		case "dataSource":
			if in.IsNull() {
				in.Skip()
				out.DataSource = nil
			} else {
				if out.DataSource == nil {
					out.DataSource = new(_v11.TypedLocalObjectReference)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV125(in, out.DataSource)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV121(out *jwriter.Writer, in _v11.PersistentVolumeClaimSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AccessModes) != 0 {
		const prefix string = ",\"accessModes\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v86, v87 := range in.AccessModes {
				if v86 > 0 {
					out.RawByte(',')
				}
				out.String(string(v87))
			}
			out.RawByte(']')
		}
	}
	if in.Selector != nil {
		const prefix string = ",\"selector\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC6c1f4dcEncodeK8sIoApimachineryPkgApisMetaV11(out, *in.Selector)
	}
	if true {
		const prefix string = ",\"resources\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV124(out, in.Resources)
	}
	if in.VolumeName != "" {
		const prefix string = ",\"volumeName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VolumeName))
	}
	if in.StorageClassName != nil {
		const prefix string = ",\"storageClassName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.StorageClassName))
	}
	if in.VolumeMode != nil {
		const prefix string = ",\"volumeMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.VolumeMode))
	}
	if in.DataSource != nil {
		const prefix string = ",\"dataSource\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV125(out, *in.DataSource)
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV125(in *jlexer.Lexer, out *_v11.TypedLocalObjectReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiGroup":
			if in.IsNull() {
				in.Skip()
				out.APIGroup = nil
			} else {
				if out.APIGroup == nil {
					out.APIGroup = new(string)
				}
				*out.APIGroup = string(in.String())
			}
		case "kind":
			out.Kind = string(in.String())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV125(out *jwriter.Writer, in _v11.TypedLocalObjectReference) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apiGroup\":"
		out.RawString(prefix[1:])
		if in.APIGroup == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.APIGroup))
		}
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV124(in *jlexer.Lexer, out *_v11.ResourceRequirements) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "limits":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Limits = make(_v11.ResourceList)
				} else {
					out.Limits = nil
				}
				for !in.IsDelim('}') {
					key := _v11.ResourceName(in.String())
					in.WantColon()
					var v88 resource.Quantity
					if data := in.Raw(); in.Ok() {
						in.AddError((v88).UnmarshalJSON(data))
					}
					(out.Limits)[key] = v88
					in.WantComma()
				}
				in.Delim('}')
			}
		case "requests":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Requests = make(_v11.ResourceList)
				} else {
					out.Requests = nil
				}
				for !in.IsDelim('}') {
					key := _v11.ResourceName(in.String())
					in.WantColon()
					var v89 resource.Quantity
					if data := in.Raw(); in.Ok() {
						in.AddError((v89).UnmarshalJSON(data))
					}
					(out.Requests)[key] = v89
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV124(out *jwriter.Writer, in _v11.ResourceRequirements) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Limits) != 0 {
		const prefix string = ",\"limits\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v90First := true
			for v90Name, v90Value := range in.Limits {
				if v90First {
					v90First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v90Name))
				out.RawByte(':')
				out.Raw((v90Value).MarshalJSON())
			}
			out.RawByte('}')
		}
	}
	if len(in.Requests) != 0 {
		const prefix string = ",\"requests\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v91First := true
			for v91Name, v91Value := range in.Requests {
				if v91First {
					v91First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v91Name))
				out.RawByte(':')
				out.Raw((v91Value).MarshalJSON())
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV1(in *jlexer.Lexer, out *_v11.Volume) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "hostPath":
			if in.IsNull() {
				in.Skip()
				out.HostPath = nil
			} else {
				if out.HostPath == nil {
					out.HostPath = new(_v11.HostPathVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV126(in, out.HostPath)
			}
		case "emptyDir":
			if in.IsNull() {
				in.Skip()
				out.EmptyDir = nil
			} else {
				if out.EmptyDir == nil {
					out.EmptyDir = new(_v11.EmptyDirVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV127(in, out.EmptyDir)
			}
		case "gcePersistentDisk":
			if in.IsNull() {
				in.Skip()
				out.GCEPersistentDisk = nil
			} else {
				if out.GCEPersistentDisk == nil {
					out.GCEPersistentDisk = new(_v11.GCEPersistentDiskVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV128(in, out.GCEPersistentDisk)
			}
		case "awsElasticBlockStore":
			if in.IsNull() {
				in.Skip()
				out.AWSElasticBlockStore = nil
			} else {
				if out.AWSElasticBlockStore == nil {
					out.AWSElasticBlockStore = new(_v11.AWSElasticBlockStoreVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV129(in, out.AWSElasticBlockStore)
			}
		case "gitRepo":
			if in.IsNull() {
				in.Skip()
				out.GitRepo = nil
			} else {
				if out.GitRepo == nil {
					out.GitRepo = new(_v11.GitRepoVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV130(in, out.GitRepo)
			}
		case "secret":
			if in.IsNull() {
				in.Skip()
				out.Secret = nil
			} else {
				if out.Secret == nil {
					out.Secret = new(_v11.SecretVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV131(in, out.Secret)
			}
		case "nfs":
			if in.IsNull() {
				in.Skip()
				out.NFS = nil
			} else {
				if out.NFS == nil {
					out.NFS = new(_v11.NFSVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV132(in, out.NFS)
			}
		case "iscsi":
			if in.IsNull() {
				in.Skip()
				out.ISCSI = nil
			} else {
				if out.ISCSI == nil {
					out.ISCSI = new(_v11.ISCSIVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV133(in, out.ISCSI)
			}
		case "glusterfs":
			if in.IsNull() {
				in.Skip()
				out.Glusterfs = nil
			} else {
				if out.Glusterfs == nil {
					out.Glusterfs = new(_v11.GlusterfsVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV134(in, out.Glusterfs)
			}
		case "persistentVolumeClaim":
			if in.IsNull() {
				in.Skip()
				out.PersistentVolumeClaim = nil
			} else {
				if out.PersistentVolumeClaim == nil {
					out.PersistentVolumeClaim = new(_v11.PersistentVolumeClaimVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV135(in, out.PersistentVolumeClaim)
			}
		case "rbd":
			if in.IsNull() {
				in.Skip()
				out.RBD = nil
			} else {
				if out.RBD == nil {
					out.RBD = new(_v11.RBDVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV136(in, out.RBD)
			}
		case "flexVolume":
			if in.IsNull() {
				in.Skip()
				out.FlexVolume = nil
			} else {
				if out.FlexVolume == nil {
					out.FlexVolume = new(_v11.FlexVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV137(in, out.FlexVolume)
			}
		case "cinder":
			if in.IsNull() {
				in.Skip()
				out.Cinder = nil
			} else {
				if out.Cinder == nil {
					out.Cinder = new(_v11.CinderVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV138(in, out.Cinder)
			}
		case "cephfs":
			if in.IsNull() {
				in.Skip()
				out.CephFS = nil
			} else {
				if out.CephFS == nil {
					out.CephFS = new(_v11.CephFSVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV139(in, out.CephFS)
			}
		case "flocker":
			if in.IsNull() {
				in.Skip()
				out.Flocker = nil
			} else {
				if out.Flocker == nil {
					out.Flocker = new(_v11.FlockerVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV140(in, out.Flocker)
			}
		case "downwardAPI":
			if in.IsNull() {
				in.Skip()
				out.DownwardAPI = nil
			} else {
				if out.DownwardAPI == nil {
					out.DownwardAPI = new(_v11.DownwardAPIVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV141(in, out.DownwardAPI)
			}
		case "fc":
			if in.IsNull() {
				in.Skip()
				out.FC = nil
			} else {
				if out.FC == nil {
					out.FC = new(_v11.FCVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV142(in, out.FC)
			}
		case "azureFile":
			if in.IsNull() {
				in.Skip()
				out.AzureFile = nil
			} else {
				if out.AzureFile == nil {
					out.AzureFile = new(_v11.AzureFileVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV143(in, out.AzureFile)
			}
		case "configMap":
			if in.IsNull() {
				in.Skip()
				out.ConfigMap = nil
			} else {
				if out.ConfigMap == nil {
					out.ConfigMap = new(_v11.ConfigMapVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV144(in, out.ConfigMap)
			}
		case "vsphereVolume":
			if in.IsNull() {
				in.Skip()
				out.VsphereVolume = nil
			} else {
				if out.VsphereVolume == nil {
					out.VsphereVolume = new(_v11.VsphereVirtualDiskVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV145(in, out.VsphereVolume)
			}
		case "quobyte":
			if in.IsNull() {
				in.Skip()
				out.Quobyte = nil
			} else {
				if out.Quobyte == nil {
					out.Quobyte = new(_v11.QuobyteVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV146(in, out.Quobyte)
			}
		case "azureDisk":
			if in.IsNull() {
				in.Skip()
				out.AzureDisk = nil
			} else {
				if out.AzureDisk == nil {
					out.AzureDisk = new(_v11.AzureDiskVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV147(in, out.AzureDisk)
			}
		case "photonPersistentDisk":
			if in.IsNull() {
				in.Skip()
				out.PhotonPersistentDisk = nil
			} else {
				if out.PhotonPersistentDisk == nil {
					out.PhotonPersistentDisk = new(_v11.PhotonPersistentDiskVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV148(in, out.PhotonPersistentDisk)
			}
		case "projected":
			if in.IsNull() {
				in.Skip()
				out.Projected = nil
			} else {
				if out.Projected == nil {
					out.Projected = new(_v11.ProjectedVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV149(in, out.Projected)
			}
		case "portworxVolume":
			if in.IsNull() {
				in.Skip()
				out.PortworxVolume = nil
			} else {
				if out.PortworxVolume == nil {
					out.PortworxVolume = new(_v11.PortworxVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV150(in, out.PortworxVolume)
			}
		case "scaleIO":
			if in.IsNull() {
				in.Skip()
				out.ScaleIO = nil
			} else {
				if out.ScaleIO == nil {
					out.ScaleIO = new(_v11.ScaleIOVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV151(in, out.ScaleIO)
			}
		case "storageos":
			if in.IsNull() {
				in.Skip()
				out.StorageOS = nil
			} else {
				if out.StorageOS == nil {
					out.StorageOS = new(_v11.StorageOSVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV152(in, out.StorageOS)
			}
		case "csi":
			if in.IsNull() {
				in.Skip()
				out.CSI = nil
			} else {
				if out.CSI == nil {
					out.CSI = new(_v11.CSIVolumeSource)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV153(in, out.CSI)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV1(out *jwriter.Writer, in _v11.Volume) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.HostPath != nil {
		const prefix string = ",\"hostPath\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV126(out, *in.HostPath)
	}
	if in.EmptyDir != nil {
		const prefix string = ",\"emptyDir\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV127(out, *in.EmptyDir)
	}
	if in.GCEPersistentDisk != nil {
		const prefix string = ",\"gcePersistentDisk\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV128(out, *in.GCEPersistentDisk)
	}
	if in.AWSElasticBlockStore != nil {
		const prefix string = ",\"awsElasticBlockStore\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV129(out, *in.AWSElasticBlockStore)
	}
	if in.GitRepo != nil {
		const prefix string = ",\"gitRepo\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV130(out, *in.GitRepo)
	}
	if in.Secret != nil {
		const prefix string = ",\"secret\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV131(out, *in.Secret)
	}
	if in.NFS != nil {
		const prefix string = ",\"nfs\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV132(out, *in.NFS)
	}
	if in.ISCSI != nil {
		const prefix string = ",\"iscsi\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV133(out, *in.ISCSI)
	}
	if in.Glusterfs != nil {
		const prefix string = ",\"glusterfs\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV134(out, *in.Glusterfs)
	}
	if in.PersistentVolumeClaim != nil {
		const prefix string = ",\"persistentVolumeClaim\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV135(out, *in.PersistentVolumeClaim)
	}
	if in.RBD != nil {
		const prefix string = ",\"rbd\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV136(out, *in.RBD)
	}
	if in.FlexVolume != nil {
		const prefix string = ",\"flexVolume\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV137(out, *in.FlexVolume)
	}
	if in.Cinder != nil {
		const prefix string = ",\"cinder\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV138(out, *in.Cinder)
	}
	if in.CephFS != nil {
		const prefix string = ",\"cephfs\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV139(out, *in.CephFS)
	}
	if in.Flocker != nil {
		const prefix string = ",\"flocker\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV140(out, *in.Flocker)
	}
	if in.DownwardAPI != nil {
		const prefix string = ",\"downwardAPI\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV141(out, *in.DownwardAPI)
	}
	if in.FC != nil {
		const prefix string = ",\"fc\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV142(out, *in.FC)
	}
	if in.AzureFile != nil {
		const prefix string = ",\"azureFile\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV143(out, *in.AzureFile)
	}
	if in.ConfigMap != nil {
		const prefix string = ",\"configMap\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV144(out, *in.ConfigMap)
	}
	if in.VsphereVolume != nil {
		const prefix string = ",\"vsphereVolume\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV145(out, *in.VsphereVolume)
	}
	if in.Quobyte != nil {
		const prefix string = ",\"quobyte\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV146(out, *in.Quobyte)
	}
	if in.AzureDisk != nil {
		const prefix string = ",\"azureDisk\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV147(out, *in.AzureDisk)
	}
	if in.PhotonPersistentDisk != nil {
		const prefix string = ",\"photonPersistentDisk\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV148(out, *in.PhotonPersistentDisk)
	}
	if in.Projected != nil {
		const prefix string = ",\"projected\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV149(out, *in.Projected)
	}
	if in.PortworxVolume != nil {
		const prefix string = ",\"portworxVolume\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV150(out, *in.PortworxVolume)
	}
	if in.ScaleIO != nil {
		const prefix string = ",\"scaleIO\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV151(out, *in.ScaleIO)
	}
	if in.StorageOS != nil {
		const prefix string = ",\"storageos\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV152(out, *in.StorageOS)
	}
	if in.CSI != nil {
		const prefix string = ",\"csi\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV153(out, *in.CSI)
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV153(in *jlexer.Lexer, out *_v11.CSIVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "driver":
			out.Driver = string(in.String())
		case "readOnly":
			if in.IsNull() {
				in.Skip()
				out.ReadOnly = nil
			} else {
				if out.ReadOnly == nil {
					out.ReadOnly = new(bool)
				}
				*out.ReadOnly = bool(in.Bool())
			}
		case "fsType":
			if in.IsNull() {
				in.Skip()
				out.FSType = nil
			} else {
				if out.FSType == nil {
					out.FSType = new(string)
				}
				*out.FSType = string(in.String())
			}
		case "volumeAttributes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.VolumeAttributes = make(map[string]string)
				} else {
					out.VolumeAttributes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v92 string
					v92 = string(in.String())
					(out.VolumeAttributes)[key] = v92
					in.WantComma()
				}
				in.Delim('}')
			}
		case "nodePublishSecretRef":
			if in.IsNull() {
				in.Skip()
				out.NodePublishSecretRef = nil
			} else {
				if out.NodePublishSecretRef == nil {
					out.NodePublishSecretRef = new(_v11.LocalObjectReference)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV14(in, out.NodePublishSecretRef)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV153(out *jwriter.Writer, in _v11.CSIVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"driver\":"
		out.RawString(prefix[1:])
		out.String(string(in.Driver))
	}
	if in.ReadOnly != nil {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(*in.ReadOnly))
	}
	if in.FSType != nil {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(*in.FSType))
	}
	if len(in.VolumeAttributes) != 0 {
		const prefix string = ",\"volumeAttributes\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v93First := true
			for v93Name, v93Value := range in.VolumeAttributes {
				if v93First {
					v93First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v93Name))
				out.RawByte(':')
				out.String(string(v93Value))
			}
			out.RawByte('}')
		}
	}
	if in.NodePublishSecretRef != nil {
		const prefix string = ",\"nodePublishSecretRef\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV14(out, *in.NodePublishSecretRef)
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV152(in *jlexer.Lexer, out *_v11.StorageOSVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "volumeName":
			out.VolumeName = string(in.String())
		case "volumeNamespace":
			out.VolumeNamespace = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(_v11.LocalObjectReference)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV14(in, out.SecretRef)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV152(out *jwriter.Writer, in _v11.StorageOSVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.VolumeName != "" {
		const prefix string = ",\"volumeName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.VolumeName))
	}
	if in.VolumeNamespace != "" {
		const prefix string = ",\"volumeNamespace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.VolumeNamespace))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FSType))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ReadOnly))
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV14(out, *in.SecretRef)
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV151(in *jlexer.Lexer, out *_v11.ScaleIOVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "gateway":
			out.Gateway = string(in.String())
		case "system":
			out.System = string(in.String())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(_v11.LocalObjectReference)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV14(in, out.SecretRef)
			}
		case "sslEnabled":
			out.SSLEnabled = bool(in.Bool())
		case "protectionDomain":
			out.ProtectionDomain = string(in.String())
		case "storagePool":
			out.StoragePool = string(in.String())
		case "storageMode":
			out.StorageMode = string(in.String())
		case "volumeName":
			out.VolumeName = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV151(out *jwriter.Writer, in _v11.ScaleIOVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"gateway\":"
		out.RawString(prefix[1:])
		out.String(string(in.Gateway))
	}
	{
		const prefix string = ",\"system\":"
		out.RawString(prefix)
		out.String(string(in.System))
	}
	{
		const prefix string = ",\"secretRef\":"
		out.RawString(prefix)
		if in.SecretRef == nil {
			out.RawString("null")
		} else {
			easyjsonC6c1f4dcEncodeK8sIoApiCoreV14(out, *in.SecretRef)
		}
	}
	if in.SSLEnabled {
		const prefix string = ",\"sslEnabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.SSLEnabled))
	}
	if in.ProtectionDomain != "" {
		const prefix string = ",\"protectionDomain\":"
		out.RawString(prefix)
		out.String(string(in.ProtectionDomain))
	}
	if in.StoragePool != "" {
		const prefix string = ",\"storagePool\":"
		out.RawString(prefix)
		out.String(string(in.StoragePool))
	}
	if in.StorageMode != "" {
		const prefix string = ",\"storageMode\":"
		out.RawString(prefix)
		out.String(string(in.StorageMode))
	}
	if in.VolumeName != "" {
		const prefix string = ",\"volumeName\":"
		out.RawString(prefix)
		out.String(string(in.VolumeName))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV150(in *jlexer.Lexer, out *_v11.PortworxVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "volumeID":
			out.VolumeID = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV150(out *jwriter.Writer, in _v11.PortworxVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"volumeID\":"
		out.RawString(prefix[1:])
		out.String(string(in.VolumeID))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV149(in *jlexer.Lexer, out *_v11.ProjectedVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sources":
			if in.IsNull() {
				in.Skip()
				out.Sources = nil
			} else {
				in.Delim('[')
				if out.Sources == nil {
					if !in.IsDelim(']') {
						out.Sources = make([]_v11.VolumeProjection, 0, 2)
					} else {
						out.Sources = []_v11.VolumeProjection{}
					}
				} else {
					out.Sources = (out.Sources)[:0]
				}
				for !in.IsDelim(']') {
					var v94 _v11.VolumeProjection
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV154(in, &v94)
					out.Sources = append(out.Sources, v94)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defaultMode":
			if in.IsNull() {
				in.Skip()
				out.DefaultMode = nil
			} else {
				if out.DefaultMode == nil {
					out.DefaultMode = new(int32)
				}
				*out.DefaultMode = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV149(out *jwriter.Writer, in _v11.ProjectedVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sources\":"
		out.RawString(prefix[1:])
		if in.Sources == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v95, v96 := range in.Sources {
				if v95 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV154(out, v96)
			}
			out.RawByte(']')
		}
	}
	if in.DefaultMode != nil {
		const prefix string = ",\"defaultMode\":"
		out.RawString(prefix)
		out.Int32(int32(*in.DefaultMode))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV154(in *jlexer.Lexer, out *_v11.VolumeProjection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "secret":
			if in.IsNull() {
				in.Skip()
				out.Secret = nil
			} else {
				if out.Secret == nil {
					out.Secret = new(_v11.SecretProjection)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV155(in, out.Secret)
			}
		case "downwardAPI":
			if in.IsNull() {
				in.Skip()
				out.DownwardAPI = nil
			} else {
				if out.DownwardAPI == nil {
					out.DownwardAPI = new(_v11.DownwardAPIProjection)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV156(in, out.DownwardAPI)
			}
		case "configMap":
			if in.IsNull() {
				in.Skip()
				out.ConfigMap = nil
			} else {
				if out.ConfigMap == nil {
					out.ConfigMap = new(_v11.ConfigMapProjection)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV157(in, out.ConfigMap)
			}
		case "serviceAccountToken":
			if in.IsNull() {
				in.Skip()
				out.ServiceAccountToken = nil
			} else {
				if out.ServiceAccountToken == nil {
					out.ServiceAccountToken = new(_v11.ServiceAccountTokenProjection)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV158(in, out.ServiceAccountToken)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV154(out *jwriter.Writer, in _v11.VolumeProjection) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Secret != nil {
		const prefix string = ",\"secret\":"
		first = false
		out.RawString(prefix[1:])
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV155(out, *in.Secret)
	}
	if in.DownwardAPI != nil {
		const prefix string = ",\"downwardAPI\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV156(out, *in.DownwardAPI)
	}
	if in.ConfigMap != nil {
		const prefix string = ",\"configMap\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV157(out, *in.ConfigMap)
	}
	if in.ServiceAccountToken != nil {
		const prefix string = ",\"serviceAccountToken\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV158(out, *in.ServiceAccountToken)
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV158(in *jlexer.Lexer, out *_v11.ServiceAccountTokenProjection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "audience":
			out.Audience = string(in.String())
		case "expirationSeconds":
			if in.IsNull() {
				in.Skip()
				out.ExpirationSeconds = nil
			} else {
				if out.ExpirationSeconds == nil {
					out.ExpirationSeconds = new(int64)
				}
				*out.ExpirationSeconds = int64(in.Int64())
			}
		case "path":
			out.Path = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV158(out *jwriter.Writer, in _v11.ServiceAccountTokenProjection) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Audience != "" {
		const prefix string = ",\"audience\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Audience))
	}
	if in.ExpirationSeconds != nil {
		const prefix string = ",\"expirationSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.ExpirationSeconds))
	}
	{
		const prefix string = ",\"path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Path))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV157(in *jlexer.Lexer, out *_v11.ConfigMapProjection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]_v11.KeyToPath, 0, 1)
					} else {
						out.Items = []_v11.KeyToPath{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v97 _v11.KeyToPath
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV159(in, &v97)
					out.Items = append(out.Items, v97)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "optional":
			if in.IsNull() {
				in.Skip()
				out.Optional = nil
			} else {
				if out.Optional == nil {
					out.Optional = new(bool)
				}
				*out.Optional = bool(in.Bool())
			}
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV157(out *jwriter.Writer, in _v11.ConfigMapProjection) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v98, v99 := range in.Items {
				if v98 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV159(out, v99)
			}
			out.RawByte(']')
		}
	}
	if in.Optional != nil {
		const prefix string = ",\"optional\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Optional))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV159(in *jlexer.Lexer, out *_v11.KeyToPath) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "mode":
			if in.IsNull() {
				in.Skip()
				out.Mode = nil
			} else {
				if out.Mode == nil {
					out.Mode = new(int32)
				}
				*out.Mode = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV159(out *jwriter.Writer, in _v11.KeyToPath) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	if in.Mode != nil {
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.Int32(int32(*in.Mode))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV156(in *jlexer.Lexer, out *_v11.DownwardAPIProjection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]_v11.DownwardAPIVolumeFile, 0, 1)
					} else {
						out.Items = []_v11.DownwardAPIVolumeFile{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v100 _v11.DownwardAPIVolumeFile
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV160(in, &v100)
					out.Items = append(out.Items, v100)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV156(out *jwriter.Writer, in _v11.DownwardAPIProjection) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v101, v102 := range in.Items {
				if v101 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV160(out, v102)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV160(in *jlexer.Lexer, out *_v11.DownwardAPIVolumeFile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "fieldRef":
			if in.IsNull() {
				in.Skip()
				out.FieldRef = nil
			} else {
				if out.FieldRef == nil {
					out.FieldRef = new(_v11.ObjectFieldSelector)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV161(in, out.FieldRef)
			}
		case "resourceFieldRef":
			if in.IsNull() {
				in.Skip()
				out.ResourceFieldRef = nil
			} else {
				if out.ResourceFieldRef == nil {
					out.ResourceFieldRef = new(_v11.ResourceFieldSelector)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV162(in, out.ResourceFieldRef)
			}
		case "mode":
			if in.IsNull() {
				in.Skip()
				out.Mode = nil
			} else {
				if out.Mode == nil {
					out.Mode = new(int32)
				}
				*out.Mode = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV160(out *jwriter.Writer, in _v11.DownwardAPIVolumeFile) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	if in.FieldRef != nil {
		const prefix string = ",\"fieldRef\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV161(out, *in.FieldRef)
	}
	if in.ResourceFieldRef != nil {
		const prefix string = ",\"resourceFieldRef\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV162(out, *in.ResourceFieldRef)
	}
	if in.Mode != nil {
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.Int32(int32(*in.Mode))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV162(in *jlexer.Lexer, out *_v11.ResourceFieldSelector) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "containerName":
			out.ContainerName = string(in.String())
		case "resource":
			out.Resource = string(in.String())
		case "divisor":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Divisor).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV162(out *jwriter.Writer, in _v11.ResourceFieldSelector) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ContainerName != "" {
		const prefix string = ",\"containerName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ContainerName))
	}
	{
		const prefix string = ",\"resource\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Resource))
	}
	if true {
		const prefix string = ",\"divisor\":"
		out.RawString(prefix)
		out.Raw((in.Divisor).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV161(in *jlexer.Lexer, out *_v11.ObjectFieldSelector) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "fieldPath":
			out.FieldPath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV161(out *jwriter.Writer, in _v11.ObjectFieldSelector) {
	out.RawByte('{')
	first := true
	_ = first
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	{
		const prefix string = ",\"fieldPath\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FieldPath))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV155(in *jlexer.Lexer, out *_v11.SecretProjection) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]_v11.KeyToPath, 0, 1)
					} else {
						out.Items = []_v11.KeyToPath{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v103 _v11.KeyToPath
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV159(in, &v103)
					out.Items = append(out.Items, v103)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "optional":
			if in.IsNull() {
				in.Skip()
				out.Optional = nil
			} else {
				if out.Optional == nil {
					out.Optional = new(bool)
				}
				*out.Optional = bool(in.Bool())
			}
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV155(out *jwriter.Writer, in _v11.SecretProjection) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v104, v105 := range in.Items {
				if v104 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV159(out, v105)
			}
			out.RawByte(']')
		}
	}
	if in.Optional != nil {
		const prefix string = ",\"optional\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Optional))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV148(in *jlexer.Lexer, out *_v11.PhotonPersistentDiskVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pdID":
			out.PdID = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV148(out *jwriter.Writer, in _v11.PhotonPersistentDiskVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pdID\":"
		out.RawString(prefix[1:])
		out.String(string(in.PdID))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV147(in *jlexer.Lexer, out *_v11.AzureDiskVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "diskName":
			out.DiskName = string(in.String())
		case "diskURI":
			out.DataDiskURI = string(in.String())
		case "cachingMode":
			if in.IsNull() {
				in.Skip()
				out.CachingMode = nil
			} else {
				if out.CachingMode == nil {
					out.CachingMode = new(_v11.AzureDataDiskCachingMode)
				}
				*out.CachingMode = _v11.AzureDataDiskCachingMode(in.String())
			}
		case "fsType":
			if in.IsNull() {
				in.Skip()
				out.FSType = nil
			} else {
				if out.FSType == nil {
					out.FSType = new(string)
				}
				*out.FSType = string(in.String())
			}
		case "readOnly":
			if in.IsNull() {
				in.Skip()
				out.ReadOnly = nil
			} else {
				if out.ReadOnly == nil {
					out.ReadOnly = new(bool)
				}
				*out.ReadOnly = bool(in.Bool())
			}
		case "kind":
			if in.IsNull() {
				in.Skip()
				out.Kind = nil
			} else {
				if out.Kind == nil {
					out.Kind = new(_v11.AzureDataDiskKind)
				}
				*out.Kind = _v11.AzureDataDiskKind(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV147(out *jwriter.Writer, in _v11.AzureDiskVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"diskName\":"
		out.RawString(prefix[1:])
		out.String(string(in.DiskName))
	}
	{
		const prefix string = ",\"diskURI\":"
		out.RawString(prefix)
		out.String(string(in.DataDiskURI))
	}
	if in.CachingMode != nil {
		const prefix string = ",\"cachingMode\":"
		out.RawString(prefix)
		out.String(string(*in.CachingMode))
	}
	if in.FSType != nil {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(*in.FSType))
	}
	if in.ReadOnly != nil {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(*in.ReadOnly))
	}
	if in.Kind != nil {
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(*in.Kind))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV146(in *jlexer.Lexer, out *_v11.QuobyteVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "registry":
			out.Registry = string(in.String())
		case "volume":
			out.Volume = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "user":
			out.User = string(in.String())
		case "group":
			out.Group = string(in.String())
		case "tenant":
			out.Tenant = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV146(out *jwriter.Writer, in _v11.QuobyteVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"registry\":"
		out.RawString(prefix[1:])
		out.String(string(in.Registry))
	}
	{
		const prefix string = ",\"volume\":"
		out.RawString(prefix)
		out.String(string(in.Volume))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.Group != "" {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		out.String(string(in.Group))
	}
	if in.Tenant != "" {
		const prefix string = ",\"tenant\":"
		out.RawString(prefix)
		out.String(string(in.Tenant))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV145(in *jlexer.Lexer, out *_v11.VsphereVirtualDiskVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "volumePath":
			out.VolumePath = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "storagePolicyName":
			out.StoragePolicyName = string(in.String())
		case "storagePolicyID":
			out.StoragePolicyID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV145(out *jwriter.Writer, in _v11.VsphereVirtualDiskVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"volumePath\":"
		out.RawString(prefix[1:])
		out.String(string(in.VolumePath))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.StoragePolicyName != "" {
		const prefix string = ",\"storagePolicyName\":"
		out.RawString(prefix)
		out.String(string(in.StoragePolicyName))
	}
	if in.StoragePolicyID != "" {
		const prefix string = ",\"storagePolicyID\":"
		out.RawString(prefix)
		out.String(string(in.StoragePolicyID))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV144(in *jlexer.Lexer, out *_v11.ConfigMapVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]_v11.KeyToPath, 0, 1)
					} else {
						out.Items = []_v11.KeyToPath{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v106 _v11.KeyToPath
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV159(in, &v106)
					out.Items = append(out.Items, v106)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defaultMode":
			if in.IsNull() {
				in.Skip()
				out.DefaultMode = nil
			} else {
				if out.DefaultMode == nil {
					out.DefaultMode = new(int32)
				}
				*out.DefaultMode = int32(in.Int32())
			}
		case "optional":
			if in.IsNull() {
				in.Skip()
				out.Optional = nil
			} else {
				if out.Optional == nil {
					out.Optional = new(bool)
				}
				*out.Optional = bool(in.Bool())
			}
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV144(out *jwriter.Writer, in _v11.ConfigMapVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v107, v108 := range in.Items {
				if v107 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV159(out, v108)
			}
			out.RawByte(']')
		}
	}
	if in.DefaultMode != nil {
		const prefix string = ",\"defaultMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.DefaultMode))
	}
	if in.Optional != nil {
		const prefix string = ",\"optional\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Optional))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV143(in *jlexer.Lexer, out *_v11.AzureFileVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "secretName":
			out.SecretName = string(in.String())
		case "shareName":
			out.ShareName = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV143(out *jwriter.Writer, in _v11.AzureFileVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"secretName\":"
		out.RawString(prefix[1:])
		out.String(string(in.SecretName))
	}
	{
		const prefix string = ",\"shareName\":"
		out.RawString(prefix)
		out.String(string(in.ShareName))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV142(in *jlexer.Lexer, out *_v11.FCVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "targetWWNs":
			if in.IsNull() {
				in.Skip()
				out.TargetWWNs = nil
			} else {
				in.Delim('[')
				if out.TargetWWNs == nil {
					if !in.IsDelim(']') {
						out.TargetWWNs = make([]string, 0, 4)
					} else {
						out.TargetWWNs = []string{}
					}
				} else {
					out.TargetWWNs = (out.TargetWWNs)[:0]
				}
				for !in.IsDelim(']') {
					var v109 string
					v109 = string(in.String())
					out.TargetWWNs = append(out.TargetWWNs, v109)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "lun":
			if in.IsNull() {
				in.Skip()
				out.Lun = nil
			} else {
				if out.Lun == nil {
					out.Lun = new(int32)
				}
				*out.Lun = int32(in.Int32())
			}
		case "fsType":
			out.FSType = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "wwids":
			if in.IsNull() {
				in.Skip()
				out.WWIDs = nil
			} else {
				in.Delim('[')
				if out.WWIDs == nil {
					if !in.IsDelim(']') {
						out.WWIDs = make([]string, 0, 4)
					} else {
						out.WWIDs = []string{}
					}
				} else {
					out.WWIDs = (out.WWIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v110 string
					v110 = string(in.String())
					out.WWIDs = append(out.WWIDs, v110)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV142(out *jwriter.Writer, in _v11.FCVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.TargetWWNs) != 0 {
		const prefix string = ",\"targetWWNs\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v111, v112 := range in.TargetWWNs {
				if v111 > 0 {
					out.RawByte(',')
				}
				out.String(string(v112))
			}
			out.RawByte(']')
		}
	}
	if in.Lun != nil {
		const prefix string = ",\"lun\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Lun))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FSType))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.ReadOnly))
	}
	if len(in.WWIDs) != 0 {
		const prefix string = ",\"wwids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v113, v114 := range in.WWIDs {
				if v113 > 0 {
					out.RawByte(',')
				}
				out.String(string(v114))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV141(in *jlexer.Lexer, out *_v11.DownwardAPIVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]_v11.DownwardAPIVolumeFile, 0, 1)
					} else {
						out.Items = []_v11.DownwardAPIVolumeFile{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v115 _v11.DownwardAPIVolumeFile
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV160(in, &v115)
					out.Items = append(out.Items, v115)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defaultMode":
			if in.IsNull() {
				in.Skip()
				out.DefaultMode = nil
			} else {
				if out.DefaultMode == nil {
					out.DefaultMode = new(int32)
				}
				*out.DefaultMode = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV141(out *jwriter.Writer, in _v11.DownwardAPIVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v116, v117 := range in.Items {
				if v116 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV160(out, v117)
			}
			out.RawByte(']')
		}
	}
	if in.DefaultMode != nil {
		const prefix string = ",\"defaultMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.DefaultMode))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV140(in *jlexer.Lexer, out *_v11.FlockerVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "datasetName":
			out.DatasetName = string(in.String())
		case "datasetUUID":
			out.DatasetUUID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV140(out *jwriter.Writer, in _v11.FlockerVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DatasetName != "" {
		const prefix string = ",\"datasetName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.DatasetName))
	}
	if in.DatasetUUID != "" {
		const prefix string = ",\"datasetUUID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DatasetUUID))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV139(in *jlexer.Lexer, out *_v11.CephFSVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "monitors":
			if in.IsNull() {
				in.Skip()
				out.Monitors = nil
			} else {
				in.Delim('[')
				if out.Monitors == nil {
					if !in.IsDelim(']') {
						out.Monitors = make([]string, 0, 4)
					} else {
						out.Monitors = []string{}
					}
				} else {
					out.Monitors = (out.Monitors)[:0]
				}
				for !in.IsDelim(']') {
					var v118 string
					v118 = string(in.String())
					out.Monitors = append(out.Monitors, v118)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "path":
			out.Path = string(in.String())
		case "user":
			out.User = string(in.String())
		case "secretFile":
			out.SecretFile = string(in.String())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(_v11.LocalObjectReference)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV14(in, out.SecretRef)
			}
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV139(out *jwriter.Writer, in _v11.CephFSVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"monitors\":"
		out.RawString(prefix[1:])
		if in.Monitors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v119, v120 := range in.Monitors {
				if v119 > 0 {
					out.RawByte(',')
				}
				out.String(string(v120))
			}
			out.RawByte(']')
		}
	}
	if in.Path != "" {
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	if in.User != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.User))
	}
	if in.SecretFile != "" {
		const prefix string = ",\"secretFile\":"
		out.RawString(prefix)
		out.String(string(in.SecretFile))
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV14(out, *in.SecretRef)
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV138(in *jlexer.Lexer, out *_v11.CinderVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "volumeID":
			out.VolumeID = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(_v11.LocalObjectReference)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV14(in, out.SecretRef)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV138(out *jwriter.Writer, in _v11.CinderVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"volumeID\":"
		out.RawString(prefix[1:])
		out.String(string(in.VolumeID))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV14(out, *in.SecretRef)
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV137(in *jlexer.Lexer, out *_v11.FlexVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "driver":
			out.Driver = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(_v11.LocalObjectReference)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV14(in, out.SecretRef)
			}
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "options":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Options = make(map[string]string)
				} else {
					out.Options = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v121 string
					v121 = string(in.String())
					(out.Options)[key] = v121
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV137(out *jwriter.Writer, in _v11.FlexVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"driver\":"
		out.RawString(prefix[1:])
		out.String(string(in.Driver))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV14(out, *in.SecretRef)
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	if len(in.Options) != 0 {
		const prefix string = ",\"options\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v122First := true
			for v122Name, v122Value := range in.Options {
				if v122First {
					v122First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v122Name))
				out.RawByte(':')
				out.String(string(v122Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV136(in *jlexer.Lexer, out *_v11.RBDVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "monitors":
			if in.IsNull() {
				in.Skip()
				out.CephMonitors = nil
			} else {
				in.Delim('[')
				if out.CephMonitors == nil {
					if !in.IsDelim(']') {
						out.CephMonitors = make([]string, 0, 4)
					} else {
						out.CephMonitors = []string{}
					}
				} else {
					out.CephMonitors = (out.CephMonitors)[:0]
				}
				for !in.IsDelim(']') {
					var v123 string
					v123 = string(in.String())
					out.CephMonitors = append(out.CephMonitors, v123)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "image":
			out.RBDImage = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "pool":
			out.RBDPool = string(in.String())
		case "user":
			out.RadosUser = string(in.String())
		case "keyring":
			out.Keyring = string(in.String())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(_v11.LocalObjectReference)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV14(in, out.SecretRef)
			}
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV136(out *jwriter.Writer, in _v11.RBDVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"monitors\":"
		out.RawString(prefix[1:])
		if in.CephMonitors == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v124, v125 := range in.CephMonitors {
				if v124 > 0 {
					out.RawByte(',')
				}
				out.String(string(v125))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.RBDImage))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.RBDPool != "" {
		const prefix string = ",\"pool\":"
		out.RawString(prefix)
		out.String(string(in.RBDPool))
	}
	if in.RadosUser != "" {
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		out.String(string(in.RadosUser))
	}
	if in.Keyring != "" {
		const prefix string = ",\"keyring\":"
		out.RawString(prefix)
		out.String(string(in.Keyring))
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV14(out, *in.SecretRef)
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV135(in *jlexer.Lexer, out *_v11.PersistentVolumeClaimVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "claimName":
			out.ClaimName = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV135(out *jwriter.Writer, in _v11.PersistentVolumeClaimVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"claimName\":"
		out.RawString(prefix[1:])
		out.String(string(in.ClaimName))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV134(in *jlexer.Lexer, out *_v11.GlusterfsVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "endpoints":
			out.EndpointsName = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV134(out *jwriter.Writer, in _v11.GlusterfsVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"endpoints\":"
		out.RawString(prefix[1:])
		out.String(string(in.EndpointsName))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV133(in *jlexer.Lexer, out *_v11.ISCSIVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "targetPortal":
			out.TargetPortal = string(in.String())
		case "iqn":
			out.IQN = string(in.String())
		case "lun":
			out.Lun = int32(in.Int32())
		case "iscsiInterface":
			out.ISCSIInterface = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		case "portals":
			if in.IsNull() {
				in.Skip()
				out.Portals = nil
			} else {
				in.Delim('[')
				if out.Portals == nil {
					if !in.IsDelim(']') {
						out.Portals = make([]string, 0, 4)
					} else {
						out.Portals = []string{}
					}
				} else {
					out.Portals = (out.Portals)[:0]
				}
				for !in.IsDelim(']') {
					var v126 string
					v126 = string(in.String())
					out.Portals = append(out.Portals, v126)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "chapAuthDiscovery":
			out.DiscoveryCHAPAuth = bool(in.Bool())
		case "chapAuthSession":
			out.SessionCHAPAuth = bool(in.Bool())
		case "secretRef":
			if in.IsNull() {
				in.Skip()
				out.SecretRef = nil
			} else {
				if out.SecretRef == nil {
					out.SecretRef = new(_v11.LocalObjectReference)
				}
				easyjsonC6c1f4dcDecodeK8sIoApiCoreV14(in, out.SecretRef)
			}
		case "initiatorName":
			if in.IsNull() {
				in.Skip()
				out.InitiatorName = nil
			} else {
				if out.InitiatorName == nil {
					out.InitiatorName = new(string)
				}
				*out.InitiatorName = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV133(out *jwriter.Writer, in _v11.ISCSIVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"targetPortal\":"
		out.RawString(prefix[1:])
		out.String(string(in.TargetPortal))
	}
	{
		const prefix string = ",\"iqn\":"
		out.RawString(prefix)
		out.String(string(in.IQN))
	}
	{
		const prefix string = ",\"lun\":"
		out.RawString(prefix)
		out.Int32(int32(in.Lun))
	}
	if in.ISCSIInterface != "" {
		const prefix string = ",\"iscsiInterface\":"
		out.RawString(prefix)
		out.String(string(in.ISCSIInterface))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	if len(in.Portals) != 0 {
		const prefix string = ",\"portals\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v127, v128 := range in.Portals {
				if v127 > 0 {
					out.RawByte(',')
				}
				out.String(string(v128))
			}
			out.RawByte(']')
		}
	}
	if in.DiscoveryCHAPAuth {
		const prefix string = ",\"chapAuthDiscovery\":"
		out.RawString(prefix)
		out.Bool(bool(in.DiscoveryCHAPAuth))
	}
	if in.SessionCHAPAuth {
		const prefix string = ",\"chapAuthSession\":"
		out.RawString(prefix)
		out.Bool(bool(in.SessionCHAPAuth))
	}
	if in.SecretRef != nil {
		const prefix string = ",\"secretRef\":"
		out.RawString(prefix)
		easyjsonC6c1f4dcEncodeK8sIoApiCoreV14(out, *in.SecretRef)
	}
	if in.InitiatorName != nil {
		const prefix string = ",\"initiatorName\":"
		out.RawString(prefix)
		out.String(string(*in.InitiatorName))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV132(in *jlexer.Lexer, out *_v11.NFSVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "server":
			out.Server = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV132(out *jwriter.Writer, in _v11.NFSVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"server\":"
		out.RawString(prefix[1:])
		out.String(string(in.Server))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV131(in *jlexer.Lexer, out *_v11.SecretVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "secretName":
			out.SecretName = string(in.String())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]_v11.KeyToPath, 0, 1)
					} else {
						out.Items = []_v11.KeyToPath{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v129 _v11.KeyToPath
					easyjsonC6c1f4dcDecodeK8sIoApiCoreV159(in, &v129)
					out.Items = append(out.Items, v129)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "defaultMode":
			if in.IsNull() {
				in.Skip()
				out.DefaultMode = nil
			} else {
				if out.DefaultMode == nil {
					out.DefaultMode = new(int32)
				}
				*out.DefaultMode = int32(in.Int32())
			}
		case "optional":
			if in.IsNull() {
				in.Skip()
				out.Optional = nil
			} else {
				if out.Optional == nil {
					out.Optional = new(bool)
				}
				*out.Optional = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV131(out *jwriter.Writer, in _v11.SecretVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SecretName != "" {
		const prefix string = ",\"secretName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.SecretName))
	}
	if len(in.Items) != 0 {
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v130, v131 := range in.Items {
				if v130 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApiCoreV159(out, v131)
			}
			out.RawByte(']')
		}
	}
	if in.DefaultMode != nil {
		const prefix string = ",\"defaultMode\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.DefaultMode))
	}
	if in.Optional != nil {
		const prefix string = ",\"optional\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(*in.Optional))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV130(in *jlexer.Lexer, out *_v11.GitRepoVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "repository":
			out.Repository = string(in.String())
		case "revision":
			out.Revision = string(in.String())
		case "directory":
			out.Directory = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV130(out *jwriter.Writer, in _v11.GitRepoVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"repository\":"
		out.RawString(prefix[1:])
		out.String(string(in.Repository))
	}
	if in.Revision != "" {
		const prefix string = ",\"revision\":"
		out.RawString(prefix)
		out.String(string(in.Revision))
	}
	if in.Directory != "" {
		const prefix string = ",\"directory\":"
		out.RawString(prefix)
		out.String(string(in.Directory))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV129(in *jlexer.Lexer, out *_v11.AWSElasticBlockStoreVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "volumeID":
			out.VolumeID = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "partition":
			out.Partition = int32(in.Int32())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV129(out *jwriter.Writer, in _v11.AWSElasticBlockStoreVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"volumeID\":"
		out.RawString(prefix[1:])
		out.String(string(in.VolumeID))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.Partition != 0 {
		const prefix string = ",\"partition\":"
		out.RawString(prefix)
		out.Int32(int32(in.Partition))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV128(in *jlexer.Lexer, out *_v11.GCEPersistentDiskVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pdName":
			out.PDName = string(in.String())
		case "fsType":
			out.FSType = string(in.String())
		case "partition":
			out.Partition = int32(in.Int32())
		case "readOnly":
			out.ReadOnly = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV128(out *jwriter.Writer, in _v11.GCEPersistentDiskVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pdName\":"
		out.RawString(prefix[1:])
		out.String(string(in.PDName))
	}
	if in.FSType != "" {
		const prefix string = ",\"fsType\":"
		out.RawString(prefix)
		out.String(string(in.FSType))
	}
	if in.Partition != 0 {
		const prefix string = ",\"partition\":"
		out.RawString(prefix)
		out.Int32(int32(in.Partition))
	}
	if in.ReadOnly {
		const prefix string = ",\"readOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReadOnly))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV127(in *jlexer.Lexer, out *_v11.EmptyDirVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "medium":
			out.Medium = _v11.StorageMedium(in.String())
		case "sizeLimit":
			if in.IsNull() {
				in.Skip()
				out.SizeLimit = nil
			} else {
				if out.SizeLimit == nil {
					out.SizeLimit = new(resource.Quantity)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.SizeLimit).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV127(out *jwriter.Writer, in _v11.EmptyDirVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Medium != "" {
		const prefix string = ",\"medium\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Medium))
	}
	if in.SizeLimit != nil {
		const prefix string = ",\"sizeLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.SizeLimit).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApiCoreV126(in *jlexer.Lexer, out *_v11.HostPathVolumeSource) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "path":
			out.Path = string(in.String())
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(_v11.HostPathType)
				}
				*out.Type = _v11.HostPathType(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApiCoreV126(out *jwriter.Writer, in _v11.HostPathVolumeSource) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix[1:])
		out.String(string(in.Path))
	}
	if in.Type != nil {
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(*in.Type))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApimachineryPkgApisMetaV1(in *jlexer.Lexer, out *_v1.ObjectMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "generateName":
			out.GenerateName = string(in.String())
		case "namespace":
			out.Namespace = string(in.String())
		case "selfLink":
			out.SelfLink = string(in.String())
		case "uid":
			out.UID = types.UID(in.String())
		case "resourceVersion":
			out.ResourceVersion = string(in.String())
		case "generation":
			out.Generation = int64(in.Int64())
		case "creationTimestamp":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreationTimestamp).UnmarshalJSON(data))
			}
		case "deletionTimestamp":
			if in.IsNull() {
				in.Skip()
				out.DeletionTimestamp = nil
			} else {
				if out.DeletionTimestamp == nil {
					out.DeletionTimestamp = new(_v1.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.DeletionTimestamp).UnmarshalJSON(data))
				}
			}
		case "deletionGracePeriodSeconds":
			if in.IsNull() {
				in.Skip()
				out.DeletionGracePeriodSeconds = nil
			} else {
				if out.DeletionGracePeriodSeconds == nil {
					out.DeletionGracePeriodSeconds = new(int64)
				}
				*out.DeletionGracePeriodSeconds = int64(in.Int64())
			}
		case "labels":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Labels = make(map[string]string)
				} else {
					out.Labels = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v132 string
					v132 = string(in.String())
					(out.Labels)[key] = v132
					in.WantComma()
				}
				in.Delim('}')
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Annotations = make(map[string]string)
				} else {
					out.Annotations = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v133 string
					v133 = string(in.String())
					(out.Annotations)[key] = v133
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ownerReferences":
			if in.IsNull() {
				in.Skip()
				out.OwnerReferences = nil
			} else {
				in.Delim('[')
				if out.OwnerReferences == nil {
					if !in.IsDelim(']') {
						out.OwnerReferences = make([]_v1.OwnerReference, 0, 0)
					} else {
						out.OwnerReferences = []_v1.OwnerReference{}
					}
				} else {
					out.OwnerReferences = (out.OwnerReferences)[:0]
				}
				for !in.IsDelim(']') {
					var v134 _v1.OwnerReference
					easyjsonC6c1f4dcDecodeK8sIoApimachineryPkgApisMetaV13(in, &v134)
					out.OwnerReferences = append(out.OwnerReferences, v134)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "finalizers":
			if in.IsNull() {
				in.Skip()
				out.Finalizers = nil
			} else {
				in.Delim('[')
				if out.Finalizers == nil {
					if !in.IsDelim(']') {
						out.Finalizers = make([]string, 0, 4)
					} else {
						out.Finalizers = []string{}
					}
				} else {
					out.Finalizers = (out.Finalizers)[:0]
				}
				for !in.IsDelim(']') {
					var v135 string
					v135 = string(in.String())
					out.Finalizers = append(out.Finalizers, v135)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "clusterName":
			out.ClusterName = string(in.String())
		case "managedFields":
			if in.IsNull() {
				in.Skip()
				out.ManagedFields = nil
			} else {
				in.Delim('[')
				if out.ManagedFields == nil {
					if !in.IsDelim(']') {
						out.ManagedFields = make([]_v1.ManagedFieldsEntry, 0, 0)
					} else {
						out.ManagedFields = []_v1.ManagedFieldsEntry{}
					}
				} else {
					out.ManagedFields = (out.ManagedFields)[:0]
				}
				for !in.IsDelim(']') {
					var v136 _v1.ManagedFieldsEntry
					easyjsonC6c1f4dcDecodeK8sIoApimachineryPkgApisMetaV14(in, &v136)
					out.ManagedFields = append(out.ManagedFields, v136)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApimachineryPkgApisMetaV1(out *jwriter.Writer, in _v1.ObjectMeta) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.GenerateName != "" {
		const prefix string = ",\"generateName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GenerateName))
	}
	if in.Namespace != "" {
		const prefix string = ",\"namespace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Namespace))
	}
	if in.SelfLink != "" {
		const prefix string = ",\"selfLink\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SelfLink))
	}
	if in.UID != "" {
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UID))
	}
	if in.ResourceVersion != "" {
		const prefix string = ",\"resourceVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResourceVersion))
	}
	if in.Generation != 0 {
		const prefix string = ",\"generation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Generation))
	}
	if true {
		const prefix string = ",\"creationTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.CreationTimestamp).MarshalJSON())
	}
	if in.DeletionTimestamp != nil {
		const prefix string = ",\"deletionTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.DeletionTimestamp).MarshalJSON())
	}
	if in.DeletionGracePeriodSeconds != nil {
		const prefix string = ",\"deletionGracePeriodSeconds\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.DeletionGracePeriodSeconds))
	}
	if len(in.Labels) != 0 {
		const prefix string = ",\"labels\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v137First := true
			for v137Name, v137Value := range in.Labels {
				if v137First {
					v137First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v137Name))
				out.RawByte(':')
				out.String(string(v137Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v138First := true
			for v138Name, v138Value := range in.Annotations {
				if v138First {
					v138First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v138Name))
				out.RawByte(':')
				out.String(string(v138Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.OwnerReferences) != 0 {
		const prefix string = ",\"ownerReferences\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v139, v140 := range in.OwnerReferences {
				if v139 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApimachineryPkgApisMetaV13(out, v140)
			}
			out.RawByte(']')
		}
	}
	if len(in.Finalizers) != 0 {
		const prefix string = ",\"finalizers\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v141, v142 := range in.Finalizers {
				if v141 > 0 {
					out.RawByte(',')
				}
				out.String(string(v142))
			}
			out.RawByte(']')
		}
	}
	if in.ClusterName != "" {
		const prefix string = ",\"clusterName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ClusterName))
	}
	if len(in.ManagedFields) != 0 {
		const prefix string = ",\"managedFields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v143, v144 := range in.ManagedFields {
				if v143 > 0 {
					out.RawByte(',')
				}
				easyjsonC6c1f4dcEncodeK8sIoApimachineryPkgApisMetaV14(out, v144)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApimachineryPkgApisMetaV14(in *jlexer.Lexer, out *_v1.ManagedFieldsEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "manager":
			out.Manager = string(in.String())
		case "operation":
			out.Operation = _v1.ManagedFieldsOperationType(in.String())
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "time":
			if in.IsNull() {
				in.Skip()
				out.Time = nil
			} else {
				if out.Time == nil {
					out.Time = new(_v1.Time)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Time).UnmarshalJSON(data))
				}
			}
		case "fieldsType":
			out.FieldsType = string(in.String())
		case "fieldsV1":
			if in.IsNull() {
				in.Skip()
				out.FieldsV1 = nil
			} else {
				if out.FieldsV1 == nil {
					out.FieldsV1 = new(_v1.FieldsV1)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.FieldsV1).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApimachineryPkgApisMetaV14(out *jwriter.Writer, in _v1.ManagedFieldsEntry) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Manager != "" {
		const prefix string = ",\"manager\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Manager))
	}
	if in.Operation != "" {
		const prefix string = ",\"operation\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Operation))
	}
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.APIVersion))
	}
	if in.Time != nil {
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.Time).MarshalJSON())
	}
	if in.FieldsType != "" {
		const prefix string = ",\"fieldsType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.FieldsType))
	}
	if in.FieldsV1 != nil {
		const prefix string = ",\"fieldsV1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((*in.FieldsV1).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeK8sIoApimachineryPkgApisMetaV13(in *jlexer.Lexer, out *_v1.OwnerReference) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "apiVersion":
			out.APIVersion = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "uid":
			out.UID = types.UID(in.String())
		case "controller":
			if in.IsNull() {
				in.Skip()
				out.Controller = nil
			} else {
				if out.Controller == nil {
					out.Controller = new(bool)
				}
				*out.Controller = bool(in.Bool())
			}
		case "blockOwnerDeletion":
			if in.IsNull() {
				in.Skip()
				out.BlockOwnerDeletion = nil
			} else {
				if out.BlockOwnerDeletion == nil {
					out.BlockOwnerDeletion = new(bool)
				}
				*out.BlockOwnerDeletion = bool(in.Bool())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApimachineryPkgApisMetaV13(out *jwriter.Writer, in _v1.OwnerReference) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"apiVersion\":"
		out.RawString(prefix[1:])
		out.String(string(in.APIVersion))
	}
	{
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		out.String(string(in.UID))
	}
	if in.Controller != nil {
		const prefix string = ",\"controller\":"
		out.RawString(prefix)
		out.Bool(bool(*in.Controller))
	}
	if in.BlockOwnerDeletion != nil {
		const prefix string = ",\"blockOwnerDeletion\":"
		out.RawString(prefix)
		out.Bool(bool(*in.BlockOwnerDeletion))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(in *jlexer.Lexer, out *WorkflowTemplateList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			easyjsonC6c1f4dcDecodeK8sIoApimachineryPkgApisMetaV15(in, &out.ListMeta)
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make(WorkflowTemplates, 0, 0)
					} else {
						out.Items = WorkflowTemplates{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v145 WorkflowTemplate
					(v145).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v145)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "kind":
			out.Kind = string(in.String())
		case "apiVersion":
			out.APIVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(out *jwriter.Writer, in WorkflowTemplateList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		easyjsonC6c1f4dcEncodeK8sIoApimachineryPkgApisMetaV15(out, in.ListMeta)
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v146, v147 := range in.Items {
				if v146 > 0 {
					out.RawByte(',')
				}
				(v147).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		out.RawString(prefix)
		out.String(string(in.APIVersion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkflowTemplateList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC6c1f4dcEncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkflowTemplateList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC6c1f4dcEncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkflowTemplateList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC6c1f4dcDecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkflowTemplateList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC6c1f4dcDecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha11(l, v)
}
func easyjsonC6c1f4dcDecodeK8sIoApimachineryPkgApisMetaV15(in *jlexer.Lexer, out *_v1.ListMeta) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "selfLink":
			out.SelfLink = string(in.String())
		case "resourceVersion":
			out.ResourceVersion = string(in.String())
		case "continue":
			out.Continue = string(in.String())
		case "remainingItemCount":
			if in.IsNull() {
				in.Skip()
				out.RemainingItemCount = nil
			} else {
				if out.RemainingItemCount == nil {
					out.RemainingItemCount = new(int64)
				}
				*out.RemainingItemCount = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeK8sIoApimachineryPkgApisMetaV15(out *jwriter.Writer, in _v1.ListMeta) {
	out.RawByte('{')
	first := true
	_ = first
	if in.SelfLink != "" {
		const prefix string = ",\"selfLink\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.SelfLink))
	}
	if in.ResourceVersion != "" {
		const prefix string = ",\"resourceVersion\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResourceVersion))
	}
	if in.Continue != "" {
		const prefix string = ",\"continue\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Continue))
	}
	if in.RemainingItemCount != nil {
		const prefix string = ",\"remainingItemCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(*in.RemainingItemCount))
	}
	out.RawByte('}')
}
func easyjsonC6c1f4dcDecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(in *jlexer.Lexer, out *WorkflowTemplate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metadata":
			easyjsonC6c1f4dcDecodeK8sIoApimachineryPkgApisMetaV1(in, &out.ObjectMeta)
		case "spec":
			(out.Spec).UnmarshalEasyJSON(in)
		case "kind":
			out.Kind = string(in.String())
		case "apiVersion":
			out.APIVersion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC6c1f4dcEncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(out *jwriter.Writer, in WorkflowTemplate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix[1:])
		easyjsonC6c1f4dcEncodeK8sIoApimachineryPkgApisMetaV1(out, in.ObjectMeta)
	}
	{
		const prefix string = ",\"spec\":"
		out.RawString(prefix)
		(in.Spec).MarshalEasyJSON(out)
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	if in.APIVersion != "" {
		const prefix string = ",\"apiVersion\":"
		out.RawString(prefix)
		out.String(string(in.APIVersion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WorkflowTemplate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC6c1f4dcEncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WorkflowTemplate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC6c1f4dcEncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WorkflowTemplate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC6c1f4dcDecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WorkflowTemplate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC6c1f4dcDecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha12(l, v)
}
