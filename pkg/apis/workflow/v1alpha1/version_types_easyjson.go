// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package v1alpha1

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD37af254DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(in *jlexer.Lexer, out *Version) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "version":
			out.Version = string(in.String())
		case "buildDate":
			out.BuildDate = string(in.String())
		case "gitCommit":
			out.GitCommit = string(in.String())
		case "gitTag":
			out.GitTag = string(in.String())
		case "gitTreeState":
			out.GitTreeState = string(in.String())
		case "goVersion":
			out.GoVersion = string(in.String())
		case "compiler":
			out.Compiler = string(in.String())
		case "platform":
			out.Platform = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD37af254EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(out *jwriter.Writer, in Version) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix[1:])
		out.String(string(in.Version))
	}
	{
		const prefix string = ",\"buildDate\":"
		out.RawString(prefix)
		out.String(string(in.BuildDate))
	}
	{
		const prefix string = ",\"gitCommit\":"
		out.RawString(prefix)
		out.String(string(in.GitCommit))
	}
	{
		const prefix string = ",\"gitTag\":"
		out.RawString(prefix)
		out.String(string(in.GitTag))
	}
	{
		const prefix string = ",\"gitTreeState\":"
		out.RawString(prefix)
		out.String(string(in.GitTreeState))
	}
	{
		const prefix string = ",\"goVersion\":"
		out.RawString(prefix)
		out.String(string(in.GoVersion))
	}
	{
		const prefix string = ",\"compiler\":"
		out.RawString(prefix)
		out.String(string(in.Compiler))
	}
	{
		const prefix string = ",\"platform\":"
		out.RawString(prefix)
		out.String(string(in.Platform))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Version) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD37af254EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Version) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD37af254EncodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Version) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data, CoerceToString: true}
	easyjsonD37af254DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Version) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD37af254DecodeGithubComArgoprojArgoPkgApisWorkflowV1alpha1(l, v)
}
