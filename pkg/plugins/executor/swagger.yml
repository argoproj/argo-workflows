basePath: /api/v1
consumes:
- application/json
definitions:
  AWSElasticBlockStoreVolumeSource:
    description: |-
      An AWS EBS disk must exist before mounting to a container. The disk
      must also be in the same AWS zone as the kubelet. An AWS EBS disk
      can only be mounted as read/write once. AWS EBS volumes support
      ownership management and SELinux relabeling.
    properties:
      fsType:
        description: |-
          Filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      partition:
        description: |-
          The partition in the volume that you want to mount.
          If omitted, the default is to mount by volume name.
          Examples: For volume /dev/sda1, you specify the partition as "1".
          Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
          +optional
        format: int32
        type: integer
      readOnly:
        description: |-
          Specify "true" to force and set the ReadOnly property in VolumeMounts to "true".
          If omitted, the default is "false".
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
          +optional
        type: boolean
      volumeID:
        description: |-
          Unique ID of the persistent disk resource in AWS (Amazon EBS volume).
          More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        type: string
    title: Represents a Persistent Disk resource in AWS.
    type: object
  Affinity:
    properties:
      nodeAffinity:
        $ref: '#/definitions/NodeAffinity'
      podAffinity:
        $ref: '#/definitions/PodAffinity'
      podAntiAffinity:
        $ref: '#/definitions/PodAntiAffinity'
    title: Affinity is a group of affinity scheduling rules.
    type: object
  Amount:
    description: +kubebuilder:validation:Type=number
    title: Amount represent a numeric amount.
    type: object
  AnyString:
    description: |-
      It will unmarshall int64, int32, float64, float32, boolean, a plain string and represents it as string.
      It will marshall back to string - marshalling is not symmetric.
    title: It's JSON type is just string.
    type: string
  ArchiveStrategy:
    description: ArchiveStrategy describes how to archive files/directory when saving
      artifacts
    properties:
      none:
        $ref: '#/definitions/NoneStrategy'
      tar:
        $ref: '#/definitions/TarStrategy'
      zip:
        $ref: '#/definitions/ZipStrategy'
    type: object
  Arguments:
    description: Arguments to a template
    properties:
      artifacts:
        $ref: '#/definitions/Artifacts'
      parameters:
        description: |-
          Parameters is the list of parameters to pass to the template or workflow
          +patchStrategy=merge
          +patchMergeKey=name
        items:
          $ref: '#/definitions/Parameter'
        type: array
    type: object
  Artifact:
    description: Artifact indicates an artifact to place at a specified path
    properties:
      archive:
        $ref: '#/definitions/ArchiveStrategy'
      archiveLogs:
        description: ArchiveLogs indicates if the container logs should be archived
        type: boolean
      artifactory:
        $ref: '#/definitions/ArtifactoryArtifact'
      from:
        description: From allows an artifact to reference an artifact from a previous
          step
        type: string
      fromExpression:
        description: FromExpression, if defined, is evaluated to specify the value
          for the artifact
        type: string
      gcs:
        $ref: '#/definitions/GCSArtifact'
      git:
        $ref: '#/definitions/GitArtifact'
      globalName:
        description: |-
          GlobalName exports an output artifact to the global scope, making it available as
          '{{workflow.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts
        type: string
      hdfs:
        $ref: '#/definitions/HDFSArtifact'
      http:
        $ref: '#/definitions/HTTPArtifact'
      mode:
        description: |-
          mode bits to use on this file, must be a value between 0 and 0777
          set when loading input artifacts.
        format: int32
        type: integer
      name:
        description: name of the artifact. must be unique within a template's inputs/outputs.
        type: string
      optional:
        description: Make Artifacts optional, if Artifacts doesn't generate or exist
        type: boolean
      oss:
        $ref: '#/definitions/OSSArtifact'
      path:
        description: Path is the container path to the artifact
        type: string
      raw:
        $ref: '#/definitions/RawArtifact'
      recurseMode:
        description: If mode is set, apply the permission recursively into the artifact
          if it is a folder
        type: boolean
      s3:
        $ref: '#/definitions/S3Artifact'
      subPath:
        description: SubPath allows an artifact to be sourced from a subpath within
          the specified source
        type: string
    type: object
  ArtifactLocation:
    description: |-
      It is used as single artifact in the context of inputs/outputs (e.g. outputs.artifacts.artname).
      It is also used to describe the location of multiple artifacts such as the archive location
      of a single workflow step, which the executor will use as a default location to store its files.
    properties:
      archiveLogs:
        description: ArchiveLogs indicates if the container logs should be archived
        type: boolean
      artifactory:
        $ref: '#/definitions/ArtifactoryArtifact'
      gcs:
        $ref: '#/definitions/GCSArtifact'
      git:
        $ref: '#/definitions/GitArtifact'
      hdfs:
        $ref: '#/definitions/HDFSArtifact'
      http:
        $ref: '#/definitions/HTTPArtifact'
      oss:
        $ref: '#/definitions/OSSArtifact'
      raw:
        $ref: '#/definitions/RawArtifact'
      s3:
        $ref: '#/definitions/S3Artifact'
    title: ArtifactLocation describes a location for a single or multiple artifacts.
    type: object
  ArtifactPaths:
    description: ArtifactPaths expands a step from a collection of artifacts
    properties:
      archive:
        $ref: '#/definitions/ArchiveStrategy'
      archiveLogs:
        description: ArchiveLogs indicates if the container logs should be archived
        type: boolean
      artifactory:
        $ref: '#/definitions/ArtifactoryArtifact'
      from:
        description: From allows an artifact to reference an artifact from a previous
          step
        type: string
      fromExpression:
        description: FromExpression, if defined, is evaluated to specify the value
          for the artifact
        type: string
      gcs:
        $ref: '#/definitions/GCSArtifact'
      git:
        $ref: '#/definitions/GitArtifact'
      globalName:
        description: |-
          GlobalName exports an output artifact to the global scope, making it available as
          '{{workflow.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts
        type: string
      hdfs:
        $ref: '#/definitions/HDFSArtifact'
      http:
        $ref: '#/definitions/HTTPArtifact'
      mode:
        description: |-
          mode bits to use on this file, must be a value between 0 and 0777
          set when loading input artifacts.
        format: int32
        type: integer
      name:
        description: name of the artifact. must be unique within a template's inputs/outputs.
        type: string
      optional:
        description: Make Artifacts optional, if Artifacts doesn't generate or exist
        type: boolean
      oss:
        $ref: '#/definitions/OSSArtifact'
      path:
        description: Path is the container path to the artifact
        type: string
      raw:
        $ref: '#/definitions/RawArtifact'
      recurseMode:
        description: If mode is set, apply the permission recursively into the artifact
          if it is a folder
        type: boolean
      s3:
        $ref: '#/definitions/S3Artifact'
      subPath:
        description: SubPath allows an artifact to be sourced from a subpath within
          the specified source
        type: string
    type: object
  ArtifactoryArtifact:
    description: ArtifactoryArtifact is the location of an artifactory artifact
    properties:
      passwordSecret:
        $ref: '#/definitions/SecretKeySelector'
      url:
        description: URL of the artifact
        type: string
      usernameSecret:
        $ref: '#/definitions/SecretKeySelector'
    type: object
  Artifacts:
    items:
      $ref: '#/definitions/Artifact'
    type: array
  AzureDataDiskCachingMode:
    type: string
  AzureDataDiskKind:
    type: string
  AzureDiskVolumeSource:
    properties:
      cachingMode:
        $ref: '#/definitions/AzureDataDiskCachingMode'
      diskName:
        description: The Name of the data disk in the blob storage
        type: string
      diskURI:
        description: The URI the data disk in the blob storage
        type: string
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
        type: string
      kind:
        $ref: '#/definitions/AzureDataDiskKind'
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
    title: AzureDisk represents an Azure Data Disk mount on the host and bind mount
      to the pod.
    type: object
  AzureFileVolumeSource:
    properties:
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      secretName:
        description: the name of secret that contains Azure Storage Account Name and
          Key
        type: string
      shareName:
        description: Share Name
        type: string
    title: AzureFile represents an Azure File Service mount on the host and bind mount
      to the pod.
    type: object
  Backoff:
    description: Backoff is a backoff strategy to use within retryStrategy
    properties:
      duration:
        description: Duration is the amount to back off. Default unit is seconds,
          but could also be a duration (e.g. "2m", "1h")
        type: string
      factor:
        $ref: '#/definitions/IntOrString'
      maxDuration:
        description: MaxDuration is the maximum amount of time allowed for the backoff
          strategy
        type: string
    type: object
  CSIVolumeSource:
    description: Represents a source location of a volume to mount, managed by an
      external CSI driver
    properties:
      driver:
        description: |-
          Driver is the name of the CSI driver that handles this volume.
          Consult with your admin for the correct name as registered in the cluster.
        type: string
      fsType:
        description: |-
          Filesystem type to mount. Ex. "ext4", "xfs", "ntfs".
          If not provided, the empty value is passed to the associated CSI driver
          which will determine the default filesystem to apply.
          +optional
        type: string
      nodePublishSecretRef:
        $ref: '#/definitions/LocalObjectReference'
      readOnly:
        description: |-
          Specifies a read-only configuration for the volume.
          Defaults to false (read/write).
          +optional
        type: boolean
      volumeAttributes:
        additionalProperties:
          type: string
        description: |-
          VolumeAttributes stores driver-specific properties that are passed to the CSI
          driver. Consult your driver's documentation for supported values.
          +optional
        type: object
    type: object
  Cache:
    description: Cache is the configuration for the type of cache to be used
    properties:
      configMap:
        $ref: '#/definitions/ConfigMapKeySelector'
    type: object
  Capabilities:
    properties:
      add:
        description: |-
          Added capabilities
          +optional
        items:
          $ref: '#/definitions/Capability'
        type: array
      drop:
        description: |-
          Removed capabilities
          +optional
        items:
          $ref: '#/definitions/Capability'
        type: array
    title: Adds and removes POSIX capabilities from running containers.
    type: object
  Capability:
    description: Capability represent POSIX capabilities type
    type: string
  CephFSVolumeSource:
    description: |-
      Represents a Ceph Filesystem mount that lasts the lifetime of a pod
      Cephfs volumes do not support ownership management or SELinux relabeling.
    properties:
      monitors:
        description: |-
          Required: Monitors is a collection of Ceph monitors
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
        items:
          type: string
        type: array
      path:
        description: |-
          Optional: Used as the mounted root, rather than the full Ceph tree, default is /
          +optional
        type: string
      readOnly:
        description: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
        type: boolean
      secretFile:
        description: |-
          Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
        type: string
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      user:
        description: |-
          Optional: User is the rados user name, default is admin
          More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          +optional
        type: string
    type: object
  CinderVolumeSource:
    description: |-
      A Cinder volume must exist before mounting to a container.
      The volume must also be in the same region as the kubelet.
      Cinder volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
          +optional
        type: string
      readOnly:
        description: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      volumeID:
        description: |-
          volume id used to identify the volume in cinder.
          More info: https://examples.k8s.io/mysql-cinder-pd/README.md
        type: string
    title: Represents a cinder volume resource in Openstack.
    type: object
  ConfigMapEnvSource:
    description: |-
      The contents of the target ConfigMap's Data field will represent the
      key-value pairs as environment variables.
    properties:
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the ConfigMap must be defined
          +optional
        type: boolean
    title: |-
      ConfigMapEnvSource selects a ConfigMap to populate the environment
      variables with.
    type: object
  ConfigMapKeySelector:
    properties:
      key:
        description: The key to select.
        type: string
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the ConfigMap or its key must be defined
          +optional
        type: boolean
    title: Selects a key from a ConfigMap.
    type: object
  ConfigMapProjection:
    description: |-
      The contents of the target ConfigMap's Data field will be presented in a
      projected volume as files using the keys in the Data field as the file names,
      unless the items element is populated with specific mappings of keys to paths.
      Note that this is identical to a configmap volume source without the default
      mode.
    properties:
      items:
        description: |-
          If unspecified, each key-value pair in the Data field of the referenced
          ConfigMap will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the ConfigMap,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/KeyToPath'
        type: array
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the ConfigMap or its keys must be defined
          +optional
        type: boolean
    title: Adapts a ConfigMap into a projected volume.
    type: object
  ConfigMapVolumeSource:
    description: |-
      The contents of the target ConfigMap's Data field will be presented in a
      volume as files using the keys in the Data field as the file names, unless
      the items element is populated with specific mappings of keys to paths.
      ConfigMap volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        description: |-
          Optional: mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
      items:
        description: |-
          If unspecified, each key-value pair in the Data field of the referenced
          ConfigMap will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the ConfigMap,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/KeyToPath'
        type: array
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the ConfigMap or its keys must be defined
          +optional
        type: boolean
    title: Adapts a ConfigMap into a volume.
    type: object
  Container:
    properties:
      args:
        description: |-
          Arguments to the entrypoint.
          The docker image's CMD is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax
          can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
          regardless of whether the variable exists or not.
          Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      command:
        description: |-
          Entrypoint array. Not executed within a shell.
          The docker image's ENTRYPOINT is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax
          can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
          regardless of whether the variable exists or not.
          Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      env:
        description: |-
          List of environment variables to set in the container.
          Cannot be updated.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/EnvVar'
        type: array
      envFrom:
        description: |-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid keys
          will be reported as an event when the container is starting. When a key exists in multiple
          sources, the value associated with the last source will take precedence.
          Values defined by an Env with a duplicate key will take precedence.
          Cannot be updated.
          +optional
        items:
          $ref: '#/definitions/EnvFromSource'
        type: array
      image:
        description: |-
          Docker image name.
          More info: https://kubernetes.io/docs/concepts/containers/images
          This field is optional to allow higher level config management to default or override
          container images in workload controllers like Deployments and StatefulSets.
          +optional
        type: string
      imagePullPolicy:
        $ref: '#/definitions/PullPolicy'
      lifecycle:
        $ref: '#/definitions/Lifecycle'
      livenessProbe:
        $ref: '#/definitions/Probe'
      name:
        description: |-
          Name of the container specified as a DNS_LABEL.
          Each container in a pod must have a unique name (DNS_LABEL).
          Cannot be updated.
        type: string
      ports:
        description: |-
          List of ports to expose from the container. Exposing a port here gives
          the system additional information about the network connections a
          container uses, but is primarily informational. Not specifying a port here
          DOES NOT prevent that port from being exposed. Any port which is
          listening on the default "0.0.0.0" address inside a container will be
          accessible from the network.
          Cannot be updated.
          +optional
          +patchMergeKey=containerPort
          +patchStrategy=merge
          +listType=map
          +listMapKey=containerPort
          +listMapKey=protocol
        items:
          $ref: '#/definitions/ContainerPort'
        type: array
      readinessProbe:
        $ref: '#/definitions/Probe'
      resources:
        $ref: '#/definitions/ResourceRequirements'
      securityContext:
        $ref: '#/definitions/SecurityContext'
      startupProbe:
        $ref: '#/definitions/Probe'
      stdin:
        description: |-
          Whether this container should allocate a buffer for stdin in the container runtime. If this
          is not set, reads from stdin in the container will always result in EOF.
          Default is false.
          +optional
        type: boolean
      stdinOnce:
        description: |-
          Whether the container runtime should close the stdin channel after it has been opened by
          a single attach. When stdin is true the stdin stream will remain open across multiple attach
          sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
          first client attaches to stdin, and then remains open and accepts data until the client disconnects,
          at which time stdin is closed and remains closed until the container is restarted. If this
          flag is false, a container processes that reads from stdin will never receive an EOF.
          Default is false
          +optional
        type: boolean
      terminationMessagePath:
        description: |-
          Optional: Path at which the file to which the container's termination message
          will be written is mounted into the container's filesystem.
          Message written is intended to be brief final status, such as an assertion failure message.
          Will be truncated by the node if greater than 4096 bytes. The total message length across
          all containers will be limited to 12kb.
          Defaults to /dev/termination-log.
          Cannot be updated.
          +optional
        type: string
      terminationMessagePolicy:
        $ref: '#/definitions/TerminationMessagePolicy'
      tty:
        description: |-
          Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
          Default is false.
          +optional
        type: boolean
      volumeDevices:
        description: |-
          volumeDevices is the list of block devices to be used by the container.
          +patchMergeKey=devicePath
          +patchStrategy=merge
          +optional
        items:
          $ref: '#/definitions/VolumeDevice'
        type: array
      volumeMounts:
        description: |-
          Pod volumes to mount into the container's filesystem.
          Cannot be updated.
          +optional
          +patchMergeKey=mountPath
          +patchStrategy=merge
        items:
          $ref: '#/definitions/VolumeMount'
        type: array
      workingDir:
        description: |-
          Container's working directory.
          If not specified, the container runtime's default will be used, which
          might be configured in the container image.
          Cannot be updated.
          +optional
        type: string
    title: A single application container that you want to run within a pod.
    type: object
  ContainerNode:
    properties:
      args:
        description: |-
          Arguments to the entrypoint.
          The docker image's CMD is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax
          can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
          regardless of whether the variable exists or not.
          Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      command:
        description: |-
          Entrypoint array. Not executed within a shell.
          The docker image's ENTRYPOINT is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax
          can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
          regardless of whether the variable exists or not.
          Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      dependencies:
        items:
          type: string
        type: array
      env:
        description: |-
          List of environment variables to set in the container.
          Cannot be updated.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/EnvVar'
        type: array
      envFrom:
        description: |-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid keys
          will be reported as an event when the container is starting. When a key exists in multiple
          sources, the value associated with the last source will take precedence.
          Values defined by an Env with a duplicate key will take precedence.
          Cannot be updated.
          +optional
        items:
          $ref: '#/definitions/EnvFromSource'
        type: array
      image:
        description: |-
          Docker image name.
          More info: https://kubernetes.io/docs/concepts/containers/images
          This field is optional to allow higher level config management to default or override
          container images in workload controllers like Deployments and StatefulSets.
          +optional
        type: string
      imagePullPolicy:
        $ref: '#/definitions/PullPolicy'
      lifecycle:
        $ref: '#/definitions/Lifecycle'
      livenessProbe:
        $ref: '#/definitions/Probe'
      name:
        description: |-
          Name of the container specified as a DNS_LABEL.
          Each container in a pod must have a unique name (DNS_LABEL).
          Cannot be updated.
        type: string
      ports:
        description: |-
          List of ports to expose from the container. Exposing a port here gives
          the system additional information about the network connections a
          container uses, but is primarily informational. Not specifying a port here
          DOES NOT prevent that port from being exposed. Any port which is
          listening on the default "0.0.0.0" address inside a container will be
          accessible from the network.
          Cannot be updated.
          +optional
          +patchMergeKey=containerPort
          +patchStrategy=merge
          +listType=map
          +listMapKey=containerPort
          +listMapKey=protocol
        items:
          $ref: '#/definitions/ContainerPort'
        type: array
      readinessProbe:
        $ref: '#/definitions/Probe'
      resources:
        $ref: '#/definitions/ResourceRequirements'
      securityContext:
        $ref: '#/definitions/SecurityContext'
      startupProbe:
        $ref: '#/definitions/Probe'
      stdin:
        description: |-
          Whether this container should allocate a buffer for stdin in the container runtime. If this
          is not set, reads from stdin in the container will always result in EOF.
          Default is false.
          +optional
        type: boolean
      stdinOnce:
        description: |-
          Whether the container runtime should close the stdin channel after it has been opened by
          a single attach. When stdin is true the stdin stream will remain open across multiple attach
          sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
          first client attaches to stdin, and then remains open and accepts data until the client disconnects,
          at which time stdin is closed and remains closed until the container is restarted. If this
          flag is false, a container processes that reads from stdin will never receive an EOF.
          Default is false
          +optional
        type: boolean
      terminationMessagePath:
        description: |-
          Optional: Path at which the file to which the container's termination message
          will be written is mounted into the container's filesystem.
          Message written is intended to be brief final status, such as an assertion failure message.
          Will be truncated by the node if greater than 4096 bytes. The total message length across
          all containers will be limited to 12kb.
          Defaults to /dev/termination-log.
          Cannot be updated.
          +optional
        type: string
      terminationMessagePolicy:
        $ref: '#/definitions/TerminationMessagePolicy'
      tty:
        description: |-
          Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
          Default is false.
          +optional
        type: boolean
      volumeDevices:
        description: |-
          volumeDevices is the list of block devices to be used by the container.
          +patchMergeKey=devicePath
          +patchStrategy=merge
          +optional
        items:
          $ref: '#/definitions/VolumeDevice'
        type: array
      volumeMounts:
        description: |-
          Pod volumes to mount into the container's filesystem.
          Cannot be updated.
          +optional
          +patchMergeKey=mountPath
          +patchStrategy=merge
        items:
          $ref: '#/definitions/VolumeMount'
        type: array
      workingDir:
        description: |-
          Container's working directory.
          If not specified, the container runtime's default will be used, which
          might be configured in the container image.
          Cannot be updated.
          +optional
        type: string
    type: object
  ContainerPort:
    properties:
      containerPort:
        description: |-
          Number of port to expose on the pod's IP address.
          This must be a valid port number, 0 < x < 65536.
        format: int32
        type: integer
      hostIP:
        description: |-
          What host IP to bind the external port to.
          +optional
        type: string
      hostPort:
        description: |-
          Number of port to expose on the host.
          If specified, this must be a valid port number, 0 < x < 65536.
          If HostNetwork is specified, this must match ContainerPort.
          Most containers do not need this.
          +optional
        format: int32
        type: integer
      name:
        description: |-
          If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
          named port in a pod must have a unique name. Name for the port that can be
          referred to by services.
          +optional
        type: string
      protocol:
        $ref: '#/definitions/Protocol'
    title: ContainerPort represents a network port in a single container.
    type: object
  ContainerSetTemplate:
    properties:
      containers:
        items:
          $ref: '#/definitions/ContainerNode'
        type: array
      volumeMounts:
        items:
          $ref: '#/definitions/VolumeMount'
        type: array
    type: object
  ContinueOn:
    description: It can be specified if the workflow should continue when the pod
      errors, fails or both.
    properties:
      error:
        description: +optional
        type: boolean
      failed:
        description: +optional
        type: boolean
    title: ContinueOn defines if a workflow should continue even if a task or step
      fails/errors.
    type: object
  Counter:
    description: Counter is a Counter prometheus metric
    properties:
      value:
        description: Value is the value of the metric
        type: string
    type: object
  CreateS3BucketOptions:
    description: CreateS3BucketOptions options used to determine automatic automatic
      bucket-creation process
    properties:
      objectLocking:
        description: ObjectLocking Enable object locking
        type: boolean
    type: object
  DAGTask:
    description: DAGTask represents a node in the graph during DAG execution
    properties:
      arguments:
        $ref: '#/definitions/Arguments'
      continueOn:
        $ref: '#/definitions/ContinueOn'
      dependencies:
        description: Dependencies are name of other targets which this depends on
        items:
          type: string
        type: array
      depends:
        description: Depends are name of other targets which this depends on
        type: string
      hooks:
        $ref: '#/definitions/LifecycleHooks'
      inline:
        $ref: '#/definitions/Template'
      name:
        description: Name is the name of the target
        type: string
      onExit:
        description: |-
          OnExit is a template reference which is invoked at the end of the
          template, irrespective of the success, failure, or error of the
          primary template.
          DEPRECATED: Use Hooks[exit].Template instead.
        type: string
      template:
        description: Name of template to execute
        type: string
      templateRef:
        $ref: '#/definitions/TemplateRef'
      when:
        description: When is an expression in which the task should conditionally
          execute
        type: string
      withItems:
        description: WithItems expands a task into multiple parallel tasks from the
          items in the list
        items:
          $ref: '#/definitions/Item'
        type: array
      withParam:
        description: |-
          WithParam expands a task into multiple parallel tasks from the value in the parameter,
          which is expected to be a JSON list.
        type: string
      withSequence:
        $ref: '#/definitions/Sequence'
    type: object
  DAGTemplate:
    description: DAGTemplate is a template subtype for directed acyclic graph templates
    properties:
      failFast:
        description: |-
          This flag is for DAG logic. The DAG logic has a built-in "fail fast" feature to stop scheduling new steps,
          as soon as it detects that one of the DAG nodes is failed. Then it waits until all DAG nodes are completed
          before failing the DAG itself.
          The FailFast flag default is true,  if set to false, it will allow a DAG to run all branches of the DAG to
          completion (either success or failure), regardless of the failed outcomes of branches in the DAG.
          More info and example about this feature at https://github.com/argoproj/argo-workflows/issues/1442
        type: boolean
      target:
        description: Target are one or more names of targets to execute in a DAG
        type: string
      tasks:
        description: |-
          Tasks are a list of DAG tasks
          +patchStrategy=merge
          +patchMergeKey=name
        items:
          $ref: '#/definitions/DAGTask'
        type: array
    type: object
  Data:
    description: Data is a data template
    properties:
      source:
        $ref: '#/definitions/DataSource'
      transformation:
        $ref: '#/definitions/Transformation'
    type: object
  DataSource:
    description: DataSource sources external data into a data template
    properties:
      artifactPaths:
        $ref: '#/definitions/ArtifactPaths'
    type: object
  DownwardAPIProjection:
    description: |-
      Note that this is identical to a downwardAPI volume source without the default
      mode.
    properties:
      items:
        description: |-
          Items is a list of DownwardAPIVolume file
          +optional
        items:
          $ref: '#/definitions/DownwardAPIVolumeFile'
        type: array
    title: Represents downward API info for projecting into a projected volume.
    type: object
  DownwardAPIVolumeFile:
    description: DownwardAPIVolumeFile represents information to create the file containing
      the pod field
    properties:
      fieldRef:
        $ref: '#/definitions/ObjectFieldSelector'
      mode:
        description: |-
          Optional: mode bits used to set permissions on this file, must be an octal value
          between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          If not specified, the volume defaultMode will be used.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
      path:
        description: 'Required: Path is  the relative path name of the file to be
          created. Must not be absolute or contain the ''..'' path. Must be utf-8
          encoded. The first item of the relative path must not start with ''..'''
        type: string
      resourceFieldRef:
        $ref: '#/definitions/ResourceFieldSelector'
    type: object
  DownwardAPIVolumeSource:
    description: Downward API volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        description: |-
          Optional: mode bits to use on created files by default. Must be a
          Optional: mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
      items:
        description: |-
          Items is a list of downward API volume file
          +optional
        items:
          $ref: '#/definitions/DownwardAPIVolumeFile'
        type: array
    title: DownwardAPIVolumeSource represents a volume containing downward API info.
    type: object
  Duration:
    description: |-
      Duration is a wrapper around time.Duration which supports correct
      marshaling to YAML and JSON. In particular, it marshals into strings, which
      can be used as map keys in json.
    type: object
  EmptyDirVolumeSource:
    description: Empty directory volumes support ownership management and SELinux
      relabeling.
    properties:
      medium:
        $ref: '#/definitions/StorageMedium'
      sizeLimit:
        $ref: '#/definitions/Quantity'
    title: Represents an empty directory for a pod.
    type: object
  EnvFromSource:
    description: EnvFromSource represents the source of a set of ConfigMaps
    properties:
      configMapRef:
        $ref: '#/definitions/ConfigMapEnvSource'
      prefix:
        description: |-
          An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
          +optional
        type: string
      secretRef:
        $ref: '#/definitions/SecretEnvSource'
    type: object
  EnvVar:
    properties:
      name:
        description: Name of the environment variable. Must be a C_IDENTIFIER.
        type: string
      value:
        description: |-
          Variable references $(VAR_NAME) are expanded
          using the previous defined environment variables in the container and
          any service environment variables. If a variable cannot be resolved,
          the reference in the input string will be unchanged. The $(VAR_NAME)
          syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
          references will never be expanded, regardless of whether the variable
          exists or not.
          Defaults to "".
          +optional
        type: string
      valueFrom:
        $ref: '#/definitions/EnvVarSource'
    title: EnvVar represents an environment variable present in a Container.
    type: object
  EnvVarSource:
    properties:
      configMapKeyRef:
        $ref: '#/definitions/ConfigMapKeySelector'
      fieldRef:
        $ref: '#/definitions/ObjectFieldSelector'
      resourceFieldRef:
        $ref: '#/definitions/ResourceFieldSelector'
      secretKeyRef:
        $ref: '#/definitions/SecretKeySelector'
    title: EnvVarSource represents a source for the value of an EnvVar.
    type: object
  EphemeralVolumeSource:
    properties:
      volumeClaimTemplate:
        $ref: '#/definitions/PersistentVolumeClaimTemplate'
    title: Represents an ephemeral volume that is handled by a normal storage driver.
    type: object
  ExecAction:
    properties:
      command:
        description: |-
          Command is the command line to execute inside the container, the working directory for the
          command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
          not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
          a shell, you need to explicitly call out to that shell.
          Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          +optional
        items:
          type: string
        type: array
    title: ExecAction describes a "run in container" action.
    type: object
  ExecuteTemplateArgs:
    properties:
      template:
        $ref: '#/definitions/Template'
      workflow:
        $ref: '#/definitions/Workflow'
    required:
    - workflow
    - template
    type: object
  ExecuteTemplateReply:
    properties:
      node:
        $ref: '#/definitions/NodeResult'
      requeue:
        $ref: '#/definitions/Duration'
    type: object
  ExecutorConfig:
    properties:
      serviceAccountName:
        description: ServiceAccountName specifies the service account name of the
          executor container.
        type: string
    title: ExecutorConfig holds configurations of an executor container.
    type: object
  FCVolumeSource:
    description: |-
      Fibre Channel volumes can only be mounted as read/write once.
      Fibre Channel volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      lun:
        description: |-
          Optional: FC target lun number
          +optional
        format: int32
        type: integer
      readOnly:
        description: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      targetWWNs:
        description: |-
          Optional: FC target worldwide names (WWNs)
          +optional
        items:
          type: string
        type: array
      wwids:
        description: |-
          Optional: FC volume world wide identifiers (wwids)
          Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
          +optional
        items:
          type: string
        type: array
    title: Represents a Fibre Channel volume.
    type: object
  FieldsV1:
    description: |-
      Each key is either a '.' representing the field itself, and will always map to an empty set,
      or a string representing a sub-field or item. The string will follow one of these four formats:
      'f:<name>', where <name> is the name of a field in a struct, or key in a map
      'v:<value>', where <value> is the exact json formatted value of a list item
      'i:<index>', where <index> is position of a item in a list
      'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values
      If a key maps to an empty Fields value, the field that key represents is part of the set.

      The exact format is defined in sigs.k8s.io/structured-merge-diff
      +protobuf.options.(gogoproto.goproto_stringer)=false
    title: FieldsV1 stores a set of fields in a data structure like a Trie, in JSON
      format.
    type: object
  FlexVolumeSource:
    description: |-
      FlexVolume represents a generic volume resource that is
      provisioned/attached using an exec based plugin.
    properties:
      driver:
        description: Driver is the name of the driver to use for this volume.
        type: string
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
          +optional
        type: string
      options:
        additionalProperties:
          type: string
        description: |-
          Optional: Extra command options if any.
          +optional
        type: object
      readOnly:
        description: |-
          Optional: Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
    type: object
  FlockerVolumeSource:
    description: |-
      One and only one of datasetName and datasetUUID should be set.
      Flocker volumes do not support ownership management or SELinux relabeling.
    properties:
      datasetName:
        description: |-
          Name of the dataset stored as metadata -> name on the dataset for Flocker
          should be considered as deprecated
          +optional
        type: string
      datasetUUID:
        description: |-
          UUID of the dataset. This is unique identifier of a Flocker dataset
          +optional
        type: string
    title: Represents a Flocker volume mounted by the Flocker agent.
    type: object
  GCEPersistentDiskVolumeSource:
    description: |-
      A GCE PD must exist before mounting to a container. The disk must
      also be in the same GCE project and zone as the kubelet. A GCE PD
      can only be mounted as read/write once or read-only many times. GCE
      PDs support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: |-
          Filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      partition:
        description: |-
          The partition in the volume that you want to mount.
          If omitted, the default is to mount by volume name.
          Examples: For volume /dev/sda1, you specify the partition as "1".
          Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          +optional
        format: int32
        type: integer
      pdName:
        description: |-
          Unique name of the PD resource in GCE. Used to identify the disk in GCE.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        type: string
      readOnly:
        description: |-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
          +optional
        type: boolean
    title: Represents a Persistent Disk resource in Google Compute Engine.
    type: object
  GCSArtifact:
    description: GCSArtifact is the location of a GCS artifact
    properties:
      bucket:
        description: Bucket is the name of the bucket
        type: string
      key:
        description: Key is the path in the bucket where the artifact resides
        type: string
      serviceAccountKeySecret:
        $ref: '#/definitions/SecretKeySelector'
    type: object
  Gauge:
    description: Gauge is a Gauge prometheus metric
    properties:
      realtime:
        description: Realtime emits this metric in real time if applicable
        type: boolean
      value:
        description: Value is the value of the metric
        type: string
    type: object
  GitArtifact:
    description: GitArtifact is the location of an git artifact
    properties:
      depth:
        description: |-
          Depth specifies clones/fetches should be shallow and include the given
          number of commits from the branch tip
        format: uint64
        type: integer
      disableSubmodules:
        description: DisableSubmodules disables submodules during git clone
        type: boolean
      fetch:
        description: Fetch specifies a number of refs that should be fetched before
          checkout
        items:
          type: string
        type: array
      insecureIgnoreHostKey:
        description: InsecureIgnoreHostKey disables SSH strict host key checking during
          git clone
        type: boolean
      passwordSecret:
        $ref: '#/definitions/SecretKeySelector'
      repo:
        description: Repo is the git repository
        type: string
      revision:
        description: Revision is the git commit, tag, branch to checkout
        type: string
      sshPrivateKeySecret:
        $ref: '#/definitions/SecretKeySelector'
      usernameSecret:
        $ref: '#/definitions/SecretKeySelector'
    type: object
  GitRepoVolumeSource:
    description: |-
      DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an
      EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
      into the Pod's container.
    properties:
      directory:
        description: |-
          Target directory name.
          Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
          git repository.  Otherwise, if specified, the volume will contain the git repository in
          the subdirectory with the given name.
          +optional
        type: string
      repository:
        description: Repository URL
        type: string
      revision:
        description: |-
          Commit hash for the specified revision.
          +optional
        type: string
    title: |-
      Represents a volume that is populated with the contents of a git repository.
      Git repo volumes do not support ownership management.
      Git repo volumes support SELinux relabeling.
    type: object
  GlusterfsVolumeSource:
    description: Glusterfs volumes do not support ownership management or SELinux
      relabeling.
    properties:
      endpoints:
        description: |-
          EndpointsName is the endpoint name that details Glusterfs topology.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        type: string
      path:
        description: |-
          Path is the Glusterfs volume path.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        type: string
      readOnly:
        description: |-
          ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions.
          Defaults to false.
          More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
          +optional
        type: boolean
    title: Represents a Glusterfs mount that lasts the lifetime of a pod.
    type: object
  HDFSArtifact:
    description: HDFSArtifact is the location of an HDFS artifact
    properties:
      addresses:
        description: Addresses is accessible addresses of HDFS name nodes
        items:
          type: string
        type: array
      force:
        description: Force copies a file forcibly even if it exists
        type: boolean
      hdfsUser:
        description: |-
          HDFSUser is the user to access HDFS file system.
          It is ignored if either ccache or keytab is used.
        type: string
      krbCCacheSecret:
        $ref: '#/definitions/SecretKeySelector'
      krbConfigConfigMap:
        $ref: '#/definitions/ConfigMapKeySelector'
      krbKeytabSecret:
        $ref: '#/definitions/SecretKeySelector'
      krbRealm:
        description: |-
          KrbRealm is the Kerberos realm used with Kerberos keytab
          It must be set if keytab is used.
        type: string
      krbServicePrincipalName:
        description: |-
          KrbServicePrincipalName is the principal name of Kerberos service
          It must be set if either ccache or keytab is used.
        type: string
      krbUsername:
        description: |-
          KrbUsername is the Kerberos username used with Kerberos keytab
          It must be set if keytab is used.
        type: string
      path:
        description: Path is a file path in HDFS
        type: string
    type: object
  HTTP:
    properties:
      body:
        description: Body is content of the HTTP Request
        type: string
      headers:
        description: Headers are an optional list of headers to send with HTTP requests
        items:
          $ref: '#/definitions/HTTPHeader'
        type: array
      method:
        description: Method is HTTP methods for HTTP Request
        type: string
      timeoutSeconds:
        description: TimeoutSeconds is request timeout for HTTP Request. Default is
          30 seconds
        format: int64
        type: integer
      url:
        description: URL of the HTTP Request
        type: string
    type: object
  HTTPArtifact:
    description: HTTPArtifact allows an file served on HTTP to be placed as an input
      artifact in a container
    properties:
      headers:
        description: Headers are an optional list of headers to send with HTTP requests
          for artifacts
        items:
          $ref: '#/definitions/Header'
        type: array
      url:
        description: URL of the artifact
        type: string
    type: object
  HTTPGetAction:
    properties:
      host:
        description: |-
          Host name to connect to, defaults to the pod IP. You probably want to set
          "Host" in httpHeaders instead.
          +optional
        type: string
      httpHeaders:
        description: |-
          Custom headers to set in the request. HTTP allows repeated headers.
          +optional
        items:
          $ref: '#/definitions/HTTPHeader'
        type: array
      path:
        description: |-
          Path to access on the HTTP server.
          +optional
        type: string
      port:
        $ref: '#/definitions/IntOrString'
      scheme:
        $ref: '#/definitions/URIScheme'
    title: HTTPGetAction describes an action based on HTTP Get requests.
    type: object
  HTTPHeader:
    properties:
      name:
        type: string
      value:
        type: string
      valueFrom:
        $ref: '#/definitions/HTTPHeaderSource'
    type: object
  HTTPHeaderSource:
    properties:
      secretKeyRef:
        $ref: '#/definitions/SecretKeySelector'
    type: object
  Handler:
    description: |-
      Handler defines a specific action that should be taken
      TODO: pass structured data to these actions, and document that data here.
    properties:
      exec:
        $ref: '#/definitions/ExecAction'
      httpGet:
        $ref: '#/definitions/HTTPGetAction'
      tcpSocket:
        $ref: '#/definitions/TCPSocketAction'
    type: object
  Header:
    description: Header indicate a key-value request header to be used when fetching
      artifacts over HTTP
    properties:
      name:
        description: Name is the header name
        type: string
      value:
        description: Value is the literal value to use for the header
        type: string
    type: object
  Histogram:
    description: Histogram is a Histogram prometheus metric
    properties:
      buckets:
        description: Buckets is a list of bucket divisors for the histogram
        items:
          $ref: '#/definitions/Amount'
        type: array
      value:
        description: Value is the value of the metric
        type: string
    type: object
  HostAlias:
    description: |-
      HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
      pod's hosts file.
    properties:
      hostnames:
        description: Hostnames for the above IP address.
        items:
          type: string
        type: array
      ip:
        description: IP address of the host file entry.
        type: string
    type: object
  HostPathType:
    type: string
  HostPathVolumeSource:
    description: Host path volumes do not support ownership management or SELinux
      relabeling.
    properties:
      path:
        description: |-
          Path of the directory on the host.
          If the path is a symlink, it will follow the link to the real path.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        type: string
      type:
        $ref: '#/definitions/HostPathType'
    title: Represents a host path mapped into a pod.
    type: object
  ISCSIVolumeSource:
    description: |-
      ISCSI volumes can only be mounted as read/write once.
      ISCSI volumes support ownership management and SELinux relabeling.
    properties:
      chapAuthDiscovery:
        description: |-
          whether support iSCSI Discovery CHAP authentication
          +optional
        type: boolean
      chapAuthSession:
        description: |-
          whether support iSCSI Session CHAP authentication
          +optional
        type: boolean
      fsType:
        description: |-
          Filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      initiatorName:
        description: |-
          Custom iSCSI Initiator Name.
          If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
          <target portal>:<volume name> will be created for the connection.
          +optional
        type: string
      iqn:
        description: Target iSCSI Qualified Name.
        type: string
      iscsiInterface:
        description: |-
          iSCSI Interface Name that uses an iSCSI transport.
          Defaults to 'default' (tcp).
          +optional
        type: string
      lun:
        description: iSCSI Target Lun number.
        format: int32
        type: integer
      portals:
        description: |-
          iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
          is other than default (typically TCP ports 860 and 3260).
          +optional
        items:
          type: string
        type: array
      readOnly:
        description: |-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      targetPortal:
        description: |-
          iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
          is other than default (typically TCP ports 860 and 3260).
        type: string
    title: Represents an ISCSI disk.
    type: object
  Inputs:
    description: Inputs are the mechanism for passing parameters, artifacts, volumes
      from one template to another
    properties:
      artifacts:
        $ref: '#/definitions/Artifacts'
      parameters:
        description: |-
          Parameters are a list of parameters passed as inputs
          +patchStrategy=merge
          +patchMergeKey=name
        items:
          $ref: '#/definitions/Parameter'
        type: array
    type: object
  IntOrString:
    description: |-
      +protobuf=true
      +protobuf.options.(gogoproto.goproto_stringer)=false
      +k8s:openapi-gen=true
    properties:
      IntVal:
        format: int32
        type: integer
      StrVal:
        type: string
      Type:
        $ref: '#/definitions/Type'
    title: |-
      IntOrString is a type that can hold an int32 or a string.  When used in
      JSON or YAML marshalling and unmarshalling, it produces or consumes the
      inner type.  This allows you to have, for example, a JSON field that can
      accept a name or number.
      TODO: Rename to Int32OrString
    type: object
  Item:
    description: |-
      +protobuf.options.(gogoproto.goproto_stringer)=false
      +kubebuilder:validation:Type=object
    title: |-
      Item expands a single workflow step into multiple parallel steps
      The value of Item can be a map, string, bool, or number
    type: object
  KeyToPath:
    properties:
      key:
        description: The key to project.
        type: string
      mode:
        description: |-
          Optional: mode bits used to set permissions on this file.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          If not specified, the volume defaultMode will be used.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
      path:
        description: |-
          The relative path of the file to map the key to.
          May not be an absolute path.
          May not contain the path element '..'.
          May not start with the string '..'.
        type: string
    title: Maps a string key to a path within a volume.
    type: object
  LabelSelector:
    description: |-
      A label selector is a label query over a set of resources. The result of matchLabels and
      matchExpressions are ANDed. An empty label selector matches all objects. A null
      label selector matches no objects.
      +structType=atomic
    properties:
      matchExpressions:
        description: |-
          matchExpressions is a list of label selector requirements. The requirements are ANDed.
          +optional
        items:
          $ref: '#/definitions/LabelSelectorRequirement'
        type: array
      matchLabels:
        additionalProperties:
          type: string
        description: |-
          matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
          map is equivalent to an element of matchExpressions, whose key field is "key", the
          operator is "In", and the values array contains only "value". The requirements are ANDed.
          +optional
        type: object
    type: object
  LabelSelectorOperator:
    title: A label selector operator is the set of operators that can be used in a
      selector requirement.
    type: string
  LabelSelectorRequirement:
    description: |-
      A label selector requirement is a selector that contains values, a key, and an operator that
      relates the key and values.
    properties:
      key:
        description: |-
          key is the label key that the selector applies to.
          +patchMergeKey=key
          +patchStrategy=merge
        type: string
      operator:
        $ref: '#/definitions/LabelSelectorOperator'
      values:
        description: |-
          values is an array of string values. If the operator is In or NotIn,
          the values array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. This array is replaced during a strategic
          merge patch.
          +optional
        items:
          type: string
        type: array
    type: object
  Lifecycle:
    description: |-
      Lifecycle describes actions that the management system should take in response to container lifecycle
      events. For the PostStart and PreStop lifecycle handlers, management of the container blocks
      until the action is complete, unless the container process fails, in which case the handler is aborted.
    properties:
      postStart:
        $ref: '#/definitions/Handler'
      preStop:
        $ref: '#/definitions/Handler'
    type: object
  LifecycleHook:
    properties:
      arguments:
        $ref: '#/definitions/Arguments'
      template:
        type: string
    type: object
  LifecycleHooks:
    additionalProperties:
      $ref: '#/definitions/LifecycleHook'
    type: object
  LocalObjectReference:
    description: |-
      LocalObjectReference contains enough information to let you locate the
      referenced object inside the same namespace.
    properties:
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
    type: object
  ManagedFieldsEntry:
    description: |-
      ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource
      that the fieldset applies to.
    properties:
      apiVersion:
        description: |-
          APIVersion defines the version of this resource that this field set
          applies to. The format is "group/version" just like the top-level
          APIVersion field. It is necessary to track the version of a field
          set because it cannot be automatically converted.
        type: string
      fieldsType:
        description: |-
          FieldsType is the discriminator for the different fields format and version.
          There is currently only one possible value: "FieldsV1"
        type: string
      fieldsV1:
        $ref: '#/definitions/FieldsV1'
      manager:
        description: Manager is an identifier of the workflow managing these fields.
        type: string
      operation:
        $ref: '#/definitions/ManagedFieldsOperationType'
      time:
        $ref: '#/definitions/Time'
    type: object
  ManagedFieldsOperationType:
    title: ManagedFieldsOperationType is the type of operation which lead to a ManagedFieldsEntry
      being created.
    type: string
  Memoize:
    description: Memoization enables caching for the Outputs of the template
    properties:
      cache:
        $ref: '#/definitions/Cache'
      key:
        description: Key is the key to use as the caching key
        type: string
      maxAge:
        description: |-
          MaxAge is the maximum age (e.g. "180s", "24h") of an entry that is still considered valid. If an entry is older
          than the MaxAge, it will be ignored.
        type: string
    type: object
  Metadata:
    description: Pod metdata
    properties:
      annotations:
        additionalProperties:
          type: string
        type: object
      labels:
        additionalProperties:
          type: string
        type: object
    type: object
  MetricLabel:
    description: MetricLabel is a single label for a prometheus metric
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  Metrics:
    description: Metrics are a list of metrics emitted from a Workflow/Template
    properties:
      prometheus:
        description: Prometheus is a list of prometheus metrics to be emitted
        items:
          $ref: '#/definitions/Prometheus'
        type: array
    type: object
  MountPropagationMode:
    title: MountPropagationMode describes mount propagation.
    type: string
  Mutex:
    description: Mutex holds Mutex configuration
    properties:
      name:
        description: name of the mutex
        type: string
    type: object
  NFSVolumeSource:
    description: NFS volumes do not support ownership management or SELinux relabeling.
    properties:
      path:
        description: |-
          Path that is exported by the NFS server.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        type: string
      readOnly:
        description: |-
          ReadOnly here will force
          the NFS export to be mounted with read-only permissions.
          Defaults to false.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
          +optional
        type: boolean
      server:
        description: |-
          Server is the hostname or IP address of the NFS server.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        type: string
    title: Represents an NFS mount that lasts the lifetime of a pod.
    type: object
  NodeAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node matches the corresponding matchExpressions; the
          node(s) with the highest sum are the most preferred.
          +optional
        items:
          $ref: '#/definitions/PreferredSchedulingTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        $ref: '#/definitions/NodeSelector'
    title: Node affinity is a group of node affinity scheduling rules.
    type: object
  NodePhase:
    title: NodePhase is a label for the condition of a node at the current time.
    type: string
  NodeResult:
    properties:
      message:
        type: string
      outputs:
        $ref: '#/definitions/Outputs'
      phase:
        $ref: '#/definitions/NodePhase'
    type: object
  NodeSelector:
    description: |-
      A node selector represents the union of the results of one or more label queries
      over a set of nodes; that is, it represents the OR of the selectors represented
      by the node selector terms.
    properties:
      nodeSelectorTerms:
        description: Required. A list of node selector terms. The terms are ORed.
        items:
          $ref: '#/definitions/NodeSelectorTerm'
        type: array
    type: object
  NodeSelectorOperator:
    description: |-
      A node selector operator is the set of operators that can be used in
      a node selector requirement.
    type: string
  NodeSelectorRequirement:
    description: |-
      A node selector requirement is a selector that contains values, a key, and an operator
      that relates the key and values.
    properties:
      key:
        description: The label key that the selector applies to.
        type: string
      operator:
        $ref: '#/definitions/NodeSelectorOperator'
      values:
        description: |-
          An array of string values. If the operator is In or NotIn,
          the values array must be non-empty. If the operator is Exists or DoesNotExist,
          the values array must be empty. If the operator is Gt or Lt, the values
          array must have a single element, which will be interpreted as an integer.
          This array is replaced during a strategic merge patch.
          +optional
        items:
          type: string
        type: array
    type: object
  NodeSelectorTerm:
    description: |-
      A null or empty node selector term matches no objects. The requirements of
      them are ANDed.
      The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
    properties:
      matchExpressions:
        description: |-
          A list of node selector requirements by node's labels.
          +optional
        items:
          $ref: '#/definitions/NodeSelectorRequirement'
        type: array
      matchFields:
        description: |-
          A list of node selector requirements by node's fields.
          +optional
        items:
          $ref: '#/definitions/NodeSelectorRequirement'
        type: array
    type: object
  NoneStrategy:
    description: |-
      NoneStrategy indicates to skip tar process and upload the files or directory tree as independent
      files. Note that if the artifact is a directory, the artifact driver must support the ability to
      save/load the directory appropriately.
    type: object
  OSSArtifact:
    description: OSSArtifact is the location of an Alibaba Cloud OSS artifact
    properties:
      accessKeySecret:
        $ref: '#/definitions/SecretKeySelector'
      bucket:
        description: Bucket is the name of the bucket
        type: string
      createBucketIfNotPresent:
        description: CreateBucketIfNotPresent tells the driver to attempt to create
          the OSS bucket for output artifacts, if it doesn't exist
        type: boolean
      endpoint:
        description: Endpoint is the hostname of the bucket endpoint
        type: string
      key:
        description: Key is the path in the bucket where the artifact resides
        type: string
      lifecycleRule:
        $ref: '#/definitions/OSSLifecycleRule'
      secretKeySecret:
        $ref: '#/definitions/SecretKeySelector'
      securityToken:
        description: 'SecurityToken is the user''s temporary security token. For more
          details, check out: https://www.alibabacloud.com/help/doc-detail/100624.htm'
        type: string
    type: object
  OSSLifecycleRule:
    description: OSSLifecycleRule specifies how to manage bucket's lifecycle
    properties:
      markDeletionAfterDays:
        description: MarkDeletionAfterDays is the number of days before we delete
          objects in the bucket
        format: int32
        type: integer
      markInfrequentAccessAfterDays:
        description: MarkInfrequentAccessAfterDays is the number of days before we
          convert the objects in the bucket to Infrequent Access (IA) storage type
        format: int32
        type: integer
    type: object
  Object:
    description: +kubebuilder:validation:Type=object
    type: object
  ObjectFieldSelector:
    properties:
      apiVersion:
        description: |-
          Version of the schema the FieldPath is written in terms of, defaults to "v1".
          +optional
        type: string
      fieldPath:
        description: Path of the field to select in the specified API version.
        type: string
    title: ObjectFieldSelector selects an APIVersioned field of an object.
    type: object
  ObjectMeta:
    properties:
      name:
        type: string
    type: object
  Outputs:
    description: Outputs hold parameters, artifacts, and results from a step
    properties:
      artifacts:
        $ref: '#/definitions/Artifacts'
      exitCode:
        description: ExitCode holds the exit code of a script template
        type: string
      parameters:
        description: |-
          Parameters holds the list of output parameters produced by a step
          +patchStrategy=merge
          +patchMergeKey=name
        items:
          $ref: '#/definitions/Parameter'
        type: array
      result:
        description: Result holds the result (stdout) of a script template
        type: string
    type: object
  OwnerReference:
    description: |-
      OwnerReference contains enough information to let you identify an owning
      object. An owning object must be in the same namespace as the dependent, or
      be cluster-scoped, so there is no namespace field.
    properties:
      apiVersion:
        description: API version of the referent.
        type: string
      blockOwnerDeletion:
        description: |-
          If true, AND if the owner has the "foregroundDeletion" finalizer, then
          the owner cannot be deleted from the key-value store until this
          reference is removed.
          Defaults to false.
          To set this field, a user needs "delete" permission of the owner,
          otherwise 422 (Unprocessable Entity) will be returned.
          +optional
        type: boolean
      controller:
        description: |-
          If true, this reference points to the managing controller.
          +optional
        type: boolean
      kind:
        description: |-
          Kind of the referent.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        type: string
      name:
        description: |-
          Name of the referent.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
        type: string
      uid:
        $ref: '#/definitions/UID'
    type: object
  ParallelSteps:
    description: +kubebuilder:validation:Type=array
    type: object
  Parameter:
    description: Parameter indicate a passed string parameter to a service template
      with an optional default value
    properties:
      default:
        $ref: '#/definitions/AnyString'
      enum:
        description: Enum holds a list of string values to choose from, for the actual
          value of the parameter
        items:
          $ref: '#/definitions/AnyString'
        type: array
      globalName:
        description: |-
          GlobalName exports an output parameter to the global scope, making it available as
          '{{workflow.outputs.parameters.XXXX}} and in workflow.status.outputs.parameters
        type: string
      name:
        description: Name is the parameter name
        type: string
      value:
        $ref: '#/definitions/AnyString'
      valueFrom:
        $ref: '#/definitions/ValueFrom'
    type: object
  PersistentVolumeAccessMode:
    type: string
  PersistentVolumeClaimSpec:
    description: |-
      PersistentVolumeClaimSpec describes the common attributes of storage devices
      and allows a Source for provider-specific attributes
    properties:
      accessModes:
        description: |-
          AccessModes contains the desired access modes the volume should have.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
          +optional
        items:
          $ref: '#/definitions/PersistentVolumeAccessMode'
        type: array
      dataSource:
        $ref: '#/definitions/TypedLocalObjectReference'
      resources:
        $ref: '#/definitions/ResourceRequirements'
      selector:
        $ref: '#/definitions/LabelSelector'
      storageClassName:
        description: |-
          Name of the StorageClass required by the claim.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
          +optional
        type: string
      volumeMode:
        $ref: '#/definitions/PersistentVolumeMode'
      volumeName:
        description: |-
          VolumeName is the binding reference to the PersistentVolume backing this claim.
          +optional
        type: string
    type: object
  PersistentVolumeClaimTemplate:
    description: |-
      PersistentVolumeClaimTemplate is used to produce
      PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          Annotations is an unstructured key value map stored with a resource that may be
          set by external tools to store and retrieve arbitrary metadata. They are not
          queryable and should be preserved when modifying objects.
          More info: http://kubernetes.io/docs/user-guide/annotations
          +optional
        type: object
      clusterName:
        description: |-
          The name of the cluster which the object belongs to.
          This is used to distinguish resources with same name and namespace in different clusters.
          This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
          +optional
        type: string
      creationTimestamp:
        $ref: '#/definitions/Time'
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before
          it will be removed from the system. Only set when deletionTimestamp is also set.
          May only be shortened.
          Read-only.
          +optional
        format: int64
        type: integer
      deletionTimestamp:
        $ref: '#/definitions/Time'
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry. Each entry
          is an identifier for the responsible component that will remove the entry
          from the list. If the deletionTimestamp of the object is non-nil, entries
          in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced
          because it introduces significant risk of stuck finalizers.
          finalizers is a shared field, any actor with permission can reorder it.
          If the finalizer list is processed in order, then this can lead to a situation
          in which the component responsible for the first finalizer in the list is
          waiting for a signal (field value, external system, or other) produced by a
          component responsible for a finalizer later in the list, resulting in a deadlock.
          Without enforced ordering finalizers are free to order amongst themselves and
          are not vulnerable to ordering changes in the list.
          +optional
          +patchStrategy=merge
        items:
          type: string
        type: array
      generateName:
        description: |-
          GenerateName is an optional prefix, used by the server, to generate a unique
          name ONLY IF the Name field has not been provided.
          If this field is used, the name returned to the client will be different
          than the name passed. This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the Name field,
          and may be truncated by the length of the suffix required to make the value
          unique on the server.

          If this field is specified and the generated name exists, the server will
          NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
          ServerTimeout indicating a unique name could not be found in the time allotted, and the client
          should retry (optionally after the time indicated in the Retry-After header).

          Applied only if Name is not specified.
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
          +optional
        type: string
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
          +optional
        format: int64
        type: integer
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize
          (scope and select) objects. May match selectors of replication controllers
          and services.
          More info: http://kubernetes.io/docs/user-guide/labels
          +optional
        type: object
      managedFields:
        description: |-
          ManagedFields maps workflow-id and version to the set of fields
          that are managed by that workflow. This is mostly for internal
          housekeeping, and users typically shouldn't need to set or
          understand this field. A workflow can be the user's name, a
          controller's name, or the name of a specific apply path like
          "ci-cd". The set of fields is always in the version that the
          workflow used when modifying the object.

          +optional
        items:
          $ref: '#/definitions/ManagedFieldsEntry'
        type: array
      name:
        description: |-
          Name must be unique within a namespace. Is required when creating resources, although
          some resources may allow a client to request the generation of an appropriate name
          automatically. Name is primarily intended for creation idempotence and configuration
          definition.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/identifiers#names
          +optional
        type: string
      namespace:
        description: |-
          Namespace defines the space within which each name must be unique. An empty namespace is
          equivalent to the "default" namespace, but "default" is the canonical representation.
          Not all objects are required to be scoped to a namespace - the value of this field for
          those objects will be empty.

          Must be a DNS_LABEL.
          Cannot be updated.
          More info: http://kubernetes.io/docs/user-guide/namespaces
          +optional
        type: string
      ownerReferences:
        description: |-
          List of objects depended by this object. If ALL objects in the list have
          been deleted, this object will be garbage collected. If this object is managed by a controller,
          then an entry in this list will point to this controller, with the controller field set to true.
          There cannot be more than one managing controller.
          +optional
          +patchMergeKey=uid
          +patchStrategy=merge
        items:
          $ref: '#/definitions/OwnerReference'
        type: array
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can
          be used by clients to determine when objects have changed. May be used for optimistic
          concurrency, change detection, and the watch operation on a resource or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.

          Populated by the system.
          Read-only.
          Value must be treated as opaque by clients and .
          More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
          +optional
        type: string
      selfLink:
        description: |-
          SelfLink is a URL representing this object.
          Populated by the system.
          Read-only.

          DEPRECATED
          Kubernetes will stop propagating this field in 1.20 release and the field is planned
          to be removed in 1.21 release.
          +optional
        type: string
      spec:
        $ref: '#/definitions/PersistentVolumeClaimSpec'
      uid:
        $ref: '#/definitions/UID'
    type: object
  PersistentVolumeClaimVolumeSource:
    description: |-
      This volume finds the bound PV and mounts that volume for the pod. A
      PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another
      type of volume that is owned by someone else (the system).
    properties:
      claimName:
        description: |-
          ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
          More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        type: string
      readOnly:
        description: |-
          Will force the ReadOnly setting in VolumeMounts.
          Default false.
          +optional
        type: boolean
    title: PersistentVolumeClaimVolumeSource references the user's PVC in the same
      namespace.
    type: object
  PersistentVolumeMode:
    title: PersistentVolumeMode describes how a volume is intended to be consumed,
      either Block or Filesystem.
    type: string
  PhotonPersistentDiskVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        type: string
      pdID:
        description: ID that identifies Photon Controller persistent disk
        type: string
    title: Represents a Photon Controller persistent disk resource.
    type: object
  PodAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
          node(s) with the highest sum are the most preferred.
          +optional
        items:
          $ref: '#/definitions/WeightedPodAffinityTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        description: |-
          If the affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to a pod label update), the
          system may or may not try to eventually evict the pod from its node.
          When there are multiple elements, the lists of nodes corresponding to each
          podAffinityTerm are intersected, i.e. all terms must be satisfied.
          +optional
        items:
          $ref: '#/definitions/PodAffinityTerm'
        type: array
    title: Pod affinity is a group of inter pod affinity scheduling rules.
    type: object
  PodAffinityTerm:
    description: |-
      Defines a set of pods (namely those matching the labelSelector
      relative to the given namespace(s)) that this pod should be
      co-located (affinity) or not co-located (anti-affinity) with,
      where co-located is defined as running on a node whose value of
      the label with key <topologyKey> matches that of any node on which
      a pod of the set of pods is running
    properties:
      labelSelector:
        $ref: '#/definitions/LabelSelector'
      namespaceSelector:
        $ref: '#/definitions/LabelSelector'
      namespaces:
        description: |-
          namespaces specifies a static list of namespace names that the term applies to.
          The term is applied to the union of the namespaces listed in this field
          and the ones selected by namespaceSelector.
          null or empty namespaces list and null namespaceSelector means "this pod's namespace"
          +optional
        items:
          type: string
        type: array
      topologyKey:
        description: |-
          This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
          the labelSelector in the specified namespaces, where co-located is defined as running on a node
          whose value of the label with key topologyKey matches that of any node on which any of the
          selected pods is running.
          Empty topologyKey is not allowed.
        type: string
    type: object
  PodAntiAffinity:
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule pods to nodes that satisfy
          the anti-affinity expressions specified by this field, but it may choose
          a node that violates one or more of the expressions. The node that is
          most preferred is the one with the greatest sum of weights, i.e.
          for each node that meets all of the scheduling requirements (resource
          request, requiredDuringScheduling anti-affinity expressions, etc.),
          compute a sum by iterating through the elements of this field and adding
          "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
          node(s) with the highest sum are the most preferred.
          +optional
        items:
          $ref: '#/definitions/WeightedPodAffinityTerm'
        type: array
      requiredDuringSchedulingIgnoredDuringExecution:
        description: |-
          If the anti-affinity requirements specified by this field are not met at
          scheduling time, the pod will not be scheduled onto the node.
          If the anti-affinity requirements specified by this field cease to be met
          at some point during pod execution (e.g. due to a pod label update), the
          system may or may not try to eventually evict the pod from its node.
          When there are multiple elements, the lists of nodes corresponding to each
          podAffinityTerm are intersected, i.e. all terms must be satisfied.
          +optional
        items:
          $ref: '#/definitions/PodAffinityTerm'
        type: array
    title: Pod anti affinity is a group of inter pod anti affinity scheduling rules.
    type: object
  PodFSGroupChangePolicy:
    description: |-
      PodFSGroupChangePolicy holds policies that will be used for applying fsGroup to a volume
      when volume is mounted.
    type: string
  PodSecurityContext:
    description: |-
      Some fields are also present in container.securityContext.  Field values of
      container.securityContext take precedence over field values of PodSecurityContext.
    properties:
      fsGroup:
        description: |-
          A special supplemental group that applies to all containers in a pod.
          Some volume types allow the Kubelet to change the ownership of that volume
          to be owned by the pod:

          1. The owning GID will be the FSGroup
          2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
          3. The permission bits are OR'd with rw-rw----

          If unset, the Kubelet will not modify the ownership and permissions of any volume.
          +optional
        format: int64
        type: integer
      fsGroupChangePolicy:
        $ref: '#/definitions/PodFSGroupChangePolicy'
      runAsGroup:
        description: |-
          The GID to run the entrypoint of the container process.
          Uses runtime default if unset.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence
          for that container.
          +optional
        format: int64
        type: integer
      runAsNonRoot:
        description: |-
          Indicates that the container must run as a non-root user.
          If true, the Kubelet will validate the image at runtime to ensure that it
          does not run as UID 0 (root) and fail to start the container if it does.
          If unset or false, no such validation will be performed.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        type: boolean
      runAsUser:
        description: |-
          The UID to run the entrypoint of the container process.
          Defaults to user specified in image metadata if unspecified.
          May also be set in SecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence
          for that container.
          +optional
        format: int64
        type: integer
      seLinuxOptions:
        $ref: '#/definitions/SELinuxOptions'
      seccompProfile:
        $ref: '#/definitions/SeccompProfile'
      supplementalGroups:
        description: |-
          A list of groups applied to the first process run in each container, in addition
          to the container's primary GID.  If unspecified, no groups will be added to
          any container.
          +optional
        items:
          format: int64
          type: integer
        type: array
      sysctls:
        description: |-
          Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
          sysctls (by the container runtime) might fail to launch.
          +optional
        items:
          $ref: '#/definitions/Sysctl'
        type: array
      windowsOptions:
        $ref: '#/definitions/WindowsSecurityContextOptions'
    title: PodSecurityContext holds pod-level security attributes and common container
      settings.
    type: object
  PortworxVolumeSource:
    properties:
      fsType:
        description: |-
          FSType represents the filesystem type to mount
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        type: string
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      volumeID:
        description: VolumeID uniquely identifies a Portworx volume
        type: string
    title: PortworxVolumeSource represents a Portworx volume resource.
    type: object
  PreferredSchedulingTerm:
    description: |-
      An empty preferred scheduling term matches all objects with implicit weight 0
      (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
    properties:
      preference:
        $ref: '#/definitions/NodeSelectorTerm'
      weight:
        description: Weight associated with matching the corresponding nodeSelectorTerm,
          in the range 1-100.
        format: int32
        type: integer
    type: object
  Probe:
    description: |-
      Probe describes a health check to be performed against a container to determine whether it is
      alive or ready to receive traffic.
    properties:
      exec:
        $ref: '#/definitions/ExecAction'
      failureThreshold:
        description: |-
          Minimum consecutive failures for the probe to be considered failed after having succeeded.
          Defaults to 3. Minimum value is 1.
          +optional
        format: int32
        type: integer
      httpGet:
        $ref: '#/definitions/HTTPGetAction'
      initialDelaySeconds:
        description: |-
          Number of seconds after the container has started before liveness probes are initiated.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
        format: int32
        type: integer
      periodSeconds:
        description: |-
          How often (in seconds) to perform the probe.
          Default to 10 seconds. Minimum value is 1.
          +optional
        format: int32
        type: integer
      successThreshold:
        description: |-
          Minimum consecutive successes for the probe to be considered successful after having failed.
          Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
          +optional
        format: int32
        type: integer
      tcpSocket:
        $ref: '#/definitions/TCPSocketAction'
      terminationGracePeriodSeconds:
        description: |-
          Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
          The grace period is the duration in seconds after the processes running in the pod are sent
          a termination signal and the time when the processes are forcibly halted with a kill signal.
          Set this value longer than the expected cleanup time for your process.
          If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
          value overrides the value provided by the pod spec.
          Value must be non-negative integer. The value zero indicates stop immediately via
          the kill signal (no opportunity to shut down).
          This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate.
          +optional
        format: int64
        type: integer
      timeoutSeconds:
        description: |-
          Number of seconds after which the probe times out.
          Defaults to 1 second. Minimum value is 1.
          More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
          +optional
        format: int32
        type: integer
    type: object
  ProcMountType:
    type: string
  ProjectedVolumeSource:
    description: Represents a projected volume source
    properties:
      defaultMode:
        description: |-
          Mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
      sources:
        description: |-
          list of volume projections
          +optional
        items:
          $ref: '#/definitions/VolumeProjection'
        type: array
    type: object
  Prometheus:
    description: Prometheus is a prometheus metric to be emitted
    properties:
      counter:
        $ref: '#/definitions/Counter'
      gauge:
        $ref: '#/definitions/Gauge'
      help:
        description: Help is a string that describes the metric
        type: string
      histogram:
        $ref: '#/definitions/Histogram'
      labels:
        description: Labels is a list of metric labels
        items:
          $ref: '#/definitions/MetricLabel'
        type: array
      name:
        description: Name is the name of the metric
        type: string
      when:
        description: When is a conditional statement that decides when to emit the
          metric
        type: string
    type: object
  Protocol:
    title: Protocol defines network protocols supported for things like container
      ports.
    type: string
  PullPolicy:
    description: PullPolicy describes a policy for if/when to pull a container image
    type: string
  Quantity:
    description: |-
      The serialization format is:

      <quantity>        ::= <signedNumber><suffix>
      (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
      <digit>           ::= 0 | 1 | ... | 9
      <digits>          ::= <digit> | <digit><digits>
      <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits>
      <sign>            ::= "+" | "-"
      <signedNumber>    ::= <number> | <sign><number>
      <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI>
      <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
      (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
      <decimalSI>       ::= m | "" | k | M | G | T | P | E
      (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
      <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

      No matter which of the three exponent forms is used, no quantity may represent
      a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal
      places. Numbers larger or more precise will be capped or rounded up.
      (E.g.: 0.1m will rounded up to 1m.)
      This may be extended in the future if we require larger or smaller quantities.

      When a Quantity is parsed from a string, it will remember the type of suffix
      it had, and will use the same type again when it is serialized.

      Before serializing, Quantity will be put in "canonical form".
      This means that Exponent/suffix will be adjusted up or down (with a
      corresponding increase or decrease in Mantissa) such that:
      a. No precision is lost
      b. No fractional digits will be emitted
      c. The exponent (or suffix) is as large as possible.
      The sign will be omitted unless the number is negative.

      Examples:
      1.5 will be serialized as "1500m"
      1.5Gi will be serialized as "1536Mi"

      Note that the quantity will NEVER be internally represented by a
      floating point number. That is the whole point of this exercise.

      Non-canonical values will still parse as long as they are well formed,
      but will be re-emitted in their canonical form. (So always use canonical
      form, or don't diff.)

      This format is intended to make it difficult to use these numbers without
      writing some sort of special handling code in the hopes that that will
      cause implementors to also use a fixed point implementation.

      +protobuf=true
      +protobuf.embed=string
      +protobuf.options.marshal=false
      +protobuf.options.(gogoproto.goproto_stringer)=false
      +k8s:deepcopy-gen=true
      +k8s:openapi-gen=true
    title: |-
      Quantity is a fixed-point representation of a number.
      It provides convenient marshaling/unmarshaling in JSON and YAML,
      in addition to String() and AsInt64() accessors.
    type: object
  QuobyteVolumeSource:
    description: Quobyte volumes do not support ownership management or SELinux relabeling.
    properties:
      group:
        description: |-
          Group to map volume access to
          Default is no group
          +optional
        type: string
      readOnly:
        description: |-
          ReadOnly here will force the Quobyte volume to be mounted with read-only permissions.
          Defaults to false.
          +optional
        type: boolean
      registry:
        description: |-
          Registry represents a single or multiple Quobyte Registry services
          specified as a string as host:port pair (multiple entries are separated with commas)
          which acts as the central registry for volumes
        type: string
      tenant:
        description: |-
          Tenant owning the given Quobyte volume in the Backend
          Used with dynamically provisioned Quobyte volumes, value is set by the plugin
          +optional
        type: string
      user:
        description: |-
          User to map volume access to
          Defaults to serivceaccount user
          +optional
        type: string
      volume:
        description: Volume is a string that references an already created Quobyte
          volume by name.
        type: string
    title: Represents a Quobyte mount that lasts the lifetime of a pod.
    type: object
  RBDVolumeSource:
    description: RBD volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        description: |-
          Filesystem type of the volume that you want to mount.
          Tip: Ensure that the filesystem type is supported by the host operating system.
          Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
          TODO: how do we prevent errors in the filesystem from compromising the machine
          +optional
        type: string
      image:
        description: |-
          The rados image name.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        type: string
      keyring:
        description: |-
          Keyring is the path to key ring for RBDUser.
          Default is /etc/ceph/keyring.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
        type: string
      monitors:
        description: |-
          A collection of Ceph monitors.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        items:
          type: string
        type: array
      pool:
        description: |-
          The rados pool name.
          Default is rbd.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
        type: string
      readOnly:
        description: |-
          ReadOnly here will force the ReadOnly setting in VolumeMounts.
          Defaults to false.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      user:
        description: |-
          The rados user name.
          Default is admin.
          More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          +optional
        type: string
    title: Represents a Rados Block Device mount that lasts the lifetime of a pod.
    type: object
  RawArtifact:
    description: RawArtifact allows raw string content to be placed as an artifact
      in a container
    properties:
      data:
        description: Data is the string contents of the artifact
        type: string
    type: object
  ResourceFieldSelector:
    description: ResourceFieldSelector represents container resources (cpu, memory)
      and their output format
    properties:
      containerName:
        description: |-
          Container name: required for volumes, optional for env vars
          +optional
        type: string
      divisor:
        $ref: '#/definitions/Quantity'
      resource:
        description: 'Required: resource to select'
        type: string
    type: object
  ResourceList:
    additionalProperties:
      $ref: '#/definitions/Quantity'
    title: ResourceList is a set of (resource name, quantity) pairs.
    type: object
  ResourceRequirements:
    properties:
      limits:
        $ref: '#/definitions/ResourceList'
      requests:
        $ref: '#/definitions/ResourceList'
    title: ResourceRequirements describes the compute resource requirements.
    type: object
  ResourceTemplate:
    description: ResourceTemplate is a template subtype to manipulate kubernetes resources
    properties:
      action:
        description: |-
          Action is the action to perform to the resource.
          Must be one of: get, create, apply, delete, replace, patch
        type: string
      failureCondition:
        description: |-
          FailureCondition is a label selector expression which describes the conditions
          of the k8s resource in which the step was considered failed
        type: string
      flags:
        description: |-
          Flags is a set of additional options passed to kubectl before submitting a resource
          I.e. to disable resource validation:
          flags: [
          "--validate=false"  # disable resource validation
          ]
        items:
          type: string
        type: array
      manifest:
        description: Manifest contains the kubernetes manifest
        type: string
      mergeStrategy:
        description: |-
          MergeStrategy is the strategy used to merge a patch. It defaults to "strategic"
          Must be one of: strategic, merge, json
        type: string
      setOwnerReference:
        description: SetOwnerReference sets the reference to the workflow on the OwnerReference
          of generated resource.
        type: boolean
      successCondition:
        description: |-
          SuccessCondition is a label selector expression which describes the conditions
          of the k8s resource in which it is acceptable to proceed to the following step
        type: string
    type: object
  RetryAffinity:
    properties:
      nodeAntiAffinity:
        $ref: '#/definitions/RetryNodeAntiAffinity'
    title: RetryAffinity prevents running steps on the same host.
    type: object
  RetryNodeAntiAffinity:
    description: In order to prevent running steps on the same host, it uses "kubernetes.io/hostname".
    title: RetryNodeAntiAffinity is a placeholder for future expansion, only empty
      nodeAntiAffinity is allowed.
    type: object
  RetryPolicy:
    type: string
  RetryStrategy:
    description: RetryStrategy provides controls on how to retry a workflow step
    properties:
      affinity:
        $ref: '#/definitions/RetryAffinity'
      backoff:
        $ref: '#/definitions/Backoff'
      expression:
        description: |-
          Expression is a condition expression for when a node will be retried. If it evaluates to false, the node will not
          be retried and the retry strategy will be ignored
        type: string
      limit:
        $ref: '#/definitions/IntOrString'
      retryPolicy:
        $ref: '#/definitions/RetryPolicy'
    type: object
  S3Artifact:
    description: S3Artifact is the location of an S3 artifact
    properties:
      accessKeySecret:
        $ref: '#/definitions/SecretKeySelector'
      bucket:
        description: Bucket is the name of the bucket
        type: string
      createBucketIfNotPresent:
        $ref: '#/definitions/CreateS3BucketOptions'
      encryptionOptions:
        $ref: '#/definitions/S3EncryptionOptions'
      endpoint:
        description: Endpoint is the hostname of the bucket endpoint
        type: string
      insecure:
        description: Insecure will connect to the service with TLS
        type: boolean
      key:
        description: Key is the key in the bucket where the artifact resides
        type: string
      region:
        description: Region contains the optional bucket region
        type: string
      roleARN:
        description: RoleARN is the Amazon Resource Name (ARN) of the role to assume.
        type: string
      secretKeySecret:
        $ref: '#/definitions/SecretKeySelector'
      useSDKCreds:
        description: UseSDKCreds tells the driver to figure out credentials based
          on sdk defaults.
        type: boolean
    type: object
  S3EncryptionOptions:
    description: S3EncryptionOptions used to determine encryption options during s3
      operations
    properties:
      enableEncryption:
        description: EnableEncryption tells the driver to encrypt objects if set to
          true. If kmsKeyId and serverSideCustomerKeySecret are not set, SSE-S3 will
          be used
        type: boolean
      kmsEncryptionContext:
        description: KmsEncryptionContext is a json blob that contains an encryption
          context. See https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context
          for more information
        type: string
      kmsKeyId:
        description: KMSKeyId tells the driver to encrypt the object using the specified
          KMS Key.
        type: string
      serverSideCustomerKeySecret:
        $ref: '#/definitions/SecretKeySelector'
    type: object
  SELinuxOptions:
    description: SELinuxOptions are the labels to be applied to the container
    properties:
      level:
        description: |-
          Level is SELinux level label that applies to the container.
          +optional
        type: string
      role:
        description: |-
          Role is a SELinux role label that applies to the container.
          +optional
        type: string
      type:
        description: |-
          Type is a SELinux type label that applies to the container.
          +optional
        type: string
      user:
        description: |-
          User is a SELinux user label that applies to the container.
          +optional
        type: string
    type: object
  ScaleIOVolumeSource:
    description: ScaleIOVolumeSource represents a persistent ScaleIO volume
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs".
          Default is "xfs".
          +optional
        type: string
      gateway:
        description: The host address of the ScaleIO API Gateway.
        type: string
      protectionDomain:
        description: |-
          The name of the ScaleIO Protection Domain for the configured storage.
          +optional
        type: string
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      sslEnabled:
        description: |-
          Flag to enable/disable SSL communication with Gateway, default false
          +optional
        type: boolean
      storageMode:
        description: |-
          Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
          Default is ThinProvisioned.
          +optional
        type: string
      storagePool:
        description: |-
          The ScaleIO Storage Pool associated with the protection domain.
          +optional
        type: string
      system:
        description: The name of the storage system as configured in ScaleIO.
        type: string
      volumeName:
        description: |-
          The name of a volume already created in the ScaleIO system
          that is associated with this volume source.
        type: string
    type: object
  ScriptTemplate:
    description: ScriptTemplate is a template subtype to enable scripting through
      code steps
    properties:
      args:
        description: |-
          Arguments to the entrypoint.
          The docker image's CMD is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax
          can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
          regardless of whether the variable exists or not.
          Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      command:
        description: |-
          Entrypoint array. Not executed within a shell.
          The docker image's ENTRYPOINT is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax
          can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
          regardless of whether the variable exists or not.
          Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      env:
        description: |-
          List of environment variables to set in the container.
          Cannot be updated.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/EnvVar'
        type: array
      envFrom:
        description: |-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid keys
          will be reported as an event when the container is starting. When a key exists in multiple
          sources, the value associated with the last source will take precedence.
          Values defined by an Env with a duplicate key will take precedence.
          Cannot be updated.
          +optional
        items:
          $ref: '#/definitions/EnvFromSource'
        type: array
      image:
        description: |-
          Docker image name.
          More info: https://kubernetes.io/docs/concepts/containers/images
          This field is optional to allow higher level config management to default or override
          container images in workload controllers like Deployments and StatefulSets.
          +optional
        type: string
      imagePullPolicy:
        $ref: '#/definitions/PullPolicy'
      lifecycle:
        $ref: '#/definitions/Lifecycle'
      livenessProbe:
        $ref: '#/definitions/Probe'
      name:
        description: |-
          Name of the container specified as a DNS_LABEL.
          Each container in a pod must have a unique name (DNS_LABEL).
          Cannot be updated.
        type: string
      ports:
        description: |-
          List of ports to expose from the container. Exposing a port here gives
          the system additional information about the network connections a
          container uses, but is primarily informational. Not specifying a port here
          DOES NOT prevent that port from being exposed. Any port which is
          listening on the default "0.0.0.0" address inside a container will be
          accessible from the network.
          Cannot be updated.
          +optional
          +patchMergeKey=containerPort
          +patchStrategy=merge
          +listType=map
          +listMapKey=containerPort
          +listMapKey=protocol
        items:
          $ref: '#/definitions/ContainerPort'
        type: array
      readinessProbe:
        $ref: '#/definitions/Probe'
      resources:
        $ref: '#/definitions/ResourceRequirements'
      securityContext:
        $ref: '#/definitions/SecurityContext'
      source:
        description: Source contains the source code of the script to execute
        type: string
      startupProbe:
        $ref: '#/definitions/Probe'
      stdin:
        description: |-
          Whether this container should allocate a buffer for stdin in the container runtime. If this
          is not set, reads from stdin in the container will always result in EOF.
          Default is false.
          +optional
        type: boolean
      stdinOnce:
        description: |-
          Whether the container runtime should close the stdin channel after it has been opened by
          a single attach. When stdin is true the stdin stream will remain open across multiple attach
          sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
          first client attaches to stdin, and then remains open and accepts data until the client disconnects,
          at which time stdin is closed and remains closed until the container is restarted. If this
          flag is false, a container processes that reads from stdin will never receive an EOF.
          Default is false
          +optional
        type: boolean
      terminationMessagePath:
        description: |-
          Optional: Path at which the file to which the container's termination message
          will be written is mounted into the container's filesystem.
          Message written is intended to be brief final status, such as an assertion failure message.
          Will be truncated by the node if greater than 4096 bytes. The total message length across
          all containers will be limited to 12kb.
          Defaults to /dev/termination-log.
          Cannot be updated.
          +optional
        type: string
      terminationMessagePolicy:
        $ref: '#/definitions/TerminationMessagePolicy'
      tty:
        description: |-
          Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
          Default is false.
          +optional
        type: boolean
      volumeDevices:
        description: |-
          volumeDevices is the list of block devices to be used by the container.
          +patchMergeKey=devicePath
          +patchStrategy=merge
          +optional
        items:
          $ref: '#/definitions/VolumeDevice'
        type: array
      volumeMounts:
        description: |-
          Pod volumes to mount into the container's filesystem.
          Cannot be updated.
          +optional
          +patchMergeKey=mountPath
          +patchStrategy=merge
        items:
          $ref: '#/definitions/VolumeMount'
        type: array
      workingDir:
        description: |-
          Container's working directory.
          If not specified, the container runtime's default will be used, which
          might be configured in the container image.
          Cannot be updated.
          +optional
        type: string
    type: object
  SeccompProfile:
    description: |-
      Only one profile source may be set.
      +union
    properties:
      localhostProfile:
        description: |-
          localhostProfile indicates a profile defined in a file on the node should be used.
          The profile must be preconfigured on the node to work.
          Must be a descending path, relative to the kubelet's configured seccomp profile location.
          Must only be set if type is "Localhost".
          +optional
        type: string
      type:
        $ref: '#/definitions/SeccompProfileType'
    title: SeccompProfile defines a pod/container's seccomp profile settings.
    type: object
  SeccompProfileType:
    title: SeccompProfileType defines the supported seccomp profile types.
    type: string
  SecretEnvSource:
    description: |-
      The contents of the target Secret's Data field will represent the
      key-value pairs as environment variables.
    properties:
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the Secret must be defined
          +optional
        type: boolean
    title: |-
      SecretEnvSource selects a Secret to populate the environment
      variables with.
    type: object
  SecretKeySelector:
    properties:
      key:
        description: The key of the secret to select from.  Must be a valid secret
          key.
        type: string
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the Secret or its key must be defined
          +optional
        type: boolean
    title: SecretKeySelector selects a key of a Secret.
    type: object
  SecretProjection:
    description: |-
      The contents of the target Secret's Data field will be presented in a
      projected volume as files using the keys in the Data field as the file names.
      Note that this is identical to a secret volume source without the default
      mode.
    properties:
      items:
        description: |-
          If unspecified, each key-value pair in the Data field of the referenced
          Secret will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the Secret,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/KeyToPath'
        type: array
      name:
        description: |-
          Name of the referent.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          TODO: Add other useful fields. apiVersion, kind, uid?
          +optional
        type: string
      optional:
        description: |-
          Specify whether the Secret or its key must be defined
          +optional
        type: boolean
    title: Adapts a secret into a projected volume.
    type: object
  SecretVolumeSource:
    description: |-
      The contents of the target Secret's Data field will be presented in a volume
      as files using the keys in the Data field as the file names.
      Secret volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        description: |-
          Optional: mode bits used to set permissions on created files by default.
          Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
          YAML accepts both octal and decimal values, JSON requires decimal values
          for mode bits. Defaults to 0644.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file
          mode, like fsGroup, and the result can be other mode bits set.
          +optional
        format: int32
        type: integer
      items:
        description: |-
          If unspecified, each key-value pair in the Data field of the referenced
          Secret will be projected into the volume as a file whose name is the
          key and content is the value. If specified, the listed keys will be
          projected into the specified paths, and unlisted keys will not be
          present. If a key is specified which is not present in the Secret,
          the volume setup will error unless it is marked optional. Paths must be
          relative and may not contain the '..' path or start with '..'.
          +optional
        items:
          $ref: '#/definitions/KeyToPath'
        type: array
      optional:
        description: |-
          Specify whether the Secret or its keys must be defined
          +optional
        type: boolean
      secretName:
        description: |-
          Name of the secret in the pod's namespace to use.
          More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
          +optional
        type: string
    title: Adapts a Secret into a volume.
    type: object
  SecurityContext:
    description: |-
      Some fields are present in both SecurityContext and PodSecurityContext.  When both
      are set, the values in SecurityContext take precedence.
    properties:
      allowPrivilegeEscalation:
        description: |-
          AllowPrivilegeEscalation controls whether a process can gain more
          privileges than its parent process. This bool directly controls if
          the no_new_privs flag will be set on the container process.
          AllowPrivilegeEscalation is true always when the container is:
          1) run as Privileged
          2) has CAP_SYS_ADMIN
          +optional
        type: boolean
      capabilities:
        $ref: '#/definitions/Capabilities'
      privileged:
        description: |-
          Run container in privileged mode.
          Processes in privileged containers are essentially equivalent to root on the host.
          Defaults to false.
          +optional
        type: boolean
      procMount:
        $ref: '#/definitions/ProcMountType'
      readOnlyRootFilesystem:
        description: |-
          Whether this container has a read-only root filesystem.
          Default is false.
          +optional
        type: boolean
      runAsGroup:
        description: |-
          The GID to run the entrypoint of the container process.
          Uses runtime default if unset.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        format: int64
        type: integer
      runAsNonRoot:
        description: |-
          Indicates that the container must run as a non-root user.
          If true, the Kubelet will validate the image at runtime to ensure that it
          does not run as UID 0 (root) and fail to start the container if it does.
          If unset or false, no such validation will be performed.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        type: boolean
      runAsUser:
        description: |-
          The UID to run the entrypoint of the container process.
          Defaults to user specified in image metadata if unspecified.
          May also be set in PodSecurityContext.  If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        format: int64
        type: integer
      seLinuxOptions:
        $ref: '#/definitions/SELinuxOptions'
      seccompProfile:
        $ref: '#/definitions/SeccompProfile'
      windowsOptions:
        $ref: '#/definitions/WindowsSecurityContextOptions'
    title: SecurityContext holds security configuration that will be applied to a
      container.
    type: object
  SemaphoreRef:
    description: SemaphoreRef is a reference of Semaphore
    properties:
      configMapKeyRef:
        $ref: '#/definitions/ConfigMapKeySelector'
    type: object
  Sequence:
    description: Sequence expands a workflow step into numeric range
    properties:
      count:
        $ref: '#/definitions/IntOrString'
      end:
        $ref: '#/definitions/IntOrString'
      format:
        description: Format is a printf format string to format the value in the sequence
        type: string
      start:
        $ref: '#/definitions/IntOrString'
    type: object
  ServiceAccountTokenProjection:
    description: |-
      ServiceAccountTokenProjection represents a projected service account token
      volume. This projection can be used to insert a service account token into
      the pods runtime filesystem for use against APIs (Kubernetes API Server or
      otherwise).
    properties:
      audience:
        description: |-
          Audience is the intended audience of the token. A recipient of a token
          must identify itself with an identifier specified in the audience of the
          token, and otherwise should reject the token. The audience defaults to the
          identifier of the apiserver.
          +optional
        type: string
      expirationSeconds:
        description: |-
          ExpirationSeconds is the requested duration of validity of the service
          account token. As the token approaches expiration, the kubelet volume
          plugin will proactively rotate the service account token. The kubelet will
          start trying to rotate the token if the token is older than 80 percent of
          its time to live or if the token is older than 24 hours.Defaults to 1 hour
          and must be at least 10 minutes.
          +optional
        format: int64
        type: integer
      path:
        description: |-
          Path is the path relative to the mount point of the file to project the
          token into.
        type: string
    type: object
  StorageMedium:
    title: StorageMedium defines ways that storage can be allocated to a volume.
    type: string
  StorageOSVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
        type: string
      readOnly:
        description: |-
          Defaults to false (read/write). ReadOnly here will force
          the ReadOnly setting in VolumeMounts.
          +optional
        type: boolean
      secretRef:
        $ref: '#/definitions/LocalObjectReference'
      volumeName:
        description: |-
          VolumeName is the human-readable name of the StorageOS volume.  Volume
          names are only unique within a namespace.
        type: string
      volumeNamespace:
        description: |-
          VolumeNamespace specifies the scope of the volume within StorageOS.  If no
          namespace is specified then the Pod's namespace will be used.  This allows the
          Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
          Set VolumeName to any name to override the default behaviour.
          Set to "default" if you are not using namespaces within StorageOS.
          Namespaces that do not pre-exist within StorageOS will be created.
          +optional
        type: string
    title: Represents a StorageOS persistent volume resource.
    type: object
  SuppliedValueFrom:
    title: SuppliedValueFrom is a placeholder for a value to be filled in directly,
      either through the CLI, API, etc.
    type: object
  SuspendTemplate:
    description: SuspendTemplate is a template subtype to suspend a workflow at a
      predetermined point in time
    properties:
      duration:
        description: Duration is the seconds to wait before automatically resuming
          a template
        type: string
    type: object
  Synchronization:
    description: Synchronization holds synchronization lock configuration
    properties:
      mutex:
        $ref: '#/definitions/Mutex'
      semaphore:
        $ref: '#/definitions/SemaphoreRef'
    type: object
  Sysctl:
    description: Sysctl defines a kernel parameter to be set
    properties:
      name:
        description: Name of a property to set
        type: string
      value:
        description: Value of a property to set
        type: string
    type: object
  TCPSocketAction:
    description: TCPSocketAction describes an action based on opening a socket
    properties:
      host:
        description: |-
          Optional: Host name to connect to, defaults to the pod IP.
          +optional
        type: string
      port:
        $ref: '#/definitions/IntOrString'
    type: object
  TaintEffect:
    type: string
  TarStrategy:
    description: TarStrategy will tar and gzip the file or directory when saving
    properties:
      compressionLevel:
        description: |-
          CompressionLevel specifies the gzip compression level to use for the artifact.
          Defaults to gzip.DefaultCompression.
        format: int32
        type: integer
    type: object
  Template:
    description: Template is a reusable and composable unit of execution in a workflow
    properties:
      activeDeadlineSeconds:
        $ref: '#/definitions/IntOrString'
      affinity:
        $ref: '#/definitions/Affinity'
      archiveLocation:
        $ref: '#/definitions/ArtifactLocation'
      automountServiceAccountToken:
        description: |-
          AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods.
          ServiceAccountName of ExecutorConfig must be specified if this value is false.
        type: boolean
      container:
        $ref: '#/definitions/Container'
      containerSet:
        $ref: '#/definitions/ContainerSetTemplate'
      daemon:
        description: Deamon will allow a workflow to proceed to the next step so long
          as the container reaches readiness
        type: boolean
      dag:
        $ref: '#/definitions/DAGTemplate'
      data:
        $ref: '#/definitions/Data'
      executor:
        $ref: '#/definitions/ExecutorConfig'
      failFast:
        description: |-
          FailFast, if specified, will fail this template if any of its child pods has failed. This is useful for when this
          template is expanded with `withItems`, etc.
        type: boolean
      hostAliases:
        description: |-
          HostAliases is an optional list of hosts and IPs that will be injected into the pod spec
          +patchStrategy=merge
          +patchMergeKey=ip
        items:
          $ref: '#/definitions/HostAlias'
        type: array
      http:
        $ref: '#/definitions/HTTP'
      initContainers:
        description: |-
          InitContainers is a list of containers which run before the main container.
          +patchStrategy=merge
          +patchMergeKey=name
        items:
          $ref: '#/definitions/UserContainer'
        type: array
      inputs:
        $ref: '#/definitions/Inputs'
      memoize:
        $ref: '#/definitions/Memoize'
      metadata:
        $ref: '#/definitions/Metadata'
      metrics:
        $ref: '#/definitions/Metrics'
      name:
        description: Name is the name of the template
        type: string
      nodeSelector:
        additionalProperties:
          type: string
        description: |-
          NodeSelector is a selector to schedule this step of the workflow to be
          run on the selected node(s). Overrides the selector set at the workflow level.
        type: object
      outputs:
        $ref: '#/definitions/Outputs'
      parallelism:
        description: |-
          Parallelism limits the max total parallel pods that can execute at the same time within the
          boundaries of this template invocation. If additional steps/dag templates are invoked, the
          pods created by those templates will not be counted towards this total.
        format: int64
        type: integer
      plugin:
        $ref: '#/definitions/Object'
      podSpecPatch:
        description: |-
          PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of
          container fields which are not strings (e.g. resource limits).
        type: string
      priority:
        description: Priority to apply to workflow pods.
        format: int32
        type: integer
      priorityClassName:
        description: PriorityClassName to apply to workflow pods.
        type: string
      resource:
        $ref: '#/definitions/ResourceTemplate'
      retryStrategy:
        $ref: '#/definitions/RetryStrategy'
      schedulerName:
        description: |-
          If specified, the pod will be dispatched by specified scheduler.
          Or it will be dispatched by workflow scope scheduler if specified.
          If neither specified, the pod will be dispatched by default scheduler.
          +optional
        type: string
      script:
        $ref: '#/definitions/ScriptTemplate'
      securityContext:
        $ref: '#/definitions/PodSecurityContext'
      serviceAccountName:
        description: ServiceAccountName to apply to workflow pods
        type: string
      sidecars:
        description: |-
          Sidecars is a list of containers which run alongside the main container
          Sidecars are automatically killed when the main container completes
          +patchStrategy=merge
          +patchMergeKey=name
        items:
          $ref: '#/definitions/UserContainer'
        type: array
      steps:
        description: Steps define a series of sequential/parallel workflow steps
        items:
          $ref: '#/definitions/ParallelSteps'
        type: array
      suspend:
        $ref: '#/definitions/SuspendTemplate'
      synchronization:
        $ref: '#/definitions/Synchronization'
      timeout:
        description: |-
          Timout allows to set the total node execution timeout duration counting from the node's start time.
          This duration also includes time in which the node spends in Pending state. This duration may not be applied to Step or DAG templates.
        type: string
      tolerations:
        description: |-
          Tolerations to apply to workflow pods.
          +patchStrategy=merge
          +patchMergeKey=key
        items:
          $ref: '#/definitions/Toleration'
        type: array
      volumes:
        description: |-
          Volumes is a list of volumes that can be mounted by containers in a template.
          +patchStrategy=merge
          +patchMergeKey=name
        items:
          $ref: '#/definitions/Volume'
        type: array
    type: object
  TemplateRef:
    properties:
      clusterScope:
        description: ClusterScope indicates the referred template is cluster scoped
          (i.e. a ClusterWorkflowTemplate).
        type: boolean
      name:
        description: Name is the resource name of the template.
        type: string
      template:
        description: Template is the name of referred template in the resource.
        type: string
    title: TemplateRef is a reference of template resource.
    type: object
  TerminationMessagePolicy:
    title: TerminationMessagePolicy describes how termination messages are retrieved
      from a container.
    type: string
  Time:
    description: |-
      +protobuf.options.marshal=false
      +protobuf.as=Timestamp
      +protobuf.options.(gogoproto.goproto_stringer)=false
    title: |-
      Time is a wrapper around time.Time which supports correct
      marshaling to YAML and JSON.  Wrappers are provided for many
      of the factory methods that the time package offers.
    type: object
  Toleration:
    description: |-
      The pod this Toleration is attached to tolerates any taint that matches
      the triple <key,value,effect> using the matching operator <operator>.
    properties:
      effect:
        $ref: '#/definitions/TaintEffect'
      key:
        description: |-
          Key is the taint key that the toleration applies to. Empty means match all taint keys.
          If the key is empty, operator must be Exists; this combination means to match all values and all keys.
          +optional
        type: string
      operator:
        $ref: '#/definitions/TolerationOperator'
      tolerationSeconds:
        description: |-
          TolerationSeconds represents the period of time the toleration (which must be
          of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
          it is not set, which means tolerate the taint forever (do not evict). Zero and
          negative values will be treated as 0 (evict immediately) by the system.
          +optional
        format: int64
        type: integer
      value:
        description: |-
          Value is the taint value the toleration matches to.
          If the operator is Exists, the value should be empty, otherwise just a regular string.
          +optional
        type: string
    type: object
  TolerationOperator:
    title: A toleration operator is the set of operators that can be used in a toleration.
    type: string
  Transformation:
    items:
      $ref: '#/definitions/TransformationStep'
    type: array
  TransformationStep:
    properties:
      expression:
        description: Expression defines an expr expression to apply
        type: string
    type: object
  Type:
    format: int64
    title: Type represents the stored type of IntOrString.
    type: integer
  TypedLocalObjectReference:
    description: |-
      TypedLocalObjectReference contains enough information to let you locate the
      typed referenced object inside the same namespace.
    properties:
      apiGroup:
        description: |-
          APIGroup is the group for the resource being referenced.
          If APIGroup is not specified, the specified Kind must be in the core API group.
          For any other third-party types, APIGroup is required.
          +optional
        type: string
      kind:
        description: Kind is the type of resource being referenced
        type: string
      name:
        description: Name is the name of resource being referenced
        type: string
    type: object
  UID:
    description: |-
      UID is a type that holds unique ID values, including UUIDs.  Because we
      don't ONLY use UUIDs, this is an alias to string.  Being a type captures
      intent and helps make sure that UIDs and names do not get conflated.
    type: string
  URIScheme:
    description: URIScheme identifies the scheme used for connection to a host for
      Get actions
    type: string
  UserContainer:
    properties:
      args:
        description: |-
          Arguments to the entrypoint.
          The docker image's CMD is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax
          can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
          regardless of whether the variable exists or not.
          Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      command:
        description: |-
          Entrypoint array. Not executed within a shell.
          The docker image's ENTRYPOINT is used if this is not provided.
          Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
          cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax
          can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded,
          regardless of whether the variable exists or not.
          Cannot be updated.
          More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
          +optional
        items:
          type: string
        type: array
      env:
        description: |-
          List of environment variables to set in the container.
          Cannot be updated.
          +optional
          +patchMergeKey=name
          +patchStrategy=merge
        items:
          $ref: '#/definitions/EnvVar'
        type: array
      envFrom:
        description: |-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a C_IDENTIFIER. All invalid keys
          will be reported as an event when the container is starting. When a key exists in multiple
          sources, the value associated with the last source will take precedence.
          Values defined by an Env with a duplicate key will take precedence.
          Cannot be updated.
          +optional
        items:
          $ref: '#/definitions/EnvFromSource'
        type: array
      image:
        description: |-
          Docker image name.
          More info: https://kubernetes.io/docs/concepts/containers/images
          This field is optional to allow higher level config management to default or override
          container images in workload controllers like Deployments and StatefulSets.
          +optional
        type: string
      imagePullPolicy:
        $ref: '#/definitions/PullPolicy'
      lifecycle:
        $ref: '#/definitions/Lifecycle'
      livenessProbe:
        $ref: '#/definitions/Probe'
      mirrorVolumeMounts:
        description: |-
          MirrorVolumeMounts will mount the same volumes specified in the main container
          to the container (including artifacts), at the same mountPaths. This enables
          dind daemon to partially see the same filesystem as the main container in
          order to use features such as docker volume binding
        type: boolean
      name:
        description: |-
          Name of the container specified as a DNS_LABEL.
          Each container in a pod must have a unique name (DNS_LABEL).
          Cannot be updated.
        type: string
      ports:
        description: |-
          List of ports to expose from the container. Exposing a port here gives
          the system additional information about the network connections a
          container uses, but is primarily informational. Not specifying a port here
          DOES NOT prevent that port from being exposed. Any port which is
          listening on the default "0.0.0.0" address inside a container will be
          accessible from the network.
          Cannot be updated.
          +optional
          +patchMergeKey=containerPort
          +patchStrategy=merge
          +listType=map
          +listMapKey=containerPort
          +listMapKey=protocol
        items:
          $ref: '#/definitions/ContainerPort'
        type: array
      readinessProbe:
        $ref: '#/definitions/Probe'
      resources:
        $ref: '#/definitions/ResourceRequirements'
      securityContext:
        $ref: '#/definitions/SecurityContext'
      startupProbe:
        $ref: '#/definitions/Probe'
      stdin:
        description: |-
          Whether this container should allocate a buffer for stdin in the container runtime. If this
          is not set, reads from stdin in the container will always result in EOF.
          Default is false.
          +optional
        type: boolean
      stdinOnce:
        description: |-
          Whether the container runtime should close the stdin channel after it has been opened by
          a single attach. When stdin is true the stdin stream will remain open across multiple attach
          sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
          first client attaches to stdin, and then remains open and accepts data until the client disconnects,
          at which time stdin is closed and remains closed until the container is restarted. If this
          flag is false, a container processes that reads from stdin will never receive an EOF.
          Default is false
          +optional
        type: boolean
      terminationMessagePath:
        description: |-
          Optional: Path at which the file to which the container's termination message
          will be written is mounted into the container's filesystem.
          Message written is intended to be brief final status, such as an assertion failure message.
          Will be truncated by the node if greater than 4096 bytes. The total message length across
          all containers will be limited to 12kb.
          Defaults to /dev/termination-log.
          Cannot be updated.
          +optional
        type: string
      terminationMessagePolicy:
        $ref: '#/definitions/TerminationMessagePolicy'
      tty:
        description: |-
          Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
          Default is false.
          +optional
        type: boolean
      volumeDevices:
        description: |-
          volumeDevices is the list of block devices to be used by the container.
          +patchMergeKey=devicePath
          +patchStrategy=merge
          +optional
        items:
          $ref: '#/definitions/VolumeDevice'
        type: array
      volumeMounts:
        description: |-
          Pod volumes to mount into the container's filesystem.
          Cannot be updated.
          +optional
          +patchMergeKey=mountPath
          +patchStrategy=merge
        items:
          $ref: '#/definitions/VolumeMount'
        type: array
      workingDir:
        description: |-
          Container's working directory.
          If not specified, the container runtime's default will be used, which
          might be configured in the container image.
          Cannot be updated.
          +optional
        type: string
    title: UserContainer is a container specified by a user.
    type: object
  ValueFrom:
    description: ValueFrom describes a location in which to obtain the value to a
      parameter
    properties:
      configMapKeyRef:
        $ref: '#/definitions/ConfigMapKeySelector'
      default:
        $ref: '#/definitions/AnyString'
      event:
        description: Selector (https://github.com/antonmedv/expr) that is evaluated
          against the event to get the value of the parameter. E.g. `payload.message`
        type: string
      expression:
        description: Expression, if defined, is evaluated to specify the value for
          the parameter
        type: string
      jqFilter:
        description: JQFilter expression against the resource object in resource templates
        type: string
      jsonPath:
        description: JSONPath of a resource to retrieve an output parameter value
          from in resource templates
        type: string
      parameter:
        description: |-
          Parameter reference to a step or dag task in which to retrieve an output parameter value from
          (e.g. '{{steps.mystep.outputs.myparam}}')
        type: string
      path:
        description: Path in the container to retrieve an output parameter value from
          in container templates
        type: string
      supplied:
        $ref: '#/definitions/SuppliedValueFrom'
    type: object
  Volume:
    properties:
      awsElasticBlockStore:
        $ref: '#/definitions/AWSElasticBlockStoreVolumeSource'
      azureDisk:
        $ref: '#/definitions/AzureDiskVolumeSource'
      azureFile:
        $ref: '#/definitions/AzureFileVolumeSource'
      cephfs:
        $ref: '#/definitions/CephFSVolumeSource'
      cinder:
        $ref: '#/definitions/CinderVolumeSource'
      configMap:
        $ref: '#/definitions/ConfigMapVolumeSource'
      csi:
        $ref: '#/definitions/CSIVolumeSource'
      downwardAPI:
        $ref: '#/definitions/DownwardAPIVolumeSource'
      emptyDir:
        $ref: '#/definitions/EmptyDirVolumeSource'
      ephemeral:
        $ref: '#/definitions/EphemeralVolumeSource'
      fc:
        $ref: '#/definitions/FCVolumeSource'
      flexVolume:
        $ref: '#/definitions/FlexVolumeSource'
      flocker:
        $ref: '#/definitions/FlockerVolumeSource'
      gcePersistentDisk:
        $ref: '#/definitions/GCEPersistentDiskVolumeSource'
      gitRepo:
        $ref: '#/definitions/GitRepoVolumeSource'
      glusterfs:
        $ref: '#/definitions/GlusterfsVolumeSource'
      hostPath:
        $ref: '#/definitions/HostPathVolumeSource'
      iscsi:
        $ref: '#/definitions/ISCSIVolumeSource'
      name:
        description: |-
          Volume's name.
          Must be a DNS_LABEL and unique within the pod.
          More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        type: string
      nfs:
        $ref: '#/definitions/NFSVolumeSource'
      persistentVolumeClaim:
        $ref: '#/definitions/PersistentVolumeClaimVolumeSource'
      photonPersistentDisk:
        $ref: '#/definitions/PhotonPersistentDiskVolumeSource'
      portworxVolume:
        $ref: '#/definitions/PortworxVolumeSource'
      projected:
        $ref: '#/definitions/ProjectedVolumeSource'
      quobyte:
        $ref: '#/definitions/QuobyteVolumeSource'
      rbd:
        $ref: '#/definitions/RBDVolumeSource'
      scaleIO:
        $ref: '#/definitions/ScaleIOVolumeSource'
      secret:
        $ref: '#/definitions/SecretVolumeSource'
      storageos:
        $ref: '#/definitions/StorageOSVolumeSource'
      vsphereVolume:
        $ref: '#/definitions/VsphereVirtualDiskVolumeSource'
    title: Volume represents a named volume in a pod that may be accessed by any container
      in the pod.
    type: object
  VolumeDevice:
    properties:
      devicePath:
        description: devicePath is the path inside of the container that the device
          will be mapped to.
        type: string
      name:
        description: name must match the name of a persistentVolumeClaim in the pod
        type: string
    title: volumeDevice describes a mapping of a raw block device within a container.
    type: object
  VolumeMount:
    properties:
      mountPath:
        description: |-
          Path within the container at which the volume should be mounted.  Must
          not contain ':'.
        type: string
      mountPropagation:
        $ref: '#/definitions/MountPropagationMode'
      name:
        description: This must match the Name of a Volume.
        type: string
      readOnly:
        description: |-
          Mounted read-only if true, read-write otherwise (false or unspecified).
          Defaults to false.
          +optional
        type: boolean
      subPath:
        description: |-
          Path within the volume from which the container's volume should be mounted.
          Defaults to "" (volume's root).
          +optional
        type: string
      subPathExpr:
        description: |-
          Expanded path within the volume from which the container's volume should be mounted.
          Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
          Defaults to "" (volume's root).
          SubPathExpr and SubPath are mutually exclusive.
          +optional
        type: string
    title: VolumeMount describes a mounting of a Volume within a container.
    type: object
  VolumeProjection:
    description: Projection that may be projected along with other supported volume
      types
    properties:
      configMap:
        $ref: '#/definitions/ConfigMapProjection'
      downwardAPI:
        $ref: '#/definitions/DownwardAPIProjection'
      secret:
        $ref: '#/definitions/SecretProjection'
      serviceAccountToken:
        $ref: '#/definitions/ServiceAccountTokenProjection'
    type: object
  VsphereVirtualDiskVolumeSource:
    properties:
      fsType:
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system.
          Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
          +optional
        type: string
      storagePolicyID:
        description: |-
          Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
          +optional
        type: string
      storagePolicyName:
        description: |-
          Storage Policy Based Management (SPBM) profile name.
          +optional
        type: string
      volumePath:
        description: Path that identifies vSphere volume vmdk
        type: string
    title: Represents a vSphere volume resource.
    type: object
  WeightedPodAffinityTerm:
    description: The weights of all of the matched WeightedPodAffinityTerm fields
      are added per-node to find the most preferred node(s)
    properties:
      podAffinityTerm:
        $ref: '#/definitions/PodAffinityTerm'
      weight:
        description: |-
          weight associated with matching the corresponding podAffinityTerm,
          in the range 1-100.
        format: int32
        type: integer
    type: object
  WindowsSecurityContextOptions:
    properties:
      gmsaCredentialSpec:
        description: |-
          GMSACredentialSpec is where the GMSA admission webhook
          (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
          GMSA credential spec named by the GMSACredentialSpecName field.
          +optional
        type: string
      gmsaCredentialSpecName:
        description: |-
          GMSACredentialSpecName is the name of the GMSA credential spec to use.
          +optional
        type: string
      runAsUserName:
        description: |-
          The UserName in Windows to run the entrypoint of the container process.
          Defaults to the user specified in image metadata if unspecified.
          May also be set in PodSecurityContext. If set in both SecurityContext and
          PodSecurityContext, the value specified in SecurityContext takes precedence.
          +optional
        type: string
    title: WindowsSecurityContextOptions contain Windows-specific options and credentials.
    type: object
  Workflow:
    properties:
      metadata:
        $ref: '#/definitions/ObjectMeta'
    required:
    - metadata
    type: object
  ZipStrategy:
    description: ZipStrategy will unzip zipped input artifacts
    type: object
host: localhost
info:
  title: The API for an executor plugin.
  version: 0.0.1
paths:
  /template.execute:
    post:
      operationId: executeTemplate
      parameters:
      - in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/ExecuteTemplateArgs'
      responses:
        "200":
          $ref: '#/responses/executeTemplate'
produces:
- application/json
responses:
  executeTemplate:
    description: ""
    schema:
      $ref: '#/definitions/ExecuteTemplateReply'
schemes:
- http
swagger: "2.0"
