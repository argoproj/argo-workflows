# coding: utf-8

"""
    Argo

    Workflow Service API performs CRUD actions against application resources  # noqa: E501

    The version of the OpenAPI document: latest
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V1DeleteOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dry_run': 'list[str]',
        'grace_period_seconds': 'str',
        'orphan_dependents': 'bool',
        'preconditions': 'Apismetav1Preconditions',
        'propagation_policy': 'str'
    }

    attribute_map = {
        'dry_run': 'dryRun',
        'grace_period_seconds': 'gracePeriodSeconds',
        'orphan_dependents': 'orphanDependents',
        'preconditions': 'preconditions',
        'propagation_policy': 'propagationPolicy'
    }

    def __init__(self, dry_run=None, grace_period_seconds=None, orphan_dependents=None, preconditions=None, propagation_policy=None, local_vars_configuration=None):  # noqa: E501
        """V1DeleteOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dry_run = None
        self._grace_period_seconds = None
        self._orphan_dependents = None
        self._preconditions = None
        self._propagation_policy = None
        self.discriminator = None

        if dry_run is not None:
            self.dry_run = dry_run
        if grace_period_seconds is not None:
            self.grace_period_seconds = grace_period_seconds
        if orphan_dependents is not None:
            self.orphan_dependents = orphan_dependents
        if preconditions is not None:
            self.preconditions = preconditions
        if propagation_policy is not None:
            self.propagation_policy = propagation_policy

    @property
    def dry_run(self):
        """Gets the dry_run of this V1DeleteOptions.  # noqa: E501


        :return: The dry_run of this V1DeleteOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this V1DeleteOptions.


        :param dry_run: The dry_run of this V1DeleteOptions.  # noqa: E501
        :type: list[str]
        """

        self._dry_run = dry_run

    @property
    def grace_period_seconds(self):
        """Gets the grace_period_seconds of this V1DeleteOptions.  # noqa: E501


        :return: The grace_period_seconds of this V1DeleteOptions.  # noqa: E501
        :rtype: str
        """
        return self._grace_period_seconds

    @grace_period_seconds.setter
    def grace_period_seconds(self, grace_period_seconds):
        """Sets the grace_period_seconds of this V1DeleteOptions.


        :param grace_period_seconds: The grace_period_seconds of this V1DeleteOptions.  # noqa: E501
        :type: str
        """

        self._grace_period_seconds = grace_period_seconds

    @property
    def orphan_dependents(self):
        """Gets the orphan_dependents of this V1DeleteOptions.  # noqa: E501


        :return: The orphan_dependents of this V1DeleteOptions.  # noqa: E501
        :rtype: bool
        """
        return self._orphan_dependents

    @orphan_dependents.setter
    def orphan_dependents(self, orphan_dependents):
        """Sets the orphan_dependents of this V1DeleteOptions.


        :param orphan_dependents: The orphan_dependents of this V1DeleteOptions.  # noqa: E501
        :type: bool
        """

        self._orphan_dependents = orphan_dependents

    @property
    def preconditions(self):
        """Gets the preconditions of this V1DeleteOptions.  # noqa: E501


        :return: The preconditions of this V1DeleteOptions.  # noqa: E501
        :rtype: Apismetav1Preconditions
        """
        return self._preconditions

    @preconditions.setter
    def preconditions(self, preconditions):
        """Sets the preconditions of this V1DeleteOptions.


        :param preconditions: The preconditions of this V1DeleteOptions.  # noqa: E501
        :type: Apismetav1Preconditions
        """

        self._preconditions = preconditions

    @property
    def propagation_policy(self):
        """Gets the propagation_policy of this V1DeleteOptions.  # noqa: E501


        :return: The propagation_policy of this V1DeleteOptions.  # noqa: E501
        :rtype: str
        """
        return self._propagation_policy

    @propagation_policy.setter
    def propagation_policy(self, propagation_policy):
        """Sets the propagation_policy of this V1DeleteOptions.


        :param propagation_policy: The propagation_policy of this V1DeleteOptions.  # noqa: E501
        :type: str
        """

        self._propagation_policy = propagation_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DeleteOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1DeleteOptions):
            return True

        return self.to_dict() != other.to_dict()
