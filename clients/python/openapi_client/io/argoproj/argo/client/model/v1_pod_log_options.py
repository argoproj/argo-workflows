# coding: utf-8

"""
    Argo Server API

    The Argo Server based API for Argo  # noqa: E501

    The version of the OpenAPI document: latest
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class V1PodLogOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'container': 'str',
        'follow': 'bool',
        'limit_bytes': 'str',
        'previous': 'bool',
        'since_seconds': 'str',
        'since_time': 'V1Time',
        'tail_lines': 'str',
        'timestamps': 'bool'
    }

    attribute_map = {
        'container': 'container',
        'follow': 'follow',
        'limit_bytes': 'limitBytes',
        'previous': 'previous',
        'since_seconds': 'sinceSeconds',
        'since_time': 'sinceTime',
        'tail_lines': 'tailLines',
        'timestamps': 'timestamps'
    }

    def __init__(self, container=None, follow=None, limit_bytes=None, previous=None, since_seconds=None, since_time=None, tail_lines=None, timestamps=None, local_vars_configuration=None):  # noqa: E501
        """V1PodLogOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._container = None
        self._follow = None
        self._limit_bytes = None
        self._previous = None
        self._since_seconds = None
        self._since_time = None
        self._tail_lines = None
        self._timestamps = None
        self.discriminator = None

        if container is not None:
            self.container = container
        if follow is not None:
            self.follow = follow
        if limit_bytes is not None:
            self.limit_bytes = limit_bytes
        if previous is not None:
            self.previous = previous
        if since_seconds is not None:
            self.since_seconds = since_seconds
        if since_time is not None:
            self.since_time = since_time
        if tail_lines is not None:
            self.tail_lines = tail_lines
        if timestamps is not None:
            self.timestamps = timestamps

    @property
    def container(self):
        """Gets the container of this V1PodLogOptions.  # noqa: E501


        :return: The container of this V1PodLogOptions.  # noqa: E501
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this V1PodLogOptions.


        :param container: The container of this V1PodLogOptions.  # noqa: E501
        :type: str
        """

        self._container = container

    @property
    def follow(self):
        """Gets the follow of this V1PodLogOptions.  # noqa: E501


        :return: The follow of this V1PodLogOptions.  # noqa: E501
        :rtype: bool
        """
        return self._follow

    @follow.setter
    def follow(self, follow):
        """Sets the follow of this V1PodLogOptions.


        :param follow: The follow of this V1PodLogOptions.  # noqa: E501
        :type: bool
        """

        self._follow = follow

    @property
    def limit_bytes(self):
        """Gets the limit_bytes of this V1PodLogOptions.  # noqa: E501


        :return: The limit_bytes of this V1PodLogOptions.  # noqa: E501
        :rtype: str
        """
        return self._limit_bytes

    @limit_bytes.setter
    def limit_bytes(self, limit_bytes):
        """Sets the limit_bytes of this V1PodLogOptions.


        :param limit_bytes: The limit_bytes of this V1PodLogOptions.  # noqa: E501
        :type: str
        """

        self._limit_bytes = limit_bytes

    @property
    def previous(self):
        """Gets the previous of this V1PodLogOptions.  # noqa: E501


        :return: The previous of this V1PodLogOptions.  # noqa: E501
        :rtype: bool
        """
        return self._previous

    @previous.setter
    def previous(self, previous):
        """Sets the previous of this V1PodLogOptions.


        :param previous: The previous of this V1PodLogOptions.  # noqa: E501
        :type: bool
        """

        self._previous = previous

    @property
    def since_seconds(self):
        """Gets the since_seconds of this V1PodLogOptions.  # noqa: E501


        :return: The since_seconds of this V1PodLogOptions.  # noqa: E501
        :rtype: str
        """
        return self._since_seconds

    @since_seconds.setter
    def since_seconds(self, since_seconds):
        """Sets the since_seconds of this V1PodLogOptions.


        :param since_seconds: The since_seconds of this V1PodLogOptions.  # noqa: E501
        :type: str
        """

        self._since_seconds = since_seconds

    @property
    def since_time(self):
        """Gets the since_time of this V1PodLogOptions.  # noqa: E501


        :return: The since_time of this V1PodLogOptions.  # noqa: E501
        :rtype: V1Time
        """
        return self._since_time

    @since_time.setter
    def since_time(self, since_time):
        """Sets the since_time of this V1PodLogOptions.


        :param since_time: The since_time of this V1PodLogOptions.  # noqa: E501
        :type: V1Time
        """

        self._since_time = since_time

    @property
    def tail_lines(self):
        """Gets the tail_lines of this V1PodLogOptions.  # noqa: E501


        :return: The tail_lines of this V1PodLogOptions.  # noqa: E501
        :rtype: str
        """
        return self._tail_lines

    @tail_lines.setter
    def tail_lines(self, tail_lines):
        """Sets the tail_lines of this V1PodLogOptions.


        :param tail_lines: The tail_lines of this V1PodLogOptions.  # noqa: E501
        :type: str
        """

        self._tail_lines = tail_lines

    @property
    def timestamps(self):
        """Gets the timestamps of this V1PodLogOptions.  # noqa: E501


        :return: The timestamps of this V1PodLogOptions.  # noqa: E501
        :rtype: bool
        """
        return self._timestamps

    @timestamps.setter
    def timestamps(self, timestamps):
        """Sets the timestamps of this V1PodLogOptions.


        :param timestamps: The timestamps of this V1PodLogOptions.  # noqa: E501
        :type: bool
        """

        self._timestamps = timestamps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1PodLogOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1PodLogOptions):
            return True

        return self.to_dict() != other.to_dict()
