# coding: utf-8

"""
    Argo

    Workflow Service API performs CRUD actions against application resources  # noqa: E501

    The version of the OpenAPI document: latest
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Workflowv1alpha1PersistentVolumeClaim(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'metadata': 'V1ObjectMeta',
        'spec': 'Workflowv1alpha1PersistentVolumeClaimSpec',
        'status': 'Workflowv1alpha1PersistentVolumeClaimStatus',
        'type_meta': 'Metav1TypeMeta'
    }

    attribute_map = {
        'metadata': 'metadata',
        'spec': 'spec',
        'status': 'status',
        'type_meta': 'typeMeta'
    }

    def __init__(self, metadata=None, spec=None, status=None, type_meta=None, local_vars_configuration=None):  # noqa: E501
        """Workflowv1alpha1PersistentVolumeClaim - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._metadata = None
        self._spec = None
        self._status = None
        self._type_meta = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if spec is not None:
            self.spec = spec
        if status is not None:
            self.status = status
        if type_meta is not None:
            self.type_meta = type_meta

    @property
    def metadata(self):
        """Gets the metadata of this Workflowv1alpha1PersistentVolumeClaim.  # noqa: E501


        :return: The metadata of this Workflowv1alpha1PersistentVolumeClaim.  # noqa: E501
        :rtype: V1ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Workflowv1alpha1PersistentVolumeClaim.


        :param metadata: The metadata of this Workflowv1alpha1PersistentVolumeClaim.  # noqa: E501
        :type: V1ObjectMeta
        """

        self._metadata = metadata

    @property
    def spec(self):
        """Gets the spec of this Workflowv1alpha1PersistentVolumeClaim.  # noqa: E501


        :return: The spec of this Workflowv1alpha1PersistentVolumeClaim.  # noqa: E501
        :rtype: Workflowv1alpha1PersistentVolumeClaimSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this Workflowv1alpha1PersistentVolumeClaim.


        :param spec: The spec of this Workflowv1alpha1PersistentVolumeClaim.  # noqa: E501
        :type: Workflowv1alpha1PersistentVolumeClaimSpec
        """

        self._spec = spec

    @property
    def status(self):
        """Gets the status of this Workflowv1alpha1PersistentVolumeClaim.  # noqa: E501


        :return: The status of this Workflowv1alpha1PersistentVolumeClaim.  # noqa: E501
        :rtype: Workflowv1alpha1PersistentVolumeClaimStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Workflowv1alpha1PersistentVolumeClaim.


        :param status: The status of this Workflowv1alpha1PersistentVolumeClaim.  # noqa: E501
        :type: Workflowv1alpha1PersistentVolumeClaimStatus
        """

        self._status = status

    @property
    def type_meta(self):
        """Gets the type_meta of this Workflowv1alpha1PersistentVolumeClaim.  # noqa: E501


        :return: The type_meta of this Workflowv1alpha1PersistentVolumeClaim.  # noqa: E501
        :rtype: Metav1TypeMeta
        """
        return self._type_meta

    @type_meta.setter
    def type_meta(self, type_meta):
        """Sets the type_meta of this Workflowv1alpha1PersistentVolumeClaim.


        :param type_meta: The type_meta of this Workflowv1alpha1PersistentVolumeClaim.  # noqa: E501
        :type: Metav1TypeMeta
        """

        self._type_meta = type_meta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Workflowv1alpha1PersistentVolumeClaim):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Workflowv1alpha1PersistentVolumeClaim):
            return True

        return self.to_dict() != other.to_dict()
