# coding: utf-8

"""
    Argo Server API

    The Argo Server based API for Argo  # noqa: E501

    The version of the OpenAPI document: latest
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.io.argoproj.argo.client.model.v1_projected_volume_source import V1ProjectedVolumeSource  # noqa: E501
from openapi_client.rest import ApiException

class TestV1ProjectedVolumeSource(unittest.TestCase):
    """V1ProjectedVolumeSource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1ProjectedVolumeSource
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.v1_projected_volume_source.V1ProjectedVolumeSource()  # noqa: E501
        if include_optional :
            return V1ProjectedVolumeSource(
                default_mode = 56, 
                sources = [
                    openapi_client.models.projection_that_may_be_projected_along_with_other_supported_volume_types.Projection that may be projected along with other supported volume types(
                        config_map = openapi_client.models.v1_config_map_projection.v1ConfigMapProjection(
                            items = [
                                openapi_client.models.v1_key_to_path.v1KeyToPath(
                                    key = '0', 
                                    mode = 56, 
                                    path = '0', )
                                ], 
                            local_object_reference = openapi_client.models.v1_local_object_reference.v1LocalObjectReference(
                                name = '0', ), 
                            optional = True, ), 
                        downward_api = openapi_client.models.v1_downward_api_projection.v1DownwardAPIProjection(
                            items = [
                                openapi_client.models.downward_api_volume_file_represents_information_to_create_the_file_containing_the_pod_field.DownwardAPIVolumeFile represents information to create the file containing the pod field(
                                    field_ref = openapi_client.models.v1_object_field_selector.v1ObjectFieldSelector(
                                        api_version = '0', 
                                        field_path = '0', ), 
                                    mode = 56, 
                                    path = '0', 
                                    resource_field_ref = openapi_client.models.resource_field_selector_represents_container_resources_(cpu,_memory)_and_their_output_format.ResourceFieldSelector represents container resources (cpu, memory) and their output format(
                                        container_name = '0', 
                                        divisor = openapi_client.models.resource_quantity.resourceQuantity(
                                            string = '0', ), 
                                        resource = '0', ), )
                                ], ), 
                        secret = openapi_client.models.v1_secret_projection.v1SecretProjection(
                            items = [
                                openapi_client.models.v1_key_to_path.v1KeyToPath(
                                    key = '0', 
                                    mode = 56, 
                                    path = '0', )
                                ], 
                            optional = True, ), 
                        service_account_token = openapi_client.models.v1_service_account_token_projection.v1ServiceAccountTokenProjection(
                            audience = '0', 
                            expiration_seconds = '0', 
                            path = '0', ), )
                    ]
            )
        else :
            return V1ProjectedVolumeSource(
        )

    def testV1ProjectedVolumeSource(self):
        """Test V1ProjectedVolumeSource"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
