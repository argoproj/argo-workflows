# coding: utf-8

"""
    Argo Server API

    The Argo Server based API for Argo  # noqa: E501

    The version of the OpenAPI document: latest
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.io.argoproj.argo.client.model.v1_security_context import V1SecurityContext  # noqa: E501
from openapi_client.rest import ApiException

class TestV1SecurityContext(unittest.TestCase):
    """V1SecurityContext unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1SecurityContext
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.v1_security_context.V1SecurityContext()  # noqa: E501
        if include_optional :
            return V1SecurityContext(
                allow_privilege_escalation = True, 
                capabilities = openapi_client.models.v1_capabilities.v1Capabilities(
                    add = [
                        '0'
                        ], 
                    drop = [
                        '0'
                        ], ), 
                privileged = True, 
                proc_mount = '0', 
                read_only_root_filesystem = True, 
                run_as_group = '0', 
                run_as_non_root = True, 
                run_as_user = '0', 
                se_linux_options = openapi_client.models.se_linux_options_are_the_labels_to_be_applied_to_the_container.SELinuxOptions are the labels to be applied to the container(
                    level = '0', 
                    role = '0', 
                    type = '0', 
                    user = '0', ), 
                windows_options = openapi_client.models.v1_windows_security_context_options.v1WindowsSecurityContextOptions(
                    gmsa_credential_spec = '0', 
                    gmsa_credential_spec_name = '0', 
                    run_as_user_name = '0', )
            )
        else :
            return V1SecurityContext(
        )

    def testV1SecurityContext(self):
        """Test V1SecurityContext"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
