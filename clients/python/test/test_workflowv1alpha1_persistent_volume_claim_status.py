# coding: utf-8

"""
    Argo

    Workflow Service API performs CRUD actions against application resources  # noqa: E501

    The version of the OpenAPI document: latest
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.io.argoproj.argo.client.model.workflowv1alpha1_persistent_volume_claim_status import Workflowv1alpha1PersistentVolumeClaimStatus  # noqa: E501
from openapi_client.rest import ApiException

class TestWorkflowv1alpha1PersistentVolumeClaimStatus(unittest.TestCase):
    """Workflowv1alpha1PersistentVolumeClaimStatus unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Workflowv1alpha1PersistentVolumeClaimStatus
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.workflowv1alpha1_persistent_volume_claim_status.Workflowv1alpha1PersistentVolumeClaimStatus()  # noqa: E501
        if include_optional :
            return Workflowv1alpha1PersistentVolumeClaimStatus(
                access_modes = [
                    '0'
                    ], 
                capacity = {
                    'key' : openapi_client.models.resource_quantity.resourceQuantity(
                        string = '0', )
                    }, 
                conditions = [
                    openapi_client.models.workflowv1alpha1_persistent_volume_claim_condition.workflowv1alpha1PersistentVolumeClaimCondition(
                        last_probe_time = openapi_client.models.v1_time.v1Time(
                            nanos = 56, 
                            seconds = '0', ), 
                        last_transition_time = openapi_client.models.v1_time.v1Time(
                            nanos = 56, 
                            seconds = '0', ), 
                        message = '0', 
                        reason = '0', 
                        status = '0', 
                        type = '0', )
                    ], 
                phase = '0'
            )
        else :
            return Workflowv1alpha1PersistentVolumeClaimStatus(
        )

    def testWorkflowv1alpha1PersistentVolumeClaimStatus(self):
        """Test Workflowv1alpha1PersistentVolumeClaimStatus"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
