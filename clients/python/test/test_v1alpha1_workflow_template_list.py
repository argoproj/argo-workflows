# coding: utf-8

"""
    Argo

    Workflow Service API performs CRUD actions against application resources  # noqa: E501

    The version of the OpenAPI document: latest
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.io.argoproj.argo.client.model.v1alpha1_workflow_template_list import V1alpha1WorkflowTemplateList  # noqa: E501
from openapi_client.rest import ApiException

class TestV1alpha1WorkflowTemplateList(unittest.TestCase):
    """V1alpha1WorkflowTemplateList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1alpha1WorkflowTemplateList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.v1alpha1_workflow_template_list.V1alpha1WorkflowTemplateList()  # noqa: E501
        if include_optional :
            return V1alpha1WorkflowTemplateList(
                items = [
                    openapi_client.models.workflow_template_is_the_definition_of_a_workflow_template_resource
+genclient
+genclient:no_status
+k8s:deepcopy_gen:interfaces=k8s/io/apimachinery/pkg/runtime/object.WorkflowTemplate is the definition of a workflow template resource
+genclient
+genclient:noStatus
+k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object(
                        metadata = openapi_client.models.v1_object_meta.v1ObjectMeta(
                            annotations = {
                                'key' : '0'
                                }, 
                            cluster_name = '0', 
                            creation_timestamp = openapi_client.models.v1_time.v1Time(
                                nanos = 56, 
                                seconds = '0', ), 
                            deletion_grace_period_seconds = '0', 
                            deletion_timestamp = openapi_client.models.v1_time.v1Time(
                                nanos = 56, 
                                seconds = '0', ), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = '0', 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                openapi_client.models.v1_managed_fields_entry.v1ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = openapi_client.models.v1_fields_v1.v1FieldsV1(
                                        raw = 'YQ==', ), 
                                    manager = '0', 
                                    operation = '0', 
                                    time = openapi_client.models.v1_time.v1Time(
                                        nanos = 56, 
                                        seconds = '0', ), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                openapi_client.models.v1_owner_reference.v1OwnerReference(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        spec = openapi_client.models.v1alpha1_workflow_template_spec.v1alpha1WorkflowTemplateSpec(
                            arguments = openapi_client.models.arguments_to_a_template.Arguments to a template(
                                artifacts = [
                                    openapi_client.models.artifact_indicates_an_artifact_to_place_at_a_specified_path.Artifact indicates an artifact to place at a specified path(
                                        archive = openapi_client.models.archive_strategy_describes_how_to_archive_files/directory_when_saving_artifacts.ArchiveStrategy describes how to archive files/directory when saving artifacts(
                                            none = openapi_client.models.v1alpha1_none_strategy.v1alpha1NoneStrategy(), 
                                            tar = openapi_client.models.tar_strategy_will_tar_and_gzip_the_file_or_directory_when_saving.TarStrategy will tar and gzip the file or directory when saving(), ), 
                                        artifact_location = openapi_client.models.v1alpha1_artifact_location.v1alpha1ArtifactLocation(
                                            archive_logs = True, 
                                            artifactory = openapi_client.models.artifactory_artifact_is_the_location_of_an_artifactory_artifact.ArtifactoryArtifact is the location of an artifactory artifact(
                                                artifactory_auth = openapi_client.models.artifactory_auth_describes_the_secret_selectors_required_for_authenticating_to_artifactory.ArtifactoryAuth describes the secret selectors required for authenticating to artifactory(
                                                    password_secret = openapi_client.models.workflowv1alpha1_secret_key_selector.workflowv1alpha1SecretKeySelector(
                                                        key = '0', 
                                                        local_object_reference = openapi_client.models.workflowv1alpha1_local_object_reference.workflowv1alpha1LocalObjectReference(
                                                            name = '0', ), 
                                                        optional = True, ), 
                                                    username_secret = openapi_client.models.workflowv1alpha1_secret_key_selector.workflowv1alpha1SecretKeySelector(
                                                        key = '0', 
                                                        optional = True, ), ), 
                                                url = '0', ), 
                                            git = openapi_client.models.git_artifact_is_the_location_of_an_git_artifact.GitArtifact is the location of an git artifact(
                                                depth = '0', 
                                                fetch = [
                                                    '0'
                                                    ], 
                                                insecure_ignore_host_key = True, 
                                                repo = '0', 
                                                revision = '0', 
                                                ssh_private_key_secret = openapi_client.models.workflowv1alpha1_secret_key_selector.workflowv1alpha1SecretKeySelector(
                                                    key = '0', 
                                                    optional = True, ), ), 
                                            hdfs = openapi_client.models.hdfs_artifact_is_the_location_of_an_hdfs_artifact.HDFSArtifact is the location of an HDFS artifact(
                                                force = True, 
                                                h_dfs_config = openapi_client.models.hdfs_config_is_configurations_for_hdfs.HDFSConfig is configurations for HDFS(
                                                    addresses = [
                                                        '0'
                                                        ], 
                                                    h_dfs_krb_config = openapi_client.models.hdfs_krb_config_is_auth_configurations_for_kerberos.HDFSKrbConfig is auth configurations for Kerberos(
                                                        krb_c_cache_secret = openapi_client.models.workflowv1alpha1_secret_key_selector.workflowv1alpha1SecretKeySelector(
                                                            key = '0', 
                                                            optional = True, ), 
                                                        krb_config_config_map = openapi_client.models.workflowv1alpha1_config_map_key_selector.workflowv1alpha1ConfigMapKeySelector(
                                                            key = '0', 
                                                            optional = True, ), 
                                                        krb_keytab_secret = openapi_client.models.workflowv1alpha1_secret_key_selector.workflowv1alpha1SecretKeySelector(
                                                            key = '0', 
                                                            optional = True, ), 
                                                        krb_realm = '0', 
                                                        krb_service_principal_name = '0', 
                                                        krb_username = '0', ), 
                                                    hdfs_user = '0', ), 
                                                path = '0', ), 
                                            http = openapi_client.models.http_artifact_allows_an_file_served_on_http_to_be_placed_as_an_input_artifact_in_a_container.HTTPArtifact allows an file served on HTTP to be placed as an input artifact in a container(
                                                url = '0', ), 
                                            raw = openapi_client.models.raw_artifact_allows_raw_string_content_to_be_placed_as_an_artifact_in_a_container.RawArtifact allows raw string content to be placed as an artifact in a container(
                                                data = '0', ), 
                                            s3 = openapi_client.models.s3_artifact_is_the_location_of_an_s3_artifact.S3Artifact is the location of an S3 artifact(
                                                key = '0', 
                                                s3_bucket = openapi_client.models.s3_bucket_contains_the_access_information_required_for_interfacing_with_an_s3_bucket.S3Bucket contains the access information required for interfacing with an S3 bucket(
                                                    access_key_secret = openapi_client.models.workflowv1alpha1_secret_key_selector.workflowv1alpha1SecretKeySelector(
                                                        key = '0', 
                                                        optional = True, ), 
                                                    bucket = '0', 
                                                    endpoint = '0', 
                                                    insecure = True, 
                                                    region = '0', 
                                                    role_arn = '0', 
                                                    secret_key_secret = openapi_client.models.workflowv1alpha1_secret_key_selector.workflowv1alpha1SecretKeySelector(
                                                        key = '0', 
                                                        optional = True, ), ), ), ), 
                                        from = '0', 
                                        global_name = '0', 
                                        mode = 56, 
                                        name = '0', 
                                        optional = True, 
                                        path = '0', )
                                    ], 
                                parameters = [
                                    openapi_client.models.parameter_indicate_a_passed_string_parameter_to_a_service_template_with_an_optional_default_value.Parameter indicate a passed string parameter to a service template with an optional default value(
                                        default = '0', 
                                        global_name = '0', 
                                        name = '0', 
                                        value = '0', 
                                        value_from = openapi_client.models.value_from_describes_a_location_in_which_to_obtain_the_value_to_a_parameter.ValueFrom describes a location in which to obtain the value to a parameter(
                                            jq_filter = '0', 
                                            json_path = '0', 
                                            parameter = '0', 
                                            path = '0', ), )
                                    ], ), 
                            templates = [
                                openapi_client.models.template_is_a_reusable_and_composable_unit_of_execution_in_a_workflow.Template is a reusable and composable unit of execution in a workflow(
                                    active_deadline_seconds = '0', 
                                    affinity = openapi_client.models.workflowv1alpha1_affinity.workflowv1alpha1Affinity(
                                        node_affinity = openapi_client.models.workflowv1alpha1_node_affinity.workflowv1alpha1NodeAffinity(
                                            preferred_during_scheduling_ignored_during_execution = [
                                                openapi_client.models.workflowv1alpha1_preferred_scheduling_term.workflowv1alpha1PreferredSchedulingTerm(
                                                    preference = openapi_client.models.workflowv1alpha1_node_selector_term.workflowv1alpha1NodeSelectorTerm(
                                                        match_expressions = [
                                                            openapi_client.models.workflowv1alpha1_node_selector_requirement.workflowv1alpha1NodeSelectorRequirement(
                                                                key = '0', 
                                                                operator = '0', 
                                                                values = [
                                                                    '0'
                                                                    ], )
                                                            ], 
                                                        match_fields = [
                                                            openapi_client.models.workflowv1alpha1_node_selector_requirement.workflowv1alpha1NodeSelectorRequirement(
                                                                key = '0', 
                                                                operator = '0', 
                                                                values = [
                                                                    '0'
                                                                    ], )
                                                            ], ), 
                                                    weight = 56, )
                                                ], 
                                            required_during_scheduling_ignored_during_execution = openapi_client.models.workflowv1alpha1_node_selector.workflowv1alpha1NodeSelector(
                                                node_selector_terms = [
                                                    openapi_client.models.workflowv1alpha1_node_selector_term.workflowv1alpha1NodeSelectorTerm(
                                                        match_expressions = [
                                                            openapi_client.models.workflowv1alpha1_node_selector_requirement.workflowv1alpha1NodeSelectorRequirement(
                                                                key = '0', 
                                                                operator = '0', 
                                                                values = [
                                                                    '0'
                                                                    ], )
                                                            ], 
                                                        match_fields = [
                                                            openapi_client.models.workflowv1alpha1_node_selector_requirement.workflowv1alpha1NodeSelectorRequirement(
                                                                key = '0', 
                                                                operator = '0', 
                                                                values = [
                                                                    '0'
                                                                    ], )
                                                            ], )
                                                    ], ), ), 
                                        pod_affinity = openapi_client.models.workflowv1alpha1_pod_affinity.workflowv1alpha1PodAffinity(
                                            preferred_during_scheduling_ignored_during_execution = [
                                                openapi_client.models.workflowv1alpha1_weighted_pod_affinity_term.workflowv1alpha1WeightedPodAffinityTerm(
                                                    pod_affinity_term = openapi_client.models.workflowv1alpha1_pod_affinity_term.workflowv1alpha1PodAffinityTerm(
                                                        label_selector = openapi_client.models.v1_label_selector.v1LabelSelector(
                                                            match_expressions = [
                                                                openapi_client.models.v1_label_selector_requirement.v1LabelSelectorRequirement(
                                                                    key = '0', 
                                                                    operator = '0', 
                                                                    values = [
                                                                        '0'
                                                                        ], )
                                                                ], 
                                                            match_labels = {
                                                                'key' : '0'
                                                                }, ), 
                                                        namespaces = [
                                                            '0'
                                                            ], 
                                                        topology_key = '0', ), 
                                                    weight = 56, )
                                                ], ), 
                                        pod_anti_affinity = openapi_client.models.workflowv1alpha1_pod_anti_affinity.workflowv1alpha1PodAntiAffinity(
                                            preferred_during_scheduling_ignored_during_execution = [
                                                openapi_client.models.workflowv1alpha1_weighted_pod_affinity_term.workflowv1alpha1WeightedPodAffinityTerm(
                                                    weight = 56, )
                                                ], ), ), 
                                    archive_location = openapi_client.models.v1alpha1_artifact_location.v1alpha1ArtifactLocation(
                                        archive_logs = True, ), 
                                    automount_service_account_token = True, 
                                    container = openapi_client.models.workflowv1alpha1_container.workflowv1alpha1Container(
                                        args = [
                                            '0'
                                            ], 
                                        command = [
                                            '0'
                                            ], 
                                        env = [
                                            openapi_client.models.workflowv1alpha1_env_var.workflowv1alpha1EnvVar(
                                                name = '0', 
                                                value = '0', )
                                            ], 
                                        env_from = [
                                            openapi_client.models.workflowv1alpha1_env_from_source.workflowv1alpha1EnvFromSource(
                                                config_map_ref = openapi_client.models.workflowv1alpha1_config_map_env_source.workflowv1alpha1ConfigMapEnvSource(
                                                    optional = True, ), 
                                                prefix = '0', 
                                                secret_ref = openapi_client.models.workflowv1alpha1_secret_env_source.workflowv1alpha1SecretEnvSource(
                                                    optional = True, ), )
                                            ], 
                                        image = '0', 
                                        image_pull_policy = '0', 
                                        lifecycle = openapi_client.models.workflowv1alpha1_lifecycle.workflowv1alpha1Lifecycle(
                                            post_start = openapi_client.models.workflowv1alpha1_handler.workflowv1alpha1Handler(
                                                exec = openapi_client.models.workflowv1alpha1_exec_action.workflowv1alpha1ExecAction(
                                                    command = [
                                                        '0'
                                                        ], ), 
                                                http_get = openapi_client.models.workflowv1alpha1_http_get_action.workflowv1alpha1HTTPGetAction(
                                                    host = '0', 
                                                    http_headers = [
                                                        openapi_client.models.workflowv1alpha1_http_header.workflowv1alpha1HTTPHeader(
                                                            name = '0', 
                                                            value = '0', )
                                                        ], 
                                                    path = '0', 
                                                    port = openapi_client.models.int_or_string_is_a_type_that_can_hold_an_int32_or_a_string/__when_used_in
json_or_yaml_marshalling_and_unmarshalling,_it_produces_or_consumes_the
inner_type/__this_allows_you_to_have,_for_example,_a_json_field_that_can
accept_a_name_or_number/
todo:_rename_to_int32_or_string.IntOrString is a type that can hold an int32 or a string.  When used in
JSON or YAML marshalling and unmarshalling, it produces or consumes the
inner type.  This allows you to have, for example, a JSON field that can
accept a name or number.
TODO: Rename to Int32OrString(
                                                        int_val = 56, 
                                                        str_val = '0', 
                                                        type = '0', ), 
                                                    scheme = '0', ), 
                                                tcp_socket = openapi_client.models.workflowv1alpha1_tcp_socket_action.workflowv1alpha1TCPSocketAction(
                                                    host = '0', ), ), 
                                            pre_stop = openapi_client.models.workflowv1alpha1_handler.workflowv1alpha1Handler(), ), 
                                        liveness_probe = openapi_client.models.workflowv1alpha1_probe.workflowv1alpha1Probe(
                                            failure_threshold = 56, 
                                            handler = openapi_client.models.workflowv1alpha1_handler.workflowv1alpha1Handler(), 
                                            initial_delay_seconds = 56, 
                                            period_seconds = 56, 
                                            success_threshold = 56, 
                                            timeout_seconds = 56, ), 
                                        name = '0', 
                                        ports = [
                                            openapi_client.models.workflowv1alpha1_container_port.workflowv1alpha1ContainerPort(
                                                container_port = 56, 
                                                host_ip = '0', 
                                                host_port = 56, 
                                                name = '0', 
                                                protocol = '0', )
                                            ], 
                                        readiness_probe = openapi_client.models.workflowv1alpha1_probe.workflowv1alpha1Probe(
                                            failure_threshold = 56, 
                                            initial_delay_seconds = 56, 
                                            period_seconds = 56, 
                                            success_threshold = 56, 
                                            timeout_seconds = 56, ), 
                                        resources = openapi_client.models.workflowv1alpha1_resource_requirements.workflowv1alpha1ResourceRequirements(
                                            limits = {
                                                'key' : openapi_client.models.resource_quantity.resourceQuantity(
                                                    string = '0', )
                                                }, 
                                            requests = {
                                                'key' : openapi_client.models.resource_quantity.resourceQuantity(
                                                    string = '0', )
                                                }, ), 
                                        security_context = openapi_client.models.workflowv1alpha1_security_context.workflowv1alpha1SecurityContext(
                                            allow_privilege_escalation = True, 
                                            capabilities = openapi_client.models.workflowv1alpha1_capabilities.workflowv1alpha1Capabilities(
                                                add = [
                                                    '0'
                                                    ], 
                                                drop = [
                                                    '0'
                                                    ], ), 
                                            privileged = True, 
                                            proc_mount = '0', 
                                            read_only_root_filesystem = True, 
                                            run_as_group = '0', 
                                            run_as_non_root = True, 
                                            run_as_user = '0', 
                                            se_linux_options = openapi_client.models.workflowv1alpha1_se_linux_options.workflowv1alpha1SELinuxOptions(
                                                level = '0', 
                                                role = '0', 
                                                type = '0', 
                                                user = '0', ), 
                                            windows_options = openapi_client.models.workflowv1alpha1_windows_security_context_options.workflowv1alpha1WindowsSecurityContextOptions(
                                                gmsa_credential_spec = '0', 
                                                gmsa_credential_spec_name = '0', 
                                                run_as_user_name = '0', ), ), 
                                        startup_probe = openapi_client.models.workflowv1alpha1_probe.workflowv1alpha1Probe(
                                            failure_threshold = 56, 
                                            initial_delay_seconds = 56, 
                                            period_seconds = 56, 
                                            success_threshold = 56, 
                                            timeout_seconds = 56, ), 
                                        stdin = True, 
                                        stdin_once = True, 
                                        termination_message_path = '0', 
                                        termination_message_policy = '0', 
                                        tty = True, 
                                        volume_devices = [
                                            openapi_client.models.workflowv1alpha1_volume_device.workflowv1alpha1VolumeDevice(
                                                device_path = '0', 
                                                name = '0', )
                                            ], 
                                        volume_mounts = [
                                            openapi_client.models.workflowv1alpha1_volume_mount.workflowv1alpha1VolumeMount(
                                                mount_path = '0', 
                                                mount_propagation = '0', 
                                                name = '0', 
                                                read_only = True, 
                                                sub_path = '0', 
                                                sub_path_expr = '0', )
                                            ], 
                                        working_dir = '0', ), 
                                    daemon = True, 
                                    dag = openapi_client.models.dag_template_is_a_template_subtype_for_directed_acyclic_graph_templates.DAGTemplate is a template subtype for directed acyclic graph templates(
                                        fail_fast = True, 
                                        target = '0', 
                                        tasks = [
                                            openapi_client.models.dag_task_represents_a_node_in_the_graph_during_dag_execution.DAGTask represents a node in the graph during DAG execution(
                                                continue_on = openapi_client.models.v1alpha1_continue_on.v1alpha1ContinueOn(
                                                    error = True, 
                                                    failed = True, ), 
                                                dependencies = [
                                                    '0'
                                                    ], 
                                                name = '0', 
                                                on_exit = '0', 
                                                template = '0', 
                                                template_ref = openapi_client.models.v1alpha1_template_ref.v1alpha1TemplateRef(
                                                    name = '0', 
                                                    runtime_resolution = True, 
                                                    template = '0', ), 
                                                when = '0', 
                                                with_items = [
                                                    openapi_client.models.item_expands_a_single_workflow_step_into_multiple_parallel_steps
the_value_of_item_can_be_a_map,_string,_bool,_or_number.Item expands a single workflow step into multiple parallel steps
The value of Item can be a map, string, bool, or number(
                                                        bool_val = True, 
                                                        list_val = [
                                                            openapi_client.models.+protobuf=true
+protobuf/options/(gogoproto/goproto_stringer)=false
+k8s:openapi_gen=true.+protobuf=true
+protobuf.options.(gogoproto.goproto_stringer)=false
+k8s:openapi-gen=true(
                                                                bool_val = True, 
                                                                map_val = {
                                                                    'key' : '0'
                                                                    }, 
                                                                num_val = '0', 
                                                                str_val = '0', 
                                                                type = '0', )
                                                            ], 
                                                        map_val = {
                                                            'key' : openapi_client.models.+protobuf=true
+protobuf/options/(gogoproto/goproto_stringer)=false
+k8s:openapi_gen=true.+protobuf=true
+protobuf.options.(gogoproto.goproto_stringer)=false
+k8s:openapi-gen=true(
                                                                bool_val = True, 
                                                                num_val = '0', 
                                                                str_val = '0', 
                                                                type = '0', )
                                                            }, 
                                                        num_val = '0', 
                                                        str_val = '0', 
                                                        type = '0', )
                                                    ], 
                                                with_param = '0', 
                                                with_sequence = openapi_client.models.sequence_expands_a_workflow_step_into_numeric_range.Sequence expands a workflow step into numeric range(
                                                    count = '0', 
                                                    end = '0', 
                                                    format = '0', 
                                                    start = '0', ), )
                                            ], ), 
                                    executor = openapi_client.models.v1alpha1_executor_config.v1alpha1ExecutorConfig(
                                        service_account_name = '0', ), 
                                    host_aliases = [
                                        openapi_client.models.workflowv1alpha1_host_alias.workflowv1alpha1HostAlias(
                                            hostnames = [
                                                '0'
                                                ], 
                                            ip = '0', )
                                        ], 
                                    init_containers = [
                                        openapi_client.models.v1alpha1_user_container.v1alpha1UserContainer(
                                            mirror_volume_mounts = True, )
                                        ], 
                                    inputs = openapi_client.models.inputs_are_the_mechanism_for_passing_parameters,_artifacts,_volumes_from_one_template_to_another.Inputs are the mechanism for passing parameters, artifacts, volumes from one template to another(
                                        artifacts = [
                                            openapi_client.models.artifact_indicates_an_artifact_to_place_at_a_specified_path.Artifact indicates an artifact to place at a specified path(
                                                from = '0', 
                                                global_name = '0', 
                                                mode = 56, 
                                                name = '0', 
                                                optional = True, 
                                                path = '0', )
                                            ], 
                                        parameters = [
                                            openapi_client.models.parameter_indicate_a_passed_string_parameter_to_a_service_template_with_an_optional_default_value.Parameter indicate a passed string parameter to a service template with an optional default value(
                                                default = '0', 
                                                global_name = '0', 
                                                name = '0', 
                                                value = '0', )
                                            ], ), 
                                    name = '0', 
                                    node_selector = {
                                        'key' : '0'
                                        }, 
                                    outputs = openapi_client.models.outputs_hold_parameters,_artifacts,_and_results_from_a_step.Outputs hold parameters, artifacts, and results from a step(
                                        artifacts = [
                                            openapi_client.models.artifact_indicates_an_artifact_to_place_at_a_specified_path.Artifact indicates an artifact to place at a specified path(
                                                from = '0', 
                                                global_name = '0', 
                                                mode = 56, 
                                                name = '0', 
                                                optional = True, 
                                                path = '0', )
                                            ], 
                                        parameters = [
                                            openapi_client.models.parameter_indicate_a_passed_string_parameter_to_a_service_template_with_an_optional_default_value.Parameter indicate a passed string parameter to a service template with an optional default value(
                                                default = '0', 
                                                global_name = '0', 
                                                name = '0', 
                                                value = '0', )
                                            ], 
                                        result = '0', ), 
                                    parallelism = '0', 
                                    pod_spec_patch = '0', 
                                    priority = 56, 
                                    priority_class_name = '0', 
                                    resource = openapi_client.models.resource_template_is_a_template_subtype_to_manipulate_kubernetes_resources.ResourceTemplate is a template subtype to manipulate kubernetes resources(
                                        action = '0', 
                                        failure_condition = '0', 
                                        manifest = '0', 
                                        merge_strategy = '0', 
                                        set_owner_reference = True, 
                                        success_condition = '0', ), 
                                    retry_strategy = openapi_client.models.retry_strategy_provides_controls_on_how_to_retry_a_workflow_step.RetryStrategy provides controls on how to retry a workflow step(
                                        backoff = openapi_client.models.v1alpha1_backoff.v1alpha1Backoff(
                                            duration = '0', 
                                            factor = 56, 
                                            max_duration = '0', ), 
                                        limit = 56, 
                                        retry_policy = '0', ), 
                                    scheduler_name = '0', 
                                    script = openapi_client.models.script_template_is_a_template_subtype_to_enable_scripting_through_code_steps.ScriptTemplate is a template subtype to enable scripting through code steps(
                                        source = '0', ), 
                                    security_context = openapi_client.models.workflowv1alpha1_pod_security_context.workflowv1alpha1PodSecurityContext(
                                        fs_group = '0', 
                                        run_as_group = '0', 
                                        run_as_non_root = True, 
                                        run_as_user = '0', 
                                        supplemental_groups = [
                                            '0'
                                            ], 
                                        sysctls = [
                                            openapi_client.models.workflowv1alpha1_sysctl.workflowv1alpha1Sysctl(
                                                name = '0', 
                                                value = '0', )
                                            ], ), 
                                    service_account_name = '0', 
                                    sidecars = [
                                        openapi_client.models.v1alpha1_user_container.v1alpha1UserContainer(
                                            mirror_volume_mounts = True, )
                                        ], 
                                    steps = [
                                        openapi_client.models.v1alpha1_parallel_steps.v1alpha1ParallelSteps(
                                            steps = [
                                                openapi_client.models.workflow_step_is_a_reference_to_a_template_to_execute_in_a_series_of_step.WorkflowStep is a reference to a template to execute in a series of step(
                                                    name = '0', 
                                                    on_exit = '0', 
                                                    template = '0', 
                                                    when = '0', 
                                                    with_items = [
                                                        openapi_client.models.item_expands_a_single_workflow_step_into_multiple_parallel_steps
the_value_of_item_can_be_a_map,_string,_bool,_or_number.Item expands a single workflow step into multiple parallel steps
The value of Item can be a map, string, bool, or number(
                                                            bool_val = True, 
                                                            num_val = '0', 
                                                            str_val = '0', 
                                                            type = '0', )
                                                        ], 
                                                    with_param = '0', )
                                                ], )
                                        ], 
                                    suspend = openapi_client.models.suspend_template_is_a_template_subtype_to_suspend_a_workflow_at_a_predetermined_point_in_time.SuspendTemplate is a template subtype to suspend a workflow at a predetermined point in time(
                                        duration = '0', ), 
                                    template = '0', 
                                    template_ref = openapi_client.models.v1alpha1_template_ref.v1alpha1TemplateRef(
                                        name = '0', 
                                        runtime_resolution = True, 
                                        template = '0', ), 
                                    tolerations = [
                                        openapi_client.models.workflowv1alpha1_toleration.workflowv1alpha1Toleration(
                                            effect = '0', 
                                            key = '0', 
                                            operator = '0', 
                                            toleration_seconds = '0', 
                                            value = '0', )
                                        ], 
                                    volumes = [
                                        openapi_client.models.workflowv1alpha1_volume.workflowv1alpha1Volume(
                                            name = '0', 
                                            volume_source = openapi_client.models.workflowv1alpha1_volume_source.workflowv1alpha1VolumeSource(
                                                aws_elastic_block_store = openapi_client.models.workflowv1alpha1_aws_elastic_block_store_volume_source.workflowv1alpha1AWSElasticBlockStoreVolumeSource(
                                                    fs_type = '0', 
                                                    partition = 56, 
                                                    read_only = True, 
                                                    volume_id = '0', ), 
                                                azure_disk = openapi_client.models.workflowv1alpha1_azure_disk_volume_source.workflowv1alpha1AzureDiskVolumeSource(
                                                    caching_mode = '0', 
                                                    disk_name = '0', 
                                                    disk_uri = '0', 
                                                    fs_type = '0', 
                                                    kind = '0', 
                                                    read_only = True, ), 
                                                azure_file = openapi_client.models.workflowv1alpha1_azure_file_volume_source.workflowv1alpha1AzureFileVolumeSource(
                                                    read_only = True, 
                                                    secret_name = '0', 
                                                    share_name = '0', ), 
                                                cephfs = openapi_client.models.workflowv1alpha1_ceph_fs_volume_source.workflowv1alpha1CephFSVolumeSource(
                                                    monitors = [
                                                        '0'
                                                        ], 
                                                    path = '0', 
                                                    read_only = True, 
                                                    secret_file = '0', 
                                                    user = '0', ), 
                                                cinder = openapi_client.models.workflowv1alpha1_cinder_volume_source.workflowv1alpha1CinderVolumeSource(
                                                    fs_type = '0', 
                                                    read_only = True, 
                                                    volume_id = '0', ), 
                                                config_map = openapi_client.models.workflowv1alpha1_config_map_volume_source.workflowv1alpha1ConfigMapVolumeSource(
                                                    default_mode = 56, 
                                                    items = [
                                                        openapi_client.models.workflowv1alpha1_key_to_path.workflowv1alpha1KeyToPath(
                                                            key = '0', 
                                                            mode = 56, 
                                                            path = '0', )
                                                        ], 
                                                    optional = True, ), 
                                                csi = openapi_client.models.workflowv1alpha1_csi_volume_source.workflowv1alpha1CSIVolumeSource(
                                                    driver = '0', 
                                                    fs_type = '0', 
                                                    node_publish_secret_ref = openapi_client.models.workflowv1alpha1_local_object_reference.workflowv1alpha1LocalObjectReference(
                                                        name = '0', ), 
                                                    read_only = True, 
                                                    volume_attributes = {
                                                        'key' : '0'
                                                        }, ), 
                                                downward_api = openapi_client.models.workflowv1alpha1_downward_api_volume_source.workflowv1alpha1DownwardAPIVolumeSource(
                                                    default_mode = 56, 
                                                    items = [
                                                        openapi_client.models.workflowv1alpha1_downward_api_volume_file.workflowv1alpha1DownwardAPIVolumeFile(
                                                            field_ref = openapi_client.models.workflowv1alpha1_object_field_selector.workflowv1alpha1ObjectFieldSelector(
                                                                api_version = '0', 
                                                                field_path = '0', ), 
                                                            mode = 56, 
                                                            path = '0', 
                                                            resource_field_ref = openapi_client.models.workflowv1alpha1_resource_field_selector.workflowv1alpha1ResourceFieldSelector(
                                                                container_name = '0', 
                                                                divisor = openapi_client.models.resource_quantity.resourceQuantity(
                                                                    string = '0', ), ), )
                                                        ], ), 
                                                empty_dir = openapi_client.models.workflowv1alpha1_empty_dir_volume_source.workflowv1alpha1EmptyDirVolumeSource(
                                                    medium = '0', 
                                                    size_limit = openapi_client.models.resource_quantity.resourceQuantity(
                                                        string = '0', ), ), 
                                                fc = openapi_client.models.workflowv1alpha1_fc_volume_source.workflowv1alpha1FCVolumeSource(
                                                    fs_type = '0', 
                                                    lun = 56, 
                                                    read_only = True, 
                                                    target_ww_ns = [
                                                        '0'
                                                        ], 
                                                    wwids = [
                                                        '0'
                                                        ], ), 
                                                flex_volume = openapi_client.models.workflowv1alpha1_flex_volume_source.workflowv1alpha1FlexVolumeSource(
                                                    driver = '0', 
                                                    fs_type = '0', 
                                                    options = {
                                                        'key' : '0'
                                                        }, 
                                                    read_only = True, ), 
                                                flocker = openapi_client.models.workflowv1alpha1_flocker_volume_source.workflowv1alpha1FlockerVolumeSource(
                                                    dataset_name = '0', 
                                                    dataset_uuid = '0', ), 
                                                gce_persistent_disk = openapi_client.models.workflowv1alpha1_gce_persistent_disk_volume_source.workflowv1alpha1GCEPersistentDiskVolumeSource(
                                                    fs_type = '0', 
                                                    partition = 56, 
                                                    pd_name = '0', 
                                                    read_only = True, ), 
                                                git_repo = openapi_client.models.workflowv1alpha1_git_repo_volume_source.workflowv1alpha1GitRepoVolumeSource(
                                                    directory = '0', 
                                                    repository = '0', 
                                                    revision = '0', ), 
                                                glusterfs = openapi_client.models.workflowv1alpha1_glusterfs_volume_source.workflowv1alpha1GlusterfsVolumeSource(
                                                    endpoints = '0', 
                                                    path = '0', 
                                                    read_only = True, ), 
                                                host_path = openapi_client.models.workflowv1alpha1_host_path_volume_source.workflowv1alpha1HostPathVolumeSource(
                                                    path = '0', 
                                                    type = '0', ), 
                                                iscsi = openapi_client.models.workflowv1alpha1_iscsi_volume_source.workflowv1alpha1ISCSIVolumeSource(
                                                    chap_auth_discovery = True, 
                                                    chap_auth_session = True, 
                                                    fs_type = '0', 
                                                    initiator_name = '0', 
                                                    iqn = '0', 
                                                    iscsi_interface = '0', 
                                                    lun = 56, 
                                                    portals = [
                                                        '0'
                                                        ], 
                                                    read_only = True, 
                                                    target_portal = '0', ), 
                                                nfs = openapi_client.models.workflowv1alpha1_nfs_volume_source.workflowv1alpha1NFSVolumeSource(
                                                    path = '0', 
                                                    read_only = True, 
                                                    server = '0', ), 
                                                persistent_volume_claim = openapi_client.models.workflowv1alpha1_persistent_volume_claim_volume_source.workflowv1alpha1PersistentVolumeClaimVolumeSource(
                                                    claim_name = '0', 
                                                    read_only = True, ), 
                                                photon_persistent_disk = openapi_client.models.workflowv1alpha1_photon_persistent_disk_volume_source.workflowv1alpha1PhotonPersistentDiskVolumeSource(
                                                    fs_type = '0', 
                                                    pd_id = '0', ), 
                                                portworx_volume = openapi_client.models.workflowv1alpha1_portworx_volume_source.workflowv1alpha1PortworxVolumeSource(
                                                    fs_type = '0', 
                                                    read_only = True, 
                                                    volume_id = '0', ), 
                                                projected = openapi_client.models.workflowv1alpha1_projected_volume_source.workflowv1alpha1ProjectedVolumeSource(
                                                    default_mode = 56, 
                                                    sources = [
                                                        openapi_client.models.workflowv1alpha1_volume_projection.workflowv1alpha1VolumeProjection(
                                                            secret = openapi_client.models.workflowv1alpha1_secret_projection.workflowv1alpha1SecretProjection(
                                                                items = [
                                                                    openapi_client.models.workflowv1alpha1_key_to_path.workflowv1alpha1KeyToPath(
                                                                        key = '0', 
                                                                        mode = 56, 
                                                                        path = '0', )
                                                                    ], 
                                                                optional = True, ), 
                                                            service_account_token = openapi_client.models.workflowv1alpha1_service_account_token_projection.workflowv1alpha1ServiceAccountTokenProjection(
                                                                audience = '0', 
                                                                expiration_seconds = '0', 
                                                                path = '0', ), )
                                                        ], ), 
                                                quobyte = openapi_client.models.workflowv1alpha1_quobyte_volume_source.workflowv1alpha1QuobyteVolumeSource(
                                                    group = '0', 
                                                    read_only = True, 
                                                    registry = '0', 
                                                    tenant = '0', 
                                                    user = '0', 
                                                    volume = '0', ), 
                                                rbd = openapi_client.models.workflowv1alpha1_rbd_volume_source.workflowv1alpha1RBDVolumeSource(
                                                    fs_type = '0', 
                                                    image = '0', 
                                                    keyring = '0', 
                                                    monitors = [
                                                        '0'
                                                        ], 
                                                    pool = '0', 
                                                    read_only = True, 
                                                    user = '0', ), 
                                                scale_io = openapi_client.models.workflowv1alpha1_scale_io_volume_source.workflowv1alpha1ScaleIOVolumeSource(
                                                    fs_type = '0', 
                                                    gateway = '0', 
                                                    protection_domain = '0', 
                                                    read_only = True, 
                                                    ssl_enabled = True, 
                                                    storage_mode = '0', 
                                                    storage_pool = '0', 
                                                    system = '0', 
                                                    volume_name = '0', ), 
                                                secret = openapi_client.models.workflowv1alpha1_secret_volume_source.workflowv1alpha1SecretVolumeSource(
                                                    default_mode = 56, 
                                                    items = [
                                                        openapi_client.models.workflowv1alpha1_key_to_path.workflowv1alpha1KeyToPath(
                                                            key = '0', 
                                                            mode = 56, 
                                                            path = '0', )
                                                        ], 
                                                    optional = True, 
                                                    secret_name = '0', ), 
                                                storageos = openapi_client.models.workflowv1alpha1_storage_os_volume_source.workflowv1alpha1StorageOSVolumeSource(
                                                    fs_type = '0', 
                                                    read_only = True, 
                                                    volume_name = '0', 
                                                    volume_namespace = '0', ), 
                                                vsphere_volume = openapi_client.models.workflowv1alpha1_vsphere_virtual_disk_volume_source.workflowv1alpha1VsphereVirtualDiskVolumeSource(
                                                    fs_type = '0', 
                                                    storage_policy_id = '0', 
                                                    storage_policy_name = '0', 
                                                    volume_path = '0', ), ), )
                                        ], )
                                ], ), 
                        type_meta = openapi_client.models.metav1_type_meta.metav1TypeMeta(
                            api_version = '0', 
                            kind = '0', ), )
                    ], 
                metadata = openapi_client.models.v1_list_meta.v1ListMeta(
                    continue = '0', 
                    remaining_item_count = '0', 
                    resource_version = '0', 
                    self_link = '0', ), 
                type_meta = openapi_client.models.metav1_type_meta.metav1TypeMeta(
                    api_version = '0', 
                    kind = '0', )
            )
        else :
            return V1alpha1WorkflowTemplateList(
        )

    def testV1alpha1WorkflowTemplateList(self):
        """Test V1alpha1WorkflowTemplateList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
