# coding: utf-8

"""
    Argo Server API

    The Argo Server based API for Argo  # noqa: E501

    The version of the OpenAPI document: latest
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.io.argoproj.argo.client.model.v1_container import V1Container  # noqa: E501
from openapi_client.rest import ApiException

class TestV1Container(unittest.TestCase):
    """V1Container unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1Container
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.v1_container.V1Container()  # noqa: E501
        if include_optional :
            return V1Container(
                args = [
                    '0'
                    ], 
                command = [
                    '0'
                    ], 
                env = [
                    openapi_client.models.v1_env_var.v1EnvVar(
                        name = '0', 
                        value = '0', 
                        value_from = openapi_client.models.v1_env_var_source.v1EnvVarSource(
                            config_map_key_ref = openapi_client.models.v1_config_map_key_selector.v1ConfigMapKeySelector(
                                key = '0', 
                                local_object_reference = openapi_client.models.v1_local_object_reference.v1LocalObjectReference(
                                    name = '0', ), 
                                optional = True, ), 
                            field_ref = openapi_client.models.v1_object_field_selector.v1ObjectFieldSelector(
                                api_version = '0', 
                                field_path = '0', ), 
                            resource_field_ref = openapi_client.models.resource_field_selector_represents_container_resources_(cpu,_memory)_and_their_output_format.ResourceFieldSelector represents container resources (cpu, memory) and their output format(
                                container_name = '0', 
                                divisor = openapi_client.models.resource_quantity.resourceQuantity(
                                    string = '0', ), 
                                resource = '0', ), 
                            secret_key_ref = openapi_client.models.v1_secret_key_selector.v1SecretKeySelector(
                                key = '0', 
                                optional = True, ), ), )
                    ], 
                env_from = [
                    openapi_client.models.env_from_source_represents_the_source_of_a_set_of_config_maps.EnvFromSource represents the source of a set of ConfigMaps(
                        config_map_ref = openapi_client.models.v1_config_map_env_source.v1ConfigMapEnvSource(
                            local_object_reference = openapi_client.models.v1_local_object_reference.v1LocalObjectReference(
                                name = '0', ), 
                            optional = True, ), 
                        prefix = '0', 
                        secret_ref = openapi_client.models.v1_secret_env_source.v1SecretEnvSource(
                            optional = True, ), )
                    ], 
                image = '0', 
                image_pull_policy = '0', 
                lifecycle = openapi_client.models.v1_lifecycle.v1Lifecycle(
                    post_start = openapi_client.models.v1_handler.v1Handler(
                        exec = openapi_client.models.v1_exec_action.v1ExecAction(
                            command = [
                                '0'
                                ], ), 
                        http_get = openapi_client.models.v1_http_get_action.v1HTTPGetAction(
                            host = '0', 
                            http_headers = [
                                openapi_client.models.http_header_describes_a_custom_header_to_be_used_in_http_probes.HTTPHeader describes a custom header to be used in HTTP probes(
                                    name = '0', 
                                    value = '0', )
                                ], 
                            path = '0', 
                            port = openapi_client.models.int_or_string_is_a_type_that_can_hold_an_int32_or_a_string/__when_used_in
json_or_yaml_marshalling_and_unmarshalling,_it_produces_or_consumes_the
inner_type/__this_allows_you_to_have,_for_example,_a_json_field_that_can
accept_a_name_or_number/
todo:_rename_to_int32_or_string.IntOrString is a type that can hold an int32 or a string.  When used in
JSON or YAML marshalling and unmarshalling, it produces or consumes the
inner type.  This allows you to have, for example, a JSON field that can
accept a name or number.
TODO: Rename to Int32OrString(
                                int_val = 56, 
                                str_val = '0', 
                                type = '0', ), 
                            scheme = '0', ), 
                        tcp_socket = openapi_client.models.tcp_socket_action_describes_an_action_based_on_opening_a_socket.TCPSocketAction describes an action based on opening a socket(
                            host = '0', ), ), 
                    pre_stop = openapi_client.models.v1_handler.v1Handler(), ), 
                liveness_probe = openapi_client.models.v1_probe.v1Probe(
                    failure_threshold = 56, 
                    handler = openapi_client.models.v1_handler.v1Handler(
                        exec = openapi_client.models.v1_exec_action.v1ExecAction(
                            command = [
                                '0'
                                ], ), 
                        http_get = openapi_client.models.v1_http_get_action.v1HTTPGetAction(
                            host = '0', 
                            http_headers = [
                                openapi_client.models.http_header_describes_a_custom_header_to_be_used_in_http_probes.HTTPHeader describes a custom header to be used in HTTP probes(
                                    name = '0', 
                                    value = '0', )
                                ], 
                            path = '0', 
                            port = openapi_client.models.int_or_string_is_a_type_that_can_hold_an_int32_or_a_string/__when_used_in
json_or_yaml_marshalling_and_unmarshalling,_it_produces_or_consumes_the
inner_type/__this_allows_you_to_have,_for_example,_a_json_field_that_can
accept_a_name_or_number/
todo:_rename_to_int32_or_string.IntOrString is a type that can hold an int32 or a string.  When used in
JSON or YAML marshalling and unmarshalling, it produces or consumes the
inner type.  This allows you to have, for example, a JSON field that can
accept a name or number.
TODO: Rename to Int32OrString(
                                int_val = 56, 
                                str_val = '0', 
                                type = '0', ), 
                            scheme = '0', ), 
                        tcp_socket = openapi_client.models.tcp_socket_action_describes_an_action_based_on_opening_a_socket.TCPSocketAction describes an action based on opening a socket(
                            host = '0', ), ), 
                    initial_delay_seconds = 56, 
                    period_seconds = 56, 
                    success_threshold = 56, 
                    timeout_seconds = 56, ), 
                name = '0', 
                ports = [
                    openapi_client.models.v1_container_port.v1ContainerPort(
                        container_port = 56, 
                        host_ip = '0', 
                        host_port = 56, 
                        name = '0', 
                        protocol = '0', )
                    ], 
                readiness_probe = openapi_client.models.v1_probe.v1Probe(
                    failure_threshold = 56, 
                    handler = openapi_client.models.v1_handler.v1Handler(
                        exec = openapi_client.models.v1_exec_action.v1ExecAction(
                            command = [
                                '0'
                                ], ), 
                        http_get = openapi_client.models.v1_http_get_action.v1HTTPGetAction(
                            host = '0', 
                            http_headers = [
                                openapi_client.models.http_header_describes_a_custom_header_to_be_used_in_http_probes.HTTPHeader describes a custom header to be used in HTTP probes(
                                    name = '0', 
                                    value = '0', )
                                ], 
                            path = '0', 
                            port = openapi_client.models.int_or_string_is_a_type_that_can_hold_an_int32_or_a_string/__when_used_in
json_or_yaml_marshalling_and_unmarshalling,_it_produces_or_consumes_the
inner_type/__this_allows_you_to_have,_for_example,_a_json_field_that_can
accept_a_name_or_number/
todo:_rename_to_int32_or_string.IntOrString is a type that can hold an int32 or a string.  When used in
JSON or YAML marshalling and unmarshalling, it produces or consumes the
inner type.  This allows you to have, for example, a JSON field that can
accept a name or number.
TODO: Rename to Int32OrString(
                                int_val = 56, 
                                str_val = '0', 
                                type = '0', ), 
                            scheme = '0', ), 
                        tcp_socket = openapi_client.models.tcp_socket_action_describes_an_action_based_on_opening_a_socket.TCPSocketAction describes an action based on opening a socket(
                            host = '0', ), ), 
                    initial_delay_seconds = 56, 
                    period_seconds = 56, 
                    success_threshold = 56, 
                    timeout_seconds = 56, ), 
                resources = openapi_client.models.v1_resource_requirements.v1ResourceRequirements(
                    limits = {
                        'key' : openapi_client.models.resource_quantity.resourceQuantity(
                            string = '0', )
                        }, 
                    requests = {
                        'key' : openapi_client.models.resource_quantity.resourceQuantity(
                            string = '0', )
                        }, ), 
                security_context = openapi_client.models.v1_security_context.v1SecurityContext(
                    allow_privilege_escalation = True, 
                    capabilities = openapi_client.models.v1_capabilities.v1Capabilities(
                        add = [
                            '0'
                            ], 
                        drop = [
                            '0'
                            ], ), 
                    privileged = True, 
                    proc_mount = '0', 
                    read_only_root_filesystem = True, 
                    run_as_group = '0', 
                    run_as_non_root = True, 
                    run_as_user = '0', 
                    se_linux_options = openapi_client.models.se_linux_options_are_the_labels_to_be_applied_to_the_container.SELinuxOptions are the labels to be applied to the container(
                        level = '0', 
                        role = '0', 
                        type = '0', 
                        user = '0', ), 
                    windows_options = openapi_client.models.v1_windows_security_context_options.v1WindowsSecurityContextOptions(
                        gmsa_credential_spec = '0', 
                        gmsa_credential_spec_name = '0', 
                        run_as_user_name = '0', ), ), 
                startup_probe = openapi_client.models.v1_probe.v1Probe(
                    failure_threshold = 56, 
                    handler = openapi_client.models.v1_handler.v1Handler(
                        exec = openapi_client.models.v1_exec_action.v1ExecAction(
                            command = [
                                '0'
                                ], ), 
                        http_get = openapi_client.models.v1_http_get_action.v1HTTPGetAction(
                            host = '0', 
                            http_headers = [
                                openapi_client.models.http_header_describes_a_custom_header_to_be_used_in_http_probes.HTTPHeader describes a custom header to be used in HTTP probes(
                                    name = '0', 
                                    value = '0', )
                                ], 
                            path = '0', 
                            port = openapi_client.models.int_or_string_is_a_type_that_can_hold_an_int32_or_a_string/__when_used_in
json_or_yaml_marshalling_and_unmarshalling,_it_produces_or_consumes_the
inner_type/__this_allows_you_to_have,_for_example,_a_json_field_that_can
accept_a_name_or_number/
todo:_rename_to_int32_or_string.IntOrString is a type that can hold an int32 or a string.  When used in
JSON or YAML marshalling and unmarshalling, it produces or consumes the
inner type.  This allows you to have, for example, a JSON field that can
accept a name or number.
TODO: Rename to Int32OrString(
                                int_val = 56, 
                                str_val = '0', 
                                type = '0', ), 
                            scheme = '0', ), 
                        tcp_socket = openapi_client.models.tcp_socket_action_describes_an_action_based_on_opening_a_socket.TCPSocketAction describes an action based on opening a socket(
                            host = '0', ), ), 
                    initial_delay_seconds = 56, 
                    period_seconds = 56, 
                    success_threshold = 56, 
                    timeout_seconds = 56, ), 
                stdin = True, 
                stdin_once = True, 
                termination_message_path = '0', 
                termination_message_policy = '0', 
                tty = True, 
                volume_devices = [
                    openapi_client.models.v1_volume_device.v1VolumeDevice(
                        device_path = '0', 
                        name = '0', )
                    ], 
                volume_mounts = [
                    openapi_client.models.v1_volume_mount.v1VolumeMount(
                        mount_path = '0', 
                        mount_propagation = '0', 
                        name = '0', 
                        read_only = True, 
                        sub_path = '0', 
                        sub_path_expr = '0', )
                    ], 
                working_dir = '0'
            )
        else :
            return V1Container(
        )

    def testV1Container(self):
        """Test V1Container"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
