# coding: utf-8

"""
    Argo

    Workflow Service API performs CRUD actions against application resources  # noqa: E501

    The version of the OpenAPI document: latest
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.io.argoproj.argo.client.model.v1_env_var_source import V1EnvVarSource  # noqa: E501
from openapi_client.rest import ApiException

class TestV1EnvVarSource(unittest.TestCase):
    """V1EnvVarSource unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1EnvVarSource
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.v1_env_var_source.V1EnvVarSource()  # noqa: E501
        if include_optional :
            return V1EnvVarSource(
                config_map_key_ref = openapi_client.models.v1_config_map_key_selector.v1ConfigMapKeySelector(
                    key = '0', 
                    local_object_reference = openapi_client.models.v1_local_object_reference.v1LocalObjectReference(
                        name = '0', ), 
                    optional = True, ), 
                field_ref = openapi_client.models.v1_object_field_selector.v1ObjectFieldSelector(
                    api_version = '0', 
                    field_path = '0', ), 
                resource_field_ref = openapi_client.models.resource_field_selector_represents_container_resources_(cpu,_memory)_and_their_output_format.ResourceFieldSelector represents container resources (cpu, memory) and their output format(
                    container_name = '0', 
                    divisor = openapi_client.models.resource_quantity.resourceQuantity(
                        string = '0', ), 
                    resource = '0', ), 
                secret_key_ref = openapi_client.models.v1_secret_key_selector.v1SecretKeySelector(
                    key = '0', 
                    local_object_reference = openapi_client.models.v1_local_object_reference.v1LocalObjectReference(
                        name = '0', ), 
                    optional = True, )
            )
        else :
            return V1EnvVarSource(
        )

    def testV1EnvVarSource(self):
        """Test V1EnvVarSource"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
