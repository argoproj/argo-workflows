# coding: utf-8

"""
    Argo Server API

    The Argo Server based API for Argo  # noqa: E501

    The version of the OpenAPI document: latest
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.io.argoproj.argo.client.model.v1alpha1_item import V1alpha1Item  # noqa: E501
from openapi_client.rest import ApiException

class TestV1alpha1Item(unittest.TestCase):
    """V1alpha1Item unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1alpha1Item
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.v1alpha1_item.V1alpha1Item()  # noqa: E501
        if include_optional :
            return V1alpha1Item(
                bool_val = True, 
                list_val = [
                    openapi_client.models.+protobuf=true
+protobuf/options/(gogoproto/goproto_stringer)=false
+k8s:openapi_gen=true.+protobuf=true
+protobuf.options.(gogoproto.goproto_stringer)=false
+k8s:openapi-gen=true(
                        bool_val = True, 
                        map_val = {
                            'key' : '0'
                            }, 
                        num_val = '0', 
                        str_val = '0', 
                        type = '0', )
                    ], 
                map_val = {
                    'key' : openapi_client.models.+protobuf=true
+protobuf/options/(gogoproto/goproto_stringer)=false
+k8s:openapi_gen=true.+protobuf=true
+protobuf.options.(gogoproto.goproto_stringer)=false
+k8s:openapi-gen=true(
                        bool_val = True, 
                        list_val = [
                            'YQ=='
                            ], 
                        num_val = '0', 
                        str_val = '0', 
                        type = '0', )
                    }, 
                num_val = '0', 
                str_val = '0', 
                type = '0'
            )
        else :
            return V1alpha1Item(
        )

    def testV1alpha1Item(self):
        """Test V1alpha1Item"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
