name: CI
on: 
  push:
    branches:
      - 'master' 
      - 'release-*'
      - '!release-2.8'
  pull_request:
    branches:
      - 'master'

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        test: ["test", "test-e2e", "test-e2e-cron"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Specify branch
        run: git checkout -b pull/$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
      - name: Restore go build cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-v1-${{ github.run_id }}
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: '1.13.12'
      - name: Add bins to PATH
        run: |
          echo "::add-path::/home/runner/go/bin"
          echo "::add-path::/usr/local/bin"
      - name: Install Kustomize
        run: |
            cd /usr/local/bin && curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | sudo bash
            kustomize version
      - name: Install and start K3S v1.0.1
        if: ${{ matrix.test != 'test' }}
        run: curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.0.1 INSTALL_K3S_EXEC=--docker K3S_KUBECONFIG_MODE=644 sh - &
      - name: Pre-pull images
        if: ${{ matrix.test != 'test' }}
        env:
          GOPATH: /home/runner/go
        run: make pull-build-images test-images &
      - name: Download all Go modules
        run: |
          go mod download
      - name: Create Kubeconfig
        if: ${{ matrix.test != 'test' }}
        run: |
          mkdir -p ~/.kube
          until stat /etc/rancher/k3s/k3s.yaml ; do sleep 10s ; done
          cat /etc/rancher/k3s/k3s.yaml | sed "s/127.0.0.1/$(hostname)/g" > ~/.kube/config
          echo "- name: fake_token_user" >> ~/.kube/config
          echo "  user:" >> ~/.kube/config
          echo "    token: xxxxxx" >> ~/.kube/config
      - name: Start Argo
        if: ${{ matrix.test != 'test' }}
        env:
          GOPATH: /home/runner/go
          PROFILE: mysql
        run: |
          echo '127.0.0.1 dex'      | sudo tee -a /etc/hosts
          echo '127.0.0.1 minio'    | sudo tee -a /etc/hosts
          echo '127.0.0.1 postgres' | sudo tee -a /etc/hosts
          echo '127.0.0.1 mysql'    | sudo tee -a /etc/hosts
          mkdir dist
          mkdir -p /tmp/log/argo-e2e
          KUBECONFIG=~/.kube/config make start PROFILE=$PROFILE E2E_EXECUTOR=docker DEV_IMAGE=true > /tmp/log/argo-e2e/argo.log &
      - name: Wait for Argo Server to be ready
        if: ${{ matrix.test != 'test' }}
        env:
          GOPATH: /home/runner/go
        run: make wait
      - name: Run tests
        env:
          GOPATH: /home/runner/go
        run: |
          trap 'make test-results/junit.xml' EXIT
          make ${{ matrix.test }}
      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.test }}
          path: test-results
      - name: Upload diagnostics
        if: ${{ failure() && (matrix.test == 'test-e2e' || matrix.test == 'test-e2e-cron') }}
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.test }}-diagnostics
          path: /tmp/log/argo-e2e

  codegen:
    name: Codegen
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Specify branch
        run: git checkout -b pull/$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
      - name: Restore go build cache
        uses: actions/cache@v1
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-v1-${{ github.run_id }}
      - name: Setup Golang
        uses: actions/setup-go@v1
        with:
          go-version: '1.13.12'
      - name: Add bins to PATH
        run: |
          echo "::add-path::/home/runner/go/bin"
          echo "::add-path::/usr/local/bin"
      - name: Download all Go modules
        run: |
          go mod download
      - name: Install Kustomize
        run: |
            cd /usr/local/bin && curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | sudo bash
            kustomize version
      - name: Install protoc
        run: |
          set -eux -o pipefail
          PROTOC_ZIP=protoc-3.11.1-linux-x86_64.zip
          curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.11.1/$PROTOC_ZIP
          sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc
          sudo unzip -o $PROTOC_ZIP -d /usr/local 'include/*'
          sudo chmod +x /usr/local/bin/protoc
          sudo find /usr/local/include -type f | xargs sudo chmod a+r
          sudo find /usr/local/include -type d | xargs sudo chmod a+rx
          rm -f $PROTOC_ZIP
          ls /usr/local/include/google/protobuf/
      - name: Make codegen
        env:
          GOPATH: /home/runner/go
        run: |
          make codegen
      - name: Make manifests
        env:
          GOPATH: /home/runner/go
        run: |
          make manifests
      - name: Make lint
        env:
          GOPATH: /home/runner/go
        run: |
          make lint
      - name: Ensure nothing changed
        run: git diff --exit-code

  ui:
    name: UI
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Specify branch
        run: git checkout -b pull/$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
      - uses: actions/setup-node@v1
        with:
          node-version: '14'
      - name: Restore node dependency cache
        uses: actions/cache@v1
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-node-dep-v1-${{ hashFiles('**/yarn.lock') }}
      - name: Install and Lint
        run: |
          yarn --cwd ui install
          yarn --cwd ui lint
      - name: Ensure nothing changed
        run: git diff --exit-code
