name: CI
on:
  push:
    branches:
      - "master"
      - "release-*"
      - "!release-2.8"
  pull_request:
    branches:
      - "master"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true
      - run: make test STATIC_FILES=false GOTEST='go test -p 20 -covermode=atomic -coverprofile=coverage.out'
      # engineers just ignore this in PRs, so lets not even run it
      - name: Upload coverage report
        if: github.ref == 'refs/heads/master'
        run: bash <(curl -s https://codecov.io/bash)

  argoexec-image:
    name: argoexec-image
    # needs: [ lint ]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Build and export
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: quay.io/argoproj/argoexec:latest
          outputs: type=docker,dest=/tmp/argoexec_image.tar
          target: argoexec
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: argoexec
          path: /tmp/argoexec_image.tar
          if-no-files-found: error

  e2e-tests:
    name: E2E Tests
    needs: [ argoexec-image ]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      KUBECONFIG: /home/runner/.kubeconfig
      E2E_ENV_FACTOR: 2
    strategy:
      fail-fast: false
      matrix:
        include:
          - test: test-executor
            profile: minimal
          - test: test-corefunctional
            profile: minimal
          - test: test-functional
            profile: minimal
          - test: test-api
            profile: mysql
          - test: test-cli
            profile: mysql
          - test: test-cron
            profile: minimal
          - test: test-examples
            profile: minimal
          - test: test-plugins
            profile: plugins
          - test: test-java-sdk
            profile: minimal
          - test: test-python-sdk
            profile: minimal
          - test: test-executor
            install_k3s_version: v1.25.11-k3s1
            profile: minimal
          - test: test-corefunctional
            install_k3s_version: v1.25.11-k3s1
            profile: minimal
          - test: test-functional
            install_k3s_version: v1.25.11-k3s1
            profile: minimal
    steps:
      - name: Install socat (needed by Kubernetes v1.25)
        run: sudo apt-get -y install socat
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true
      - name: Install Java for the SDK
        if: ${{matrix.test == 'test-java-sdk'}}
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: adopt
          cache: maven
      - name: Install Python for the SDK
        if: ${{matrix.test == 'test-python-sdk'}}
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: pip
      - name: Install and start K3S
        run: |
          if ! echo "${{ matrix.install_k3s_version }}" | egrep '^v[0-9]+\.[0-9]+\.[0-9]+\+k3s1$'; then
            export INSTALL_K3S_VERSION=v1.27.2+k3s1
          else
            export INSTALL_K3S_VERSION=${{ matrix.install_k3s_version }}
          fi
          curl -sfL https://get.k3s.io | INSTALL_K3S_CHANNEL=stable INSTALL_K3S_EXEC=--docker K3S_KUBECONFIG_MODE=644 sh -
          until kubectl --kubeconfig=/etc/rancher/k3s/k3s.yaml cluster-info ; do sleep 10s ; done
          cp /etc/rancher/k3s/k3s.yaml /home/runner/.kubeconfig
          echo "- name: fake_token_user" >> $KUBECONFIG
          echo "  user:" >> $KUBECONFIG
          echo "    token: xxxxxx" >> $KUBECONFIG
          until kubectl cluster-info ; do sleep 10s ; done
      - name: Download argoexec image
        uses: actions/download-artifact@v3
        with:
          name: argoexec
          path: /tmp
      - name: Load argoexec image
        run: docker load < /tmp/argoexec_image.tar
      - name: Set-up /etc/hosts
        run: |
          echo '127.0.0.1 dex'      | sudo tee -a /etc/hosts
          echo '127.0.0.1 minio'    | sudo tee -a /etc/hosts
          echo '127.0.0.1 postgres' | sudo tee -a /etc/hosts
          echo '127.0.0.1 mysql'    | sudo tee -a /etc/hosts
          echo '127.0.0.1 azurite'  | sudo tee -a /etc/hosts
      - name: Install manifests
        run: make install PROFILE=${{matrix.profile}} STATIC_FILES=false
      - name: Build controller
        run: make controller kit STATIC_FILES=false
      - name: Build CLI
        run: make cli STATIC_FILES=false
        if: ${{matrix.test == 'test-api' || matrix.test == 'test-cli' || matrix.test == 'test-java-sdk' || matrix.test == 'test-python-sdk'}}
      - name: Start controller/API
        run: make start PROFILE=${{matrix.profile}} AUTH_MODE=client STATIC_FILES=false LOG_LEVEL=info API=${{matrix.test == 'test-api' || matrix.test == 'test-cli' || matrix.test == 'test-java-sdk' || matrix.test == 'test-python-sdk'}} UI=false > /tmp/argo.log 2>&1 &
      - name: Wait for controller to be up
        run: make wait API=${{matrix.test == 'test-api' || matrix.test == 'test-cli' || matrix.test == 'test-java-sdk' || matrix.test == 'test-python-sdk'}}
        timeout-minutes: 5
      - name: Run tests ${{matrix.test}}
        run: make ${{matrix.test}} E2E_SUITE_TIMEOUT=20m STATIC_FILES=false

      # failure debugging below
      - name: Failure debug - describe MinIO/MySQL deployment
        if: ${{ failure() }}
        run: |
          set -eux
          kubectl get deploy
          kubectl describe deploy
      - name: Failure debug - describe MinIO/MySQL pods
        if: ${{ failure() }}
        run: |
          set -eux
          kubectl get pods -l '!workflows.argoproj.io/workflow'
          kubectl describe pods -l '!workflows.argoproj.io/workflow'
      - name: Failure debug - MinIO/MySQL logs
        if: ${{ failure() }}
        run: kubectl logs -l '!workflows.argoproj.io/workflow' --prefix
      - name: Failure debug - Controller/API logs
        if: ${{ failure() }}
        run: |
          [ -e /tmp/argo.log ] && cat /tmp/argo.log
      - if: ${{ failure() }}
        name: Failure debug - describe Workflows
        run: |
          set -eux
          kubectl get wf
          kubectl describe wf
      - name: Failure debug - describe Workflow pods
        if: ${{ failure() }}
        run: |
          set -eux
          kubectl get pods -l workflows.argoproj.io/workflow
          kubectl describe pods -l workflows.argoproj.io/workflow
      - name: Failure debug - Wait container logs
        if: ${{ failure() }}
        run: kubectl logs -c wait -l workflows.argoproj.io/workflow --prefix

  codegen:
    name: Codegen
    needs: [ tests ]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      GOPATH: /home/runner/go
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true
      - name: Install protoc
        run: |
          set -eux -o pipefail
          curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.19.4/protoc-3.19.4-linux-x86_64.zip
          sudo unzip -o protoc-3.19.4-linux-x86_64.zip -d /usr/local bin/protoc
          sudo unzip -o protoc-3.19.4-linux-x86_64.zip -d /usr/local 'include/*'
          sudo chmod +x /usr/local/bin/protoc
          sudo find /usr/local/include -type f | xargs sudo chmod a+r
          sudo find /usr/local/include -type d | xargs sudo chmod a+rx
          ls /usr/local/include/google/protobuf/
      - name: Pull OpenAPI Generator CLI Docker image
        run: |
          docker pull openapitools/openapi-generator-cli:v5.4.0 &
          docker pull openapitools/openapi-generator-cli:v5.2.1 &
      - name: Create symlinks
        run: |
          mkdir -p /home/runner/go/src/github.com/argoproj
          ln -s "$PWD" /home/runner/go/src/github.com/argoproj/argo-workflows
      - run: make codegen -B STATIC_FILES=false
      # if codegen makes changes that are not in the PR, fail the build
      - name: Check if codegen made changes not present in the PR
        run: git diff --exit-code

  lint:
    name: Lint
    needs: [ tests, codegen ]
    runs-on: ubuntu-latest
    timeout-minutes: 15 # must be strictly greater than the timeout in .golancgi.yml
    env:
      GOPATH: /home/runner/go
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: "1.21"
          cache: true
      - run: make lint STATIC_FILES=false
      # if lint makes changes that are not in the PR, fail the build
      - name: Check if lint made changes not present in the PR
        run: git diff --exit-code

  ui:
    name: UI
    runs-on: ubuntu-latest
    timeout-minutes: 6
    env:
      NODE_OPTIONS: --max-old-space-size=4096
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: "20" # change in all GH Workflows
          cache: yarn
          cache-dependency-path: ui/yarn.lock
      - run: yarn --cwd ui install
      - run: yarn --cwd ui build
      - run: yarn --cwd ui test
      - run: yarn --cwd ui lint
      - run: yarn --cwd ui deduplicate
      - run: git diff --exit-code
      # check to see if it'll start (but not if it'll render)
      - run: yarn --cwd ui start &
      - run: until curl http://localhost:8080 > /dev/null ; do sleep 10s ; done
        timeout-minutes: 1
