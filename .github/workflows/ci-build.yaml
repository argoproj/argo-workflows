name: CI
on:
  push:
    branches:
      - "master"
      - "release-*"
      - "!release-2.8"
  pull_request:
    branches:
      - "master"

jobs:
  tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "1.17"
      # https://github.com/actions/cache/blob/main/examples.md#go---modules
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - run: make test STATIC_FILES=false GOTEST='go test -covermode=atomic -coverprofile=coverage.out'
      # engineers just ignore this in PRs, so lets not even run it
      - run: bash <(curl -s https://codecov.io/bash)
        if: github.ref == 'refs/heads/master'

  argoexec-image:
    name: argoexec-image
    runs-on: ubuntu-latest
    timeout-minutes: 10
    # needs: [ lint ]
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx
      - name: build argoexec-image
        run: |
          docker buildx build \
          	-t quay.io/argoproj/argoexec:latest \
          	--target argoexec \
          	--cache-from "type=local,src=/tmp/.buildx-cache" \
          	--cache-to "type=local,dest=/tmp/.buildx-cache-new" \
            --output=type=docker \
            .
      - run: docker save quay.io/argoproj/argoexec:latest > /tmp/argoexec_image.tar
      - uses: actions/upload-artifact@v2
        with:
          name: argoexec
          path: /tmp/argoexec_image.tar
          if-no-files-found: error
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [ tests, argoexec-image ]
    env:
      KUBECONFIG: /home/runner/.kubeconfig
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        include:
          - test: test-plugins
            containerRuntimeExecutor: emissary
            profile: plugins
          - test: test-functional
            containerRuntimeExecutor: emissary
            profile: minimal
          - test: test-api
            containerRuntimeExecutor: emissary
            profile: mysql
          - test: test-cli
            containerRuntimeExecutor: emissary
            profile: mysql
          - test: test-cron
            containerRuntimeExecutor: emissary
            profile: minimal
          - test: test-examples
            containerRuntimeExecutor: emissary
            profile: minimal
          - test: test-executor
            containerRuntimeExecutor: emissary
            profile: minimal
          - test: test-executor
            containerRuntimeExecutor: docker
            profile: minimal
          - test: test-executor
            containerRuntimeExecutor: k8sapi
            profile: minimal
          - test: test-executor
            containerRuntimeExecutor: kubelet
            profile: minimal
          - test: test-executor
            containerRuntimeExecutor: pns
            profile: minimal
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "1.17"
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install and start K3S
        run: |
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.21.2+k3s1 INSTALL_K3S_CHANNEL=stable INSTALL_K3S_EXEC=--docker K3S_KUBECONFIG_MODE=644 sh -
          until kubectl --kubeconfig=/etc/rancher/k3s/k3s.yaml cluster-info ; do sleep 10s ; done
          cp /etc/rancher/k3s/k3s.yaml /home/runner/.kubeconfig
          echo "- name: fake_token_user" >> $KUBECONFIG
          echo "  user:" >> $KUBECONFIG
          echo "    token: xxxxxx" >> $KUBECONFIG
          until kubectl cluster-info ; do sleep 10s ; done
      - uses: actions/download-artifact@v2
        with:
          name: argoexec
          path: /tmp
      - run: docker load < /tmp/argoexec_image.tar
      - name: Set-up /etc/hosts
        run: |
          echo '127.0.0.1 dex'      | sudo tee -a /etc/hosts
          echo '127.0.0.1 minio'    | sudo tee -a /etc/hosts
          echo '127.0.0.1 postgres' | sudo tee -a /etc/hosts
          echo '127.0.0.1 mysql'    | sudo tee -a /etc/hosts
      - run: make install PROFILE=${{matrix.profile}} E2E_EXECUTOR=${{matrix.containerRuntimeExecutor}} STATIC_FILES=false
      - run: make controller $(go env GOPATH)/bin/goreman STATIC_FILES=false
      - run: make cli STATIC_FILES=false
        if: ${{matrix.test == 'test-api' || matrix.test == 'test-cli'}}
      - run: make start PROFILE=${{matrix.profile}} E2E_EXECUTOR=${{matrix.containerRuntimeExecutor}} AUTH_MODE=client STATIC_FILES=false LOG_LEVEL=info API=${{matrix.test == 'test-api' || matrix.test == 'test-cli'}} UI=false > /tmp/argo.log 2>&1 &
      - run: make wait
        timeout-minutes: 4
      - run: make ${{matrix.test}} E2E_TIMEOUT=1m STATIC_FILES=false
      - if: ${{ failure() }}
        run: |
          [ -e /tmp/argo.log ] && cat /tmp/argo.log

  codegen:
    name: Codegen
    runs-on: ubuntu-latest
    needs: [ tests ]
    timeout-minutes: 20
    env:
      GOPATH: /home/runner/go
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "1.17"
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install protoc
        run: |
          set -eux -o pipefail
          curl -OL https://github.com/protocolbuffers/protobuf/releases/download/v3.11.1/protoc-3.11.1-linux-x86_64.zip
          sudo unzip -o protoc-3.11.1-linux-x86_64.zip -d /usr/local bin/protoc
          sudo unzip -o protoc-3.11.1-linux-x86_64.zip -d /usr/local 'include/*'
          sudo chmod +x /usr/local/bin/protoc
          sudo find /usr/local/include -type f | xargs sudo chmod a+r
          sudo find /usr/local/include -type d | xargs sudo chmod a+rx
          ls /usr/local/include/google/protobuf/
      - run: docker pull openapitools/openapi-generator-cli:v5.2.1 &
      - name: Create links
        run: |
          mkdir -p /home/runner/go/src/github.com/argoproj
          ln -s "$PWD" /home/runner/go/src/github.com/argoproj/argo-workflows
      - run: make codegen -B STATIC_FILES=false
      - run: git diff --exit-code

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [ tests, codegen ]
    timeout-minutes: 10
    env:
      GOPATH: /home/runner/go
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: cp server/static/files.go.stub server/static/files.go
      - uses: golangci/golangci-lint-action@v2
        with:
          version: v1.42.0
      - run: git diff --exit-code

  ui:
    name: UI
    runs-on: ubuntu-latest
    timeout-minutes: 6
    env:
      NODE_OPTIONS: --max-old-space-size=4096
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2.5.1
        with:
          node-version: "16"
      - uses: actions/cache@v2
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-node-dep-v1-${{ hashFiles('**/yarn.lock') }}
      - run: yarn --cwd ui install
      - run: yarn --cwd ui build
      - run: yarn --cwd ui test
      - run: yarn --cwd ui lint
      - run: git diff --exit-code
