basePath: /api/v1
consumes:
    - application/json
definitions:
    AWSElasticBlockStoreVolumeSource:
        description: |-
            An AWS EBS disk must exist before mounting to a container. The disk
            must also be in the same AWS zone as the kubelet. An AWS EBS disk
            can only be mounted as read/write once. AWS EBS volumes support
            ownership management and SELinux relabeling.
        properties:
            fsType:
                description: |-
                    fsType is the filesystem type of the volume that you want to mount.
                    Tip: Ensure that the filesystem type is supported by the host operating system.
                    Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                    More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                    TODO: how do we prevent errors in the filesystem from compromising the machine
                    +optional
                type: string
                x-go-name: FSType
            partition:
                description: |-
                    partition is the partition in the volume that you want to mount.
                    If omitted, the default is to mount by volume name.
                    Examples: For volume /dev/sda1, you specify the partition as "1".
                    Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
                    +optional
                format: int32
                type: integer
                x-go-name: Partition
            readOnly:
                description: |-
                    readOnly value true will force the readOnly setting in VolumeMounts.
                    More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                    +optional
                type: boolean
                x-go-name: ReadOnly
            volumeID:
                description: |-
                    volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
                    More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                type: string
                x-go-name: VolumeID
        title: Represents a Persistent Disk resource in AWS.
        type: object
        x-go-package: k8s.io/api/core/v1
    Affinity:
        properties:
            nodeAffinity:
                $ref: '#/definitions/NodeAffinity'
            podAffinity:
                $ref: '#/definitions/PodAffinity'
            podAntiAffinity:
                $ref: '#/definitions/PodAntiAffinity'
        title: Affinity is a group of affinity scheduling rules.
        type: object
        x-go-package: k8s.io/api/core/v1
    Amount:
        description: +kubebuilder:validation:Type=number
        title: Amount represent a numeric amount.
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    AnyString:
        description: |-
            It will unmarshall int64, int32, float64, float32, boolean, a plain string and represents it as string.
            It will marshall back to string - marshalling is not symmetric.
        title: It's JSON type is just string.
        type: string
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    ArchiveStrategy:
        description: ArchiveStrategy describes how to archive files/directory when saving artifacts
        properties:
            none:
                $ref: '#/definitions/NoneStrategy'
            tar:
                $ref: '#/definitions/TarStrategy'
            zip:
                $ref: '#/definitions/ZipStrategy'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Arguments:
        description: Arguments to a template
        properties:
            artifacts:
                $ref: '#/definitions/Artifacts'
            parameters:
                description: |-
                    Parameters is the list of parameters to pass to the template or workflow
                    +patchStrategy=merge
                    +patchMergeKey=name
                items:
                    $ref: '#/definitions/Parameter'
                type: array
                x-go-name: Parameters
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Artifact:
        description: Artifact indicates an artifact to place at a specified path
        properties:
            archive:
                $ref: '#/definitions/ArchiveStrategy'
            archiveLogs:
                description: ArchiveLogs indicates if the container logs should be archived
                type: boolean
                x-go-name: ArchiveLogs
            artifactGC:
                $ref: '#/definitions/ArtifactGC'
            artifactory:
                $ref: '#/definitions/ArtifactoryArtifact'
            azure:
                $ref: '#/definitions/AzureArtifact'
            deleted:
                description: Has this been deleted?
                type: boolean
                x-go-name: Deleted
            from:
                description: From allows an artifact to reference an artifact from a previous step
                type: string
                x-go-name: From
            fromExpression:
                description: FromExpression, if defined, is evaluated to specify the value for the artifact
                type: string
                x-go-name: FromExpression
            gcs:
                $ref: '#/definitions/GCSArtifact'
            git:
                $ref: '#/definitions/GitArtifact'
            globalName:
                description: |-
                    GlobalName exports an output artifact to the global scope, making it available as
                    '{{workflow.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts
                type: string
                x-go-name: GlobalName
            hdfs:
                $ref: '#/definitions/HDFSArtifact'
            http:
                $ref: '#/definitions/HTTPArtifact'
            mode:
                description: |-
                    mode bits to use on this file, must be a value between 0 and 0777
                    set when loading input artifacts.
                format: int32
                type: integer
                x-go-name: Mode
            name:
                description: name of the artifact. must be unique within a template's inputs/outputs.
                type: string
                x-go-name: Name
            optional:
                description: Make Artifacts optional, if Artifacts doesn't generate or exist
                type: boolean
                x-go-name: Optional
            oss:
                $ref: '#/definitions/OSSArtifact'
            path:
                description: Path is the container path to the artifact
                type: string
                x-go-name: Path
            raw:
                $ref: '#/definitions/RawArtifact'
            recurseMode:
                description: If mode is set, apply the permission recursively into the artifact if it is a folder
                type: boolean
                x-go-name: RecurseMode
            s3:
                $ref: '#/definitions/S3Artifact'
            subPath:
                description: SubPath allows an artifact to be sourced from a subpath within the specified source
                type: string
                x-go-name: SubPath
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    ArtifactGC:
        description: ArtifactGC describes how to delete artifacts from completed Workflows - this is embedded into the WorkflowLevelArtifactGC, and also used for individual Artifacts to override that as needed
        properties:
            podMetadata:
                $ref: '#/definitions/Metadata'
            serviceAccountName:
                description: ServiceAccountName is an optional field for specifying the Service Account that should be assigned to the Pod doing the deletion
                type: string
                x-go-name: ServiceAccountName
            strategy:
                $ref: '#/definitions/ArtifactGCStrategy'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    ArtifactGCStrategy:
        title: ArtifactGCStrategy is the strategy when to delete artifacts for GC.
        type: string
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    ArtifactLocation:
        description: |-
            It is used as single artifact in the context of inputs/outputs (e.g. outputs.artifacts.artname).
            It is also used to describe the location of multiple artifacts such as the archive location
            of a single workflow step, which the executor will use as a default location to store its files.
        properties:
            archiveLogs:
                description: ArchiveLogs indicates if the container logs should be archived
                type: boolean
                x-go-name: ArchiveLogs
            artifactory:
                $ref: '#/definitions/ArtifactoryArtifact'
            azure:
                $ref: '#/definitions/AzureArtifact'
            gcs:
                $ref: '#/definitions/GCSArtifact'
            git:
                $ref: '#/definitions/GitArtifact'
            hdfs:
                $ref: '#/definitions/HDFSArtifact'
            http:
                $ref: '#/definitions/HTTPArtifact'
            oss:
                $ref: '#/definitions/OSSArtifact'
            raw:
                $ref: '#/definitions/RawArtifact'
            s3:
                $ref: '#/definitions/S3Artifact'
        title: ArtifactLocation describes a location for a single or multiple artifacts.
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    ArtifactPaths:
        description: ArtifactPaths expands a step from a collection of artifacts
        properties:
            archive:
                $ref: '#/definitions/ArchiveStrategy'
            archiveLogs:
                description: ArchiveLogs indicates if the container logs should be archived
                type: boolean
                x-go-name: ArchiveLogs
            artifactGC:
                $ref: '#/definitions/ArtifactGC'
            artifactory:
                $ref: '#/definitions/ArtifactoryArtifact'
            azure:
                $ref: '#/definitions/AzureArtifact'
            deleted:
                description: Has this been deleted?
                type: boolean
                x-go-name: Deleted
            from:
                description: From allows an artifact to reference an artifact from a previous step
                type: string
                x-go-name: From
            fromExpression:
                description: FromExpression, if defined, is evaluated to specify the value for the artifact
                type: string
                x-go-name: FromExpression
            gcs:
                $ref: '#/definitions/GCSArtifact'
            git:
                $ref: '#/definitions/GitArtifact'
            globalName:
                description: |-
                    GlobalName exports an output artifact to the global scope, making it available as
                    '{{workflow.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts
                type: string
                x-go-name: GlobalName
            hdfs:
                $ref: '#/definitions/HDFSArtifact'
            http:
                $ref: '#/definitions/HTTPArtifact'
            mode:
                description: |-
                    mode bits to use on this file, must be a value between 0 and 0777
                    set when loading input artifacts.
                format: int32
                type: integer
                x-go-name: Mode
            name:
                description: name of the artifact. must be unique within a template's inputs/outputs.
                type: string
                x-go-name: Name
            optional:
                description: Make Artifacts optional, if Artifacts doesn't generate or exist
                type: boolean
                x-go-name: Optional
            oss:
                $ref: '#/definitions/OSSArtifact'
            path:
                description: Path is the container path to the artifact
                type: string
                x-go-name: Path
            raw:
                $ref: '#/definitions/RawArtifact'
            recurseMode:
                description: If mode is set, apply the permission recursively into the artifact if it is a folder
                type: boolean
                x-go-name: RecurseMode
            s3:
                $ref: '#/definitions/S3Artifact'
            subPath:
                description: SubPath allows an artifact to be sourced from a subpath within the specified source
                type: string
                x-go-name: SubPath
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    ArtifactoryArtifact:
        description: ArtifactoryArtifact is the location of an artifactory artifact
        properties:
            passwordSecret:
                $ref: '#/definitions/SecretKeySelector'
            url:
                description: URL of the artifact
                type: string
                x-go-name: URL
            usernameSecret:
                $ref: '#/definitions/SecretKeySelector'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Artifacts:
        items:
            $ref: '#/definitions/Artifact'
        type: array
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    AzureArtifact:
        description: AzureArtifact is the location of a an Azure Storage artifact
        properties:
            accountKeySecret:
                $ref: '#/definitions/SecretKeySelector'
            blob:
                description: Blob is the blob name (i.e., path) in the container where the artifact resides
                type: string
                x-go-name: Blob
            container:
                description: Container is the container where resources will be stored
                type: string
                x-go-name: Container
            endpoint:
                description: Endpoint is the service url associated with an account. It is most likely "https://<ACCOUNT_NAME>.blob.core.windows.net"
                type: string
                x-go-name: Endpoint
            useSDKCreds:
                description: UseSDKCreds tells the driver to figure out credentials based on sdk defaults.
                type: boolean
                x-go-name: UseSDKCreds
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    AzureDataDiskCachingMode:
        description: +enum
        type: string
        x-go-package: k8s.io/api/core/v1
    AzureDataDiskKind:
        description: +enum
        type: string
        x-go-package: k8s.io/api/core/v1
    AzureDiskVolumeSource:
        properties:
            cachingMode:
                $ref: '#/definitions/AzureDataDiskCachingMode'
            diskName:
                description: diskName is the Name of the data disk in the blob storage
                type: string
                x-go-name: DiskName
            diskURI:
                description: diskURI is the URI of data disk in the blob storage
                type: string
                x-go-name: DataDiskURI
            fsType:
                description: |-
                    fsType is Filesystem type to mount.
                    Must be a filesystem type supported by the host operating system.
                    Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                    +optional
                type: string
                x-go-name: FSType
            kind:
                $ref: '#/definitions/AzureDataDiskKind'
            readOnly:
                description: |-
                    readOnly Defaults to false (read/write). ReadOnly here will force
                    the ReadOnly setting in VolumeMounts.
                    +optional
                type: boolean
                x-go-name: ReadOnly
        title: AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        type: object
        x-go-package: k8s.io/api/core/v1
    AzureFileVolumeSource:
        properties:
            readOnly:
                description: |-
                    readOnly defaults to false (read/write). ReadOnly here will force
                    the ReadOnly setting in VolumeMounts.
                    +optional
                type: boolean
                x-go-name: ReadOnly
            secretName:
                description: secretName is the  name of secret that contains Azure Storage Account Name and Key
                type: string
                x-go-name: SecretName
            shareName:
                description: shareName is the azure share Name
                type: string
                x-go-name: ShareName
        title: AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        type: object
        x-go-package: k8s.io/api/core/v1
    Backoff:
        description: Backoff is a backoff strategy to use within retryStrategy
        properties:
            duration:
                description: Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
                type: string
                x-go-name: Duration
            factor:
                $ref: '#/definitions/IntOrString'
            maxDuration:
                description: MaxDuration is the maximum amount of time allowed for a workflow in the backoff strategy
                type: string
                x-go-name: MaxDuration
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    BasicAuth:
        description: BasicAuth describes the secret selectors required for basic authentication
        properties:
            passwordSecret:
                $ref: '#/definitions/SecretKeySelector'
            usernameSecret:
                $ref: '#/definitions/SecretKeySelector'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    CSIVolumeSource:
        description: Represents a source location of a volume to mount, managed by an external CSI driver
        properties:
            driver:
                description: |-
                    driver is the name of the CSI driver that handles this volume.
                    Consult with your admin for the correct name as registered in the cluster.
                type: string
                x-go-name: Driver
            fsType:
                description: |-
                    fsType to mount. Ex. "ext4", "xfs", "ntfs".
                    If not provided, the empty value is passed to the associated CSI driver
                    which will determine the default filesystem to apply.
                    +optional
                type: string
                x-go-name: FSType
            nodePublishSecretRef:
                $ref: '#/definitions/LocalObjectReference'
            readOnly:
                description: |-
                    readOnly specifies a read-only configuration for the volume.
                    Defaults to false (read/write).
                    +optional
                type: boolean
                x-go-name: ReadOnly
            volumeAttributes:
                additionalProperties:
                    type: string
                description: |-
                    volumeAttributes stores driver-specific properties that are passed to the CSI
                    driver. Consult your driver's documentation for supported values.
                    +optional
                type: object
                x-go-name: VolumeAttributes
        type: object
        x-go-package: k8s.io/api/core/v1
    Cache:
        description: Cache is the configuration for the type of cache to be used
        properties:
            configMap:
                $ref: '#/definitions/ConfigMapKeySelector'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Capabilities:
        properties:
            add:
                description: |-
                    Added capabilities
                    +optional
                items:
                    $ref: '#/definitions/Capability'
                type: array
                x-go-name: Add
            drop:
                description: |-
                    Removed capabilities
                    +optional
                items:
                    $ref: '#/definitions/Capability'
                type: array
                x-go-name: Drop
        title: Adds and removes POSIX capabilities from running containers.
        type: object
        x-go-package: k8s.io/api/core/v1
    Capability:
        description: Capability represent POSIX capabilities type
        type: string
        x-go-package: k8s.io/api/core/v1
    CephFSVolumeSource:
        description: |-
            Represents a Ceph Filesystem mount that lasts the lifetime of a pod
            Cephfs volumes do not support ownership management or SELinux relabeling.
        properties:
            monitors:
                description: |-
                    monitors is Required: Monitors is a collection of Ceph monitors
                    More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                items:
                    type: string
                type: array
                x-go-name: Monitors
            path:
                description: |-
                    path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
                    +optional
                type: string
                x-go-name: Path
            readOnly:
                description: |-
                    readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
                    the ReadOnly setting in VolumeMounts.
                    More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                    +optional
                type: boolean
                x-go-name: ReadOnly
            secretFile:
                description: |-
                    secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
                    More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                    +optional
                type: string
                x-go-name: SecretFile
            secretRef:
                $ref: '#/definitions/LocalObjectReference'
            user:
                description: |-
                    user is optional: User is the rados user name, default is admin
                    More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                    +optional
                type: string
                x-go-name: User
        type: object
        x-go-package: k8s.io/api/core/v1
    CinderVolumeSource:
        description: |-
            A Cinder volume must exist before mounting to a container.
            The volume must also be in the same region as the kubelet.
            Cinder volumes support ownership management and SELinux relabeling.
        properties:
            fsType:
                description: |-
                    fsType is the filesystem type to mount.
                    Must be a filesystem type supported by the host operating system.
                    Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                    More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                    +optional
                type: string
                x-go-name: FSType
            readOnly:
                description: |-
                    readOnly defaults to false (read/write). ReadOnly here will force
                    the ReadOnly setting in VolumeMounts.
                    More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                    +optional
                type: boolean
                x-go-name: ReadOnly
            secretRef:
                $ref: '#/definitions/LocalObjectReference'
            volumeID:
                description: |-
                    volumeID used to identify the volume in cinder.
                    More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                type: string
                x-go-name: VolumeID
        title: Represents a cinder volume resource in Openstack.
        type: object
        x-go-package: k8s.io/api/core/v1
    ClientCertAuth:
        description: ClientCertAuth holds necessary information for client authentication via certificates
        properties:
            clientCertSecret:
                $ref: '#/definitions/SecretKeySelector'
            clientKeySecret:
                $ref: '#/definitions/SecretKeySelector'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    ConfigMapEnvSource:
        description: |-
            The contents of the target ConfigMap's Data field will represent the
            key-value pairs as environment variables.
        properties:
            name:
                description: |-
                    Name of the referent.
                    More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                    TODO: Add other useful fields. apiVersion, kind, uid?
                    +optional
                type: string
                x-go-name: Name
            optional:
                description: |-
                    Specify whether the ConfigMap must be defined
                    +optional
                type: boolean
                x-go-name: Optional
        title: |-
            ConfigMapEnvSource selects a ConfigMap to populate the environment
            variables with.
        type: object
        x-go-package: k8s.io/api/core/v1
    ConfigMapKeySelector:
        description: +structType=atomic
        properties:
            key:
                description: The key to select.
                type: string
                x-go-name: Key
            name:
                description: |-
                    Name of the referent.
                    More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                    TODO: Add other useful fields. apiVersion, kind, uid?
                    +optional
                type: string
                x-go-name: Name
            optional:
                description: |-
                    Specify whether the ConfigMap or its key must be defined
                    +optional
                type: boolean
                x-go-name: Optional
        title: Selects a key from a ConfigMap.
        type: object
        x-go-package: k8s.io/api/core/v1
    ConfigMapProjection:
        description: |-
            The contents of the target ConfigMap's Data field will be presented in a
            projected volume as files using the keys in the Data field as the file names,
            unless the items element is populated with specific mappings of keys to paths.
            Note that this is identical to a configmap volume source without the default
            mode.
        properties:
            items:
                description: |-
                    items if unspecified, each key-value pair in the Data field of the referenced
                    ConfigMap will be projected into the volume as a file whose name is the
                    key and content is the value. If specified, the listed keys will be
                    projected into the specified paths, and unlisted keys will not be
                    present. If a key is specified which is not present in the ConfigMap,
                    the volume setup will error unless it is marked optional. Paths must be
                    relative and may not contain the '..' path or start with '..'.
                    +optional
                items:
                    $ref: '#/definitions/KeyToPath'
                type: array
                x-go-name: Items
            name:
                description: |-
                    Name of the referent.
                    More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                    TODO: Add other useful fields. apiVersion, kind, uid?
                    +optional
                type: string
                x-go-name: Name
            optional:
                description: |-
                    optional specify whether the ConfigMap or its keys must be defined
                    +optional
                type: boolean
                x-go-name: Optional
        title: Adapts a ConfigMap into a projected volume.
        type: object
        x-go-package: k8s.io/api/core/v1
    ConfigMapVolumeSource:
        description: |-
            The contents of the target ConfigMap's Data field will be presented in a
            volume as files using the keys in the Data field as the file names, unless
            the items element is populated with specific mappings of keys to paths.
            ConfigMap volumes support ownership management and SELinux relabeling.
        properties:
            defaultMode:
                description: |-
                    defaultMode is optional: mode bits used to set permissions on created files by default.
                    Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
                    YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
                    Defaults to 0644.
                    Directories within the path are not affected by this setting.
                    This might be in conflict with other options that affect the file
                    mode, like fsGroup, and the result can be other mode bits set.
                    +optional
                format: int32
                type: integer
                x-go-name: DefaultMode
            items:
                description: |-
                    items if unspecified, each key-value pair in the Data field of the referenced
                    ConfigMap will be projected into the volume as a file whose name is the
                    key and content is the value. If specified, the listed keys will be
                    projected into the specified paths, and unlisted keys will not be
                    present. If a key is specified which is not present in the ConfigMap,
                    the volume setup will error unless it is marked optional. Paths must be
                    relative and may not contain the '..' path or start with '..'.
                    +optional
                items:
                    $ref: '#/definitions/KeyToPath'
                type: array
                x-go-name: Items
            name:
                description: |-
                    Name of the referent.
                    More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                    TODO: Add other useful fields. apiVersion, kind, uid?
                    +optional
                type: string
                x-go-name: Name
            optional:
                description: |-
                    optional specify whether the ConfigMap or its keys must be defined
                    +optional
                type: boolean
                x-go-name: Optional
        title: Adapts a ConfigMap into a volume.
        type: object
        x-go-package: k8s.io/api/core/v1
    Container:
        properties:
            args:
                description: |-
                    Arguments to the entrypoint.
                    The container image's CMD is used if this is not provided.
                    Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
                    cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
                    to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
                    produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
                    of whether the variable exists or not. Cannot be updated.
                    More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
                    +optional
                items:
                    type: string
                type: array
                x-go-name: Args
            command:
                description: |-
                    Entrypoint array. Not executed within a shell.
                    The container image's ENTRYPOINT is used if this is not provided.
                    Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
                    cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
                    to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
                    produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
                    of whether the variable exists or not. Cannot be updated.
                    More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
                    +optional
                items:
                    type: string
                type: array
                x-go-name: Command
            env:
                description: |-
                    List of environment variables to set in the container.
                    Cannot be updated.
                    +optional
                    +patchMergeKey=name
                    +patchStrategy=merge
                items:
                    $ref: '#/definitions/EnvVar'
                type: array
                x-go-name: Env
            envFrom:
                description: |-
                    List of sources to populate environment variables in the container.
                    The keys defined within a source must be a C_IDENTIFIER. All invalid keys
                    will be reported as an event when the container is starting. When a key exists in multiple
                    sources, the value associated with the last source will take precedence.
                    Values defined by an Env with a duplicate key will take precedence.
                    Cannot be updated.
                    +optional
                items:
                    $ref: '#/definitions/EnvFromSource'
                type: array
                x-go-name: EnvFrom
            image:
                description: |-
                    Container image name.
                    More info: https://kubernetes.io/docs/concepts/containers/images
                    This field is optional to allow higher level config management to default or override
                    container images in workload controllers like Deployments and StatefulSets.
                    +optional
                type: string
                x-go-name: Image
            imagePullPolicy:
                $ref: '#/definitions/PullPolicy'
            lifecycle:
                $ref: '#/definitions/Lifecycle'
            livenessProbe:
                $ref: '#/definitions/Probe'
            name:
                description: |-
                    Name of the container specified as a DNS_LABEL.
                    Each container in a pod must have a unique name (DNS_LABEL).
                    Cannot be updated.
                type: string
                x-go-name: Name
            ports:
                description: |-
                    List of ports to expose from the container. Exposing a port here gives
                    the system additional information about the network connections a
                    container uses, but is primarily informational. Not specifying a port here
                    DOES NOT prevent that port from being exposed. Any port which is
                    listening on the default "0.0.0.0" address inside a container will be
                    accessible from the network.
                    Cannot be updated.
                    +optional
                    +patchMergeKey=containerPort
                    +patchStrategy=merge
                    +listType=map
                    +listMapKey=containerPort
                    +listMapKey=protocol
                items:
                    $ref: '#/definitions/ContainerPort'
                type: array
                x-go-name: Ports
            readinessProbe:
                $ref: '#/definitions/Probe'
            resources:
                $ref: '#/definitions/ResourceRequirements'
            securityContext:
                $ref: '#/definitions/SecurityContext'
            startupProbe:
                $ref: '#/definitions/Probe'
            stdin:
                description: |-
                    Whether this container should allocate a buffer for stdin in the container runtime. If this
                    is not set, reads from stdin in the container will always result in EOF.
                    Default is false.
                    +optional
                type: boolean
                x-go-name: Stdin
            stdinOnce:
                description: |-
                    Whether the container runtime should close the stdin channel after it has been opened by
                    a single attach. When stdin is true the stdin stream will remain open across multiple attach
                    sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
                    first client attaches to stdin, and then remains open and accepts data until the client disconnects,
                    at which time stdin is closed and remains closed until the container is restarted. If this
                    flag is false, a container processes that reads from stdin will never receive an EOF.
                    Default is false
                    +optional
                type: boolean
                x-go-name: StdinOnce
            terminationMessagePath:
                description: |-
                    Optional: Path at which the file to which the container's termination message
                    will be written is mounted into the container's filesystem.
                    Message written is intended to be brief final status, such as an assertion failure message.
                    Will be truncated by the node if greater than 4096 bytes. The total message length across
                    all containers will be limited to 12kb.
                    Defaults to /dev/termination-log.
                    Cannot be updated.
                    +optional
                type: string
                x-go-name: TerminationMessagePath
            terminationMessagePolicy:
                $ref: '#/definitions/TerminationMessagePolicy'
            tty:
                description: |-
                    Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
                    Default is false.
                    +optional
                type: boolean
                x-go-name: TTY
            volumeDevices:
                description: |-
                    volumeDevices is the list of block devices to be used by the container.
                    +patchMergeKey=devicePath
                    +patchStrategy=merge
                    +optional
                items:
                    $ref: '#/definitions/VolumeDevice'
                type: array
                x-go-name: VolumeDevices
            volumeMounts:
                description: |-
                    Pod volumes to mount into the container's filesystem.
                    Cannot be updated.
                    +optional
                    +patchMergeKey=mountPath
                    +patchStrategy=merge
                items:
                    $ref: '#/definitions/VolumeMount'
                type: array
                x-go-name: VolumeMounts
            workingDir:
                description: |-
                    Container's working directory.
                    If not specified, the container runtime's default will be used, which
                    might be configured in the container image.
                    Cannot be updated.
                    +optional
                type: string
                x-go-name: WorkingDir
        title: A single application container that you want to run within a pod.
        type: object
        x-go-package: k8s.io/api/core/v1
    ContainerNode:
        properties:
            args:
                description: |-
                    Arguments to the entrypoint.
                    The container image's CMD is used if this is not provided.
                    Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
                    cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
                    to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
                    produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
                    of whether the variable exists or not. Cannot be updated.
                    More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
                    +optional
                items:
                    type: string
                type: array
                x-go-name: Args
            command:
                description: |-
                    Entrypoint array. Not executed within a shell.
                    The container image's ENTRYPOINT is used if this is not provided.
                    Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
                    cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
                    to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
                    produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
                    of whether the variable exists or not. Cannot be updated.
                    More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
                    +optional
                items:
                    type: string
                type: array
                x-go-name: Command
            dependencies:
                items:
                    type: string
                type: array
                x-go-name: Dependencies
            env:
                description: |-
                    List of environment variables to set in the container.
                    Cannot be updated.
                    +optional
                    +patchMergeKey=name
                    +patchStrategy=merge
                items:
                    $ref: '#/definitions/EnvVar'
                type: array
                x-go-name: Env
            envFrom:
                description: |-
                    List of sources to populate environment variables in the container.
                    The keys defined within a source must be a C_IDENTIFIER. All invalid keys
                    will be reported as an event when the container is starting. When a key exists in multiple
                    sources, the value associated with the last source will take precedence.
                    Values defined by an Env with a duplicate key will take precedence.
                    Cannot be updated.
                    +optional
                items:
                    $ref: '#/definitions/EnvFromSource'
                type: array
                x-go-name: EnvFrom
            image:
                description: |-
                    Container image name.
                    More info: https://kubernetes.io/docs/concepts/containers/images
                    This field is optional to allow higher level config management to default or override
                    container images in workload controllers like Deployments and StatefulSets.
                    +optional
                type: string
                x-go-name: Image
            imagePullPolicy:
                $ref: '#/definitions/PullPolicy'
            lifecycle:
                $ref: '#/definitions/Lifecycle'
            livenessProbe:
                $ref: '#/definitions/Probe'
            name:
                description: |-
                    Name of the container specified as a DNS_LABEL.
                    Each container in a pod must have a unique name (DNS_LABEL).
                    Cannot be updated.
                type: string
                x-go-name: Name
            ports:
                description: |-
                    List of ports to expose from the container. Exposing a port here gives
                    the system additional information about the network connections a
                    container uses, but is primarily informational. Not specifying a port here
                    DOES NOT prevent that port from being exposed. Any port which is
                    listening on the default "0.0.0.0" address inside a container will be
                    accessible from the network.
                    Cannot be updated.
                    +optional
                    +patchMergeKey=containerPort
                    +patchStrategy=merge
                    +listType=map
                    +listMapKey=containerPort
                    +listMapKey=protocol
                items:
                    $ref: '#/definitions/ContainerPort'
                type: array
                x-go-name: Ports
            readinessProbe:
                $ref: '#/definitions/Probe'
            resources:
                $ref: '#/definitions/ResourceRequirements'
            securityContext:
                $ref: '#/definitions/SecurityContext'
            startupProbe:
                $ref: '#/definitions/Probe'
            stdin:
                description: |-
                    Whether this container should allocate a buffer for stdin in the container runtime. If this
                    is not set, reads from stdin in the container will always result in EOF.
                    Default is false.
                    +optional
                type: boolean
                x-go-name: Stdin
            stdinOnce:
                description: |-
                    Whether the container runtime should close the stdin channel after it has been opened by
                    a single attach. When stdin is true the stdin stream will remain open across multiple attach
                    sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
                    first client attaches to stdin, and then remains open and accepts data until the client disconnects,
                    at which time stdin is closed and remains closed until the container is restarted. If this
                    flag is false, a container processes that reads from stdin will never receive an EOF.
                    Default is false
                    +optional
                type: boolean
                x-go-name: StdinOnce
            terminationMessagePath:
                description: |-
                    Optional: Path at which the file to which the container's termination message
                    will be written is mounted into the container's filesystem.
                    Message written is intended to be brief final status, such as an assertion failure message.
                    Will be truncated by the node if greater than 4096 bytes. The total message length across
                    all containers will be limited to 12kb.
                    Defaults to /dev/termination-log.
                    Cannot be updated.
                    +optional
                type: string
                x-go-name: TerminationMessagePath
            terminationMessagePolicy:
                $ref: '#/definitions/TerminationMessagePolicy'
            tty:
                description: |-
                    Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
                    Default is false.
                    +optional
                type: boolean
                x-go-name: TTY
            volumeDevices:
                description: |-
                    volumeDevices is the list of block devices to be used by the container.
                    +patchMergeKey=devicePath
                    +patchStrategy=merge
                    +optional
                items:
                    $ref: '#/definitions/VolumeDevice'
                type: array
                x-go-name: VolumeDevices
            volumeMounts:
                description: |-
                    Pod volumes to mount into the container's filesystem.
                    Cannot be updated.
                    +optional
                    +patchMergeKey=mountPath
                    +patchStrategy=merge
                items:
                    $ref: '#/definitions/VolumeMount'
                type: array
                x-go-name: VolumeMounts
            workingDir:
                description: |-
                    Container's working directory.
                    If not specified, the container runtime's default will be used, which
                    might be configured in the container image.
                    Cannot be updated.
                    +optional
                type: string
                x-go-name: WorkingDir
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    ContainerPort:
        properties:
            containerPort:
                description: |-
                    Number of port to expose on the pod's IP address.
                    This must be a valid port number, 0 < x < 65536.
                format: int32
                type: integer
                x-go-name: ContainerPort
            hostIP:
                description: |-
                    What host IP to bind the external port to.
                    +optional
                type: string
                x-go-name: HostIP
            hostPort:
                description: |-
                    Number of port to expose on the host.
                    If specified, this must be a valid port number, 0 < x < 65536.
                    If HostNetwork is specified, this must match ContainerPort.
                    Most containers do not need this.
                    +optional
                format: int32
                type: integer
                x-go-name: HostPort
            name:
                description: |-
                    If specified, this must be an IANA_SVC_NAME and unique within the pod. Each
                    named port in a pod must have a unique name. Name for the port that can be
                    referred to by services.
                    +optional
                type: string
                x-go-name: Name
            protocol:
                $ref: '#/definitions/Protocol'
        title: ContainerPort represents a network port in a single container.
        type: object
        x-go-package: k8s.io/api/core/v1
    ContainerSetRetryStrategy:
        properties:
            duration:
                description: |-
                    Duration is the time between each retry, examples values are "300ms", "1s" or "5m".
                    Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h".
                type: string
                x-go-name: Duration
            retries:
                $ref: '#/definitions/IntOrString'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    ContainerSetTemplate:
        properties:
            containers:
                items:
                    $ref: '#/definitions/ContainerNode'
                type: array
                x-go-name: Containers
            retryStrategy:
                $ref: '#/definitions/ContainerSetRetryStrategy'
            volumeMounts:
                items:
                    $ref: '#/definitions/VolumeMount'
                type: array
                x-go-name: VolumeMounts
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    ContinueOn:
        description: It can be specified if the workflow should continue when the pod errors, fails or both.
        properties:
            error:
                description: +optional
                type: boolean
                x-go-name: Error
            failed:
                description: +optional
                type: boolean
                x-go-name: Failed
        title: ContinueOn defines if a workflow should continue even if a task or step fails/errors.
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Counter:
        description: Counter is a Counter prometheus metric
        properties:
            value:
                description: Value is the value of the metric
                type: string
                x-go-name: Value
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    CreateS3BucketOptions:
        description: CreateS3BucketOptions options used to determine automatic automatic bucket-creation process
        properties:
            objectLocking:
                description: ObjectLocking Enable object locking
                type: boolean
                x-go-name: ObjectLocking
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    DAGTask:
        description: DAGTask represents a node in the graph during DAG execution
        properties:
            arguments:
                $ref: '#/definitions/Arguments'
            continueOn:
                $ref: '#/definitions/ContinueOn'
            dependencies:
                description: Dependencies are name of other targets which this depends on
                items:
                    type: string
                type: array
                x-go-name: Dependencies
            depends:
                description: Depends are name of other targets which this depends on
                type: string
                x-go-name: Depends
            hooks:
                $ref: '#/definitions/LifecycleHooks'
            inline:
                $ref: '#/definitions/Template'
            name:
                description: Name is the name of the target
                type: string
                x-go-name: Name
            onExit:
                description: |-
                    OnExit is a template reference which is invoked at the end of the
                    template, irrespective of the success, failure, or error of the
                    primary template.
                    DEPRECATED: Use Hooks[exit].Template instead.
                type: string
                x-go-name: OnExit
            template:
                description: Name of template to execute
                type: string
                x-go-name: Template
            templateRef:
                $ref: '#/definitions/TemplateRef'
            when:
                description: When is an expression in which the task should conditionally execute
                type: string
                x-go-name: When
            withItems:
                description: WithItems expands a task into multiple parallel tasks from the items in the list
                items:
                    $ref: '#/definitions/Item'
                type: array
                x-go-name: WithItems
            withParam:
                description: |-
                    WithParam expands a task into multiple parallel tasks from the value in the parameter,
                    which is expected to be a JSON list.
                type: string
                x-go-name: WithParam
            withSequence:
                $ref: '#/definitions/Sequence'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    DAGTemplate:
        description: DAGTemplate is a template subtype for directed acyclic graph templates
        properties:
            failFast:
                description: |-
                    This flag is for DAG logic. The DAG logic has a built-in "fail fast" feature to stop scheduling new steps,
                    as soon as it detects that one of the DAG nodes is failed. Then it waits until all DAG nodes are completed
                    before failing the DAG itself.
                    The FailFast flag default is true,  if set to false, it will allow a DAG to run all branches of the DAG to
                    completion (either success or failure), regardless of the failed outcomes of branches in the DAG.
                    More info and example about this feature at https://github.com/argoproj/argo-workflows/issues/1442
                type: boolean
                x-go-name: FailFast
            target:
                description: Target are one or more names of targets to execute in a DAG
                type: string
                x-go-name: Target
            tasks:
                description: |-
                    Tasks are a list of DAG tasks
                    +patchStrategy=merge
                    +patchMergeKey=name
                items:
                    $ref: '#/definitions/DAGTask'
                type: array
                x-go-name: Tasks
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Data:
        description: Data is a data template
        properties:
            source:
                $ref: '#/definitions/DataSource'
            transformation:
                $ref: '#/definitions/Transformation'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    DataSource:
        description: DataSource sources external data into a data template
        properties:
            artifactPaths:
                $ref: '#/definitions/ArtifactPaths'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    DownwardAPIProjection:
        description: |-
            Note that this is identical to a downwardAPI volume source without the default
            mode.
        properties:
            items:
                description: |-
                    Items is a list of DownwardAPIVolume file
                    +optional
                items:
                    $ref: '#/definitions/DownwardAPIVolumeFile'
                type: array
                x-go-name: Items
        title: Represents downward API info for projecting into a projected volume.
        type: object
        x-go-package: k8s.io/api/core/v1
    DownwardAPIVolumeFile:
        description: DownwardAPIVolumeFile represents information to create the file containing the pod field
        properties:
            fieldRef:
                $ref: '#/definitions/ObjectFieldSelector'
            mode:
                description: |-
                    Optional: mode bits used to set permissions on this file, must be an octal value
                    between 0000 and 0777 or a decimal value between 0 and 511.
                    YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
                    If not specified, the volume defaultMode will be used.
                    This might be in conflict with other options that affect the file
                    mode, like fsGroup, and the result can be other mode bits set.
                    +optional
                format: int32
                type: integer
                x-go-name: Mode
            path:
                description: 'Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the ''..'' path. Must be utf-8 encoded. The first item of the relative path must not start with ''..'''
                type: string
                x-go-name: Path
            resourceFieldRef:
                $ref: '#/definitions/ResourceFieldSelector'
        type: object
        x-go-package: k8s.io/api/core/v1
    DownwardAPIVolumeSource:
        description: Downward API volumes support ownership management and SELinux relabeling.
        properties:
            defaultMode:
                description: |-
                    Optional: mode bits to use on created files by default. Must be a
                    Optional: mode bits used to set permissions on created files by default.
                    Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
                    YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
                    Defaults to 0644.
                    Directories within the path are not affected by this setting.
                    This might be in conflict with other options that affect the file
                    mode, like fsGroup, and the result can be other mode bits set.
                    +optional
                format: int32
                type: integer
                x-go-name: DefaultMode
            items:
                description: |-
                    Items is a list of downward API volume file
                    +optional
                items:
                    $ref: '#/definitions/DownwardAPIVolumeFile'
                type: array
                x-go-name: Items
        title: DownwardAPIVolumeSource represents a volume containing downward API info.
        type: object
        x-go-package: k8s.io/api/core/v1
    Duration:
        description: |-
            Duration is a wrapper around time.Duration which supports correct
            marshaling to YAML and JSON. In particular, it marshals into strings, which
            can be used as map keys in json.
        type: object
        x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
    EmptyDirVolumeSource:
        description: Empty directory volumes support ownership management and SELinux relabeling.
        properties:
            medium:
                $ref: '#/definitions/StorageMedium'
            sizeLimit:
                $ref: '#/definitions/Quantity'
        title: Represents an empty directory for a pod.
        type: object
        x-go-package: k8s.io/api/core/v1
    EnvFromSource:
        description: EnvFromSource represents the source of a set of ConfigMaps
        properties:
            configMapRef:
                $ref: '#/definitions/ConfigMapEnvSource'
            prefix:
                description: |-
                    An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                    +optional
                type: string
                x-go-name: Prefix
            secretRef:
                $ref: '#/definitions/SecretEnvSource'
        type: object
        x-go-package: k8s.io/api/core/v1
    EnvVar:
        properties:
            name:
                description: Name of the environment variable. Must be a C_IDENTIFIER.
                type: string
                x-go-name: Name
            value:
                description: |-
                    Variable references $(VAR_NAME) are expanded
                    using the previously defined environment variables in the container and
                    any service environment variables. If a variable cannot be resolved,
                    the reference in the input string will be unchanged. Double $$ are reduced
                    to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e.
                    "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)".
                    Escaped references will never be expanded, regardless of whether the variable
                    exists or not.
                    Defaults to "".
                    +optional
                type: string
                x-go-name: Value
            valueFrom:
                $ref: '#/definitions/EnvVarSource'
        title: EnvVar represents an environment variable present in a Container.
        type: object
        x-go-package: k8s.io/api/core/v1
    EnvVarSource:
        properties:
            configMapKeyRef:
                $ref: '#/definitions/ConfigMapKeySelector'
            fieldRef:
                $ref: '#/definitions/ObjectFieldSelector'
            resourceFieldRef:
                $ref: '#/definitions/ResourceFieldSelector'
            secretKeyRef:
                $ref: '#/definitions/SecretKeySelector'
        title: EnvVarSource represents a source for the value of an EnvVar.
        type: object
        x-go-package: k8s.io/api/core/v1
    EphemeralVolumeSource:
        properties:
            volumeClaimTemplate:
                $ref: '#/definitions/PersistentVolumeClaimTemplate'
        title: Represents an ephemeral volume that is handled by a normal storage driver.
        type: object
        x-go-package: k8s.io/api/core/v1
    ExecAction:
        properties:
            command:
                description: |-
                    Command is the command line to execute inside the container, the working directory for the
                    command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
                    not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
                    a shell, you need to explicitly call out to that shell.
                    Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                    +optional
                items:
                    type: string
                type: array
                x-go-name: Command
        title: ExecAction describes a "run in container" action.
        type: object
        x-go-package: k8s.io/api/core/v1
    ExecuteTemplateArgs:
        properties:
            template:
                $ref: '#/definitions/Template'
            workflow:
                $ref: '#/definitions/Workflow'
        required:
            - workflow
            - template
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/plugins/executor
    ExecuteTemplateReply:
        properties:
            node:
                $ref: '#/definitions/NodeResult'
            requeue:
                $ref: '#/definitions/Duration'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/plugins/executor
    ExecutorConfig:
        properties:
            serviceAccountName:
                description: ServiceAccountName specifies the service account name of the executor container.
                type: string
                x-go-name: ServiceAccountName
        title: ExecutorConfig holds configurations of an executor container.
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    FCVolumeSource:
        description: |-
            Fibre Channel volumes can only be mounted as read/write once.
            Fibre Channel volumes support ownership management and SELinux relabeling.
        properties:
            fsType:
                description: |-
                    fsType is the filesystem type to mount.
                    Must be a filesystem type supported by the host operating system.
                    Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                    TODO: how do we prevent errors in the filesystem from compromising the machine
                    +optional
                type: string
                x-go-name: FSType
            lun:
                description: |-
                    lun is Optional: FC target lun number
                    +optional
                format: int32
                type: integer
                x-go-name: Lun
            readOnly:
                description: |-
                    readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
                    the ReadOnly setting in VolumeMounts.
                    +optional
                type: boolean
                x-go-name: ReadOnly
            targetWWNs:
                description: |-
                    targetWWNs is Optional: FC target worldwide names (WWNs)
                    +optional
                items:
                    type: string
                type: array
                x-go-name: TargetWWNs
            wwids:
                description: |-
                    wwids Optional: FC volume world wide identifiers (wwids)
                    Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
                    +optional
                items:
                    type: string
                type: array
                x-go-name: WWIDs
        title: Represents a Fibre Channel volume.
        type: object
        x-go-package: k8s.io/api/core/v1
    FieldsV1:
        description: |-
            Each key is either a '.' representing the field itself, and will always map to an empty set,
            or a string representing a sub-field or item. The string will follow one of these four formats:
            'f:<name>', where <name> is the name of a field in a struct, or key in a map
            'v:<value>', where <value> is the exact json formatted value of a list item
            'i:<index>', where <index> is position of a item in a list
            'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values
            If a key maps to an empty Fields value, the field that key represents is part of the set.

            The exact format is defined in sigs.k8s.io/structured-merge-diff
            +protobuf.options.(gogoproto.goproto_stringer)=false
        title: FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.
        type: object
        x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
    FlexVolumeSource:
        description: |-
            FlexVolume represents a generic volume resource that is
            provisioned/attached using an exec based plugin.
        properties:
            driver:
                description: driver is the name of the driver to use for this volume.
                type: string
                x-go-name: Driver
            fsType:
                description: |-
                    fsType is the filesystem type to mount.
                    Must be a filesystem type supported by the host operating system.
                    Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
                    +optional
                type: string
                x-go-name: FSType
            options:
                additionalProperties:
                    type: string
                description: |-
                    options is Optional: this field holds extra command options if any.
                    +optional
                type: object
                x-go-name: Options
            readOnly:
                description: |-
                    readOnly is Optional: defaults to false (read/write). ReadOnly here will force
                    the ReadOnly setting in VolumeMounts.
                    +optional
                type: boolean
                x-go-name: ReadOnly
            secretRef:
                $ref: '#/definitions/LocalObjectReference'
        type: object
        x-go-package: k8s.io/api/core/v1
    FlockerVolumeSource:
        description: |-
            One and only one of datasetName and datasetUUID should be set.
            Flocker volumes do not support ownership management or SELinux relabeling.
        properties:
            datasetName:
                description: |-
                    datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
                    should be considered as deprecated
                    +optional
                type: string
                x-go-name: DatasetName
            datasetUUID:
                description: |-
                    datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
                    +optional
                type: string
                x-go-name: DatasetUUID
        title: Represents a Flocker volume mounted by the Flocker agent.
        type: object
        x-go-package: k8s.io/api/core/v1
    GCEPersistentDiskVolumeSource:
        description: |-
            A GCE PD must exist before mounting to a container. The disk must
            also be in the same GCE project and zone as the kubelet. A GCE PD
            can only be mounted as read/write once or read-only many times. GCE
            PDs support ownership management and SELinux relabeling.
        properties:
            fsType:
                description: |-
                    fsType is filesystem type of the volume that you want to mount.
                    Tip: Ensure that the filesystem type is supported by the host operating system.
                    Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                    More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                    TODO: how do we prevent errors in the filesystem from compromising the machine
                    +optional
                type: string
                x-go-name: FSType
            partition:
                description: |-
                    partition is the partition in the volume that you want to mount.
                    If omitted, the default is to mount by volume name.
                    Examples: For volume /dev/sda1, you specify the partition as "1".
                    Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
                    More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                    +optional
                format: int32
                type: integer
                x-go-name: Partition
            pdName:
                description: |-
                    pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
                    More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                type: string
                x-go-name: PDName
            readOnly:
                description: |-
                    readOnly here will force the ReadOnly setting in VolumeMounts.
                    Defaults to false.
                    More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                    +optional
                type: boolean
                x-go-name: ReadOnly
        title: Represents a Persistent Disk resource in Google Compute Engine.
        type: object
        x-go-package: k8s.io/api/core/v1
    GCSArtifact:
        description: GCSArtifact is the location of a GCS artifact
        properties:
            bucket:
                description: Bucket is the name of the bucket
                type: string
                x-go-name: Bucket
            key:
                description: Key is the path in the bucket where the artifact resides
                type: string
                x-go-name: Key
            serviceAccountKeySecret:
                $ref: '#/definitions/SecretKeySelector'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    GRPCAction:
        properties:
            port:
                description: Port number of the gRPC service. Number must be in the range 1 to 65535.
                format: int32
                type: integer
                x-go-name: Port
            service:
                description: |-
                    Service is the name of the service to place in the gRPC HealthCheckRequest
                    (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).

                    If this is not specified, the default behavior is defined by gRPC.
                    +optional
                    +default=""
                type: string
                x-go-name: Service
        type: object
        x-go-package: k8s.io/api/core/v1
    Gauge:
        description: Gauge is a Gauge prometheus metric
        properties:
            operation:
                $ref: '#/definitions/GaugeOperation'
            realtime:
                description: Realtime emits this metric in real time if applicable
                type: boolean
                x-go-name: Realtime
            value:
                description: |-
                    Value is the value to be used in the operation with the metric's current value. If no operation is set,
                    value is the value of the metric
                type: string
                x-go-name: Value
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    GaugeOperation:
        title: A GaugeOperation is the set of operations that can be used in a gauge metric.
        type: string
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    GitArtifact:
        description: GitArtifact is the location of an git artifact
        properties:
            branch:
                description: Branch is the branch to fetch when `SingleBranch` is enabled
                type: string
                x-go-name: Branch
            depth:
                description: |-
                    Depth specifies clones/fetches should be shallow and include the given
                    number of commits from the branch tip
                format: uint64
                type: integer
                x-go-name: Depth
            disableSubmodules:
                description: DisableSubmodules disables submodules during git clone
                type: boolean
                x-go-name: DisableSubmodules
            fetch:
                description: Fetch specifies a number of refs that should be fetched before checkout
                items:
                    type: string
                type: array
                x-go-name: Fetch
            insecureIgnoreHostKey:
                description: InsecureIgnoreHostKey disables SSH strict host key checking during git clone
                type: boolean
                x-go-name: InsecureIgnoreHostKey
            passwordSecret:
                $ref: '#/definitions/SecretKeySelector'
            repo:
                description: Repo is the git repository
                type: string
                x-go-name: Repo
            revision:
                description: Revision is the git commit, tag, branch to checkout
                type: string
                x-go-name: Revision
            singleBranch:
                description: SingleBranch enables single branch clone, using the `branch` parameter
                type: boolean
                x-go-name: SingleBranch
            sshPrivateKeySecret:
                $ref: '#/definitions/SecretKeySelector'
            usernameSecret:
                $ref: '#/definitions/SecretKeySelector'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    GitRepoVolumeSource:
        description: |-
            DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an
            EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
            into the Pod's container.
        properties:
            directory:
                description: |-
                    directory is the target directory name.
                    Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
                    git repository.  Otherwise, if specified, the volume will contain the git repository in
                    the subdirectory with the given name.
                    +optional
                type: string
                x-go-name: Directory
            repository:
                description: repository is the URL
                type: string
                x-go-name: Repository
            revision:
                description: |-
                    revision is the commit hash for the specified revision.
                    +optional
                type: string
                x-go-name: Revision
        title: |-
            Represents a volume that is populated with the contents of a git repository.
            Git repo volumes do not support ownership management.
            Git repo volumes support SELinux relabeling.
        type: object
        x-go-package: k8s.io/api/core/v1
    GlusterfsVolumeSource:
        description: Glusterfs volumes do not support ownership management or SELinux relabeling.
        properties:
            endpoints:
                description: |-
                    endpoints is the endpoint name that details Glusterfs topology.
                    More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                type: string
                x-go-name: EndpointsName
            path:
                description: |-
                    path is the Glusterfs volume path.
                    More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                type: string
                x-go-name: Path
            readOnly:
                description: |-
                    readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
                    Defaults to false.
                    More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                    +optional
                type: boolean
                x-go-name: ReadOnly
        title: Represents a Glusterfs mount that lasts the lifetime of a pod.
        type: object
        x-go-package: k8s.io/api/core/v1
    HDFSArtifact:
        description: HDFSArtifact is the location of an HDFS artifact
        properties:
            addresses:
                description: Addresses is accessible addresses of HDFS name nodes
                items:
                    type: string
                type: array
                x-go-name: Addresses
            force:
                description: Force copies a file forcibly even if it exists
                type: boolean
                x-go-name: Force
            hdfsUser:
                description: |-
                    HDFSUser is the user to access HDFS file system.
                    It is ignored if either ccache or keytab is used.
                type: string
                x-go-name: HDFSUser
            krbCCacheSecret:
                $ref: '#/definitions/SecretKeySelector'
            krbConfigConfigMap:
                $ref: '#/definitions/ConfigMapKeySelector'
            krbKeytabSecret:
                $ref: '#/definitions/SecretKeySelector'
            krbRealm:
                description: |-
                    KrbRealm is the Kerberos realm used with Kerberos keytab
                    It must be set if keytab is used.
                type: string
                x-go-name: KrbRealm
            krbServicePrincipalName:
                description: |-
                    KrbServicePrincipalName is the principal name of Kerberos service
                    It must be set if either ccache or keytab is used.
                type: string
                x-go-name: KrbServicePrincipalName
            krbUsername:
                description: |-
                    KrbUsername is the Kerberos username used with Kerberos keytab
                    It must be set if keytab is used.
                type: string
                x-go-name: KrbUsername
            path:
                description: Path is a file path in HDFS
                type: string
                x-go-name: Path
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    HTTP:
        properties:
            body:
                description: Body is content of the HTTP Request
                type: string
                x-go-name: Body
            bodyFrom:
                $ref: '#/definitions/HTTPBodySource'
            headers:
                $ref: '#/definitions/HTTPHeaders'
            insecureSkipVerify:
                description: InsecureSkipVerify is a bool when if set to true will skip TLS verification for the HTTP client
                type: boolean
                x-go-name: InsecureSkipVerify
            method:
                description: Method is HTTP methods for HTTP Request
                type: string
                x-go-name: Method
            successCondition:
                description: SuccessCondition is an expression if evaluated to true is considered successful
                type: string
                x-go-name: SuccessCondition
            timeoutSeconds:
                description: TimeoutSeconds is request timeout for HTTP Request. Default is 30 seconds
                format: int64
                type: integer
                x-go-name: TimeoutSeconds
            url:
                description: URL of the HTTP Request
                type: string
                x-go-name: URL
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    HTTPArtifact:
        description: HTTPArtifact allows a file served on HTTP to be placed as an input artifact in a container
        properties:
            auth:
                $ref: '#/definitions/HTTPAuth'
            headers:
                description: Headers are an optional list of headers to send with HTTP requests for artifacts
                items:
                    $ref: '#/definitions/Header'
                type: array
                x-go-name: Headers
            url:
                description: URL of the artifact
                type: string
                x-go-name: URL
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    HTTPAuth:
        properties:
            basicAuth:
                $ref: '#/definitions/BasicAuth'
            clientCert:
                $ref: '#/definitions/ClientCertAuth'
            oauth2:
                $ref: '#/definitions/OAuth2Auth'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    HTTPBodySource:
        properties:
            bytes:
                items:
                    format: uint8
                    type: integer
                type: array
                x-go-name: Bytes
        title: HTTPBodySource contains the source of the HTTP body.
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    HTTPGetAction:
        properties:
            host:
                description: |-
                    Host name to connect to, defaults to the pod IP. You probably want to set
                    "Host" in httpHeaders instead.
                    +optional
                type: string
                x-go-name: Host
            httpHeaders:
                description: |-
                    Custom headers to set in the request. HTTP allows repeated headers.
                    +optional
                items:
                    $ref: '#/definitions/HTTPHeader'
                type: array
                x-go-name: HTTPHeaders
            path:
                description: |-
                    Path to access on the HTTP server.
                    +optional
                type: string
                x-go-name: Path
            port:
                $ref: '#/definitions/IntOrString'
            scheme:
                $ref: '#/definitions/URIScheme'
        title: HTTPGetAction describes an action based on HTTP Get requests.
        type: object
        x-go-package: k8s.io/api/core/v1
    HTTPHeader:
        properties:
            name:
                type: string
                x-go-name: Name
            value:
                type: string
                x-go-name: Value
            valueFrom:
                $ref: '#/definitions/HTTPHeaderSource'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    HTTPHeaderSource:
        properties:
            secretKeyRef:
                $ref: '#/definitions/SecretKeySelector'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    HTTPHeaders:
        items:
            $ref: '#/definitions/HTTPHeader'
        type: array
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Header:
        description: Header indicate a key-value request header to be used when fetching artifacts over HTTP
        properties:
            name:
                description: Name is the header name
                type: string
                x-go-name: Name
            value:
                description: Value is the literal value to use for the header
                type: string
                x-go-name: Value
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Histogram:
        description: Histogram is a Histogram prometheus metric
        properties:
            buckets:
                description: Buckets is a list of bucket divisors for the histogram
                items:
                    $ref: '#/definitions/Amount'
                type: array
                x-go-name: Buckets
            value:
                description: Value is the value of the metric
                type: string
                x-go-name: Value
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    HostAlias:
        description: |-
            HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the
            pod's hosts file.
        properties:
            hostnames:
                description: Hostnames for the above IP address.
                items:
                    type: string
                type: array
                x-go-name: Hostnames
            ip:
                description: IP address of the host file entry.
                type: string
                x-go-name: IP
        type: object
        x-go-package: k8s.io/api/core/v1
    HostPathType:
        description: +enum
        type: string
        x-go-package: k8s.io/api/core/v1
    HostPathVolumeSource:
        description: Host path volumes do not support ownership management or SELinux relabeling.
        properties:
            path:
                description: |-
                    path of the directory on the host.
                    If the path is a symlink, it will follow the link to the real path.
                    More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                type: string
                x-go-name: Path
            type:
                $ref: '#/definitions/HostPathType'
        title: Represents a host path mapped into a pod.
        type: object
        x-go-package: k8s.io/api/core/v1
    ISCSIVolumeSource:
        description: |-
            ISCSI volumes can only be mounted as read/write once.
            ISCSI volumes support ownership management and SELinux relabeling.
        properties:
            chapAuthDiscovery:
                description: |-
                    chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
                    +optional
                type: boolean
                x-go-name: DiscoveryCHAPAuth
            chapAuthSession:
                description: |-
                    chapAuthSession defines whether support iSCSI Session CHAP authentication
                    +optional
                type: boolean
                x-go-name: SessionCHAPAuth
            fsType:
                description: |-
                    fsType is the filesystem type of the volume that you want to mount.
                    Tip: Ensure that the filesystem type is supported by the host operating system.
                    Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                    More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
                    TODO: how do we prevent errors in the filesystem from compromising the machine
                    +optional
                type: string
                x-go-name: FSType
            initiatorName:
                description: |-
                    initiatorName is the custom iSCSI Initiator Name.
                    If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
                    <target portal>:<volume name> will be created for the connection.
                    +optional
                type: string
                x-go-name: InitiatorName
            iqn:
                description: iqn is the target iSCSI Qualified Name.
                type: string
                x-go-name: IQN
            iscsiInterface:
                description: |-
                    iscsiInterface is the interface Name that uses an iSCSI transport.
                    Defaults to 'default' (tcp).
                    +optional
                type: string
                x-go-name: ISCSIInterface
            lun:
                description: lun represents iSCSI Target Lun number.
                format: int32
                type: integer
                x-go-name: Lun
            portals:
                description: |-
                    portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
                    is other than default (typically TCP ports 860 and 3260).
                    +optional
                items:
                    type: string
                type: array
                x-go-name: Portals
            readOnly:
                description: |-
                    readOnly here will force the ReadOnly setting in VolumeMounts.
                    Defaults to false.
                    +optional
                type: boolean
                x-go-name: ReadOnly
            secretRef:
                $ref: '#/definitions/LocalObjectReference'
            targetPortal:
                description: |-
                    targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
                    is other than default (typically TCP ports 860 and 3260).
                type: string
                x-go-name: TargetPortal
        title: Represents an ISCSI disk.
        type: object
        x-go-package: k8s.io/api/core/v1
    Inputs:
        description: Inputs are the mechanism for passing parameters, artifacts, volumes from one template to another
        properties:
            artifacts:
                $ref: '#/definitions/Artifacts'
            parameters:
                description: |-
                    Parameters are a list of parameters passed as inputs
                    +patchStrategy=merge
                    +patchMergeKey=name
                items:
                    $ref: '#/definitions/Parameter'
                type: array
                x-go-name: Parameters
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    IntOrString:
        description: |-
            +protobuf=true
            +protobuf.options.(gogoproto.goproto_stringer)=false
            +k8s:openapi-gen=true
        properties:
            IntVal:
                format: int32
                type: integer
            StrVal:
                type: string
            Type:
                $ref: '#/definitions/Type'
        title: |-
            IntOrString is a type that can hold an int32 or a string.  When used in
            JSON or YAML marshalling and unmarshalling, it produces or consumes the
            inner type.  This allows you to have, for example, a JSON field that can
            accept a name or number.
            TODO: Rename to Int32OrString
        type: object
        x-go-package: k8s.io/apimachinery/pkg/util/intstr
    Item:
        description: |-
            +protobuf.options.(gogoproto.goproto_stringer)=false
            +kubebuilder:validation:Type=object
        title: |-
            Item expands a single workflow step into multiple parallel steps
            The value of Item can be a map, string, bool, or number
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    KeyToPath:
        properties:
            key:
                description: key is the key to project.
                type: string
                x-go-name: Key
            mode:
                description: |-
                    mode is Optional: mode bits used to set permissions on this file.
                    Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
                    YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
                    If not specified, the volume defaultMode will be used.
                    This might be in conflict with other options that affect the file
                    mode, like fsGroup, and the result can be other mode bits set.
                    +optional
                format: int32
                type: integer
                x-go-name: Mode
            path:
                description: |-
                    path is the relative path of the file to map the key to.
                    May not be an absolute path.
                    May not contain the path element '..'.
                    May not start with the string '..'.
                type: string
                x-go-name: Path
        title: Maps a string key to a path within a volume.
        type: object
        x-go-package: k8s.io/api/core/v1
    LabelSelector:
        description: |-
            A label selector is a label query over a set of resources. The result of matchLabels and
            matchExpressions are ANDed. An empty label selector matches all objects. A null
            label selector matches no objects.
            +structType=atomic
        properties:
            matchExpressions:
                description: |-
                    matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    +optional
                items:
                    $ref: '#/definitions/LabelSelectorRequirement'
                type: array
                x-go-name: MatchExpressions
            matchLabels:
                additionalProperties:
                    type: string
                description: |-
                    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
                    map is equivalent to an element of matchExpressions, whose key field is "key", the
                    operator is "In", and the values array contains only "value". The requirements are ANDed.
                    +optional
                type: object
                x-go-name: MatchLabels
        type: object
        x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
    LabelSelectorOperator:
        title: A label selector operator is the set of operators that can be used in a selector requirement.
        type: string
        x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
    LabelSelectorRequirement:
        description: |-
            A label selector requirement is a selector that contains values, a key, and an operator that
            relates the key and values.
        properties:
            key:
                description: |-
                    key is the label key that the selector applies to.
                    +patchMergeKey=key
                    +patchStrategy=merge
                type: string
                x-go-name: Key
            operator:
                $ref: '#/definitions/LabelSelectorOperator'
            values:
                description: |-
                    values is an array of string values. If the operator is In or NotIn,
                    the values array must be non-empty. If the operator is Exists or DoesNotExist,
                    the values array must be empty. This array is replaced during a strategic
                    merge patch.
                    +optional
                items:
                    type: string
                type: array
                x-go-name: Values
        type: object
        x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
    Lifecycle:
        description: |-
            Lifecycle describes actions that the management system should take in response to container lifecycle
            events. For the PostStart and PreStop lifecycle handlers, management of the container blocks
            until the action is complete, unless the container process fails, in which case the handler is aborted.
        properties:
            postStart:
                $ref: '#/definitions/LifecycleHandler'
            preStop:
                $ref: '#/definitions/LifecycleHandler'
        type: object
        x-go-package: k8s.io/api/core/v1
    LifecycleHandler:
        description: |-
            LifecycleHandler defines a specific action that should be taken in a lifecycle
            hook. One and only one of the fields, except TCPSocket must be specified.
        properties:
            exec:
                $ref: '#/definitions/ExecAction'
            httpGet:
                $ref: '#/definitions/HTTPGetAction'
            tcpSocket:
                $ref: '#/definitions/TCPSocketAction'
        type: object
        x-go-package: k8s.io/api/core/v1
    LifecycleHook:
        properties:
            arguments:
                $ref: '#/definitions/Arguments'
            expression:
                description: |-
                    Expression is a condition expression for when a node will be retried. If it evaluates to false, the node will not
                    be retried and the retry strategy will be ignored
                type: string
                x-go-name: Expression
            template:
                description: Template is the name of the template to execute by the hook
                type: string
                x-go-name: Template
            templateRef:
                $ref: '#/definitions/TemplateRef'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    LifecycleHooks:
        additionalProperties:
            $ref: '#/definitions/LifecycleHook'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    LocalObjectReference:
        description: |-
            LocalObjectReference contains enough information to let you locate the
            referenced object inside the same namespace.
            +structType=atomic
        properties:
            name:
                description: |-
                    Name of the referent.
                    More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                    TODO: Add other useful fields. apiVersion, kind, uid?
                    +optional
                type: string
                x-go-name: Name
        type: object
        x-go-package: k8s.io/api/core/v1
    ManagedFieldsEntry:
        description: |-
            ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource
            that the fieldset applies to.
        properties:
            apiVersion:
                description: |-
                    APIVersion defines the version of this resource that this field set
                    applies to. The format is "group/version" just like the top-level
                    APIVersion field. It is necessary to track the version of a field
                    set because it cannot be automatically converted.
                type: string
                x-go-name: APIVersion
            fieldsType:
                description: |-
                    FieldsType is the discriminator for the different fields format and version.
                    There is currently only one possible value: "FieldsV1"
                type: string
                x-go-name: FieldsType
            fieldsV1:
                $ref: '#/definitions/FieldsV1'
            manager:
                description: Manager is an identifier of the workflow managing these fields.
                type: string
                x-go-name: Manager
            operation:
                $ref: '#/definitions/ManagedFieldsOperationType'
            subresource:
                description: |-
                    Subresource is the name of the subresource used to update that object, or
                    empty string if the object was updated through the main resource. The
                    value of this field is used to distinguish between managers, even if they
                    share the same name. For example, a status update will be distinct from a
                    regular update using the same manager name.
                    Note that the APIVersion field is not related to the Subresource field and
                    it always corresponds to the version of the main resource.
                type: string
                x-go-name: Subresource
            time:
                description: |-
                    Time is the timestamp of when the ManagedFields entry was added. The
                    timestamp will also be updated if a field is added, the manager
                    changes any of the owned fields value or removes a field. The
                    timestamp does not update when a field is removed from the entry
                    because another manager took it over.
                    +optional
                type: string
                x-go-name: Time
        type: object
        x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
    ManagedFieldsOperationType:
        title: ManagedFieldsOperationType is the type of operation which lead to a ManagedFieldsEntry being created.
        type: string
        x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
    ManifestFrom:
        properties:
            artifact:
                $ref: '#/definitions/Artifact'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Memoize:
        description: Memoization enables caching for the Outputs of the template
        properties:
            cache:
                $ref: '#/definitions/Cache'
            key:
                description: Key is the key to use as the caching key
                type: string
                x-go-name: Key
            maxAge:
                description: |-
                    MaxAge is the maximum age (e.g. "180s", "24h") of an entry that is still considered valid. If an entry is older
                    than the MaxAge, it will be ignored.
                type: string
                x-go-name: MaxAge
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Metadata:
        description: Pod metdata
        properties:
            annotations:
                additionalProperties:
                    type: string
                type: object
                x-go-name: Annotations
            labels:
                additionalProperties:
                    type: string
                type: object
                x-go-name: Labels
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    MetricLabel:
        description: MetricLabel is a single label for a prometheus metric
        properties:
            key:
                type: string
                x-go-name: Key
            value:
                type: string
                x-go-name: Value
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Metrics:
        description: Metrics are a list of metrics emitted from a Workflow/Template
        properties:
            prometheus:
                description: Prometheus is a list of prometheus metrics to be emitted
                items:
                    $ref: '#/definitions/Prometheus'
                type: array
                x-go-name: Prometheus
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    MountPropagationMode:
        description: +enum
        title: MountPropagationMode describes mount propagation.
        type: string
        x-go-package: k8s.io/api/core/v1
    Mutex:
        description: Mutex holds Mutex configuration
        properties:
            name:
                description: name of the mutex
                type: string
                x-go-name: Name
            namespace:
                default: '[namespace of workflow]'
                type: string
                x-go-name: Namespace
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    NFSVolumeSource:
        description: NFS volumes do not support ownership management or SELinux relabeling.
        properties:
            path:
                description: |-
                    path that is exported by the NFS server.
                    More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                type: string
                x-go-name: Path
            readOnly:
                description: |-
                    readOnly here will force the NFS export to be mounted with read-only permissions.
                    Defaults to false.
                    More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                    +optional
                type: boolean
                x-go-name: ReadOnly
            server:
                description: |-
                    server is the hostname or IP address of the NFS server.
                    More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                type: string
                x-go-name: Server
        title: Represents an NFS mount that lasts the lifetime of a pod.
        type: object
        x-go-package: k8s.io/api/core/v1
    NodeAffinity:
        properties:
            preferredDuringSchedulingIgnoredDuringExecution:
                description: |-
                    The scheduler will prefer to schedule pods to nodes that satisfy
                    the affinity expressions specified by this field, but it may choose
                    a node that violates one or more of the expressions. The node that is
                    most preferred is the one with the greatest sum of weights, i.e.
                    for each node that meets all of the scheduling requirements (resource
                    request, requiredDuringScheduling affinity expressions, etc.),
                    compute a sum by iterating through the elements of this field and adding
                    "weight" to the sum if the node matches the corresponding matchExpressions; the
                    node(s) with the highest sum are the most preferred.
                    +optional
                items:
                    $ref: '#/definitions/PreferredSchedulingTerm'
                type: array
                x-go-name: PreferredDuringSchedulingIgnoredDuringExecution
            requiredDuringSchedulingIgnoredDuringExecution:
                $ref: '#/definitions/NodeSelector'
        title: Node affinity is a group of node affinity scheduling rules.
        type: object
        x-go-package: k8s.io/api/core/v1
    NodePhase:
        title: NodePhase is a label for the condition of a node at the current time.
        type: string
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    NodeResult:
        properties:
            message:
                type: string
                x-go-name: Message
            outputs:
                $ref: '#/definitions/Outputs'
            phase:
                $ref: '#/definitions/NodePhase'
            progress:
                $ref: '#/definitions/Progress'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    NodeSelector:
        description: |-
            A node selector represents the union of the results of one or more label queries
            over a set of nodes; that is, it represents the OR of the selectors represented
            by the node selector terms.
            +structType=atomic
        properties:
            nodeSelectorTerms:
                description: Required. A list of node selector terms. The terms are ORed.
                items:
                    $ref: '#/definitions/NodeSelectorTerm'
                type: array
                x-go-name: NodeSelectorTerms
        type: object
        x-go-package: k8s.io/api/core/v1
    NodeSelectorOperator:
        description: |-
            A node selector operator is the set of operators that can be used in
            a node selector requirement.
            +enum
        type: string
        x-go-package: k8s.io/api/core/v1
    NodeSelectorRequirement:
        description: |-
            A node selector requirement is a selector that contains values, a key, and an operator
            that relates the key and values.
        properties:
            key:
                description: The label key that the selector applies to.
                type: string
                x-go-name: Key
            operator:
                $ref: '#/definitions/NodeSelectorOperator'
            values:
                description: |-
                    An array of string values. If the operator is In or NotIn,
                    the values array must be non-empty. If the operator is Exists or DoesNotExist,
                    the values array must be empty. If the operator is Gt or Lt, the values
                    array must have a single element, which will be interpreted as an integer.
                    This array is replaced during a strategic merge patch.
                    +optional
                items:
                    type: string
                type: array
                x-go-name: Values
        type: object
        x-go-package: k8s.io/api/core/v1
    NodeSelectorTerm:
        description: |-
            A null or empty node selector term matches no objects. The requirements of
            them are ANDed.
            The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
            +structType=atomic
        properties:
            matchExpressions:
                description: |-
                    A list of node selector requirements by node's labels.
                    +optional
                items:
                    $ref: '#/definitions/NodeSelectorRequirement'
                type: array
                x-go-name: MatchExpressions
            matchFields:
                description: |-
                    A list of node selector requirements by node's fields.
                    +optional
                items:
                    $ref: '#/definitions/NodeSelectorRequirement'
                type: array
                x-go-name: MatchFields
        type: object
        x-go-package: k8s.io/api/core/v1
    NoneStrategy:
        description: |-
            NoneStrategy indicates to skip tar process and upload the files or directory tree as independent
            files. Note that if the artifact is a directory, the artifact driver must support the ability to
            save/load the directory appropriately.
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    OAuth2Auth:
        description: OAuth2Auth holds all information for client authentication via OAuth2 tokens
        properties:
            clientIDSecret:
                $ref: '#/definitions/SecretKeySelector'
            clientSecretSecret:
                $ref: '#/definitions/SecretKeySelector'
            endpointParams:
                items:
                    $ref: '#/definitions/OAuth2EndpointParam'
                type: array
                x-go-name: EndpointParams
            scopes:
                items:
                    type: string
                type: array
                x-go-name: Scopes
            tokenURLSecret:
                $ref: '#/definitions/SecretKeySelector'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    OAuth2EndpointParam:
        description: EndpointParam is for requesting optional fields that should be sent in the oauth request
        properties:
            key:
                description: Name is the header name
                type: string
                x-go-name: Key
            value:
                description: Value is the literal value to use for the header
                type: string
                x-go-name: Value
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    OSSArtifact:
        description: OSSArtifact is the location of an Alibaba Cloud OSS artifact
        properties:
            accessKeySecret:
                $ref: '#/definitions/SecretKeySelector'
            bucket:
                description: Bucket is the name of the bucket
                type: string
                x-go-name: Bucket
            createBucketIfNotPresent:
                description: CreateBucketIfNotPresent tells the driver to attempt to create the OSS bucket for output artifacts, if it doesn't exist
                type: boolean
                x-go-name: CreateBucketIfNotPresent
            endpoint:
                description: Endpoint is the hostname of the bucket endpoint
                type: string
                x-go-name: Endpoint
            key:
                description: Key is the path in the bucket where the artifact resides
                type: string
                x-go-name: Key
            lifecycleRule:
                $ref: '#/definitions/OSSLifecycleRule'
            secretKeySecret:
                $ref: '#/definitions/SecretKeySelector'
            securityToken:
                description: 'SecurityToken is the user''s temporary security token. For more details, check out: https://www.alibabacloud.com/help/doc-detail/100624.htm'
                type: string
                x-go-name: SecurityToken
            useSDKCreds:
                description: UseSDKCreds tells the driver to figure out credentials based on sdk defaults.
                type: boolean
                x-go-name: UseSDKCreds
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    OSSLifecycleRule:
        description: OSSLifecycleRule specifies how to manage bucket's lifecycle
        properties:
            markDeletionAfterDays:
                description: MarkDeletionAfterDays is the number of days before we delete objects in the bucket
                format: int32
                type: integer
                x-go-name: MarkDeletionAfterDays
            markInfrequentAccessAfterDays:
                description: MarkInfrequentAccessAfterDays is the number of days before we convert the objects in the bucket to Infrequent Access (IA) storage type
                format: int32
                type: integer
                x-go-name: MarkInfrequentAccessAfterDays
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    ObjectFieldSelector:
        description: +structType=atomic
        properties:
            apiVersion:
                description: |-
                    Version of the schema the FieldPath is written in terms of, defaults to "v1".
                    +optional
                type: string
                x-go-name: APIVersion
            fieldPath:
                description: Path of the field to select in the specified API version.
                type: string
                x-go-name: FieldPath
        title: ObjectFieldSelector selects an APIVersioned field of an object.
        type: object
        x-go-package: k8s.io/api/core/v1
    ObjectMeta:
        properties:
            name:
                type: string
                x-go-name: Name
            namespace:
                type: string
                x-go-name: Namespace
            uid:
                type: string
                x-go-name: Uid
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/plugins/executor
    Outputs:
        description: Outputs hold parameters, artifacts, and results from a step
        properties:
            artifacts:
                $ref: '#/definitions/Artifacts'
            exitCode:
                description: ExitCode holds the exit code of a script template
                type: string
                x-go-name: ExitCode
            parameters:
                description: |-
                    Parameters holds the list of output parameters produced by a step
                    +patchStrategy=merge
                    +patchMergeKey=name
                items:
                    $ref: '#/definitions/Parameter'
                type: array
                x-go-name: Parameters
            result:
                description: Result holds the result (stdout) of a script template
                type: string
                x-go-name: Result
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    OwnerReference:
        description: |-
            OwnerReference contains enough information to let you identify an owning
            object. An owning object must be in the same namespace as the dependent, or
            be cluster-scoped, so there is no namespace field.
            +structType=atomic
        properties:
            apiVersion:
                description: API version of the referent.
                type: string
                x-go-name: APIVersion
            blockOwnerDeletion:
                description: |-
                    If true, AND if the owner has the "foregroundDeletion" finalizer, then
                    the owner cannot be deleted from the key-value store until this
                    reference is removed.
                    See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion
                    for how the garbage collector interacts with this field and enforces the foreground deletion.
                    Defaults to false.
                    To set this field, a user needs "delete" permission of the owner,
                    otherwise 422 (Unprocessable Entity) will be returned.
                    +optional
                type: boolean
                x-go-name: BlockOwnerDeletion
            controller:
                description: |-
                    If true, this reference points to the managing controller.
                    +optional
                type: boolean
                x-go-name: Controller
            kind:
                description: |-
                    Kind of the referent.
                    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                type: string
                x-go-name: Kind
            name:
                description: |-
                    Name of the referent.
                    More info: http://kubernetes.io/docs/user-guide/identifiers#names
                type: string
                x-go-name: Name
            uid:
                $ref: '#/definitions/UID'
        type: object
        x-go-package: k8s.io/apimachinery/pkg/apis/meta/v1
    ParallelSteps:
        description: +kubebuilder:validation:Type=array
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Parameter:
        description: Parameter indicate a passed string parameter to a service template with an optional default value
        properties:
            default:
                $ref: '#/definitions/AnyString'
            description:
                $ref: '#/definitions/AnyString'
            enum:
                description: Enum holds a list of string values to choose from, for the actual value of the parameter
                items:
                    $ref: '#/definitions/AnyString'
                type: array
                x-go-name: Enum
            globalName:
                description: |-
                    GlobalName exports an output parameter to the global scope, making it available as
                    '{{workflow.outputs.parameters.XXXX}} and in workflow.status.outputs.parameters
                type: string
                x-go-name: GlobalName
            name:
                description: Name is the parameter name
                type: string
                x-go-name: Name
            value:
                $ref: '#/definitions/AnyString'
            valueFrom:
                $ref: '#/definitions/ValueFrom'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    PersistentVolumeAccessMode:
        description: +enum
        type: string
        x-go-package: k8s.io/api/core/v1
    PersistentVolumeClaimSpec:
        description: |-
            PersistentVolumeClaimSpec describes the common attributes of storage devices
            and allows a Source for provider-specific attributes
        properties:
            accessModes:
                description: |-
                    accessModes contains the desired access modes the volume should have.
                    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                    +optional
                items:
                    $ref: '#/definitions/PersistentVolumeAccessMode'
                type: array
                x-go-name: AccessModes
            dataSource:
                $ref: '#/definitions/TypedLocalObjectReference'
            dataSourceRef:
                $ref: '#/definitions/TypedLocalObjectReference'
            resources:
                $ref: '#/definitions/ResourceRequirements'
            selector:
                $ref: '#/definitions/LabelSelector'
            storageClassName:
                description: |-
                    storageClassName is the name of the StorageClass required by the claim.
                    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                    +optional
                type: string
                x-go-name: StorageClassName
            volumeMode:
                $ref: '#/definitions/PersistentVolumeMode'
            volumeName:
                description: |-
                    volumeName is the binding reference to the PersistentVolume backing this claim.
                    +optional
                type: string
                x-go-name: VolumeName
        type: object
        x-go-package: k8s.io/api/core/v1
    PersistentVolumeClaimTemplate:
        description: |-
            PersistentVolumeClaimTemplate is used to produce
            PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
        properties:
            annotations:
                additionalProperties:
                    type: string
                description: |-
                    Annotations is an unstructured key value map stored with a resource that may be
                    set by external tools to store and retrieve arbitrary metadata. They are not
                    queryable and should be preserved when modifying objects.
                    More info: http://kubernetes.io/docs/user-guide/annotations
                    +optional
                type: object
                x-go-name: Annotations
            clusterName:
                description: |-
                    Deprecated: ClusterName is a legacy field that was always cleared by
                    the system and never used; it will be removed completely in 1.25.

                    The name in the go struct is changed to help clients detect
                    accidental use.

                    +optional
                type: string
                x-go-name: ZZZ_DeprecatedClusterName
            creationTimestamp:
                description: |-
                    CreationTimestamp is a timestamp representing the server time when this object was
                    created. It is not guaranteed to be set in happens-before order across separate operations.
                    Clients may not set this value. It is represented in RFC3339 form and is in UTC.

                    Populated by the system.
                    Read-only.
                    Null for lists.
                    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                    +optional
                type: string
                x-go-name: CreationTimestamp
            deletionGracePeriodSeconds:
                description: |-
                    Number of seconds allowed for this object to gracefully terminate before
                    it will be removed from the system. Only set when deletionTimestamp is also set.
                    May only be shortened.
                    Read-only.
                    +optional
                format: int64
                type: integer
                x-go-name: DeletionGracePeriodSeconds
            deletionTimestamp:
                description: |-
                    DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
                    field is set by the server when a graceful deletion is requested by the user, and is not
                    directly settable by a client. The resource is expected to be deleted (no longer visible
                    from resource lists, and not reachable by name) after the time in this field, once the
                    finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
                    Once the deletionTimestamp is set, this value may not be unset or be set further into the
                    future, although it may be shortened or the resource may be deleted prior to this time.
                    For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
                    by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
                    the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
                    remove the pod from the API. In the presence of network partitions, this object may still
                    exist after this timestamp, until an administrator or automated process can determine the
                    resource is fully terminated.
                    If not set, graceful deletion of the object has not been requested.

                    Populated by the system when a graceful deletion is requested.
                    Read-only.
                    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                    +optional
                type: string
                x-go-name: DeletionTimestamp
            finalizers:
                description: |-
                    Must be empty before the object is deleted from the registry. Each entry
                    is an identifier for the responsible component that will remove the entry
                    from the list. If the deletionTimestamp of the object is non-nil, entries
                    in this list can only be removed.
                    Finalizers may be processed and removed in any order.  Order is NOT enforced
                    because it introduces significant risk of stuck finalizers.
                    finalizers is a shared field, any actor with permission can reorder it.
                    If the finalizer list is processed in order, then this can lead to a situation
                    in which the component responsible for the first finalizer in the list is
                    waiting for a signal (field value, external system, or other) produced by a
                    component responsible for a finalizer later in the list, resulting in a deadlock.
                    Without enforced ordering finalizers are free to order amongst themselves and
                    are not vulnerable to ordering changes in the list.
                    +optional
                    +patchStrategy=merge
                items:
                    type: string
                type: array
                x-go-name: Finalizers
            generateName:
                description: |-
                    GenerateName is an optional prefix, used by the server, to generate a unique
                    name ONLY IF the Name field has not been provided.
                    If this field is used, the name returned to the client will be different
                    than the name passed. This value will also be combined with a unique suffix.
                    The provided value has the same validation rules as the Name field,
                    and may be truncated by the length of the suffix required to make the value
                    unique on the server.

                    If this field is specified and the generated name exists, the server will return a 409.

                    Applied only if Name is not specified.
                    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
                    +optional
                type: string
                x-go-name: GenerateName
            generation:
                description: |-
                    A sequence number representing a specific generation of the desired state.
                    Populated by the system. Read-only.
                    +optional
                format: int64
                type: integer
                x-go-name: Generation
            labels:
                additionalProperties:
                    type: string
                description: |-
                    Map of string keys and values that can be used to organize and categorize
                    (scope and select) objects. May match selectors of replication controllers
                    and services.
                    More info: http://kubernetes.io/docs/user-guide/labels
                    +optional
                type: object
                x-go-name: Labels
            managedFields:
                description: |-
                    ManagedFields maps workflow-id and version to the set of fields
                    that are managed by that workflow. This is mostly for internal
                    housekeeping, and users typically shouldn't need to set or
                    understand this field. A workflow can be the user's name, a
                    controller's name, or the name of a specific apply path like
                    "ci-cd". The set of fields is always in the version that the
                    workflow used when modifying the object.

                    +optional
                items:
                    $ref: '#/definitions/ManagedFieldsEntry'
                type: array
                x-go-name: ManagedFields
            name:
                description: |-
                    Name must be unique within a namespace. Is required when creating resources, although
                    some resources may allow a client to request the generation of an appropriate name
                    automatically. Name is primarily intended for creation idempotence and configuration
                    definition.
                    Cannot be updated.
                    More info: http://kubernetes.io/docs/user-guide/identifiers#names
                    +optional
                type: string
                x-go-name: Name
            namespace:
                description: |-
                    Namespace defines the space within which each name must be unique. An empty namespace is
                    equivalent to the "default" namespace, but "default" is the canonical representation.
                    Not all objects are required to be scoped to a namespace - the value of this field for
                    those objects will be empty.

                    Must be a DNS_LABEL.
                    Cannot be updated.
                    More info: http://kubernetes.io/docs/user-guide/namespaces
                    +optional
                type: string
                x-go-name: Namespace
            ownerReferences:
                description: |-
                    List of objects depended by this object. If ALL objects in the list have
                    been deleted, this object will be garbage collected. If this object is managed by a controller,
                    then an entry in this list will point to this controller, with the controller field set to true.
                    There cannot be more than one managing controller.
                    +optional
                    +patchMergeKey=uid
                    +patchStrategy=merge
                items:
                    $ref: '#/definitions/OwnerReference'
                type: array
                x-go-name: OwnerReferences
            resourceVersion:
                description: |-
                    An opaque value that represents the internal version of this object that can
                    be used by clients to determine when objects have changed. May be used for optimistic
                    concurrency, change detection, and the watch operation on a resource or set of resources.
                    Clients must treat these values as opaque and passed unmodified back to the server.
                    They may only be valid for a particular resource or set of resources.

                    Populated by the system.
                    Read-only.
                    Value must be treated as opaque by clients and .
                    More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
                    +optional
                type: string
                x-go-name: ResourceVersion
            selfLink:
                description: |-
                    Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
                    +optional
                type: string
                x-go-name: SelfLink
            spec:
                $ref: '#/definitions/PersistentVolumeClaimSpec'
            uid:
                $ref: '#/definitions/UID'
        type: object
        x-go-package: k8s.io/api/core/v1
    PersistentVolumeClaimVolumeSource:
        description: |-
            This volume finds the bound PV and mounts that volume for the pod. A
            PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another
            type of volume that is owned by someone else (the system).
        properties:
            claimName:
                description: |-
                    claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
                    More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                type: string
                x-go-name: ClaimName
            readOnly:
                description: |-
                    readOnly Will force the ReadOnly setting in VolumeMounts.
                    Default false.
                    +optional
                type: boolean
                x-go-name: ReadOnly
        title: PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace.
        type: object
        x-go-package: k8s.io/api/core/v1
    PersistentVolumeMode:
        description: +enum
        title: PersistentVolumeMode describes how a volume is intended to be consumed, either Block or Filesystem.
        type: string
        x-go-package: k8s.io/api/core/v1
    PhotonPersistentDiskVolumeSource:
        properties:
            fsType:
                description: |-
                    fsType is the filesystem type to mount.
                    Must be a filesystem type supported by the host operating system.
                    Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                type: string
                x-go-name: FSType
            pdID:
                description: pdID is the ID that identifies Photon Controller persistent disk
                type: string
                x-go-name: PdID
        title: Represents a Photon Controller persistent disk resource.
        type: object
        x-go-package: k8s.io/api/core/v1
    Plugin:
        description: Plugin is an Object with exactly one key
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    PodAffinity:
        properties:
            preferredDuringSchedulingIgnoredDuringExecution:
                description: |-
                    The scheduler will prefer to schedule pods to nodes that satisfy
                    the affinity expressions specified by this field, but it may choose
                    a node that violates one or more of the expressions. The node that is
                    most preferred is the one with the greatest sum of weights, i.e.
                    for each node that meets all of the scheduling requirements (resource
                    request, requiredDuringScheduling affinity expressions, etc.),
                    compute a sum by iterating through the elements of this field and adding
                    "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
                    node(s) with the highest sum are the most preferred.
                    +optional
                items:
                    $ref: '#/definitions/WeightedPodAffinityTerm'
                type: array
                x-go-name: PreferredDuringSchedulingIgnoredDuringExecution
            requiredDuringSchedulingIgnoredDuringExecution:
                description: |-
                    If the affinity requirements specified by this field are not met at
                    scheduling time, the pod will not be scheduled onto the node.
                    If the affinity requirements specified by this field cease to be met
                    at some point during pod execution (e.g. due to a pod label update), the
                    system may or may not try to eventually evict the pod from its node.
                    When there are multiple elements, the lists of nodes corresponding to each
                    podAffinityTerm are intersected, i.e. all terms must be satisfied.
                    +optional
                items:
                    $ref: '#/definitions/PodAffinityTerm'
                type: array
                x-go-name: RequiredDuringSchedulingIgnoredDuringExecution
        title: Pod affinity is a group of inter pod affinity scheduling rules.
        type: object
        x-go-package: k8s.io/api/core/v1
    PodAffinityTerm:
        description: |-
            Defines a set of pods (namely those matching the labelSelector
            relative to the given namespace(s)) that this pod should be
            co-located (affinity) or not co-located (anti-affinity) with,
            where co-located is defined as running on a node whose value of
            the label with key <topologyKey> matches that of any node on which
            a pod of the set of pods is running
        properties:
            labelSelector:
                $ref: '#/definitions/LabelSelector'
            namespaceSelector:
                $ref: '#/definitions/LabelSelector'
            namespaces:
                description: |-
                    namespaces specifies a static list of namespace names that the term applies to.
                    The term is applied to the union of the namespaces listed in this field
                    and the ones selected by namespaceSelector.
                    null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                    +optional
                items:
                    type: string
                type: array
                x-go-name: Namespaces
            topologyKey:
                description: |-
                    This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching
                    the labelSelector in the specified namespaces, where co-located is defined as running on a node
                    whose value of the label with key topologyKey matches that of any node on which any of the
                    selected pods is running.
                    Empty topologyKey is not allowed.
                type: string
                x-go-name: TopologyKey
        type: object
        x-go-package: k8s.io/api/core/v1
    PodAntiAffinity:
        properties:
            preferredDuringSchedulingIgnoredDuringExecution:
                description: |-
                    The scheduler will prefer to schedule pods to nodes that satisfy
                    the anti-affinity expressions specified by this field, but it may choose
                    a node that violates one or more of the expressions. The node that is
                    most preferred is the one with the greatest sum of weights, i.e.
                    for each node that meets all of the scheduling requirements (resource
                    request, requiredDuringScheduling anti-affinity expressions, etc.),
                    compute a sum by iterating through the elements of this field and adding
                    "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the
                    node(s) with the highest sum are the most preferred.
                    +optional
                items:
                    $ref: '#/definitions/WeightedPodAffinityTerm'
                type: array
                x-go-name: PreferredDuringSchedulingIgnoredDuringExecution
            requiredDuringSchedulingIgnoredDuringExecution:
                description: |-
                    If the anti-affinity requirements specified by this field are not met at
                    scheduling time, the pod will not be scheduled onto the node.
                    If the anti-affinity requirements specified by this field cease to be met
                    at some point during pod execution (e.g. due to a pod label update), the
                    system may or may not try to eventually evict the pod from its node.
                    When there are multiple elements, the lists of nodes corresponding to each
                    podAffinityTerm are intersected, i.e. all terms must be satisfied.
                    +optional
                items:
                    $ref: '#/definitions/PodAffinityTerm'
                type: array
                x-go-name: RequiredDuringSchedulingIgnoredDuringExecution
        title: Pod anti affinity is a group of inter pod anti affinity scheduling rules.
        type: object
        x-go-package: k8s.io/api/core/v1
    PodFSGroupChangePolicy:
        description: |-
            PodFSGroupChangePolicy holds policies that will be used for applying fsGroup to a volume
            when volume is mounted.
            +enum
        type: string
        x-go-package: k8s.io/api/core/v1
    PodSecurityContext:
        description: |-
            Some fields are also present in container.securityContext.  Field values of
            container.securityContext take precedence over field values of PodSecurityContext.
        properties:
            fsGroup:
                description: |-
                    A special supplemental group that applies to all containers in a pod.
                    Some volume types allow the Kubelet to change the ownership of that volume
                    to be owned by the pod:

                    1. The owning GID will be the FSGroup
                    2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
                    3. The permission bits are OR'd with rw-rw----

                    If unset, the Kubelet will not modify the ownership and permissions of any volume.
                    Note that this field cannot be set when spec.os.name is windows.
                    +optional
                format: int64
                type: integer
                x-go-name: FSGroup
            fsGroupChangePolicy:
                $ref: '#/definitions/PodFSGroupChangePolicy'
            runAsGroup:
                description: |-
                    The GID to run the entrypoint of the container process.
                    Uses runtime default if unset.
                    May also be set in SecurityContext.  If set in both SecurityContext and
                    PodSecurityContext, the value specified in SecurityContext takes precedence
                    for that container.
                    Note that this field cannot be set when spec.os.name is windows.
                    +optional
                format: int64
                type: integer
                x-go-name: RunAsGroup
            runAsNonRoot:
                description: |-
                    Indicates that the container must run as a non-root user.
                    If true, the Kubelet will validate the image at runtime to ensure that it
                    does not run as UID 0 (root) and fail to start the container if it does.
                    If unset or false, no such validation will be performed.
                    May also be set in SecurityContext.  If set in both SecurityContext and
                    PodSecurityContext, the value specified in SecurityContext takes precedence.
                    +optional
                type: boolean
                x-go-name: RunAsNonRoot
            runAsUser:
                description: |-
                    The UID to run the entrypoint of the container process.
                    Defaults to user specified in image metadata if unspecified.
                    May also be set in SecurityContext.  If set in both SecurityContext and
                    PodSecurityContext, the value specified in SecurityContext takes precedence
                    for that container.
                    Note that this field cannot be set when spec.os.name is windows.
                    +optional
                format: int64
                type: integer
                x-go-name: RunAsUser
            seLinuxOptions:
                $ref: '#/definitions/SELinuxOptions'
            seccompProfile:
                $ref: '#/definitions/SeccompProfile'
            supplementalGroups:
                description: |-
                    A list of groups applied to the first process run in each container, in addition
                    to the container's primary GID.  If unspecified, no groups will be added to
                    any container.
                    Note that this field cannot be set when spec.os.name is windows.
                    +optional
                items:
                    format: int64
                    type: integer
                type: array
                x-go-name: SupplementalGroups
            sysctls:
                description: |-
                    Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
                    sysctls (by the container runtime) might fail to launch.
                    Note that this field cannot be set when spec.os.name is windows.
                    +optional
                items:
                    $ref: '#/definitions/Sysctl'
                type: array
                x-go-name: Sysctls
            windowsOptions:
                $ref: '#/definitions/WindowsSecurityContextOptions'
        title: PodSecurityContext holds pod-level security attributes and common container settings.
        type: object
        x-go-package: k8s.io/api/core/v1
    PortworxVolumeSource:
        properties:
            fsType:
                description: |-
                    fSType represents the filesystem type to mount
                    Must be a filesystem type supported by the host operating system.
                    Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
                type: string
                x-go-name: FSType
            readOnly:
                description: |-
                    readOnly defaults to false (read/write). ReadOnly here will force
                    the ReadOnly setting in VolumeMounts.
                    +optional
                type: boolean
                x-go-name: ReadOnly
            volumeID:
                description: volumeID uniquely identifies a Portworx volume
                type: string
                x-go-name: VolumeID
        title: PortworxVolumeSource represents a Portworx volume resource.
        type: object
        x-go-package: k8s.io/api/core/v1
    PreferredSchedulingTerm:
        description: |-
            An empty preferred scheduling term matches all objects with implicit weight 0
            (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        properties:
            preference:
                $ref: '#/definitions/NodeSelectorTerm'
            weight:
                description: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                format: int32
                type: integer
                x-go-name: Weight
        type: object
        x-go-package: k8s.io/api/core/v1
    Probe:
        description: |-
            Probe describes a health check to be performed against a container to determine whether it is
            alive or ready to receive traffic.
        properties:
            exec:
                $ref: '#/definitions/ExecAction'
            failureThreshold:
                description: |-
                    Minimum consecutive failures for the probe to be considered failed after having succeeded.
                    Defaults to 3. Minimum value is 1.
                    +optional
                format: int32
                type: integer
                x-go-name: FailureThreshold
            grpc:
                $ref: '#/definitions/GRPCAction'
            httpGet:
                $ref: '#/definitions/HTTPGetAction'
            initialDelaySeconds:
                description: |-
                    Number of seconds after the container has started before liveness probes are initiated.
                    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                    +optional
                format: int32
                type: integer
                x-go-name: InitialDelaySeconds
            periodSeconds:
                description: |-
                    How often (in seconds) to perform the probe.
                    Default to 10 seconds. Minimum value is 1.
                    +optional
                format: int32
                type: integer
                x-go-name: PeriodSeconds
            successThreshold:
                description: |-
                    Minimum consecutive successes for the probe to be considered successful after having failed.
                    Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                    +optional
                format: int32
                type: integer
                x-go-name: SuccessThreshold
            tcpSocket:
                $ref: '#/definitions/TCPSocketAction'
            terminationGracePeriodSeconds:
                description: |-
                    Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
                    The grace period is the duration in seconds after the processes running in the pod are sent
                    a termination signal and the time when the processes are forcibly halted with a kill signal.
                    Set this value longer than the expected cleanup time for your process.
                    If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
                    value overrides the value provided by the pod spec.
                    Value must be non-negative integer. The value zero indicates stop immediately via
                    the kill signal (no opportunity to shut down).
                    This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
                    Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
                    +optional
                format: int64
                type: integer
                x-go-name: TerminationGracePeriodSeconds
            timeoutSeconds:
                description: |-
                    Number of seconds after which the probe times out.
                    Defaults to 1 second. Minimum value is 1.
                    More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                    +optional
                format: int32
                type: integer
                x-go-name: TimeoutSeconds
        type: object
        x-go-package: k8s.io/api/core/v1
    ProcMountType:
        description: +enum
        type: string
        x-go-package: k8s.io/api/core/v1
    Progress:
        title: Progress in N/M format. N is number of task complete. M is number of tasks.
        type: string
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    ProjectedVolumeSource:
        description: Represents a projected volume source
        properties:
            defaultMode:
                description: |-
                    defaultMode are the mode bits used to set permissions on created files by default.
                    Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
                    YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
                    Directories within the path are not affected by this setting.
                    This might be in conflict with other options that affect the file
                    mode, like fsGroup, and the result can be other mode bits set.
                    +optional
                format: int32
                type: integer
                x-go-name: DefaultMode
            sources:
                description: |-
                    sources is the list of volume projections
                    +optional
                items:
                    $ref: '#/definitions/VolumeProjection'
                type: array
                x-go-name: Sources
        type: object
        x-go-package: k8s.io/api/core/v1
    Prometheus:
        description: Prometheus is a prometheus metric to be emitted
        properties:
            counter:
                $ref: '#/definitions/Counter'
            gauge:
                $ref: '#/definitions/Gauge'
            help:
                description: Help is a string that describes the metric
                type: string
                x-go-name: Help
            histogram:
                $ref: '#/definitions/Histogram'
            labels:
                description: Labels is a list of metric labels
                items:
                    $ref: '#/definitions/MetricLabel'
                type: array
                x-go-name: Labels
            name:
                description: Name is the name of the metric
                type: string
                x-go-name: Name
            when:
                description: When is a conditional statement that decides when to emit the metric
                type: string
                x-go-name: When
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Protocol:
        description: +enum
        title: Protocol defines network protocols supported for things like container ports.
        type: string
        x-go-package: k8s.io/api/core/v1
    PullPolicy:
        description: |-
            PullPolicy describes a policy for if/when to pull a container image
            +enum
        type: string
        x-go-package: k8s.io/api/core/v1
    Quantity:
        description: |-
            The serialization format is:

            <quantity>        ::= <signedNumber><suffix>
            (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
            <digit>           ::= 0 | 1 | ... | 9
            <digits>          ::= <digit> | <digit><digits>
            <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits>
            <sign>            ::= "+" | "-"
            <signedNumber>    ::= <number> | <sign><number>
            <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI>
            <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
            (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
            <decimalSI>       ::= m | "" | k | M | G | T | P | E
            (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
            <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>

            No matter which of the three exponent forms is used, no quantity may represent
            a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal
            places. Numbers larger or more precise will be capped or rounded up.
            (E.g.: 0.1m will rounded up to 1m.)
            This may be extended in the future if we require larger or smaller quantities.

            When a Quantity is parsed from a string, it will remember the type of suffix
            it had, and will use the same type again when it is serialized.

            Before serializing, Quantity will be put in "canonical form".
            This means that Exponent/suffix will be adjusted up or down (with a
            corresponding increase or decrease in Mantissa) such that:
            a. No precision is lost
            b. No fractional digits will be emitted
            c. The exponent (or suffix) is as large as possible.
            The sign will be omitted unless the number is negative.

            Examples:
            1.5 will be serialized as "1500m"
            1.5Gi will be serialized as "1536Mi"

            Note that the quantity will NEVER be internally represented by a
            floating point number. That is the whole point of this exercise.

            Non-canonical values will still parse as long as they are well formed,
            but will be re-emitted in their canonical form. (So always use canonical
            form, or don't diff.)

            This format is intended to make it difficult to use these numbers without
            writing some sort of special handling code in the hopes that that will
            cause implementors to also use a fixed point implementation.

            +protobuf=true
            +protobuf.embed=string
            +protobuf.options.marshal=false
            +protobuf.options.(gogoproto.goproto_stringer)=false
            +k8s:deepcopy-gen=true
            +k8s:openapi-gen=true
        title: |-
            Quantity is a fixed-point representation of a number.
            It provides convenient marshaling/unmarshaling in JSON and YAML,
            in addition to String() and AsInt64() accessors.
        type: object
        x-go-package: k8s.io/apimachinery/pkg/api/resource
    QuobyteVolumeSource:
        description: Quobyte volumes do not support ownership management or SELinux relabeling.
        properties:
            group:
                description: |-
                    group to map volume access to
                    Default is no group
                    +optional
                type: string
                x-go-name: Group
            readOnly:
                description: |-
                    readOnly here will force the Quobyte volume to be mounted with read-only permissions.
                    Defaults to false.
                    +optional
                type: boolean
                x-go-name: ReadOnly
            registry:
                description: |-
                    registry represents a single or multiple Quobyte Registry services
                    specified as a string as host:port pair (multiple entries are separated with commas)
                    which acts as the central registry for volumes
                type: string
                x-go-name: Registry
            tenant:
                description: |-
                    tenant owning the given Quobyte volume in the Backend
                    Used with dynamically provisioned Quobyte volumes, value is set by the plugin
                    +optional
                type: string
                x-go-name: Tenant
            user:
                description: |-
                    user to map volume access to
                    Defaults to serivceaccount user
                    +optional
                type: string
                x-go-name: User
            volume:
                description: volume is a string that references an already created Quobyte volume by name.
                type: string
                x-go-name: Volume
        title: Represents a Quobyte mount that lasts the lifetime of a pod.
        type: object
        x-go-package: k8s.io/api/core/v1
    RBDVolumeSource:
        description: RBD volumes support ownership management and SELinux relabeling.
        properties:
            fsType:
                description: |-
                    fsType is the filesystem type of the volume that you want to mount.
                    Tip: Ensure that the filesystem type is supported by the host operating system.
                    Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                    More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
                    TODO: how do we prevent errors in the filesystem from compromising the machine
                    +optional
                type: string
                x-go-name: FSType
            image:
                description: |-
                    image is the rados image name.
                    More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                type: string
                x-go-name: RBDImage
            keyring:
                description: |-
                    keyring is the path to key ring for RBDUser.
                    Default is /etc/ceph/keyring.
                    More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                    +optional
                type: string
                x-go-name: Keyring
            monitors:
                description: |-
                    monitors is a collection of Ceph monitors.
                    More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                items:
                    type: string
                type: array
                x-go-name: CephMonitors
            pool:
                description: |-
                    pool is the rados pool name.
                    Default is rbd.
                    More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                    +optional
                type: string
                x-go-name: RBDPool
            readOnly:
                description: |-
                    readOnly here will force the ReadOnly setting in VolumeMounts.
                    Defaults to false.
                    More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                    +optional
                type: boolean
                x-go-name: ReadOnly
            secretRef:
                $ref: '#/definitions/LocalObjectReference'
            user:
                description: |-
                    user is the rados user name.
                    Default is admin.
                    More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                    +optional
                type: string
                x-go-name: RadosUser
        title: Represents a Rados Block Device mount that lasts the lifetime of a pod.
        type: object
        x-go-package: k8s.io/api/core/v1
    RawArtifact:
        description: RawArtifact allows raw string content to be placed as an artifact in a container
        properties:
            data:
                description: Data is the string contents of the artifact
                type: string
                x-go-name: Data
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    ResourceFieldSelector:
        description: |-
            ResourceFieldSelector represents container resources (cpu, memory) and their output format
            +structType=atomic
        properties:
            containerName:
                description: |-
                    Container name: required for volumes, optional for env vars
                    +optional
                type: string
                x-go-name: ContainerName
            divisor:
                $ref: '#/definitions/Quantity'
            resource:
                description: 'Required: resource to select'
                type: string
                x-go-name: Resource
        type: object
        x-go-package: k8s.io/api/core/v1
    ResourceList:
        additionalProperties:
            $ref: '#/definitions/Quantity'
        title: ResourceList is a set of (resource name, quantity) pairs.
        type: object
        x-go-package: k8s.io/api/core/v1
    ResourceRequirements:
        properties:
            limits:
                $ref: '#/definitions/ResourceList'
            requests:
                $ref: '#/definitions/ResourceList'
        title: ResourceRequirements describes the compute resource requirements.
        type: object
        x-go-package: k8s.io/api/core/v1
    ResourceTemplate:
        description: ResourceTemplate is a template subtype to manipulate kubernetes resources
        properties:
            action:
                description: |-
                    Action is the action to perform to the resource.
                    Must be one of: get, create, apply, delete, replace, patch
                type: string
                x-go-name: Action
            failureCondition:
                description: |-
                    FailureCondition is a label selector expression which describes the conditions
                    of the k8s resource in which the step was considered failed
                type: string
                x-go-name: FailureCondition
            flags:
                description: |-
                    Flags is a set of additional options passed to kubectl before submitting a resource
                    I.e. to disable resource validation:
                    flags: [
                    "--validate=false"  # disable resource validation
                    ]
                items:
                    type: string
                type: array
                x-go-name: Flags
            manifest:
                description: Manifest contains the kubernetes manifest
                type: string
                x-go-name: Manifest
            manifestFrom:
                $ref: '#/definitions/ManifestFrom'
            mergeStrategy:
                description: |-
                    MergeStrategy is the strategy used to merge a patch. It defaults to "strategic"
                    Must be one of: strategic, merge, json
                type: string
                x-go-name: MergeStrategy
            setOwnerReference:
                description: SetOwnerReference sets the reference to the workflow on the OwnerReference of generated resource.
                type: boolean
                x-go-name: SetOwnerReference
            successCondition:
                description: |-
                    SuccessCondition is a label selector expression which describes the conditions
                    of the k8s resource in which it is acceptable to proceed to the following step
                type: string
                x-go-name: SuccessCondition
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    RetryAffinity:
        properties:
            nodeAntiAffinity:
                $ref: '#/definitions/RetryNodeAntiAffinity'
        title: RetryAffinity prevents running steps on the same host.
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    RetryNodeAntiAffinity:
        description: In order to prevent running steps on the same host, it uses "kubernetes.io/hostname".
        title: RetryNodeAntiAffinity is a placeholder for future expansion, only empty nodeAntiAffinity is allowed.
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    RetryPolicy:
        type: string
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    RetryStrategy:
        description: RetryStrategy provides controls on how to retry a workflow step
        properties:
            affinity:
                $ref: '#/definitions/RetryAffinity'
            backoff:
                $ref: '#/definitions/Backoff'
            expression:
                description: |-
                    Expression is a condition expression for when a node will be retried. If it evaluates to false, the node will not
                    be retried and the retry strategy will be ignored
                type: string
                x-go-name: Expression
            limit:
                $ref: '#/definitions/IntOrString'
            retryPolicy:
                $ref: '#/definitions/RetryPolicy'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    S3Artifact:
        description: S3Artifact is the location of an S3 artifact
        properties:
            accessKeySecret:
                $ref: '#/definitions/SecretKeySelector'
            bucket:
                description: Bucket is the name of the bucket
                type: string
                x-go-name: Bucket
            caSecret:
                $ref: '#/definitions/SecretKeySelector'
            createBucketIfNotPresent:
                $ref: '#/definitions/CreateS3BucketOptions'
            encryptionOptions:
                $ref: '#/definitions/S3EncryptionOptions'
            endpoint:
                description: Endpoint is the hostname of the bucket endpoint
                type: string
                x-go-name: Endpoint
            insecure:
                description: Insecure will connect to the service with TLS
                type: boolean
                x-go-name: Insecure
            key:
                description: Key is the key in the bucket where the artifact resides
                type: string
                x-go-name: Key
            region:
                description: Region contains the optional bucket region
                type: string
                x-go-name: Region
            roleARN:
                description: RoleARN is the Amazon Resource Name (ARN) of the role to assume.
                type: string
                x-go-name: RoleARN
            secretKeySecret:
                $ref: '#/definitions/SecretKeySelector'
            useSDKCreds:
                description: UseSDKCreds tells the driver to figure out credentials based on sdk defaults.
                type: boolean
                x-go-name: UseSDKCreds
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    S3EncryptionOptions:
        description: S3EncryptionOptions used to determine encryption options during s3 operations
        properties:
            enableEncryption:
                description: EnableEncryption tells the driver to encrypt objects if set to true. If kmsKeyId and serverSideCustomerKeySecret are not set, SSE-S3 will be used
                type: boolean
                x-go-name: EnableEncryption
            kmsEncryptionContext:
                description: KmsEncryptionContext is a json blob that contains an encryption context. See https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context for more information
                type: string
                x-go-name: KmsEncryptionContext
            kmsKeyId:
                description: KMSKeyId tells the driver to encrypt the object using the specified KMS Key.
                type: string
                x-go-name: KmsKeyId
            serverSideCustomerKeySecret:
                $ref: '#/definitions/SecretKeySelector'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    SELinuxOptions:
        description: SELinuxOptions are the labels to be applied to the container
        properties:
            level:
                description: |-
                    Level is SELinux level label that applies to the container.
                    +optional
                type: string
                x-go-name: Level
            role:
                description: |-
                    Role is a SELinux role label that applies to the container.
                    +optional
                type: string
                x-go-name: Role
            type:
                description: |-
                    Type is a SELinux type label that applies to the container.
                    +optional
                type: string
                x-go-name: Type
            user:
                description: |-
                    User is a SELinux user label that applies to the container.
                    +optional
                type: string
                x-go-name: User
        type: object
        x-go-package: k8s.io/api/core/v1
    ScaleIOVolumeSource:
        description: ScaleIOVolumeSource represents a persistent ScaleIO volume
        properties:
            fsType:
                description: |-
                    fsType is the filesystem type to mount.
                    Must be a filesystem type supported by the host operating system.
                    Ex. "ext4", "xfs", "ntfs".
                    Default is "xfs".
                    +optional
                type: string
                x-go-name: FSType
            gateway:
                description: gateway is the host address of the ScaleIO API Gateway.
                type: string
                x-go-name: Gateway
            protectionDomain:
                description: |-
                    protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
                    +optional
                type: string
                x-go-name: ProtectionDomain
            readOnly:
                description: |-
                    readOnly Defaults to false (read/write). ReadOnly here will force
                    the ReadOnly setting in VolumeMounts.
                    +optional
                type: boolean
                x-go-name: ReadOnly
            secretRef:
                $ref: '#/definitions/LocalObjectReference'
            sslEnabled:
                description: |-
                    sslEnabled Flag enable/disable SSL communication with Gateway, default false
                    +optional
                type: boolean
                x-go-name: SSLEnabled
            storageMode:
                description: |-
                    storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
                    Default is ThinProvisioned.
                    +optional
                type: string
                x-go-name: StorageMode
            storagePool:
                description: |-
                    storagePool is the ScaleIO Storage Pool associated with the protection domain.
                    +optional
                type: string
                x-go-name: StoragePool
            system:
                description: system is the name of the storage system as configured in ScaleIO.
                type: string
                x-go-name: System
            volumeName:
                description: |-
                    volumeName is the name of a volume already created in the ScaleIO system
                    that is associated with this volume source.
                type: string
                x-go-name: VolumeName
        type: object
        x-go-package: k8s.io/api/core/v1
    ScriptTemplate:
        description: ScriptTemplate is a template subtype to enable scripting through code steps
        properties:
            args:
                description: |-
                    Arguments to the entrypoint.
                    The container image's CMD is used if this is not provided.
                    Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
                    cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
                    to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
                    produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
                    of whether the variable exists or not. Cannot be updated.
                    More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
                    +optional
                items:
                    type: string
                type: array
                x-go-name: Args
            command:
                description: |-
                    Entrypoint array. Not executed within a shell.
                    The container image's ENTRYPOINT is used if this is not provided.
                    Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
                    cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
                    to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
                    produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
                    of whether the variable exists or not. Cannot be updated.
                    More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
                    +optional
                items:
                    type: string
                type: array
                x-go-name: Command
            env:
                description: |-
                    List of environment variables to set in the container.
                    Cannot be updated.
                    +optional
                    +patchMergeKey=name
                    +patchStrategy=merge
                items:
                    $ref: '#/definitions/EnvVar'
                type: array
                x-go-name: Env
            envFrom:
                description: |-
                    List of sources to populate environment variables in the container.
                    The keys defined within a source must be a C_IDENTIFIER. All invalid keys
                    will be reported as an event when the container is starting. When a key exists in multiple
                    sources, the value associated with the last source will take precedence.
                    Values defined by an Env with a duplicate key will take precedence.
                    Cannot be updated.
                    +optional
                items:
                    $ref: '#/definitions/EnvFromSource'
                type: array
                x-go-name: EnvFrom
            image:
                description: |-
                    Container image name.
                    More info: https://kubernetes.io/docs/concepts/containers/images
                    This field is optional to allow higher level config management to default or override
                    container images in workload controllers like Deployments and StatefulSets.
                    +optional
                type: string
                x-go-name: Image
            imagePullPolicy:
                $ref: '#/definitions/PullPolicy'
            lifecycle:
                $ref: '#/definitions/Lifecycle'
            livenessProbe:
                $ref: '#/definitions/Probe'
            name:
                description: |-
                    Name of the container specified as a DNS_LABEL.
                    Each container in a pod must have a unique name (DNS_LABEL).
                    Cannot be updated.
                type: string
                x-go-name: Name
            ports:
                description: |-
                    List of ports to expose from the container. Exposing a port here gives
                    the system additional information about the network connections a
                    container uses, but is primarily informational. Not specifying a port here
                    DOES NOT prevent that port from being exposed. Any port which is
                    listening on the default "0.0.0.0" address inside a container will be
                    accessible from the network.
                    Cannot be updated.
                    +optional
                    +patchMergeKey=containerPort
                    +patchStrategy=merge
                    +listType=map
                    +listMapKey=containerPort
                    +listMapKey=protocol
                items:
                    $ref: '#/definitions/ContainerPort'
                type: array
                x-go-name: Ports
            readinessProbe:
                $ref: '#/definitions/Probe'
            resources:
                $ref: '#/definitions/ResourceRequirements'
            securityContext:
                $ref: '#/definitions/SecurityContext'
            source:
                description: Source contains the source code of the script to execute
                type: string
                x-go-name: Source
            startupProbe:
                $ref: '#/definitions/Probe'
            stdin:
                description: |-
                    Whether this container should allocate a buffer for stdin in the container runtime. If this
                    is not set, reads from stdin in the container will always result in EOF.
                    Default is false.
                    +optional
                type: boolean
                x-go-name: Stdin
            stdinOnce:
                description: |-
                    Whether the container runtime should close the stdin channel after it has been opened by
                    a single attach. When stdin is true the stdin stream will remain open across multiple attach
                    sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
                    first client attaches to stdin, and then remains open and accepts data until the client disconnects,
                    at which time stdin is closed and remains closed until the container is restarted. If this
                    flag is false, a container processes that reads from stdin will never receive an EOF.
                    Default is false
                    +optional
                type: boolean
                x-go-name: StdinOnce
            terminationMessagePath:
                description: |-
                    Optional: Path at which the file to which the container's termination message
                    will be written is mounted into the container's filesystem.
                    Message written is intended to be brief final status, such as an assertion failure message.
                    Will be truncated by the node if greater than 4096 bytes. The total message length across
                    all containers will be limited to 12kb.
                    Defaults to /dev/termination-log.
                    Cannot be updated.
                    +optional
                type: string
                x-go-name: TerminationMessagePath
            terminationMessagePolicy:
                $ref: '#/definitions/TerminationMessagePolicy'
            tty:
                description: |-
                    Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
                    Default is false.
                    +optional
                type: boolean
                x-go-name: TTY
            volumeDevices:
                description: |-
                    volumeDevices is the list of block devices to be used by the container.
                    +patchMergeKey=devicePath
                    +patchStrategy=merge
                    +optional
                items:
                    $ref: '#/definitions/VolumeDevice'
                type: array
                x-go-name: VolumeDevices
            volumeMounts:
                description: |-
                    Pod volumes to mount into the container's filesystem.
                    Cannot be updated.
                    +optional
                    +patchMergeKey=mountPath
                    +patchStrategy=merge
                items:
                    $ref: '#/definitions/VolumeMount'
                type: array
                x-go-name: VolumeMounts
            workingDir:
                description: |-
                    Container's working directory.
                    If not specified, the container runtime's default will be used, which
                    might be configured in the container image.
                    Cannot be updated.
                    +optional
                type: string
                x-go-name: WorkingDir
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    SeccompProfile:
        description: |-
            Only one profile source may be set.
            +union
        properties:
            localhostProfile:
                description: |-
                    localhostProfile indicates a profile defined in a file on the node should be used.
                    The profile must be preconfigured on the node to work.
                    Must be a descending path, relative to the kubelet's configured seccomp profile location.
                    Must only be set if type is "Localhost".
                    +optional
                type: string
                x-go-name: LocalhostProfile
            type:
                $ref: '#/definitions/SeccompProfileType'
        title: SeccompProfile defines a pod/container's seccomp profile settings.
        type: object
        x-go-package: k8s.io/api/core/v1
    SeccompProfileType:
        description: +enum
        title: SeccompProfileType defines the supported seccomp profile types.
        type: string
        x-go-package: k8s.io/api/core/v1
    SecretEnvSource:
        description: |-
            The contents of the target Secret's Data field will represent the
            key-value pairs as environment variables.
        properties:
            name:
                description: |-
                    Name of the referent.
                    More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                    TODO: Add other useful fields. apiVersion, kind, uid?
                    +optional
                type: string
                x-go-name: Name
            optional:
                description: |-
                    Specify whether the Secret must be defined
                    +optional
                type: boolean
                x-go-name: Optional
        title: |-
            SecretEnvSource selects a Secret to populate the environment
            variables with.
        type: object
        x-go-package: k8s.io/api/core/v1
    SecretKeySelector:
        description: +structType=atomic
        properties:
            key:
                description: The key of the secret to select from.  Must be a valid secret key.
                type: string
                x-go-name: Key
            name:
                description: |-
                    Name of the referent.
                    More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                    TODO: Add other useful fields. apiVersion, kind, uid?
                    +optional
                type: string
                x-go-name: Name
            optional:
                description: |-
                    Specify whether the Secret or its key must be defined
                    +optional
                type: boolean
                x-go-name: Optional
        title: SecretKeySelector selects a key of a Secret.
        type: object
        x-go-package: k8s.io/api/core/v1
    SecretProjection:
        description: |-
            The contents of the target Secret's Data field will be presented in a
            projected volume as files using the keys in the Data field as the file names.
            Note that this is identical to a secret volume source without the default
            mode.
        properties:
            items:
                description: |-
                    items if unspecified, each key-value pair in the Data field of the referenced
                    Secret will be projected into the volume as a file whose name is the
                    key and content is the value. If specified, the listed keys will be
                    projected into the specified paths, and unlisted keys will not be
                    present. If a key is specified which is not present in the Secret,
                    the volume setup will error unless it is marked optional. Paths must be
                    relative and may not contain the '..' path or start with '..'.
                    +optional
                items:
                    $ref: '#/definitions/KeyToPath'
                type: array
                x-go-name: Items
            name:
                description: |-
                    Name of the referent.
                    More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                    TODO: Add other useful fields. apiVersion, kind, uid?
                    +optional
                type: string
                x-go-name: Name
            optional:
                description: |-
                    optional field specify whether the Secret or its key must be defined
                    +optional
                type: boolean
                x-go-name: Optional
        title: Adapts a secret into a projected volume.
        type: object
        x-go-package: k8s.io/api/core/v1
    SecretVolumeSource:
        description: |-
            The contents of the target Secret's Data field will be presented in a volume
            as files using the keys in the Data field as the file names.
            Secret volumes support ownership management and SELinux relabeling.
        properties:
            defaultMode:
                description: |-
                    defaultMode is Optional: mode bits used to set permissions on created files by default.
                    Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
                    YAML accepts both octal and decimal values, JSON requires decimal values
                    for mode bits. Defaults to 0644.
                    Directories within the path are not affected by this setting.
                    This might be in conflict with other options that affect the file
                    mode, like fsGroup, and the result can be other mode bits set.
                    +optional
                format: int32
                type: integer
                x-go-name: DefaultMode
            items:
                description: |-
                    items If unspecified, each key-value pair in the Data field of the referenced
                    Secret will be projected into the volume as a file whose name is the
                    key and content is the value. If specified, the listed keys will be
                    projected into the specified paths, and unlisted keys will not be
                    present. If a key is specified which is not present in the Secret,
                    the volume setup will error unless it is marked optional. Paths must be
                    relative and may not contain the '..' path or start with '..'.
                    +optional
                items:
                    $ref: '#/definitions/KeyToPath'
                type: array
                x-go-name: Items
            optional:
                description: |-
                    optional field specify whether the Secret or its keys must be defined
                    +optional
                type: boolean
                x-go-name: Optional
            secretName:
                description: |-
                    secretName is the name of the secret in the pod's namespace to use.
                    More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
                    +optional
                type: string
                x-go-name: SecretName
        title: Adapts a Secret into a volume.
        type: object
        x-go-package: k8s.io/api/core/v1
    SecurityContext:
        description: |-
            Some fields are present in both SecurityContext and PodSecurityContext.  When both
            are set, the values in SecurityContext take precedence.
        properties:
            allowPrivilegeEscalation:
                description: |-
                    AllowPrivilegeEscalation controls whether a process can gain more
                    privileges than its parent process. This bool directly controls if
                    the no_new_privs flag will be set on the container process.
                    AllowPrivilegeEscalation is true always when the container is:
                    1) run as Privileged
                    2) has CAP_SYS_ADMIN
                    Note that this field cannot be set when spec.os.name is windows.
                    +optional
                type: boolean
                x-go-name: AllowPrivilegeEscalation
            capabilities:
                $ref: '#/definitions/Capabilities'
            privileged:
                description: |-
                    Run container in privileged mode.
                    Processes in privileged containers are essentially equivalent to root on the host.
                    Defaults to false.
                    Note that this field cannot be set when spec.os.name is windows.
                    +optional
                type: boolean
                x-go-name: Privileged
            procMount:
                $ref: '#/definitions/ProcMountType'
            readOnlyRootFilesystem:
                description: |-
                    Whether this container has a read-only root filesystem.
                    Default is false.
                    Note that this field cannot be set when spec.os.name is windows.
                    +optional
                type: boolean
                x-go-name: ReadOnlyRootFilesystem
            runAsGroup:
                description: |-
                    The GID to run the entrypoint of the container process.
                    Uses runtime default if unset.
                    May also be set in PodSecurityContext.  If set in both SecurityContext and
                    PodSecurityContext, the value specified in SecurityContext takes precedence.
                    Note that this field cannot be set when spec.os.name is windows.
                    +optional
                format: int64
                type: integer
                x-go-name: RunAsGroup
            runAsNonRoot:
                description: |-
                    Indicates that the container must run as a non-root user.
                    If true, the Kubelet will validate the image at runtime to ensure that it
                    does not run as UID 0 (root) and fail to start the container if it does.
                    If unset or false, no such validation will be performed.
                    May also be set in PodSecurityContext.  If set in both SecurityContext and
                    PodSecurityContext, the value specified in SecurityContext takes precedence.
                    +optional
                type: boolean
                x-go-name: RunAsNonRoot
            runAsUser:
                description: |-
                    The UID to run the entrypoint of the container process.
                    Defaults to user specified in image metadata if unspecified.
                    May also be set in PodSecurityContext.  If set in both SecurityContext and
                    PodSecurityContext, the value specified in SecurityContext takes precedence.
                    Note that this field cannot be set when spec.os.name is windows.
                    +optional
                format: int64
                type: integer
                x-go-name: RunAsUser
            seLinuxOptions:
                $ref: '#/definitions/SELinuxOptions'
            seccompProfile:
                $ref: '#/definitions/SeccompProfile'
            windowsOptions:
                $ref: '#/definitions/WindowsSecurityContextOptions'
        title: SecurityContext holds security configuration that will be applied to a container.
        type: object
        x-go-package: k8s.io/api/core/v1
    SemaphoreRef:
        description: SemaphoreRef is a reference of Semaphore
        properties:
            configMapKeyRef:
                $ref: '#/definitions/ConfigMapKeySelector'
            namespace:
                default: '[namespace of workflow]'
                type: string
                x-go-name: Namespace
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Sequence:
        description: Sequence expands a workflow step into numeric range
        properties:
            count:
                $ref: '#/definitions/IntOrString'
            end:
                $ref: '#/definitions/IntOrString'
            format:
                description: Format is a printf format string to format the value in the sequence
                type: string
                x-go-name: Format
            start:
                $ref: '#/definitions/IntOrString'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    ServiceAccountTokenProjection:
        description: |-
            ServiceAccountTokenProjection represents a projected service account token
            volume. This projection can be used to insert a service account token into
            the pods runtime filesystem for use against APIs (Kubernetes API Server or
            otherwise).
        properties:
            audience:
                description: |-
                    audience is the intended audience of the token. A recipient of a token
                    must identify itself with an identifier specified in the audience of the
                    token, and otherwise should reject the token. The audience defaults to the
                    identifier of the apiserver.
                    +optional
                type: string
                x-go-name: Audience
            expirationSeconds:
                description: |-
                    expirationSeconds is the requested duration of validity of the service
                    account token. As the token approaches expiration, the kubelet volume
                    plugin will proactively rotate the service account token. The kubelet will
                    start trying to rotate the token if the token is older than 80 percent of
                    its time to live or if the token is older than 24 hours.Defaults to 1 hour
                    and must be at least 10 minutes.
                    +optional
                format: int64
                type: integer
                x-go-name: ExpirationSeconds
            path:
                description: |-
                    path is the path relative to the mount point of the file to project the
                    token into.
                type: string
                x-go-name: Path
        type: object
        x-go-package: k8s.io/api/core/v1
    StorageMedium:
        title: StorageMedium defines ways that storage can be allocated to a volume.
        type: string
        x-go-package: k8s.io/api/core/v1
    StorageOSVolumeSource:
        properties:
            fsType:
                description: |-
                    fsType is the filesystem type to mount.
                    Must be a filesystem type supported by the host operating system.
                    Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                    +optional
                type: string
                x-go-name: FSType
            readOnly:
                description: |-
                    readOnly defaults to false (read/write). ReadOnly here will force
                    the ReadOnly setting in VolumeMounts.
                    +optional
                type: boolean
                x-go-name: ReadOnly
            secretRef:
                $ref: '#/definitions/LocalObjectReference'
            volumeName:
                description: |-
                    volumeName is the human-readable name of the StorageOS volume.  Volume
                    names are only unique within a namespace.
                type: string
                x-go-name: VolumeName
            volumeNamespace:
                description: |-
                    volumeNamespace specifies the scope of the volume within StorageOS.  If no
                    namespace is specified then the Pod's namespace will be used.  This allows the
                    Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
                    Set VolumeName to any name to override the default behaviour.
                    Set to "default" if you are not using namespaces within StorageOS.
                    Namespaces that do not pre-exist within StorageOS will be created.
                    +optional
                type: string
                x-go-name: VolumeNamespace
        title: Represents a StorageOS persistent volume resource.
        type: object
        x-go-package: k8s.io/api/core/v1
    SuppliedValueFrom:
        title: SuppliedValueFrom is a placeholder for a value to be filled in directly, either through the CLI, API, etc.
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    SuspendTemplate:
        description: SuspendTemplate is a template subtype to suspend a workflow at a predetermined point in time
        properties:
            duration:
                description: |-
                    Duration is the seconds to wait before automatically resuming a template. Must be a string. Default unit is seconds.
                    Could also be a Duration, e.g.: "2m", "6h"
                type: string
                x-go-name: Duration
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Synchronization:
        description: Synchronization holds synchronization lock configuration
        properties:
            mutex:
                $ref: '#/definitions/Mutex'
            semaphore:
                $ref: '#/definitions/SemaphoreRef'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Sysctl:
        description: Sysctl defines a kernel parameter to be set
        properties:
            name:
                description: Name of a property to set
                type: string
                x-go-name: Name
            value:
                description: Value of a property to set
                type: string
                x-go-name: Value
        type: object
        x-go-package: k8s.io/api/core/v1
    TCPSocketAction:
        description: TCPSocketAction describes an action based on opening a socket
        properties:
            host:
                description: |-
                    Optional: Host name to connect to, defaults to the pod IP.
                    +optional
                type: string
                x-go-name: Host
            port:
                $ref: '#/definitions/IntOrString'
        type: object
        x-go-package: k8s.io/api/core/v1
    TaintEffect:
        description: +enum
        type: string
        x-go-package: k8s.io/api/core/v1
    TarStrategy:
        description: TarStrategy will tar and gzip the file or directory when saving
        properties:
            compressionLevel:
                description: |-
                    CompressionLevel specifies the gzip compression level to use for the artifact.
                    Defaults to gzip.DefaultCompression.
                format: int32
                type: integer
                x-go-name: CompressionLevel
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Template:
        description: Template is a reusable and composable unit of execution in a workflow
        properties:
            activeDeadlineSeconds:
                $ref: '#/definitions/IntOrString'
            affinity:
                $ref: '#/definitions/Affinity'
            archiveLocation:
                $ref: '#/definitions/ArtifactLocation'
            automountServiceAccountToken:
                description: |-
                    AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods.
                    ServiceAccountName of ExecutorConfig must be specified if this value is false.
                type: boolean
                x-go-name: AutomountServiceAccountToken
            container:
                $ref: '#/definitions/Container'
            containerSet:
                $ref: '#/definitions/ContainerSetTemplate'
            daemon:
                description: Daemon will allow a workflow to proceed to the next step so long as the container reaches readiness
                type: boolean
                x-go-name: Daemon
            dag:
                $ref: '#/definitions/DAGTemplate'
            data:
                $ref: '#/definitions/Data'
            executor:
                $ref: '#/definitions/ExecutorConfig'
            failFast:
                description: |-
                    FailFast, if specified, will fail this template if any of its child pods has failed. This is useful for when this
                    template is expanded with `withItems`, etc.
                type: boolean
                x-go-name: FailFast
            hostAliases:
                description: |-
                    HostAliases is an optional list of hosts and IPs that will be injected into the pod spec
                    +patchStrategy=merge
                    +patchMergeKey=ip
                items:
                    $ref: '#/definitions/HostAlias'
                type: array
                x-go-name: HostAliases
            http:
                $ref: '#/definitions/HTTP'
            initContainers:
                description: |-
                    InitContainers is a list of containers which run before the main container.
                    +patchStrategy=merge
                    +patchMergeKey=name
                items:
                    $ref: '#/definitions/UserContainer'
                type: array
                x-go-name: InitContainers
            inputs:
                $ref: '#/definitions/Inputs'
            memoize:
                $ref: '#/definitions/Memoize'
            metadata:
                $ref: '#/definitions/Metadata'
            metrics:
                $ref: '#/definitions/Metrics'
            name:
                description: Name is the name of the template
                type: string
                x-go-name: Name
            nodeSelector:
                additionalProperties:
                    type: string
                description: |-
                    NodeSelector is a selector to schedule this step of the workflow to be
                    run on the selected node(s). Overrides the selector set at the workflow level.
                type: object
                x-go-name: NodeSelector
            outputs:
                $ref: '#/definitions/Outputs'
            parallelism:
                description: |-
                    Parallelism limits the max total parallel pods that can execute at the same time within the
                    boundaries of this template invocation. If additional steps/dag templates are invoked, the
                    pods created by those templates will not be counted towards this total.
                format: int64
                type: integer
                x-go-name: Parallelism
            plugin:
                $ref: '#/definitions/Plugin'
            podSpecPatch:
                description: |-
                    PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of
                    container fields which are not strings (e.g. resource limits).
                type: string
                x-go-name: PodSpecPatch
            priority:
                description: Priority to apply to workflow pods.
                format: int32
                type: integer
                x-go-name: Priority
            priorityClassName:
                description: PriorityClassName to apply to workflow pods.
                type: string
                x-go-name: PriorityClassName
            resource:
                $ref: '#/definitions/ResourceTemplate'
            retryStrategy:
                $ref: '#/definitions/RetryStrategy'
            schedulerName:
                description: |-
                    If specified, the pod will be dispatched by specified scheduler.
                    Or it will be dispatched by workflow scope scheduler if specified.
                    If neither specified, the pod will be dispatched by default scheduler.
                    +optional
                type: string
                x-go-name: SchedulerName
            script:
                $ref: '#/definitions/ScriptTemplate'
            securityContext:
                $ref: '#/definitions/PodSecurityContext'
            serviceAccountName:
                description: ServiceAccountName to apply to workflow pods
                type: string
                x-go-name: ServiceAccountName
            sidecars:
                description: |-
                    Sidecars is a list of containers which run alongside the main container
                    Sidecars are automatically killed when the main container completes
                    +patchStrategy=merge
                    +patchMergeKey=name
                items:
                    $ref: '#/definitions/UserContainer'
                type: array
                x-go-name: Sidecars
            steps:
                description: Steps define a series of sequential/parallel workflow steps
                items:
                    $ref: '#/definitions/ParallelSteps'
                type: array
                x-go-name: Steps
            suspend:
                $ref: '#/definitions/SuspendTemplate'
            synchronization:
                $ref: '#/definitions/Synchronization'
            timeout:
                description: |-
                    Timeout allows to set the total node execution timeout duration counting from the node's start time.
                    This duration also includes time in which the node spends in Pending state. This duration may not be applied to Step or DAG templates.
                type: string
                x-go-name: Timeout
            tolerations:
                description: |-
                    Tolerations to apply to workflow pods.
                    +patchStrategy=merge
                    +patchMergeKey=key
                items:
                    $ref: '#/definitions/Toleration'
                type: array
                x-go-name: Tolerations
            volumes:
                description: |-
                    Volumes is a list of volumes that can be mounted by containers in a template.
                    +patchStrategy=merge
                    +patchMergeKey=name
                items:
                    $ref: '#/definitions/Volume'
                type: array
                x-go-name: Volumes
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    TemplateRef:
        properties:
            clusterScope:
                description: ClusterScope indicates the referred template is cluster scoped (i.e. a ClusterWorkflowTemplate).
                type: boolean
                x-go-name: ClusterScope
            name:
                description: Name is the resource name of the template.
                type: string
                x-go-name: Name
            template:
                description: Template is the name of referred template in the resource.
                type: string
                x-go-name: Template
        title: TemplateRef is a reference of template resource.
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    TerminationMessagePolicy:
        description: +enum
        title: TerminationMessagePolicy describes how termination messages are retrieved from a container.
        type: string
        x-go-package: k8s.io/api/core/v1
    Toleration:
        description: |-
            The pod this Toleration is attached to tolerates any taint that matches
            the triple <key,value,effect> using the matching operator <operator>.
        properties:
            effect:
                $ref: '#/definitions/TaintEffect'
            key:
                description: |-
                    Key is the taint key that the toleration applies to. Empty means match all taint keys.
                    If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                    +optional
                type: string
                x-go-name: Key
            operator:
                $ref: '#/definitions/TolerationOperator'
            tolerationSeconds:
                description: |-
                    TolerationSeconds represents the period of time the toleration (which must be
                    of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
                    it is not set, which means tolerate the taint forever (do not evict). Zero and
                    negative values will be treated as 0 (evict immediately) by the system.
                    +optional
                format: int64
                type: integer
                x-go-name: TolerationSeconds
            value:
                description: |-
                    Value is the taint value the toleration matches to.
                    If the operator is Exists, the value should be empty, otherwise just a regular string.
                    +optional
                type: string
                x-go-name: Value
        type: object
        x-go-package: k8s.io/api/core/v1
    TolerationOperator:
        description: +enum
        title: A toleration operator is the set of operators that can be used in a toleration.
        type: string
        x-go-package: k8s.io/api/core/v1
    Transformation:
        items:
            $ref: '#/definitions/TransformationStep'
        type: array
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    TransformationStep:
        properties:
            expression:
                description: Expression defines an expr expression to apply
                type: string
                x-go-name: Expression
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Type:
        format: int64
        title: Type represents the stored type of IntOrString.
        type: integer
        x-go-package: k8s.io/apimachinery/pkg/util/intstr
    TypedLocalObjectReference:
        description: |-
            TypedLocalObjectReference contains enough information to let you locate the
            typed referenced object inside the same namespace.
            +structType=atomic
        properties:
            apiGroup:
                description: |-
                    APIGroup is the group for the resource being referenced.
                    If APIGroup is not specified, the specified Kind must be in the core API group.
                    For any other third-party types, APIGroup is required.
                    +optional
                type: string
                x-go-name: APIGroup
            kind:
                description: Kind is the type of resource being referenced
                type: string
                x-go-name: Kind
            name:
                description: Name is the name of resource being referenced
                type: string
                x-go-name: Name
        type: object
        x-go-package: k8s.io/api/core/v1
    UID:
        description: |-
            UID is a type that holds unique ID values, including UUIDs.  Because we
            don't ONLY use UUIDs, this is an alias to string.  Being a type captures
            intent and helps make sure that UIDs and names do not get conflated.
        type: string
        x-go-package: k8s.io/apimachinery/pkg/types
    URIScheme:
        description: |-
            URIScheme identifies the scheme used for connection to a host for Get actions
            +enum
        type: string
        x-go-package: k8s.io/api/core/v1
    UserContainer:
        properties:
            args:
                description: |-
                    Arguments to the entrypoint.
                    The container image's CMD is used if this is not provided.
                    Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
                    cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
                    to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
                    produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
                    of whether the variable exists or not. Cannot be updated.
                    More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
                    +optional
                items:
                    type: string
                type: array
                x-go-name: Args
            command:
                description: |-
                    Entrypoint array. Not executed within a shell.
                    The container image's ENTRYPOINT is used if this is not provided.
                    Variable references $(VAR_NAME) are expanded using the container's environment. If a variable
                    cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced
                    to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will
                    produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless
                    of whether the variable exists or not. Cannot be updated.
                    More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
                    +optional
                items:
                    type: string
                type: array
                x-go-name: Command
            env:
                description: |-
                    List of environment variables to set in the container.
                    Cannot be updated.
                    +optional
                    +patchMergeKey=name
                    +patchStrategy=merge
                items:
                    $ref: '#/definitions/EnvVar'
                type: array
                x-go-name: Env
            envFrom:
                description: |-
                    List of sources to populate environment variables in the container.
                    The keys defined within a source must be a C_IDENTIFIER. All invalid keys
                    will be reported as an event when the container is starting. When a key exists in multiple
                    sources, the value associated with the last source will take precedence.
                    Values defined by an Env with a duplicate key will take precedence.
                    Cannot be updated.
                    +optional
                items:
                    $ref: '#/definitions/EnvFromSource'
                type: array
                x-go-name: EnvFrom
            image:
                description: |-
                    Container image name.
                    More info: https://kubernetes.io/docs/concepts/containers/images
                    This field is optional to allow higher level config management to default or override
                    container images in workload controllers like Deployments and StatefulSets.
                    +optional
                type: string
                x-go-name: Image
            imagePullPolicy:
                $ref: '#/definitions/PullPolicy'
            lifecycle:
                $ref: '#/definitions/Lifecycle'
            livenessProbe:
                $ref: '#/definitions/Probe'
            mirrorVolumeMounts:
                description: |-
                    MirrorVolumeMounts will mount the same volumes specified in the main container
                    to the container (including artifacts), at the same mountPaths. This enables
                    dind daemon to partially see the same filesystem as the main container in
                    order to use features such as docker volume binding
                type: boolean
                x-go-name: MirrorVolumeMounts
            name:
                description: |-
                    Name of the container specified as a DNS_LABEL.
                    Each container in a pod must have a unique name (DNS_LABEL).
                    Cannot be updated.
                type: string
                x-go-name: Name
            ports:
                description: |-
                    List of ports to expose from the container. Exposing a port here gives
                    the system additional information about the network connections a
                    container uses, but is primarily informational. Not specifying a port here
                    DOES NOT prevent that port from being exposed. Any port which is
                    listening on the default "0.0.0.0" address inside a container will be
                    accessible from the network.
                    Cannot be updated.
                    +optional
                    +patchMergeKey=containerPort
                    +patchStrategy=merge
                    +listType=map
                    +listMapKey=containerPort
                    +listMapKey=protocol
                items:
                    $ref: '#/definitions/ContainerPort'
                type: array
                x-go-name: Ports
            readinessProbe:
                $ref: '#/definitions/Probe'
            resources:
                $ref: '#/definitions/ResourceRequirements'
            securityContext:
                $ref: '#/definitions/SecurityContext'
            startupProbe:
                $ref: '#/definitions/Probe'
            stdin:
                description: |-
                    Whether this container should allocate a buffer for stdin in the container runtime. If this
                    is not set, reads from stdin in the container will always result in EOF.
                    Default is false.
                    +optional
                type: boolean
                x-go-name: Stdin
            stdinOnce:
                description: |-
                    Whether the container runtime should close the stdin channel after it has been opened by
                    a single attach. When stdin is true the stdin stream will remain open across multiple attach
                    sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the
                    first client attaches to stdin, and then remains open and accepts data until the client disconnects,
                    at which time stdin is closed and remains closed until the container is restarted. If this
                    flag is false, a container processes that reads from stdin will never receive an EOF.
                    Default is false
                    +optional
                type: boolean
                x-go-name: StdinOnce
            terminationMessagePath:
                description: |-
                    Optional: Path at which the file to which the container's termination message
                    will be written is mounted into the container's filesystem.
                    Message written is intended to be brief final status, such as an assertion failure message.
                    Will be truncated by the node if greater than 4096 bytes. The total message length across
                    all containers will be limited to 12kb.
                    Defaults to /dev/termination-log.
                    Cannot be updated.
                    +optional
                type: string
                x-go-name: TerminationMessagePath
            terminationMessagePolicy:
                $ref: '#/definitions/TerminationMessagePolicy'
            tty:
                description: |-
                    Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.
                    Default is false.
                    +optional
                type: boolean
                x-go-name: TTY
            volumeDevices:
                description: |-
                    volumeDevices is the list of block devices to be used by the container.
                    +patchMergeKey=devicePath
                    +patchStrategy=merge
                    +optional
                items:
                    $ref: '#/definitions/VolumeDevice'
                type: array
                x-go-name: VolumeDevices
            volumeMounts:
                description: |-
                    Pod volumes to mount into the container's filesystem.
                    Cannot be updated.
                    +optional
                    +patchMergeKey=mountPath
                    +patchStrategy=merge
                items:
                    $ref: '#/definitions/VolumeMount'
                type: array
                x-go-name: VolumeMounts
            workingDir:
                description: |-
                    Container's working directory.
                    If not specified, the container runtime's default will be used, which
                    might be configured in the container image.
                    Cannot be updated.
                    +optional
                type: string
                x-go-name: WorkingDir
        title: UserContainer is a container specified by a user.
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    ValueFrom:
        description: ValueFrom describes a location in which to obtain the value to a parameter
        properties:
            configMapKeyRef:
                $ref: '#/definitions/ConfigMapKeySelector'
            default:
                $ref: '#/definitions/AnyString'
            event:
                description: Selector (https://github.com/expr-lang/expr) that is evaluated against the event to get the value of the parameter. E.g. `payload.message`
                type: string
                x-go-name: Event
            expression:
                description: Expression, if defined, is evaluated to specify the value for the parameter
                type: string
                x-go-name: Expression
            jqFilter:
                description: JQFilter expression against the resource object in resource templates
                type: string
                x-go-name: JQFilter
            jsonPath:
                description: JSONPath of a resource to retrieve an output parameter value from in resource templates
                type: string
                x-go-name: JSONPath
            parameter:
                description: |-
                    Parameter reference to a step or dag task in which to retrieve an output parameter value from
                    (e.g. '{{steps.mystep.outputs.myparam}}')
                type: string
                x-go-name: Parameter
            path:
                description: Path in the container to retrieve an output parameter value from in container templates
                type: string
                x-go-name: Path
            supplied:
                $ref: '#/definitions/SuppliedValueFrom'
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
    Volume:
        properties:
            awsElasticBlockStore:
                $ref: '#/definitions/AWSElasticBlockStoreVolumeSource'
            azureDisk:
                $ref: '#/definitions/AzureDiskVolumeSource'
            azureFile:
                $ref: '#/definitions/AzureFileVolumeSource'
            cephfs:
                $ref: '#/definitions/CephFSVolumeSource'
            cinder:
                $ref: '#/definitions/CinderVolumeSource'
            configMap:
                $ref: '#/definitions/ConfigMapVolumeSource'
            csi:
                $ref: '#/definitions/CSIVolumeSource'
            downwardAPI:
                $ref: '#/definitions/DownwardAPIVolumeSource'
            emptyDir:
                $ref: '#/definitions/EmptyDirVolumeSource'
            ephemeral:
                $ref: '#/definitions/EphemeralVolumeSource'
            fc:
                $ref: '#/definitions/FCVolumeSource'
            flexVolume:
                $ref: '#/definitions/FlexVolumeSource'
            flocker:
                $ref: '#/definitions/FlockerVolumeSource'
            gcePersistentDisk:
                $ref: '#/definitions/GCEPersistentDiskVolumeSource'
            gitRepo:
                $ref: '#/definitions/GitRepoVolumeSource'
            glusterfs:
                $ref: '#/definitions/GlusterfsVolumeSource'
            hostPath:
                $ref: '#/definitions/HostPathVolumeSource'
            iscsi:
                $ref: '#/definitions/ISCSIVolumeSource'
            name:
                description: |-
                    name of the volume.
                    Must be a DNS_LABEL and unique within the pod.
                    More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                type: string
                x-go-name: Name
            nfs:
                $ref: '#/definitions/NFSVolumeSource'
            persistentVolumeClaim:
                $ref: '#/definitions/PersistentVolumeClaimVolumeSource'
            photonPersistentDisk:
                $ref: '#/definitions/PhotonPersistentDiskVolumeSource'
            portworxVolume:
                $ref: '#/definitions/PortworxVolumeSource'
            projected:
                $ref: '#/definitions/ProjectedVolumeSource'
            quobyte:
                $ref: '#/definitions/QuobyteVolumeSource'
            rbd:
                $ref: '#/definitions/RBDVolumeSource'
            scaleIO:
                $ref: '#/definitions/ScaleIOVolumeSource'
            secret:
                $ref: '#/definitions/SecretVolumeSource'
            storageos:
                $ref: '#/definitions/StorageOSVolumeSource'
            vsphereVolume:
                $ref: '#/definitions/VsphereVirtualDiskVolumeSource'
        title: Volume represents a named volume in a pod that may be accessed by any container in the pod.
        type: object
        x-go-package: k8s.io/api/core/v1
    VolumeDevice:
        properties:
            devicePath:
                description: devicePath is the path inside of the container that the device will be mapped to.
                type: string
                x-go-name: DevicePath
            name:
                description: name must match the name of a persistentVolumeClaim in the pod
                type: string
                x-go-name: Name
        title: volumeDevice describes a mapping of a raw block device within a container.
        type: object
        x-go-package: k8s.io/api/core/v1
    VolumeMount:
        properties:
            mountPath:
                description: |-
                    Path within the container at which the volume should be mounted.  Must
                    not contain ':'.
                type: string
                x-go-name: MountPath
            mountPropagation:
                $ref: '#/definitions/MountPropagationMode'
            name:
                description: This must match the Name of a Volume.
                type: string
                x-go-name: Name
            readOnly:
                description: |-
                    Mounted read-only if true, read-write otherwise (false or unspecified).
                    Defaults to false.
                    +optional
                type: boolean
                x-go-name: ReadOnly
            subPath:
                description: |-
                    Path within the volume from which the container's volume should be mounted.
                    Defaults to "" (volume's root).
                    +optional
                type: string
                x-go-name: SubPath
            subPathExpr:
                description: |-
                    Expanded path within the volume from which the container's volume should be mounted.
                    Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
                    Defaults to "" (volume's root).
                    SubPathExpr and SubPath are mutually exclusive.
                    +optional
                type: string
                x-go-name: SubPathExpr
        title: VolumeMount describes a mounting of a Volume within a container.
        type: object
        x-go-package: k8s.io/api/core/v1
    VolumeProjection:
        description: Projection that may be projected along with other supported volume types
        properties:
            configMap:
                $ref: '#/definitions/ConfigMapProjection'
            downwardAPI:
                $ref: '#/definitions/DownwardAPIProjection'
            secret:
                $ref: '#/definitions/SecretProjection'
            serviceAccountToken:
                $ref: '#/definitions/ServiceAccountTokenProjection'
        type: object
        x-go-package: k8s.io/api/core/v1
    VsphereVirtualDiskVolumeSource:
        properties:
            fsType:
                description: |-
                    fsType is filesystem type to mount.
                    Must be a filesystem type supported by the host operating system.
                    Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                    +optional
                type: string
                x-go-name: FSType
            storagePolicyID:
                description: |-
                    storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
                    +optional
                type: string
                x-go-name: StoragePolicyID
            storagePolicyName:
                description: |-
                    storagePolicyName is the storage Policy Based Management (SPBM) profile name.
                    +optional
                type: string
                x-go-name: StoragePolicyName
            volumePath:
                description: volumePath is the path that identifies vSphere volume vmdk
                type: string
                x-go-name: VolumePath
        title: Represents a vSphere volume resource.
        type: object
        x-go-package: k8s.io/api/core/v1
    WeightedPodAffinityTerm:
        description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        properties:
            podAffinityTerm:
                $ref: '#/definitions/PodAffinityTerm'
            weight:
                description: |-
                    weight associated with matching the corresponding podAffinityTerm,
                    in the range 1-100.
                format: int32
                type: integer
                x-go-name: Weight
        type: object
        x-go-package: k8s.io/api/core/v1
    WindowsSecurityContextOptions:
        properties:
            gmsaCredentialSpec:
                description: |-
                    GMSACredentialSpec is where the GMSA admission webhook
                    (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
                    GMSA credential spec named by the GMSACredentialSpecName field.
                    +optional
                type: string
                x-go-name: GMSACredentialSpec
            gmsaCredentialSpecName:
                description: |-
                    GMSACredentialSpecName is the name of the GMSA credential spec to use.
                    +optional
                type: string
                x-go-name: GMSACredentialSpecName
            hostProcess:
                description: |-
                    HostProcess determines if a container should be run as a 'Host Process' container.
                    This field is alpha-level and will only be honored by components that enable the
                    WindowsHostProcessContainers feature flag. Setting this field without the feature
                    flag will result in errors when validating the Pod. All of a Pod's containers must
                    have the same effective HostProcess value (it is not allowed to have a mix of HostProcess
                    containers and non-HostProcess containers).  In addition, if HostProcess is true
                    then HostNetwork must also be set to true.
                    +optional
                type: boolean
                x-go-name: HostProcess
            runAsUserName:
                description: |-
                    The UserName in Windows to run the entrypoint of the container process.
                    Defaults to the user specified in image metadata if unspecified.
                    May also be set in PodSecurityContext. If set in both SecurityContext and
                    PodSecurityContext, the value specified in SecurityContext takes precedence.
                    +optional
                type: string
                x-go-name: RunAsUserName
        title: WindowsSecurityContextOptions contain Windows-specific options and credentials.
        type: object
        x-go-package: k8s.io/api/core/v1
    Workflow:
        properties:
            metadata:
                $ref: '#/definitions/ObjectMeta'
        required:
            - metadata
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/plugins/executor
    ZipStrategy:
        description: ZipStrategy will unzip zipped input artifacts
        type: object
        x-go-package: github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1
host: localhost
info:
    title: The API for an executor plugin.
    version: 0.0.1
paths:
    /template.execute:
        post:
            operationId: executeTemplate
            parameters:
                - in: body
                  name: Body
                  required: true
                  schema:
                    $ref: '#/definitions/ExecuteTemplateArgs'
            responses:
                "200":
                    $ref: '#/responses/executeTemplate'
produces:
    - application/json
responses:
    executeTemplate:
        description: ""
        schema:
            $ref: '#/definitions/ExecuteTemplateReply'
schemes:
    - http
swagger: "2.0"
