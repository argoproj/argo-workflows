// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: combos/unmarshaler/casttype.proto

/*
	Package casttype is a generated protocol buffer package.

	It is generated from these files:
		combos/unmarshaler/casttype.proto

	It has these top-level messages:
		Castaway
		Wilson
*/
package casttype

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import github_com_gogo_protobuf_test_casttype "github.com/gogo/protobuf/test/casttype"

import github_com_gogo_protobuf_protoc_gen_gogo_descriptor "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import compress_gzip "compress/gzip"
import bytes "bytes"
import io_ioutil "io/ioutil"

import strings "strings"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"
import encoding_binary "encoding/binary"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Castaway struct {
	Int32Ptr         *int32                                                                                                      `protobuf:"varint,1,opt,name=Int32Ptr,casttype=int32" json:"Int32Ptr,omitempty"`
	Int32            int32                                                                                                       `protobuf:"varint,2,opt,name=Int32,casttype=int32" json:"Int32"`
	MyUint64Ptr      *github_com_gogo_protobuf_test_casttype.MyUint64Type                                                        `protobuf:"varint,3,opt,name=MyUint64Ptr,casttype=github.com/gogo/protobuf/test/casttype.MyUint64Type" json:"MyUint64Ptr,omitempty"`
	MyUint64         github_com_gogo_protobuf_test_casttype.MyUint64Type                                                         `protobuf:"varint,4,opt,name=MyUint64,casttype=github.com/gogo/protobuf/test/casttype.MyUint64Type" json:"MyUint64"`
	MyFloat32Ptr     *github_com_gogo_protobuf_test_casttype.MyFloat32Type                                                       `protobuf:"fixed32,5,opt,name=MyFloat32Ptr,casttype=github.com/gogo/protobuf/test/casttype.MyFloat32Type" json:"MyFloat32Ptr,omitempty"`
	MyFloat32        github_com_gogo_protobuf_test_casttype.MyFloat32Type                                                        `protobuf:"fixed32,6,opt,name=MyFloat32,casttype=github.com/gogo/protobuf/test/casttype.MyFloat32Type" json:"MyFloat32"`
	MyFloat64Ptr     *github_com_gogo_protobuf_test_casttype.MyFloat64Type                                                       `protobuf:"fixed64,7,opt,name=MyFloat64Ptr,casttype=github.com/gogo/protobuf/test/casttype.MyFloat64Type" json:"MyFloat64Ptr,omitempty"`
	MyFloat64        github_com_gogo_protobuf_test_casttype.MyFloat64Type                                                        `protobuf:"fixed64,8,opt,name=MyFloat64,casttype=github.com/gogo/protobuf/test/casttype.MyFloat64Type" json:"MyFloat64"`
	MyBytes          github_com_gogo_protobuf_test_casttype.Bytes                                                                `protobuf:"bytes,9,opt,name=MyBytes,casttype=github.com/gogo/protobuf/test/casttype.Bytes" json:"MyBytes,omitempty"`
	NormalBytes      []byte                                                                                                      `protobuf:"bytes,10,opt,name=NormalBytes" json:"NormalBytes,omitempty"`
	MyUint64S        []github_com_gogo_protobuf_test_casttype.MyUint64Type                                                       `protobuf:"varint,11,rep,name=MyUint64s,casttype=github.com/gogo/protobuf/test/casttype.MyUint64Type" json:"MyUint64s,omitempty"`
	MyMap            github_com_gogo_protobuf_test_casttype.MyMapType                                                            `protobuf:"bytes,12,rep,name=MyMap,casttype=github.com/gogo/protobuf/test/casttype.MyMapType" json:"MyMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MyCustomMap      map[github_com_gogo_protobuf_test_casttype.MyStringType]github_com_gogo_protobuf_test_casttype.MyUint64Type `protobuf:"bytes,13,rep,name=MyCustomMap,castkey=github.com/gogo/protobuf/test/casttype.MyStringType,castvalue=github.com/gogo/protobuf/test/casttype.MyUint64Type" json:"MyCustomMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MyNullableMap    map[github_com_gogo_protobuf_test_casttype.MyInt32Type]*Wilson                                              `protobuf:"bytes,14,rep,name=MyNullableMap,castkey=github.com/gogo/protobuf/test/casttype.MyInt32Type" json:"MyNullableMap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MyEmbeddedMap    map[github_com_gogo_protobuf_test_casttype.MyInt32Type]Wilson                                               `protobuf:"bytes,15,rep,name=MyEmbeddedMap,castkey=github.com/gogo/protobuf/test/casttype.MyInt32Type" json:"MyEmbeddedMap" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	String_          *github_com_gogo_protobuf_test_casttype.MyStringType                                                        `protobuf:"bytes,16,opt,name=String,casttype=github.com/gogo/protobuf/test/casttype.MyStringType" json:"String,omitempty"`
	XXX_unrecognized []byte                                                                                                      `json:"-"`
}

func (m *Castaway) Reset()                    { *m = Castaway{} }
func (*Castaway) ProtoMessage()               {}
func (*Castaway) Descriptor() ([]byte, []int) { return fileDescriptorCasttype, []int{0} }

type Wilson struct {
	Int64            *int64 `protobuf:"varint,1,opt,name=Int64" json:"Int64,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Wilson) Reset()                    { *m = Wilson{} }
func (*Wilson) ProtoMessage()               {}
func (*Wilson) Descriptor() ([]byte, []int) { return fileDescriptorCasttype, []int{1} }

func init() {
	proto.RegisterType((*Castaway)(nil), "casttype.Castaway")
	proto.RegisterType((*Wilson)(nil), "casttype.Wilson")
}
func (this *Castaway) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return CasttypeDescription()
}
func (this *Wilson) Description() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	return CasttypeDescription()
}
func CasttypeDescription() (desc *github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet) {
	d := &github_com_gogo_protobuf_protoc_gen_gogo_descriptor.FileDescriptorSet{}
	var gzipped = []byte{
		// 4199 bytes of a gzipped FileDescriptorSet
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x7b, 0x5d, 0x70, 0x1b, 0xd7,
		0x75, 0x3f, 0x17, 0x1f, 0x24, 0x70, 0x00, 0x82, 0xcb, 0x4b, 0x5a, 0x86, 0xe9, 0x18, 0xa4, 0x28,
		0x7f, 0xd0, 0x76, 0x42, 0x79, 0xf4, 0x6d, 0x28, 0xb1, 0xff, 0x00, 0x09, 0x31, 0xd0, 0x9f, 0x20,
		0x99, 0x25, 0x19, 0x49, 0x6e, 0x67, 0x76, 0x96, 0x8b, 0x4b, 0x70, 0xa5, 0xc5, 0xee, 0x66, 0x77,
		0x21, 0x19, 0x9a, 0x3e, 0xa8, 0x71, 0xdb, 0x4c, 0xda, 0xe9, 0x77, 0x67, 0x9a, 0xb8, 0x8e, 0xdb,
		0x66, 0xa6, 0x75, 0x9a, 0xf4, 0x23, 0x69, 0x1a, 0x37, 0xed, 0x53, 0x5e, 0xd2, 0xfa, 0xa9, 0x93,
		0xbc, 0xf5, 0xa1, 0x23, 0x5b, 0xac, 0x67, 0xea, 0xb4, 0x6e, 0xeb, 0x36, 0x7e, 0xc8, 0xc8, 0x2f,
		0x9d, 0xfb, 0xb5, 0x58, 0x7c, 0x50, 0x0b, 0x2a, 0x63, 0xe7, 0x89, 0xd8, 0x73, 0xcf, 0xef, 0x77,
		0xcf, 0x3d, 0xf7, 0xdc, 0x7b, 0xce, 0xbd, 0xbb, 0x84, 0x6f, 0x9c, 0x83, 0xb9, 0x86, 0x6d, 0x37,
		0x4c, 0x7c, 0xdc, 0x71, 0x6d, 0xdf, 0xde, 0x69, 0xed, 0x1e, 0xaf, 0x63, 0x4f, 0x77, 0x0d, 0xc7,
		0xb7, 0xdd, 0x45, 0x2a, 0x43, 0x13, 0x4c, 0x63, 0x51, 0x68, 0xcc, 0xd7, 0x60, 0xf2, 0x82, 0x61,
		0xe2, 0xe5, 0x40, 0x71, 0x13, 0xfb, 0xe8, 0x1c, 0x24, 0x76, 0x0d, 0x13, 0xe7, 0xa5, 0xb9, 0xf8,
		0x42, 0xe6, 0xc4, 0xa3, 0x8b, 0x3d, 0xa0, 0xc5, 0x6e, 0xc4, 0x06, 0x11, 0x2b, 0x14, 0x31, 0xff,
		0x76, 0x02, 0xa6, 0x06, 0xb4, 0x22, 0x04, 0x09, 0x4b, 0x6b, 0x12, 0x46, 0x69, 0x21, 0xad, 0xd0,
		0xdf, 0x28, 0x0f, 0x63, 0x8e, 0xa6, 0x5f, 0xd3, 0x1a, 0x38, 0x1f, 0xa3, 0x62, 0xf1, 0x88, 0x0a,
		0x00, 0x75, 0xec, 0x60, 0xab, 0x8e, 0x2d, 0xbd, 0x9d, 0x8f, 0xcf, 0xc5, 0x17, 0xd2, 0x4a, 0x48,
		0x82, 0x9e, 0x86, 0x49, 0xa7, 0xb5, 0x63, 0x1a, 0xba, 0x1a, 0x52, 0x83, 0xb9, 0xf8, 0x42, 0x52,
		0x91, 0x59, 0xc3, 0x72, 0x47, 0xf9, 0x09, 0x98, 0xb8, 0x81, 0xb5, 0x6b, 0x61, 0xd5, 0x0c, 0x55,
		0xcd, 0x11, 0x71, 0x48, 0x71, 0x09, 0xb2, 0x4d, 0xec, 0x79, 0x5a, 0x03, 0xab, 0x7e, 0xdb, 0xc1,
		0xf9, 0x04, 0x1d, 0xfd, 0x5c, 0xdf, 0xe8, 0x7b, 0x47, 0x9e, 0xe1, 0xa8, 0xad, 0xb6, 0x83, 0x51,
		0x09, 0xd2, 0xd8, 0x6a, 0x35, 0x19, 0x43, 0xf2, 0x00, 0xff, 0x55, 0xac, 0x56, 0xb3, 0x97, 0x25,
		0x45, 0x60, 0x9c, 0x62, 0xcc, 0xc3, 0xee, 0x75, 0x43, 0xc7, 0xf9, 0x51, 0x4a, 0xf0, 0x44, 0x1f,
		0xc1, 0x26, 0x6b, 0xef, 0xe5, 0x10, 0x38, 0xb4, 0x04, 0x69, 0xfc, 0xa2, 0x8f, 0x2d, 0xcf, 0xb0,
		0xad, 0xfc, 0x18, 0x25, 0x79, 0x6c, 0xc0, 0x2c, 0x62, 0xb3, 0xde, 0x4b, 0xd1, 0xc1, 0xa1, 0x33,
		0x30, 0x66, 0x3b, 0xbe, 0x61, 0x5b, 0x5e, 0x3e, 0x35, 0x27, 0x2d, 0x64, 0x4e, 0x7c, 0x6c, 0x60,
		0x20, 0xac, 0x33, 0x1d, 0x45, 0x28, 0xa3, 0x2a, 0xc8, 0x9e, 0xdd, 0x72, 0x75, 0xac, 0xea, 0x76,
		0x1d, 0xab, 0x86, 0xb5, 0x6b, 0xe7, 0xd3, 0x94, 0x60, 0xb6, 0x7f, 0x20, 0x54, 0x71, 0xc9, 0xae,
		0xe3, 0xaa, 0xb5, 0x6b, 0x2b, 0x39, 0xaf, 0xeb, 0x19, 0x1d, 0x81, 0x51, 0xaf, 0x6d, 0xf9, 0xda,
		0x8b, 0xf9, 0x2c, 0x8d, 0x10, 0xfe, 0x34, 0xff, 0x77, 0xa3, 0x30, 0x31, 0x4c, 0x88, 0x9d, 0x87,
		0xe4, 0x2e, 0x19, 0x65, 0x3e, 0x76, 0x18, 0x1f, 0x30, 0x4c, 0xb7, 0x13, 0x47, 0xef, 0xd3, 0x89,
		0x25, 0xc8, 0x58, 0xd8, 0xf3, 0x71, 0x9d, 0x45, 0x44, 0x7c, 0xc8, 0x98, 0x02, 0x06, 0xea, 0x0f,
		0xa9, 0xc4, 0x7d, 0x85, 0xd4, 0x65, 0x98, 0x08, 0x4c, 0x52, 0x5d, 0xcd, 0x6a, 0x88, 0xd8, 0x3c,
		0x1e, 0x65, 0xc9, 0x62, 0x45, 0xe0, 0x14, 0x02, 0x53, 0x72, 0xb8, 0xeb, 0x19, 0x2d, 0x03, 0xd8,
		0x16, 0xb6, 0x77, 0xd5, 0x3a, 0xd6, 0xcd, 0x7c, 0xea, 0x00, 0x2f, 0xad, 0x13, 0x95, 0x3e, 0x2f,
		0xd9, 0x4c, 0xaa, 0x9b, 0xe8, 0xd9, 0x4e, 0xa8, 0x8d, 0x1d, 0x10, 0x29, 0x35, 0xb6, 0xc8, 0xfa,
		0xa2, 0x6d, 0x1b, 0x72, 0x2e, 0x26, 0x71, 0x8f, 0xeb, 0x7c, 0x64, 0x69, 0x6a, 0xc4, 0x62, 0xe4,
		0xc8, 0x14, 0x0e, 0x63, 0x03, 0x1b, 0x77, 0xc3, 0x8f, 0xe8, 0x18, 0x04, 0x02, 0x95, 0x86, 0x15,
		0xd0, 0x5d, 0x28, 0x2b, 0x84, 0x6b, 0x5a, 0x13, 0xcf, 0xdc, 0x84, 0x5c, 0xb7, 0x7b, 0xd0, 0x34,
		0x24, 0x3d, 0x5f, 0x73, 0x7d, 0x1a, 0x85, 0x49, 0x85, 0x3d, 0x20, 0x19, 0xe2, 0xd8, 0xaa, 0xd3,
		0x5d, 0x2e, 0xa9, 0x90, 0x9f, 0xe8, 0xff, 0x75, 0x06, 0x1c, 0xa7, 0x03, 0x7e, 0xbc, 0x7f, 0x46,
		0xbb, 0x98, 0x7b, 0xc7, 0x3d, 0x73, 0x16, 0xc6, 0xbb, 0x06, 0x30, 0x6c, 0xd7, 0xf3, 0xbf, 0x00,
		0x0f, 0x0c, 0xa4, 0x46, 0x97, 0x61, 0xba, 0x65, 0x19, 0x96, 0x8f, 0x5d, 0xc7, 0xc5, 0x24, 0x62,
		0x59, 0x57, 0xf9, 0x7f, 0x1b, 0x3b, 0x20, 0xe6, 0xb6, 0xc3, 0xda, 0x8c, 0x45, 0x99, 0x6a, 0xf5,
		0x0b, 0x9f, 0x4a, 0xa7, 0xde, 0x19, 0x93, 0x6f, 0xdd, 0xba, 0x75, 0x2b, 0x36, 0xff, 0xa5, 0x51,
		0x98, 0x1e, 0xb4, 0x66, 0x06, 0x2e, 0xdf, 0x23, 0x30, 0x6a, 0xb5, 0x9a, 0x3b, 0xd8, 0xa5, 0x4e,
		0x4a, 0x2a, 0xfc, 0x09, 0x95, 0x20, 0x69, 0x6a, 0x3b, 0xd8, 0xcc, 0x27, 0xe6, 0xa4, 0x85, 0xdc,
		0x89, 0xa7, 0x87, 0x5a, 0x95, 0x8b, 0xab, 0x04, 0xa2, 0x30, 0x24, 0x7a, 0x0e, 0x12, 0x7c, 0x8b,
		0x26, 0x0c, 0x4f, 0x0d, 0xc7, 0x40, 0xd6, 0x92, 0x42, 0x71, 0xe8, 0x61, 0x48, 0x93, 0xbf, 0x2c,
		0x36, 0x46, 0xa9, 0xcd, 0x29, 0x22, 0x20, 0x71, 0x81, 0x66, 0x20, 0x45, 0x97, 0x49, 0x1d, 0x8b,
		0xd4, 0x16, 0x3c, 0x93, 0xc0, 0xaa, 0xe3, 0x5d, 0xad, 0x65, 0xfa, 0xea, 0x75, 0xcd, 0x6c, 0x61,
		0x1a, 0xf0, 0x69, 0x25, 0xcb, 0x85, 0x9f, 0x25, 0x32, 0x34, 0x0b, 0x19, 0xb6, 0xaa, 0x0c, 0xab,
		0x8e, 0x5f, 0xa4, 0xbb, 0x67, 0x52, 0x61, 0x0b, 0xad, 0x4a, 0x24, 0xa4, 0xfb, 0xab, 0x9e, 0x6d,
		0x89, 0xd0, 0xa4, 0x5d, 0x10, 0x01, 0xed, 0xfe, 0x6c, 0xef, 0xc6, 0xfd, 0xc8, 0xe0, 0xe1, 0xf5,
		0xc6, 0xd4, 0xfc, 0xeb, 0x31, 0x48, 0xd0, 0xfd, 0x62, 0x02, 0x32, 0x5b, 0x57, 0x36, 0x2a, 0xea,
		0xf2, 0xfa, 0x76, 0x79, 0xb5, 0x22, 0x4b, 0x28, 0x07, 0x40, 0x05, 0x17, 0x56, 0xd7, 0x4b, 0x5b,
		0x72, 0x2c, 0x78, 0xae, 0xae, 0x6d, 0x9d, 0x39, 0x25, 0xc7, 0x03, 0xc0, 0x36, 0x13, 0x24, 0xc2,
		0x0a, 0x27, 0x4f, 0xc8, 0x49, 0x24, 0x43, 0x96, 0x11, 0x54, 0x2f, 0x57, 0x96, 0xcf, 0x9c, 0x92,
		0x47, 0xbb, 0x25, 0x27, 0x4f, 0xc8, 0x63, 0x68, 0x1c, 0xd2, 0x54, 0x52, 0x5e, 0x5f, 0x5f, 0x95,
		0x53, 0x01, 0xe7, 0xe6, 0x96, 0x52, 0x5d, 0x5b, 0x91, 0xd3, 0x01, 0xe7, 0x8a, 0xb2, 0xbe, 0xbd,
		0x21, 0x43, 0xc0, 0x50, 0xab, 0x6c, 0x6e, 0x96, 0x56, 0x2a, 0x72, 0x26, 0xd0, 0x28, 0x5f, 0xd9,
		0xaa, 0x6c, 0xca, 0xd9, 0x2e, 0xb3, 0x4e, 0x9e, 0x90, 0xc7, 0x83, 0x2e, 0x2a, 0x6b, 0xdb, 0x35,
		0x39, 0x87, 0x26, 0x61, 0x9c, 0x75, 0x21, 0x8c, 0x98, 0xe8, 0x11, 0x9d, 0x39, 0x25, 0xcb, 0x1d,
		0x43, 0x18, 0xcb, 0x64, 0x97, 0xe0, 0xcc, 0x29, 0x19, 0xcd, 0x2f, 0x41, 0x92, 0x46, 0x17, 0x42,
		0x90, 0x5b, 0x2d, 0x95, 0x2b, 0xab, 0xea, 0xfa, 0xc6, 0x56, 0x75, 0x7d, 0xad, 0xb4, 0x2a, 0x4b,
		0x1d, 0x99, 0x52, 0xf9, 0xcc, 0x76, 0x55, 0xa9, 0x2c, 0xcb, 0xb1, 0xb0, 0x6c, 0xa3, 0x52, 0xda,
		0xaa, 0x2c, 0xcb, 0xf1, 0x79, 0x1d, 0xa6, 0x07, 0xed, 0x93, 0x03, 0x57, 0x46, 0x68, 0x8a, 0x63,
		0x07, 0x4c, 0x31, 0xe5, 0xea, 0x9b, 0xe2, 0xaf, 0x4a, 0x30, 0x35, 0x20, 0x57, 0x0c, 0xec, 0xe4,
		0x79, 0x48, 0xb2, 0x10, 0x65, 0xd9, 0xf3, 0xc9, 0x81, 0x49, 0x87, 0x06, 0x6c, 0x5f, 0x06, 0xa5,
		0xb8, 0x70, 0x05, 0x11, 0x3f, 0xa0, 0x82, 0x20, 0x14, 0x7d, 0x46, 0xbe, 0x24, 0x41, 0xfe, 0x20,
		0xee, 0x88, 0x8d, 0x22, 0xd6, 0xb5, 0x51, 0x9c, 0xef, 0x35, 0xe0, 0xe8, 0xc1, 0x63, 0xe8, 0xb3,
		0xe2, 0x35, 0x09, 0x8e, 0x0c, 0x2e, 0xb4, 0x06, 0xda, 0xf0, 0x1c, 0x8c, 0x36, 0xb1, 0xbf, 0x67,
		0x8b, 0x62, 0xe3, 0xf1, 0x01, 0x29, 0x8c, 0x34, 0xf7, 0xfa, 0x8a, 0xa3, 0xc2, 0x39, 0x30, 0x7e,
		0x50, 0xb5, 0xc4, 0xac, 0xe9, 0xb3, 0xf4, 0x8b, 0x31, 0x78, 0x60, 0x20, 0xf9, 0x40, 0x43, 0x1f,
		0x01, 0x30, 0x2c, 0xa7, 0xe5, 0xb3, 0x82, 0x82, 0xed, 0x4f, 0x69, 0x2a, 0xa1, 0x6b, 0x9f, 0xec,
		0x3d, 0x2d, 0x3f, 0x68, 0x8f, 0xd3, 0x76, 0x60, 0x22, 0xaa, 0x70, 0xae, 0x63, 0x68, 0x82, 0x1a,
		0x5a, 0x38, 0x60, 0xa4, 0x7d, 0xb9, 0xfa, 0x19, 0x90, 0x75, 0xd3, 0xc0, 0x96, 0xaf, 0x7a, 0xbe,
		0x8b, 0xb5, 0xa6, 0x61, 0x35, 0xe8, 0x06, 0x9c, 0x2a, 0x26, 0x77, 0x35, 0xd3, 0xc3, 0xca, 0x04,
		0x6b, 0xde, 0x14, 0xad, 0x04, 0x41, 0x73, 0x9c, 0x1b, 0x42, 0x8c, 0x76, 0x21, 0x58, 0x73, 0x80,
		0x98, 0xff, 0x76, 0x0a, 0x32, 0xa1, 0xb2, 0x14, 0x1d, 0x85, 0xec, 0x55, 0xed, 0xba, 0xa6, 0x8a,
		0xa3, 0x06, 0xf3, 0x44, 0x86, 0xc8, 0x36, 0xf8, 0x71, 0xe3, 0x19, 0x98, 0xa6, 0x2a, 0x76, 0xcb,
		0xc7, 0xae, 0xaa, 0x9b, 0x9a, 0xe7, 0x51, 0xa7, 0xa5, 0xa8, 0x2a, 0x22, 0x6d, 0xeb, 0xa4, 0x69,
		0x49, 0xb4, 0xa0, 0xd3, 0x30, 0x45, 0x11, 0xcd, 0x96, 0xe9, 0x1b, 0x8e, 0x89, 0x55, 0x72, 0xf8,
		0xf1, 0xe8, 0x46, 0x1c, 0x58, 0x36, 0x49, 0x34, 0x6a, 0x5c, 0x81, 0x58, 0xe4, 0xa1, 0x65, 0x78,
		0x84, 0xc2, 0x1a, 0xd8, 0xc2, 0xae, 0xe6, 0x63, 0x15, 0x7f, 0xae, 0xa5, 0x99, 0x9e, 0xaa, 0x59,
		0x75, 0x75, 0x4f, 0xf3, 0xf6, 0xf2, 0xd3, 0x84, 0xa0, 0x1c, 0xcb, 0x4b, 0xca, 0x43, 0x44, 0x71,
		0x85, 0xeb, 0x55, 0xa8, 0x5a, 0xc9, 0xaa, 0x7f, 0x5a, 0xf3, 0xf6, 0x50, 0x11, 0x8e, 0x50, 0x16,
		0xcf, 0x77, 0x0d, 0xab, 0xa1, 0xea, 0x7b, 0x58, 0xbf, 0xa6, 0xb6, 0xfc, 0xdd, 0x73, 0xf9, 0x87,
		0xc3, 0xfd, 0x53, 0x0b, 0x37, 0xa9, 0xce, 0x12, 0x51, 0xd9, 0xf6, 0x77, 0xcf, 0xa1, 0x4d, 0xc8,
		0x92, 0xc9, 0x68, 0x1a, 0x37, 0xb1, 0xba, 0x6b, 0xbb, 0x34, 0xb3, 0xe4, 0x06, 0xac, 0xec, 0x90,
		0x07, 0x17, 0xd7, 0x39, 0xa0, 0x66, 0xd7, 0x71, 0x31, 0xb9, 0xb9, 0x51, 0xa9, 0x2c, 0x2b, 0x19,
		0xc1, 0x72, 0xc1, 0x76, 0x49, 0x40, 0x35, 0xec, 0xc0, 0xc1, 0x19, 0x16, 0x50, 0x0d, 0x5b, 0xb8,
		0xf7, 0x34, 0x4c, 0xe9, 0x3a, 0x1b, 0xb3, 0xa1, 0xab, 0xfc, 0x88, 0xe2, 0xe5, 0xe5, 0x2e, 0x67,
		0xe9, 0xfa, 0x0a, 0x53, 0xe0, 0x31, 0xee, 0xa1, 0x67, 0xe1, 0x81, 0x8e, 0xb3, 0xc2, 0xc0, 0xc9,
		0xbe, 0x51, 0xf6, 0x42, 0x4f, 0xc3, 0x94, 0xd3, 0xee, 0x07, 0xa2, 0xae, 0x1e, 0x9d, 0x76, 0x2f,
		0xec, 0x2c, 0x4c, 0x3b, 0x7b, 0x4e, 0x3f, 0x6e, 0x2a, 0x8c, 0x43, 0xce, 0x9e, 0xd3, 0x0b, 0x7c,
		0x8c, 0x9e, 0x57, 0x5d, 0xac, 0x6b, 0x3e, 0xae, 0xe7, 0x1f, 0x0c, 0xab, 0x87, 0x1a, 0xd0, 0x71,
		0x90, 0x75, 0x5d, 0xc5, 0x96, 0xb6, 0x63, 0x62, 0x55, 0x73, 0xb1, 0xa5, 0x79, 0xf9, 0xd9, 0xb0,
		0x72, 0x4e, 0xd7, 0x2b, 0xb4, 0xb5, 0x44, 0x1b, 0xd1, 0x53, 0x30, 0x69, 0xef, 0x5c, 0xd5, 0x59,
		0x48, 0xaa, 0x8e, 0x8b, 0x77, 0x8d, 0x17, 0xf3, 0x8f, 0x52, 0xff, 0x4e, 0x90, 0x06, 0x1a, 0x90,
		0x1b, 0x54, 0x8c, 0x9e, 0x04, 0x59, 0xf7, 0xf6, 0x34, 0xd7, 0xa1, 0x35, 0x81, 0xe7, 0x68, 0x3a,
		0xce, 0x3f, 0xc6, 0x54, 0x99, 0x7c, 0x4d, 0x88, 0xc9, 0x92, 0xf0, 0x6e, 0x18, 0xbb, 0xbe, 0x60,
		0x7c, 0x82, 0x2d, 0x09, 0x2a, 0xe3, 0x6c, 0x0b, 0x20, 0x13, 0x57, 0x74, 0x75, 0xbc, 0x40, 0xd5,
		0x72, 0xce, 0x9e, 0x13, 0xee, 0xf7, 0x18, 0x8c, 0x13, 0xcd, 0x4e, 0xa7, 0x4f, 0xb2, 0x7a, 0xc6,
		0xd9, 0x0b, 0xf5, 0xf8, 0xa1, 0x95, 0x96, 0xf3, 0x45, 0xc8, 0x86, 0xe3, 0x13, 0xa5, 0x81, 0x45,
		0xa8, 0x2c, 0x91, 0x5c, 0xbf, 0xb4, 0xbe, 0x4c, 0xb2, 0xf4, 0x0b, 0x15, 0x39, 0x46, 0xaa, 0x85,
		0xd5, 0xea, 0x56, 0x45, 0x55, 0xb6, 0xd7, 0xb6, 0xaa, 0xb5, 0x8a, 0x1c, 0x0f, 0x97, 0xa5, 0xdf,
		0x8f, 0x41, 0xae, 0xfb, 0x84, 0x81, 0x3e, 0x09, 0x0f, 0x8a, 0xeb, 0x00, 0x0f, 0xfb, 0xea, 0x0d,
		0xc3, 0xa5, 0x4b, 0xa6, 0xa9, 0xb1, 0x0a, 0x3b, 0x98, 0xb4, 0x69, 0xae, 0xb5, 0x89, 0xfd, 0x4b,
		0x86, 0x4b, 0x16, 0x44, 0x53, 0xf3, 0xd1, 0x2a, 0xcc, 0x5a, 0xb6, 0xea, 0xf9, 0x9a, 0x55, 0xd7,
		0xdc, 0xba, 0xda, 0xb9, 0x88, 0x51, 0x35, 0x5d, 0xc7, 0x9e, 0x67, 0xb3, 0x54, 0x15, 0xb0, 0x7c,
		0xcc, 0xb2, 0x37, 0xb9, 0x72, 0x67, 0x0f, 0x2f, 0x71, 0xd5, 0x9e, 0x00, 0x8b, 0x1f, 0x14, 0x60,
		0x0f, 0x43, 0xba, 0xa9, 0x39, 0x2a, 0xb6, 0x7c, 0xb7, 0x4d, 0xeb, 0xca, 0x94, 0x92, 0x6a, 0x6a,
		0x4e, 0x85, 0x3c, 0x7f, 0x34, 0xe5, 0xfd, 0xbf, 0xc4, 0x21, 0x1b, 0xae, 0x2d, 0x49, 0xa9, 0xae,
		0xd3, 0x3c, 0x22, 0xd1, 0x9d, 0xe6, 0xd8, 0x3d, 0x2b, 0xd1, 0xc5, 0x25, 0x92, 0x60, 0x8a, 0xa3,
		0xac, 0xe2, 0x53, 0x18, 0x92, 0x24, 0x77, 0xb2, 0xb7, 0x60, 0x76, 0x8a, 0x49, 0x29, 0xfc, 0x09,
		0xad, 0xc0, 0xe8, 0x55, 0x8f, 0x72, 0x8f, 0x52, 0xee, 0x47, 0xef, 0xcd, 0x7d, 0x71, 0x93, 0x92,
		0xa7, 0x2f, 0x6e, 0xaa, 0x6b, 0xeb, 0x4a, 0xad, 0xb4, 0xaa, 0x70, 0x38, 0x7a, 0x08, 0x12, 0xa6,
		0x76, 0xb3, 0xdd, 0x9d, 0x8a, 0xa8, 0x68, 0x58, 0xc7, 0x3f, 0x04, 0x89, 0x1b, 0x58, 0xbb, 0xd6,
		0x9d, 0x00, 0xa8, 0xe8, 0x43, 0x0c, 0xfd, 0xe3, 0x90, 0xa4, 0xfe, 0x42, 0x00, 0xdc, 0x63, 0xf2,
		0x08, 0x4a, 0x41, 0x62, 0x69, 0x5d, 0x21, 0xe1, 0x2f, 0x43, 0x96, 0x49, 0xd5, 0x8d, 0x6a, 0x65,
		0xa9, 0x22, 0xc7, 0xe6, 0x4f, 0xc3, 0x28, 0x73, 0x02, 0x59, 0x1a, 0x81, 0x1b, 0xe4, 0x11, 0xfe,
		0xc8, 0x39, 0x24, 0xd1, 0xba, 0x5d, 0x2b, 0x57, 0x14, 0x39, 0x16, 0x9e, 0x5e, 0x0f, 0xb2, 0xe1,
		0xb2, 0xf2, 0xa3, 0x89, 0xa9, 0xbf, 0x97, 0x20, 0x13, 0x2a, 0x13, 0x49, 0x81, 0xa2, 0x99, 0xa6,
		0x7d, 0x43, 0xd5, 0x4c, 0x43, 0xf3, 0x78, 0x50, 0x00, 0x15, 0x95, 0x88, 0x64, 0xd8, 0x49, 0xfb,
		0x48, 0x8c, 0x7f, 0x55, 0x02, 0xb9, 0xb7, 0xc4, 0xec, 0x31, 0x50, 0xfa, 0x99, 0x1a, 0xf8, 0x8a,
		0x04, 0xb9, 0xee, 0xba, 0xb2, 0xc7, 0xbc, 0xa3, 0x3f, 0x53, 0xf3, 0xde, 0x8a, 0xc1, 0x78, 0x57,
		0x35, 0x39, 0xac, 0x75, 0x9f, 0x83, 0x49, 0xa3, 0x8e, 0x9b, 0x8e, 0xed, 0x63, 0x4b, 0x6f, 0xab,
		0x26, 0xbe, 0x8e, 0xcd, 0xfc, 0x3c, 0xdd, 0x28, 0x8e, 0xdf, 0xbb, 0x5e, 0x5d, 0xac, 0x76, 0x70,
		0xab, 0x04, 0x56, 0x9c, 0xaa, 0x2e, 0x57, 0x6a, 0x1b, 0xeb, 0x5b, 0x95, 0xb5, 0xa5, 0x2b, 0xea,
		0xf6, 0xda, 0xff, 0x5f, 0x5b, 0xbf, 0xb4, 0xa6, 0xc8, 0x46, 0x8f, 0xda, 0x87, 0xb8, 0xd4, 0x37,
		0x40, 0xee, 0x35, 0x0a, 0x3d, 0x08, 0x83, 0xcc, 0x92, 0x47, 0xd0, 0x14, 0x4c, 0xac, 0xad, 0xab,
		0x9b, 0xd5, 0xe5, 0x8a, 0x5a, 0xb9, 0x70, 0xa1, 0xb2, 0xb4, 0xb5, 0xc9, 0x0e, 0xf0, 0x81, 0xf6,
		0x56, 0xf7, 0xa2, 0x7e, 0x39, 0x0e, 0x53, 0x03, 0x2c, 0x41, 0x25, 0x7e, 0x76, 0x60, 0xc7, 0x99,
		0x4f, 0x0c, 0x63, 0xfd, 0x22, 0x49, 0xf9, 0x1b, 0x9a, 0xeb, 0xf3, 0xa3, 0xc6, 0x93, 0x40, 0xbc,
		0x64, 0xf9, 0xc6, 0xae, 0x81, 0x5d, 0x7e, 0xdf, 0xc1, 0x0e, 0x14, 0x13, 0x1d, 0x39, 0xbb, 0xf2,
		0xf8, 0x38, 0x20, 0xc7, 0xf6, 0x0c, 0xdf, 0xb8, 0x8e, 0x55, 0xc3, 0x12, 0x97, 0x23, 0xe4, 0x80,
		0x91, 0x50, 0x64, 0xd1, 0x52, 0xb5, 0xfc, 0x40, 0xdb, 0xc2, 0x0d, 0xad, 0x47, 0x9b, 0x6c, 0xe0,
		0x71, 0x45, 0x16, 0x2d, 0x81, 0xf6, 0x51, 0xc8, 0xd6, 0xed, 0x16, 0xa9, 0xba, 0x98, 0x1e, 0xc9,
		0x17, 0x92, 0x92, 0x61, 0xb2, 0x40, 0x85, 0xd7, 0xd3, 0x9d, 0x5b, 0x99, 0xac, 0x92, 0x61, 0x32,
		0xa6, 0xf2, 0x04, 0x4c, 0x68, 0x8d, 0x86, 0x4b, 0xc8, 0x05, 0x11, 0x3b, 0x21, 0xe4, 0x02, 0x31,
		0x55, 0x9c, 0xb9, 0x08, 0x29, 0xe1, 0x07, 0x92, 0x92, 0x89, 0x27, 0x54, 0x87, 0xdd, 0xcc, 0xc5,
		0x16, 0xd2, 0x4a, 0xca, 0x12, 0x8d, 0x47, 0x21, 0x6b, 0x78, 0x6a, 0xe7, 0x92, 0x39, 0x36, 0x17,
		0x5b, 0x48, 0x29, 0x19, 0xc3, 0x0b, 0x2e, 0xe8, 0xe6, 0x5f, 0x8b, 0x41, 0xae, 0xfb, 0x92, 0x1c,
		0x2d, 0x43, 0xca, 0xb4, 0x75, 0x8d, 0x86, 0x16, 0x7b, 0x43, 0xb3, 0x10, 0x71, 0xaf, 0xbe, 0xb8,
		0xca, 0xf5, 0x95, 0x00, 0x39, 0xf3, 0x4f, 0x12, 0xa4, 0x84, 0x18, 0x1d, 0x81, 0x84, 0xa3, 0xf9,
		0x7b, 0x94, 0x2e, 0x59, 0x8e, 0xc9, 0x92, 0x42, 0x9f, 0x89, 0xdc, 0x73, 0x34, 0x8b, 0x86, 0x00,
		0x97, 0x93, 0x67, 0x32, 0xaf, 0x26, 0xd6, 0xea, 0xf4, 0xf8, 0x61, 0x37, 0x9b, 0xd8, 0xf2, 0x3d,
		0x31, 0xaf, 0x5c, 0xbe, 0xc4, 0xc5, 0xe8, 0x69, 0x98, 0xf4, 0x5d, 0xcd, 0x30, 0xbb, 0x74, 0x13,
		0x54, 0x57, 0x16, 0x0d, 0x81, 0x72, 0x11, 0x1e, 0x12, 0xbc, 0x75, 0xec, 0x6b, 0xfa, 0x1e, 0xae,
		0x77, 0x40, 0xa3, 0xf4, 0x06, 0xf6, 0x41, 0xae, 0xb0, 0xcc, 0xdb, 0x05, 0x76, 0xfe, 0x87, 0x12,
		0x4c, 0x8a, 0x03, 0x53, 0x3d, 0x70, 0x56, 0x0d, 0x40, 0xb3, 0x2c, 0xdb, 0x0f, 0xbb, 0xab, 0x3f,
		0x94, 0xfb, 0x70, 0x8b, 0xa5, 0x00, 0xa4, 0x84, 0x08, 0x66, 0x9a, 0x00, 0x9d, 0x96, 0x03, 0xdd,
		0x36, 0x0b, 0x19, 0xfe, 0x06, 0x84, 0xbe, 0x46, 0x63, 0x47, 0x6c, 0x60, 0x22, 0x72, 0xb2, 0x42,
		0xd3, 0x90, 0xdc, 0xc1, 0x0d, 0xc3, 0xe2, 0xf7, 0x9a, 0xec, 0x41, 0xdc, 0xd5, 0x26, 0x82, 0xbb,
		0xda, 0xf2, 0x65, 0x98, 0xd2, 0xed, 0x66, 0xaf, 0xb9, 0x65, 0xb9, 0xe7, 0x98, 0xef, 0x7d, 0x5a,
		0x7a, 0x01, 0x3a, 0x25, 0xe6, 0x57, 0x63, 0xf1, 0x95, 0x8d, 0xf2, 0xd7, 0x63, 0x33, 0x2b, 0x0c,
		0xb7, 0x21, 0x86, 0xa9, 0xe0, 0x5d, 0x13, 0xeb, 0xc4, 0x74, 0xf8, 0xf1, 0xe3, 0xf0, 0x89, 0x86,
		0xe1, 0xef, 0xb5, 0x76, 0x16, 0x75, 0xbb, 0x79, 0xbc, 0x61, 0x37, 0xec, 0xce, 0x6b, 0x43, 0xf2,
		0x44, 0x1f, 0xe8, 0x2f, 0xfe, 0xea, 0x30, 0x1d, 0x48, 0x67, 0x22, 0xdf, 0x33, 0x16, 0xd7, 0x60,
		0x8a, 0x2b, 0xab, 0xf4, 0xdd, 0x05, 0x3b, 0x42, 0xa0, 0x7b, 0xde, 0xff, 0xe4, 0xbf, 0xf5, 0x36,
		0xcd, 0xd5, 0xca, 0x24, 0x87, 0x92, 0x36, 0x76, 0xca, 0x28, 0x2a, 0xf0, 0x40, 0x17, 0x1f, 0x5b,
		0x97, 0xd8, 0x8d, 0x60, 0xfc, 0x3e, 0x67, 0x9c, 0x0a, 0x31, 0x6e, 0x72, 0x68, 0x71, 0x09, 0xc6,
		0x0f, 0xc3, 0xf5, 0x0f, 0x9c, 0x2b, 0x8b, 0xc3, 0x24, 0x2b, 0x30, 0x41, 0x49, 0xf4, 0x96, 0xe7,
		0xdb, 0x4d, 0xba, 0xe9, 0xdd, 0x9b, 0xe6, 0x1f, 0xdf, 0x66, 0x0b, 0x25, 0x47, 0x60, 0x4b, 0x01,
		0xaa, 0x58, 0x04, 0xfa, 0xba, 0xa6, 0x8e, 0x75, 0x33, 0x82, 0xe1, 0x0d, 0x6e, 0x48, 0xa0, 0x5f,
		0xfc, 0x2c, 0x4c, 0x93, 0xdf, 0x74, 0x4f, 0x0a, 0x5b, 0x12, 0x7d, 0xdb, 0x95, 0xff, 0xe1, 0x4b,
		0x6c, 0x2d, 0x4e, 0x05, 0x04, 0x21, 0x9b, 0x42, 0xb3, 0xd8, 0xc0, 0xbe, 0x8f, 0x5d, 0x4f, 0xd5,
		0xcc, 0x41, 0xe6, 0x85, 0xae, 0x0b, 0xf2, 0x5f, 0x7e, 0xb7, 0x7b, 0x16, 0x57, 0x18, 0xb2, 0x64,
		0x9a, 0xc5, 0x6d, 0x78, 0x70, 0x40, 0x54, 0x0c, 0xc1, 0xf9, 0x32, 0xe7, 0x9c, 0xee, 0x8b, 0x0c,
		0x42, 0xbb, 0x01, 0x42, 0x1e, 0xcc, 0xe5, 0x10, 0x9c, 0x7f, 0xc0, 0x39, 0x11, 0xc7, 0x8a, 0x29,
		0x25, 0x8c, 0x17, 0x61, 0xf2, 0x3a, 0x76, 0x77, 0x6c, 0x8f, 0x5f, 0xd1, 0x0c, 0x41, 0xf7, 0x0a,
		0xa7, 0x9b, 0xe0, 0x40, 0x7a, 0x67, 0x43, 0xb8, 0x9e, 0x85, 0xd4, 0xae, 0xa6, 0xe3, 0x21, 0x28,
		0xbe, 0xc2, 0x29, 0xc6, 0x88, 0x3e, 0x81, 0x96, 0x20, 0xdb, 0xb0, 0x79, 0x5a, 0x8a, 0x86, 0xbf,
		0xca, 0xe1, 0x19, 0x81, 0xe1, 0x14, 0x8e, 0xed, 0xb4, 0x4c, 0x92, 0xb3, 0xa2, 0x29, 0xfe, 0x50,
		0x50, 0x08, 0x0c, 0xa7, 0x38, 0x84, 0x5b, 0xff, 0x48, 0x50, 0x78, 0x21, 0x7f, 0x3e, 0x0f, 0x19,
		0xdb, 0x32, 0xdb, 0xb6, 0x35, 0x8c, 0x11, 0x7f, 0xcc, 0x19, 0x80, 0x43, 0x08, 0xc1, 0x79, 0x48,
		0x0f, 0x3b, 0x11, 0x7f, 0xf2, 0xae, 0x58, 0x1e, 0x62, 0x06, 0x56, 0x60, 0x42, 0x6c, 0x50, 0x86,
		0x6d, 0x0d, 0x41, 0xf1, 0xa7, 0x9c, 0x22, 0x17, 0x82, 0xf1, 0x61, 0xf8, 0xd8, 0xf3, 0x1b, 0x78,
		0x18, 0x92, 0xd7, 0xc4, 0x30, 0x38, 0x84, 0xbb, 0x72, 0x07, 0x5b, 0xfa, 0xde, 0x70, 0x0c, 0x5f,
		0x13, 0xae, 0x14, 0x18, 0x42, 0xb1, 0x04, 0xe3, 0x4d, 0xcd, 0xf5, 0xf6, 0x34, 0x73, 0xa8, 0xe9,
		0xf8, 0x33, 0xce, 0x91, 0x0d, 0x40, 0xdc, 0x23, 0x2d, 0xeb, 0x30, 0x34, 0x5f, 0x17, 0x1e, 0x09,
		0xc1, 0xf8, 0xd2, 0xf3, 0x7c, 0x7a, 0x9f, 0x75, 0x18, 0xb6, 0x6f, 0x88, 0xa5, 0xc7, 0xb0, 0xb5,
		0x30, 0xe3, 0x79, 0x48, 0x7b, 0xc6, 0xcd, 0xa1, 0x68, 0xfe, 0x5c, 0xcc, 0x34, 0x05, 0x10, 0xf0,
		0x15, 0x78, 0x68, 0x60, 0x9a, 0x18, 0x82, 0xec, 0x2f, 0x38, 0xd9, 0x91, 0x01, 0xa9, 0x82, 0x6f,
		0x09, 0x87, 0xa5, 0xfc, 0x4b, 0xb1, 0x25, 0xe0, 0x1e, 0xae, 0x0d, 0x72, 0x50, 0xf0, 0xb4, 0xdd,
		0xc3, 0x79, 0xed, 0xaf, 0x84, 0xd7, 0x18, 0xb6, 0xcb, 0x6b, 0x5b, 0x70, 0x84, 0x33, 0x1e, 0x6e,
		0x5e, 0xbf, 0x29, 0x36, 0x56, 0x86, 0xde, 0xee, 0x9e, 0xdd, 0x9f, 0x83, 0x99, 0xc0, 0x9d, 0xa2,
		0x22, 0xf5, 0xd4, 0xa6, 0xe6, 0x0c, 0xc1, 0xfc, 0x2d, 0xce, 0x2c, 0x76, 0xfc, 0xa0, 0xa4, 0xf5,
		0x6a, 0x9a, 0x43, 0xc8, 0x2f, 0x43, 0x5e, 0x90, 0xb7, 0x2c, 0x17, 0xeb, 0x76, 0xc3, 0x32, 0x6e,
		0xe2, 0xfa, 0x10, 0xd4, 0x7f, 0xdd, 0x33, 0x55, 0xdb, 0x21, 0x38, 0x61, 0xae, 0x82, 0x1c, 0xd4,
		0x2a, 0xaa, 0xd1, 0x74, 0x6c, 0xd7, 0x8f, 0x60, 0xfc, 0xb6, 0x98, 0xa9, 0x00, 0x57, 0xa5, 0xb0,
		0x62, 0x05, 0x72, 0xf4, 0x71, 0xd8, 0x90, 0xfc, 0x1b, 0x4e, 0x34, 0xde, 0x41, 0xf1, 0x8d, 0x43,
		0xb7, 0x9b, 0x8e, 0xe6, 0x0e, 0xb3, 0xff, 0x7d, 0x47, 0x6c, 0x1c, 0x1c, 0xc2, 0x37, 0x0e, 0xbf,
		0xed, 0x60, 0x92, 0xed, 0x87, 0x60, 0x78, 0x5d, 0x6c, 0x1c, 0x02, 0xc3, 0x29, 0x44, 0xc1, 0x30,
		0x04, 0xc5, 0xdf, 0x0a, 0x0a, 0x81, 0x21, 0x14, 0x9f, 0xe9, 0x24, 0x5a, 0x17, 0x37, 0x0c, 0xcf,
		0x77, 0x59, 0x1d, 0x7c, 0x6f, 0xaa, 0xef, 0xbe, 0xdb, 0x5d, 0x84, 0x29, 0x21, 0x68, 0xf1, 0x22,
		0x4c, 0xf4, 0x94, 0x18, 0x28, 0xea, 0xdb, 0x8f, 0xfc, 0x2f, 0xbe, 0xcf, 0x37, 0xa3, 0xee, 0x0a,
		0xa3, 0xb8, 0x4a, 0xe6, 0xbd, 0xbb, 0x0e, 0x88, 0x26, 0x7b, 0xe9, 0xfd, 0x60, 0xea, 0xbb, 0xca,
		0x80, 0xe2, 0x05, 0x18, 0xef, 0xaa, 0x01, 0xa2, 0xa9, 0x7e, 0x89, 0x53, 0x65, 0xc3, 0x25, 0x40,
		0xf1, 0x34, 0x24, 0x48, 0x3e, 0x8f, 0x86, 0xff, 0x32, 0x87, 0x53, 0xf5, 0xe2, 0xa7, 0x20, 0x25,
		0xf2, 0x78, 0x34, 0xf4, 0x57, 0x38, 0x34, 0x80, 0x10, 0xb8, 0xc8, 0xe1, 0xd1, 0xf0, 0x2f, 0x08,
		0xb8, 0x80, 0x10, 0xf8, 0xf0, 0x2e, 0xfc, 0xde, 0xaf, 0x25, 0xf8, 0x3e, 0x2c, 0x7c, 0x77, 0x1e,
		0xc6, 0x78, 0xf2, 0x8e, 0x46, 0x7f, 0x91, 0x77, 0x2e, 0x10, 0xc5, 0xb3, 0x90, 0x1c, 0xd2, 0xe1,
		0xbf, 0xce, 0xa1, 0x4c, 0xbf, 0xb8, 0x04, 0x99, 0x50, 0xc2, 0x8e, 0x86, 0xff, 0x06, 0x87, 0x87,
		0x51, 0xc4, 0x74, 0x9e, 0xb0, 0xa3, 0x09, 0x7e, 0x53, 0x98, 0xce, 0x11, 0xc4, 0x6d, 0x22, 0x57,
		0x47, 0xa3, 0x7f, 0x4b, 0x78, 0x5d, 0x40, 0x8a, 0xcf, 0x43, 0x3a, 0xd8, 0x7f, 0xa3, 0xf1, 0xbf,
		0xcd, 0xf1, 0x1d, 0x0c, 0xf1, 0x40, 0x68, 0xff, 0x8f, 0xa6, 0xf8, 0x1d, 0xe1, 0x81, 0x10, 0x8a,
		0x2c, 0xa3, 0xde, 0x9c, 0x1e, 0xcd, 0xf4, 0xbb, 0x62, 0x19, 0xf5, 0xa4, 0x74, 0x32, 0x9b, 0x74,
		0x1b, 0x8c, 0xa6, 0xf8, 0x3d, 0x31, 0x9b, 0x54, 0x9f, 0x98, 0xd1, 0x9b, 0x24, 0xa3, 0x39, 0x7e,
		0x5f, 0x98, 0xd1, 0x93, 0x23, 0x8b, 0x1b, 0x80, 0xfa, 0x13, 0x64, 0x34, 0xdf, 0x97, 0x38, 0xdf,
		0x64, 0x5f, 0x7e, 0x2c, 0x5e, 0x82, 0x23, 0x83, 0x93, 0x63, 0x34, 0xeb, 0x97, 0xdf, 0xef, 0x39,
		0xce, 0x84, 0x73, 0x63, 0x71, 0xab, 0xb3, 0xcb, 0x86, 0x13, 0x63, 0x34, 0xed, 0xcb, 0xef, 0x77,
		0x6f, 0xb4, 0xe1, 0xbc, 0x58, 0x2c, 0x01, 0x74, 0x72, 0x52, 0x34, 0xd7, 0x2b, 0x9c, 0x2b, 0x04,
		0x22, 0x4b, 0x83, 0xa7, 0xa4, 0x68, 0xfc, 0x57, 0xc4, 0xd2, 0xe0, 0x08, 0xb2, 0x34, 0x44, 0x36,
		0x8a, 0x46, 0xbf, 0x2a, 0x96, 0x86, 0x80, 0x14, 0xcf, 0x43, 0xca, 0x6a, 0x99, 0x26, 0x89, 0x2d,
		0x74, 0xef, 0xcf, 0x99, 0xf2, 0x3f, 0xfa, 0x80, 0x83, 0x05, 0xa0, 0x78, 0x1a, 0x92, 0xb8, 0xb9,
		0x83, 0xeb, 0x51, 0xc8, 0x7f, 0xff, 0x40, 0xec, 0x27, 0x44, 0xbb, 0xf8, 0x3c, 0x00, 0x3b, 0x4c,
		0xd3, 0xb7, 0x44, 0x11, 0xd8, 0xff, 0xf8, 0x80, 0x7f, 0x29, 0xd1, 0x81, 0x74, 0x08, 0xd8, 0x77,
		0x17, 0xf7, 0x26, 0x78, 0xb7, 0x9b, 0x80, 0x1e, 0xc0, 0x9f, 0x85, 0xb1, 0xab, 0x9e, 0x6d, 0xf9,
		0x5a, 0x23, 0x0a, 0xfd, 0x9f, 0x1c, 0x2d, 0xf4, 0x89, 0xc3, 0x9a, 0xb6, 0x8b, 0x7d, 0xad, 0xe1,
		0x45, 0x61, 0xff, 0x8b, 0x63, 0x03, 0x00, 0x01, 0xeb, 0x9a, 0xe7, 0x0f, 0x33, 0xee, 0xff, 0x16,
		0x60, 0x01, 0x20, 0x46, 0x93, 0xdf, 0xd7, 0x70, 0x3b, 0x0a, 0xfb, 0x9e, 0x30, 0x9a, 0xeb, 0x17,
		0x3f, 0x05, 0x69, 0xf2, 0x93, 0x7d, 0x3d, 0x14, 0x01, 0xfe, 0x1f, 0x0e, 0xee, 0x20, 0x48, 0xcf,
		0x9e, 0x5f, 0xf7, 0x8d, 0x68, 0x67, 0xff, 0x2f, 0x9f, 0x69, 0xa1, 0x5f, 0x2c, 0x41, 0xc6, 0xf3,
		0xeb, 0xf5, 0x16, 0xaf, 0x68, 0x22, 0xe0, 0x3f, 0xfe, 0x20, 0x38, 0xe4, 0x06, 0x98, 0xf2, 0xd1,
		0xc1, 0x97, 0x75, 0xb0, 0x62, 0xaf, 0xd8, 0xec, 0x9a, 0x0e, 0x5e, 0x9f, 0x80, 0xa3, 0xba, 0xdd,
		0xdc, 0xb1, 0xbd, 0xe3, 0xa1, 0x6d, 0xe8, 0xb8, 0x70, 0x1d, 0xbf, 0x69, 0x0b, 0x5c, 0x39, 0x73,
		0xb8, 0x2b, 0xba, 0xf9, 0x1f, 0x8d, 0x43, 0x6a, 0x49, 0xf3, 0x7c, 0xed, 0x86, 0xd6, 0x46, 0x8f,
		0x41, 0xaa, 0x6a, 0xf9, 0x27, 0x4f, 0x6c, 0xf8, 0x2e, 0x7d, 0xc5, 0x14, 0x2f, 0xa7, 0xef, 0xde,
		0x9e, 0x4d, 0x1a, 0x44, 0xa6, 0x04, 0x4d, 0xe8, 0x18, 0x24, 0xe9, 0x6f, 0x7a, 0x4b, 0x19, 0x2f,
		0x8f, 0xbf, 0x71, 0x7b, 0x76, 0xa4, 0xa3, 0xc7, 0xda, 0xd0, 0x15, 0xc8, 0xd4, 0xda, 0xdb, 0x86,
		0xe5, 0x9f, 0x39, 0x45, 0xe8, 0xc8, 0xe0, 0x13, 0xe5, 0xb3, 0x77, 0x6f, 0xcf, 0x9e, 0x3c, 0xd0,
		0x40, 0x92, 0x12, 0x3b, 0x03, 0x13, 0x68, 0xfa, 0x05, 0x65, 0x98, 0x0b, 0x5d, 0x82, 0x94, 0x78,
		0x64, 0xb7, 0xfd, 0xe5, 0xf3, 0xdc, 0x84, 0xfb, 0xe2, 0x0e, 0xc8, 0xd0, 0xcf, 0x43, 0xb6, 0xd6,
		0xbe, 0x60, 0xda, 0x1a, 0xf7, 0x41, 0x72, 0x4e, 0x5a, 0x88, 0x95, 0xcf, 0xdd, 0xbd, 0x3d, 0x7b,
		0x6a, 0x68, 0x62, 0x0e, 0xa7, 0xcc, 0x5d, 0x6c, 0xe8, 0x05, 0x48, 0x07, 0xcf, 0xf4, 0x7d, 0x42,
		0xac, 0xfc, 0x49, 0x6e, 0xf7, 0xfd, 0xd1, 0x77, 0xe8, 0x42, 0x96, 0x33, 0x77, 0x8f, 0xcd, 0x49,
		0x0b, 0xd2, 0xfd, 0x58, 0xce, 0x7d, 0xd2, 0xc5, 0x16, 0xb2, 0xfc, 0xcc, 0x29, 0xfa, 0x02, 0x43,
		0xba, 0x5f, 0xcb, 0x39, 0x7d, 0x87, 0x0e, 0x5d, 0x84, 0xb1, 0x5a, 0xbb, 0xdc, 0xf6, 0xb1, 0x47,
		0xbf, 0x2c, 0xca, 0x96, 0x9f, 0xb9, 0x7b, 0x7b, 0xf6, 0xe3, 0x43, 0xb2, 0x52, 0x9c, 0x22, 0x08,
		0xd0, 0x1c, 0x64, 0xd6, 0x6c, 0xb7, 0xa9, 0x99, 0x8c, 0x0f, 0xd8, 0x0b, 0x99, 0x90, 0x08, 0x6d,
		0x93, 0x91, 0xb0, 0xd9, 0xf6, 0xe8, 0xff, 0x74, 0xfc, 0x14, 0x31, 0xd9, 0x61, 0x42, 0x06, 0x24,
		0x6b, 0xed, 0x9a, 0xe6, 0xe4, 0xb3, 0xf4, 0x6d, 0xc1, 0x23, 0x8b, 0x01, 0x42, 0xac, 0xad, 0x45,
		0xda, 0x4e, 0x3f, 0xab, 0x28, 0x9f, 0xba, 0x7b, 0x7b, 0xf6, 0x99, 0xa1, 0x7b, 0xac, 0x69, 0x0e,
		0xed, 0x8e, 0xf5, 0x80, 0xbe, 0x23, 0x91, 0x85, 0xc5, 0x6e, 0x5c, 0x49, 0x8f, 0xe3, 0xb4, 0xc7,
		0x63, 0x03, 0x7b, 0x0c, 0xb4, 0x58, 0xbf, 0xd6, 0xe7, 0xdf, 0x3c, 0xc4, 0x48, 0xd9, 0xa9, 0x86,
		0x74, 0xfd, 0xab, 0x6f, 0xde, 0xf7, 0xa2, 0x0d, 0x2c, 0x40, 0x2f, 0x49, 0x30, 0x5e, 0x6b, 0xaf,
		0xf1, 0xfc, 0x4a, 0x2c, 0xcf, 0xf1, 0x2f, 0xff, 0x07, 0x59, 0x1e, 0xd2, 0x63, 0xb6, 0x9f, 0xf9,
		0xfc, 0x9b, 0xb3, 0x27, 0x86, 0x36, 0x82, 0x6e, 0x41, 0xd4, 0x86, 0xee, 0x3e, 0xd1, 0x17, 0xa8,
		0x15, 0x15, 0x92, 0xab, 0xeb, 0xb8, 0x4e, 0xac, 0x98, 0xb8, 0x87, 0x15, 0x21, 0x3d, 0x66, 0x45,
		0x91, 0x44, 0xfd, 0xfd, 0x5b, 0x12, 0xe2, 0x43, 0xeb, 0x30, 0xca, 0x3c, 0x4c, 0xbf, 0x6a, 0x4b,
		0x1f, 0x32, 0x0c, 0x3b, 0x93, 0xa3, 0x70, 0x9a, 0x99, 0x73, 0x00, 0x9d, 0x18, 0x43, 0x32, 0xc4,
		0xaf, 0xe1, 0x36, 0xff, 0x74, 0x91, 0xfc, 0x44, 0xd3, 0x9d, 0x4f, 0x73, 0xa5, 0x85, 0x04, 0xff,
		0xde, 0xb6, 0x18, 0x3b, 0x27, 0xcd, 0x3c, 0x07, 0x72, 0x6f, 0xac, 0x1c, 0x0a, 0xaf, 0x00, 0xea,
		0x9f, 0xb1, 0x30, 0x43, 0x92, 0x31, 0x3c, 0x1e, 0x66, 0xc8, 0x9c, 0x90, 0x3b, 0x3e, 0xbf, 0x64,
		0x98, 0x9e, 0x6d, 0xf5, 0x71, 0xf6, 0xfa, 0xff, 0xa7, 0xe3, 0x9c, 0x2f, 0xc0, 0x28, 0x13, 0x92,
		0xb1, 0x54, 0x69, 0xfa, 0xa0, 0x59, 0x4e, 0x61, 0x0f, 0xe5, 0xd5, 0x37, 0xee, 0x14, 0x46, 0x7e,
		0x70, 0xa7, 0x30, 0xf2, 0xcf, 0x77, 0x0a, 0x23, 0x6f, 0xdd, 0x29, 0x48, 0xef, 0xdc, 0x29, 0x48,
		0xef, 0xdd, 0x29, 0x48, 0x3f, 0xb9, 0x53, 0x90, 0x6e, 0xed, 0x17, 0xa4, 0xaf, 0xed, 0x17, 0xa4,
		0x6f, 0xee, 0x17, 0xa4, 0xef, 0xee, 0x17, 0xa4, 0xef, 0xed, 0x17, 0xa4, 0x37, 0xf6, 0x0b, 0x23,
		0x3f, 0xd8, 0x2f, 0x48, 0x6f, 0xed, 0x17, 0xa4, 0x77, 0xf6, 0x0b, 0x23, 0xef, 0xed, 0x17, 0xa4,
		0x9f, 0xec, 0x17, 0x46, 0x6e, 0xfd, 0x6b, 0x61, 0xe4, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x23,
		0xb5, 0x7f, 0xa8, 0x5d, 0x37, 0x00, 0x00,
	}
	r := bytes.NewReader(gzipped)
	gzipr, err := compress_gzip.NewReader(r)
	if err != nil {
		panic(err)
	}
	ungzipped, err := io_ioutil.ReadAll(gzipr)
	if err != nil {
		panic(err)
	}
	if err := github_com_gogo_protobuf_proto.Unmarshal(ungzipped, d); err != nil {
		panic(err)
	}
	return d
}
func (this *Castaway) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Castaway)
	if !ok {
		that2, ok := that.(Castaway)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Castaway")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Castaway but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Castaway but is not nil && this == nil")
	}
	if this.Int32Ptr != nil && that1.Int32Ptr != nil {
		if *this.Int32Ptr != *that1.Int32Ptr {
			return fmt.Errorf("Int32Ptr this(%v) Not Equal that(%v)", *this.Int32Ptr, *that1.Int32Ptr)
		}
	} else if this.Int32Ptr != nil {
		return fmt.Errorf("this.Int32Ptr == nil && that.Int32Ptr != nil")
	} else if that1.Int32Ptr != nil {
		return fmt.Errorf("Int32Ptr this(%v) Not Equal that(%v)", this.Int32Ptr, that1.Int32Ptr)
	}
	if this.Int32 != that1.Int32 {
		return fmt.Errorf("Int32 this(%v) Not Equal that(%v)", this.Int32, that1.Int32)
	}
	if this.MyUint64Ptr != nil && that1.MyUint64Ptr != nil {
		if *this.MyUint64Ptr != *that1.MyUint64Ptr {
			return fmt.Errorf("MyUint64Ptr this(%v) Not Equal that(%v)", *this.MyUint64Ptr, *that1.MyUint64Ptr)
		}
	} else if this.MyUint64Ptr != nil {
		return fmt.Errorf("this.MyUint64Ptr == nil && that.MyUint64Ptr != nil")
	} else if that1.MyUint64Ptr != nil {
		return fmt.Errorf("MyUint64Ptr this(%v) Not Equal that(%v)", this.MyUint64Ptr, that1.MyUint64Ptr)
	}
	if this.MyUint64 != that1.MyUint64 {
		return fmt.Errorf("MyUint64 this(%v) Not Equal that(%v)", this.MyUint64, that1.MyUint64)
	}
	if this.MyFloat32Ptr != nil && that1.MyFloat32Ptr != nil {
		if *this.MyFloat32Ptr != *that1.MyFloat32Ptr {
			return fmt.Errorf("MyFloat32Ptr this(%v) Not Equal that(%v)", *this.MyFloat32Ptr, *that1.MyFloat32Ptr)
		}
	} else if this.MyFloat32Ptr != nil {
		return fmt.Errorf("this.MyFloat32Ptr == nil && that.MyFloat32Ptr != nil")
	} else if that1.MyFloat32Ptr != nil {
		return fmt.Errorf("MyFloat32Ptr this(%v) Not Equal that(%v)", this.MyFloat32Ptr, that1.MyFloat32Ptr)
	}
	if this.MyFloat32 != that1.MyFloat32 {
		return fmt.Errorf("MyFloat32 this(%v) Not Equal that(%v)", this.MyFloat32, that1.MyFloat32)
	}
	if this.MyFloat64Ptr != nil && that1.MyFloat64Ptr != nil {
		if *this.MyFloat64Ptr != *that1.MyFloat64Ptr {
			return fmt.Errorf("MyFloat64Ptr this(%v) Not Equal that(%v)", *this.MyFloat64Ptr, *that1.MyFloat64Ptr)
		}
	} else if this.MyFloat64Ptr != nil {
		return fmt.Errorf("this.MyFloat64Ptr == nil && that.MyFloat64Ptr != nil")
	} else if that1.MyFloat64Ptr != nil {
		return fmt.Errorf("MyFloat64Ptr this(%v) Not Equal that(%v)", this.MyFloat64Ptr, that1.MyFloat64Ptr)
	}
	if this.MyFloat64 != that1.MyFloat64 {
		return fmt.Errorf("MyFloat64 this(%v) Not Equal that(%v)", this.MyFloat64, that1.MyFloat64)
	}
	if !bytes.Equal(this.MyBytes, that1.MyBytes) {
		return fmt.Errorf("MyBytes this(%v) Not Equal that(%v)", this.MyBytes, that1.MyBytes)
	}
	if !bytes.Equal(this.NormalBytes, that1.NormalBytes) {
		return fmt.Errorf("NormalBytes this(%v) Not Equal that(%v)", this.NormalBytes, that1.NormalBytes)
	}
	if len(this.MyUint64S) != len(that1.MyUint64S) {
		return fmt.Errorf("MyUint64S this(%v) Not Equal that(%v)", len(this.MyUint64S), len(that1.MyUint64S))
	}
	for i := range this.MyUint64S {
		if this.MyUint64S[i] != that1.MyUint64S[i] {
			return fmt.Errorf("MyUint64S this[%v](%v) Not Equal that[%v](%v)", i, this.MyUint64S[i], i, that1.MyUint64S[i])
		}
	}
	if len(this.MyMap) != len(that1.MyMap) {
		return fmt.Errorf("MyMap this(%v) Not Equal that(%v)", len(this.MyMap), len(that1.MyMap))
	}
	for i := range this.MyMap {
		if this.MyMap[i] != that1.MyMap[i] {
			return fmt.Errorf("MyMap this[%v](%v) Not Equal that[%v](%v)", i, this.MyMap[i], i, that1.MyMap[i])
		}
	}
	if len(this.MyCustomMap) != len(that1.MyCustomMap) {
		return fmt.Errorf("MyCustomMap this(%v) Not Equal that(%v)", len(this.MyCustomMap), len(that1.MyCustomMap))
	}
	for i := range this.MyCustomMap {
		if this.MyCustomMap[i] != that1.MyCustomMap[i] {
			return fmt.Errorf("MyCustomMap this[%v](%v) Not Equal that[%v](%v)", i, this.MyCustomMap[i], i, that1.MyCustomMap[i])
		}
	}
	if len(this.MyNullableMap) != len(that1.MyNullableMap) {
		return fmt.Errorf("MyNullableMap this(%v) Not Equal that(%v)", len(this.MyNullableMap), len(that1.MyNullableMap))
	}
	for i := range this.MyNullableMap {
		if !this.MyNullableMap[i].Equal(that1.MyNullableMap[i]) {
			return fmt.Errorf("MyNullableMap this[%v](%v) Not Equal that[%v](%v)", i, this.MyNullableMap[i], i, that1.MyNullableMap[i])
		}
	}
	if len(this.MyEmbeddedMap) != len(that1.MyEmbeddedMap) {
		return fmt.Errorf("MyEmbeddedMap this(%v) Not Equal that(%v)", len(this.MyEmbeddedMap), len(that1.MyEmbeddedMap))
	}
	for i := range this.MyEmbeddedMap {
		a := this.MyEmbeddedMap[i]
		b := that1.MyEmbeddedMap[i]
		if !(&a).Equal(&b) {
			return fmt.Errorf("MyEmbeddedMap this[%v](%v) Not Equal that[%v](%v)", i, this.MyEmbeddedMap[i], i, that1.MyEmbeddedMap[i])
		}
	}
	if this.String_ != nil && that1.String_ != nil {
		if *this.String_ != *that1.String_ {
			return fmt.Errorf("String_ this(%v) Not Equal that(%v)", *this.String_, *that1.String_)
		}
	} else if this.String_ != nil {
		return fmt.Errorf("this.String_ == nil && that.String_ != nil")
	} else if that1.String_ != nil {
		return fmt.Errorf("String_ this(%v) Not Equal that(%v)", this.String_, that1.String_)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Castaway) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Castaway)
	if !ok {
		that2, ok := that.(Castaway)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Int32Ptr != nil && that1.Int32Ptr != nil {
		if *this.Int32Ptr != *that1.Int32Ptr {
			return false
		}
	} else if this.Int32Ptr != nil {
		return false
	} else if that1.Int32Ptr != nil {
		return false
	}
	if this.Int32 != that1.Int32 {
		return false
	}
	if this.MyUint64Ptr != nil && that1.MyUint64Ptr != nil {
		if *this.MyUint64Ptr != *that1.MyUint64Ptr {
			return false
		}
	} else if this.MyUint64Ptr != nil {
		return false
	} else if that1.MyUint64Ptr != nil {
		return false
	}
	if this.MyUint64 != that1.MyUint64 {
		return false
	}
	if this.MyFloat32Ptr != nil && that1.MyFloat32Ptr != nil {
		if *this.MyFloat32Ptr != *that1.MyFloat32Ptr {
			return false
		}
	} else if this.MyFloat32Ptr != nil {
		return false
	} else if that1.MyFloat32Ptr != nil {
		return false
	}
	if this.MyFloat32 != that1.MyFloat32 {
		return false
	}
	if this.MyFloat64Ptr != nil && that1.MyFloat64Ptr != nil {
		if *this.MyFloat64Ptr != *that1.MyFloat64Ptr {
			return false
		}
	} else if this.MyFloat64Ptr != nil {
		return false
	} else if that1.MyFloat64Ptr != nil {
		return false
	}
	if this.MyFloat64 != that1.MyFloat64 {
		return false
	}
	if !bytes.Equal(this.MyBytes, that1.MyBytes) {
		return false
	}
	if !bytes.Equal(this.NormalBytes, that1.NormalBytes) {
		return false
	}
	if len(this.MyUint64S) != len(that1.MyUint64S) {
		return false
	}
	for i := range this.MyUint64S {
		if this.MyUint64S[i] != that1.MyUint64S[i] {
			return false
		}
	}
	if len(this.MyMap) != len(that1.MyMap) {
		return false
	}
	for i := range this.MyMap {
		if this.MyMap[i] != that1.MyMap[i] {
			return false
		}
	}
	if len(this.MyCustomMap) != len(that1.MyCustomMap) {
		return false
	}
	for i := range this.MyCustomMap {
		if this.MyCustomMap[i] != that1.MyCustomMap[i] {
			return false
		}
	}
	if len(this.MyNullableMap) != len(that1.MyNullableMap) {
		return false
	}
	for i := range this.MyNullableMap {
		if !this.MyNullableMap[i].Equal(that1.MyNullableMap[i]) {
			return false
		}
	}
	if len(this.MyEmbeddedMap) != len(that1.MyEmbeddedMap) {
		return false
	}
	for i := range this.MyEmbeddedMap {
		a := this.MyEmbeddedMap[i]
		b := that1.MyEmbeddedMap[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if this.String_ != nil && that1.String_ != nil {
		if *this.String_ != *that1.String_ {
			return false
		}
	} else if this.String_ != nil {
		return false
	} else if that1.String_ != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Wilson) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Wilson)
	if !ok {
		that2, ok := that.(Wilson)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Wilson")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Wilson but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Wilson but is not nil && this == nil")
	}
	if this.Int64 != nil && that1.Int64 != nil {
		if *this.Int64 != *that1.Int64 {
			return fmt.Errorf("Int64 this(%v) Not Equal that(%v)", *this.Int64, *that1.Int64)
		}
	} else if this.Int64 != nil {
		return fmt.Errorf("this.Int64 == nil && that.Int64 != nil")
	} else if that1.Int64 != nil {
		return fmt.Errorf("Int64 this(%v) Not Equal that(%v)", this.Int64, that1.Int64)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Wilson) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Wilson)
	if !ok {
		that2, ok := that.(Wilson)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Int64 != nil && that1.Int64 != nil {
		if *this.Int64 != *that1.Int64 {
			return false
		}
	} else if this.Int64 != nil {
		return false
	} else if that1.Int64 != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

type CastawayFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetInt32Ptr() *int32
	GetInt32() int32
	GetMyUint64Ptr() *github_com_gogo_protobuf_test_casttype.MyUint64Type
	GetMyUint64() github_com_gogo_protobuf_test_casttype.MyUint64Type
	GetMyFloat32Ptr() *github_com_gogo_protobuf_test_casttype.MyFloat32Type
	GetMyFloat32() github_com_gogo_protobuf_test_casttype.MyFloat32Type
	GetMyFloat64Ptr() *github_com_gogo_protobuf_test_casttype.MyFloat64Type
	GetMyFloat64() github_com_gogo_protobuf_test_casttype.MyFloat64Type
	GetMyBytes() github_com_gogo_protobuf_test_casttype.Bytes
	GetNormalBytes() []byte
	GetMyUint64S() []github_com_gogo_protobuf_test_casttype.MyUint64Type
	GetMyMap() github_com_gogo_protobuf_test_casttype.MyMapType
	GetMyCustomMap() map[github_com_gogo_protobuf_test_casttype.MyStringType]github_com_gogo_protobuf_test_casttype.MyUint64Type
	GetMyNullableMap() map[github_com_gogo_protobuf_test_casttype.MyInt32Type]*Wilson
	GetMyEmbeddedMap() map[github_com_gogo_protobuf_test_casttype.MyInt32Type]Wilson
	GetString_() *github_com_gogo_protobuf_test_casttype.MyStringType
}

func (this *Castaway) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *Castaway) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewCastawayFromFace(this)
}

func (this *Castaway) GetInt32Ptr() *int32 {
	return this.Int32Ptr
}

func (this *Castaway) GetInt32() int32 {
	return this.Int32
}

func (this *Castaway) GetMyUint64Ptr() *github_com_gogo_protobuf_test_casttype.MyUint64Type {
	return this.MyUint64Ptr
}

func (this *Castaway) GetMyUint64() github_com_gogo_protobuf_test_casttype.MyUint64Type {
	return this.MyUint64
}

func (this *Castaway) GetMyFloat32Ptr() *github_com_gogo_protobuf_test_casttype.MyFloat32Type {
	return this.MyFloat32Ptr
}

func (this *Castaway) GetMyFloat32() github_com_gogo_protobuf_test_casttype.MyFloat32Type {
	return this.MyFloat32
}

func (this *Castaway) GetMyFloat64Ptr() *github_com_gogo_protobuf_test_casttype.MyFloat64Type {
	return this.MyFloat64Ptr
}

func (this *Castaway) GetMyFloat64() github_com_gogo_protobuf_test_casttype.MyFloat64Type {
	return this.MyFloat64
}

func (this *Castaway) GetMyBytes() github_com_gogo_protobuf_test_casttype.Bytes {
	return this.MyBytes
}

func (this *Castaway) GetNormalBytes() []byte {
	return this.NormalBytes
}

func (this *Castaway) GetMyUint64S() []github_com_gogo_protobuf_test_casttype.MyUint64Type {
	return this.MyUint64S
}

func (this *Castaway) GetMyMap() github_com_gogo_protobuf_test_casttype.MyMapType {
	return this.MyMap
}

func (this *Castaway) GetMyCustomMap() map[github_com_gogo_protobuf_test_casttype.MyStringType]github_com_gogo_protobuf_test_casttype.MyUint64Type {
	return this.MyCustomMap
}

func (this *Castaway) GetMyNullableMap() map[github_com_gogo_protobuf_test_casttype.MyInt32Type]*Wilson {
	return this.MyNullableMap
}

func (this *Castaway) GetMyEmbeddedMap() map[github_com_gogo_protobuf_test_casttype.MyInt32Type]Wilson {
	return this.MyEmbeddedMap
}

func (this *Castaway) GetString_() *github_com_gogo_protobuf_test_casttype.MyStringType {
	return this.String_
}

func NewCastawayFromFace(that CastawayFace) *Castaway {
	this := &Castaway{}
	this.Int32Ptr = that.GetInt32Ptr()
	this.Int32 = that.GetInt32()
	this.MyUint64Ptr = that.GetMyUint64Ptr()
	this.MyUint64 = that.GetMyUint64()
	this.MyFloat32Ptr = that.GetMyFloat32Ptr()
	this.MyFloat32 = that.GetMyFloat32()
	this.MyFloat64Ptr = that.GetMyFloat64Ptr()
	this.MyFloat64 = that.GetMyFloat64()
	this.MyBytes = that.GetMyBytes()
	this.NormalBytes = that.GetNormalBytes()
	this.MyUint64S = that.GetMyUint64S()
	this.MyMap = that.GetMyMap()
	this.MyCustomMap = that.GetMyCustomMap()
	this.MyNullableMap = that.GetMyNullableMap()
	this.MyEmbeddedMap = that.GetMyEmbeddedMap()
	this.String_ = that.GetString_()
	return this
}

type WilsonFace interface {
	Proto() github_com_gogo_protobuf_proto.Message
	GetInt64() *int64
}

func (this *Wilson) Proto() github_com_gogo_protobuf_proto.Message {
	return this
}

func (this *Wilson) TestProto() github_com_gogo_protobuf_proto.Message {
	return NewWilsonFromFace(this)
}

func (this *Wilson) GetInt64() *int64 {
	return this.Int64
}

func NewWilsonFromFace(that WilsonFace) *Wilson {
	this := &Wilson{}
	this.Int64 = that.GetInt64()
	return this
}

func (this *Castaway) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&casttype.Castaway{")
	if this.Int32Ptr != nil {
		s = append(s, "Int32Ptr: "+valueToGoStringCasttype(this.Int32Ptr, "int32")+",\n")
	}
	s = append(s, "Int32: "+fmt.Sprintf("%#v", this.Int32)+",\n")
	if this.MyUint64Ptr != nil {
		s = append(s, "MyUint64Ptr: "+valueToGoStringCasttype(this.MyUint64Ptr, "github_com_gogo_protobuf_test_casttype.MyUint64Type")+",\n")
	}
	s = append(s, "MyUint64: "+fmt.Sprintf("%#v", this.MyUint64)+",\n")
	if this.MyFloat32Ptr != nil {
		s = append(s, "MyFloat32Ptr: "+valueToGoStringCasttype(this.MyFloat32Ptr, "github_com_gogo_protobuf_test_casttype.MyFloat32Type")+",\n")
	}
	s = append(s, "MyFloat32: "+fmt.Sprintf("%#v", this.MyFloat32)+",\n")
	if this.MyFloat64Ptr != nil {
		s = append(s, "MyFloat64Ptr: "+valueToGoStringCasttype(this.MyFloat64Ptr, "github_com_gogo_protobuf_test_casttype.MyFloat64Type")+",\n")
	}
	s = append(s, "MyFloat64: "+fmt.Sprintf("%#v", this.MyFloat64)+",\n")
	if this.MyBytes != nil {
		s = append(s, "MyBytes: "+valueToGoStringCasttype(this.MyBytes, "github_com_gogo_protobuf_test_casttype.Bytes")+",\n")
	}
	if this.NormalBytes != nil {
		s = append(s, "NormalBytes: "+valueToGoStringCasttype(this.NormalBytes, "byte")+",\n")
	}
	if this.MyUint64S != nil {
		s = append(s, "MyUint64S: "+fmt.Sprintf("%#v", this.MyUint64S)+",\n")
	}
	keysForMyMap := make([]string, 0, len(this.MyMap))
	for k := range this.MyMap {
		keysForMyMap = append(keysForMyMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMyMap)
	mapStringForMyMap := "github_com_gogo_protobuf_test_casttype.MyMapType{"
	for _, k := range keysForMyMap {
		mapStringForMyMap += fmt.Sprintf("%#v: %#v,", k, this.MyMap[k])
	}
	mapStringForMyMap += "}"
	if this.MyMap != nil {
		s = append(s, "MyMap: "+mapStringForMyMap+",\n")
	}
	keysForMyCustomMap := make([]string, 0, len(this.MyCustomMap))
	for k := range this.MyCustomMap {
		keysForMyCustomMap = append(keysForMyCustomMap, string(k))
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMyCustomMap)
	mapStringForMyCustomMap := "map[github_com_gogo_protobuf_test_casttype.MyStringType]github_com_gogo_protobuf_test_casttype.MyUint64Type{"
	for _, k := range keysForMyCustomMap {
		mapStringForMyCustomMap += fmt.Sprintf("%#v: %#v,", k, this.MyCustomMap[github_com_gogo_protobuf_test_casttype.MyStringType(k)])
	}
	mapStringForMyCustomMap += "}"
	if this.MyCustomMap != nil {
		s = append(s, "MyCustomMap: "+mapStringForMyCustomMap+",\n")
	}
	keysForMyNullableMap := make([]int32, 0, len(this.MyNullableMap))
	for k := range this.MyNullableMap {
		keysForMyNullableMap = append(keysForMyNullableMap, int32(k))
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForMyNullableMap)
	mapStringForMyNullableMap := "map[github_com_gogo_protobuf_test_casttype.MyInt32Type]*Wilson{"
	for _, k := range keysForMyNullableMap {
		mapStringForMyNullableMap += fmt.Sprintf("%#v: %#v,", k, this.MyNullableMap[github_com_gogo_protobuf_test_casttype.MyInt32Type(k)])
	}
	mapStringForMyNullableMap += "}"
	if this.MyNullableMap != nil {
		s = append(s, "MyNullableMap: "+mapStringForMyNullableMap+",\n")
	}
	keysForMyEmbeddedMap := make([]int32, 0, len(this.MyEmbeddedMap))
	for k := range this.MyEmbeddedMap {
		keysForMyEmbeddedMap = append(keysForMyEmbeddedMap, int32(k))
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForMyEmbeddedMap)
	mapStringForMyEmbeddedMap := "map[github_com_gogo_protobuf_test_casttype.MyInt32Type]Wilson{"
	for _, k := range keysForMyEmbeddedMap {
		mapStringForMyEmbeddedMap += fmt.Sprintf("%#v: %#v,", k, this.MyEmbeddedMap[github_com_gogo_protobuf_test_casttype.MyInt32Type(k)])
	}
	mapStringForMyEmbeddedMap += "}"
	if this.MyEmbeddedMap != nil {
		s = append(s, "MyEmbeddedMap: "+mapStringForMyEmbeddedMap+",\n")
	}
	if this.String_ != nil {
		s = append(s, "String_: "+valueToGoStringCasttype(this.String_, "github_com_gogo_protobuf_test_casttype.MyStringType")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Wilson) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&casttype.Wilson{")
	if this.Int64 != nil {
		s = append(s, "Int64: "+valueToGoStringCasttype(this.Int64, "int64")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCasttype(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func NewPopulatedCastaway(r randyCasttype, easy bool) *Castaway {
	this := &Castaway{}
	if r.Intn(10) != 0 {
		v1 := int32(r.Int63())
		if r.Intn(2) == 0 {
			v1 *= -1
		}
		this.Int32Ptr = &v1
	}
	this.Int32 = int32(r.Int63())
	if r.Intn(2) == 0 {
		this.Int32 *= -1
	}
	if r.Intn(10) != 0 {
		v2 := github_com_gogo_protobuf_test_casttype.MyUint64Type(uint64(r.Uint32()))
		this.MyUint64Ptr = &v2
	}
	this.MyUint64 = github_com_gogo_protobuf_test_casttype.MyUint64Type(uint64(r.Uint32()))
	if r.Intn(10) != 0 {
		v3 := github_com_gogo_protobuf_test_casttype.MyFloat32Type(r.Float32())
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		this.MyFloat32Ptr = &v3
	}
	this.MyFloat32 = github_com_gogo_protobuf_test_casttype.MyFloat32Type(r.Float32())
	if r.Intn(2) == 0 {
		this.MyFloat32 *= -1
	}
	if r.Intn(10) != 0 {
		v4 := github_com_gogo_protobuf_test_casttype.MyFloat64Type(r.Float64())
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		this.MyFloat64Ptr = &v4
	}
	this.MyFloat64 = github_com_gogo_protobuf_test_casttype.MyFloat64Type(r.Float64())
	if r.Intn(2) == 0 {
		this.MyFloat64 *= -1
	}
	if r.Intn(10) != 0 {
		v5 := r.Intn(100)
		this.MyBytes = make(github_com_gogo_protobuf_test_casttype.Bytes, v5)
		for i := 0; i < v5; i++ {
			this.MyBytes[i] = byte(r.Intn(256))
		}
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(100)
		this.NormalBytes = make([]byte, v6)
		for i := 0; i < v6; i++ {
			this.NormalBytes[i] = byte(r.Intn(256))
		}
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(10)
		this.MyUint64S = make([]github_com_gogo_protobuf_test_casttype.MyUint64Type, v7)
		for i := 0; i < v7; i++ {
			this.MyUint64S[i] = github_com_gogo_protobuf_test_casttype.MyUint64Type(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v8 := r.Intn(10)
		this.MyMap = make(github_com_gogo_protobuf_test_casttype.MyMapType)
		for i := 0; i < v8; i++ {
			v9 := randStringCasttype(r)
			this.MyMap[v9] = uint64(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v10 := r.Intn(10)
		this.MyCustomMap = make(map[github_com_gogo_protobuf_test_casttype.MyStringType]github_com_gogo_protobuf_test_casttype.MyUint64Type)
		for i := 0; i < v10; i++ {
			v11 := github_com_gogo_protobuf_test_casttype.MyStringType(randStringCasttype(r))
			this.MyCustomMap[v11] = github_com_gogo_protobuf_test_casttype.MyUint64Type(uint64(r.Uint32()))
		}
	}
	if r.Intn(10) != 0 {
		v12 := r.Intn(10)
		this.MyNullableMap = make(map[github_com_gogo_protobuf_test_casttype.MyInt32Type]*Wilson)
		for i := 0; i < v12; i++ {
			this.MyNullableMap[github_com_gogo_protobuf_test_casttype.MyInt32Type(int32(r.Int31()))] = NewPopulatedWilson(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v13 := r.Intn(10)
		this.MyEmbeddedMap = make(map[github_com_gogo_protobuf_test_casttype.MyInt32Type]Wilson)
		for i := 0; i < v13; i++ {
			this.MyEmbeddedMap[github_com_gogo_protobuf_test_casttype.MyInt32Type(int32(r.Int31()))] = *NewPopulatedWilson(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v14 := github_com_gogo_protobuf_test_casttype.MyStringType(randStringCasttype(r))
		this.String_ = &v14
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCasttype(r, 17)
	}
	return this
}

func NewPopulatedWilson(r randyCasttype, easy bool) *Wilson {
	this := &Wilson{}
	if r.Intn(10) != 0 {
		v15 := int64(r.Int63())
		if r.Intn(2) == 0 {
			v15 *= -1
		}
		this.Int64 = &v15
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCasttype(r, 2)
	}
	return this
}

type randyCasttype interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneCasttype(r randyCasttype) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringCasttype(r randyCasttype) string {
	v16 := r.Intn(100)
	tmps := make([]rune, v16)
	for i := 0; i < v16; i++ {
		tmps[i] = randUTF8RuneCasttype(r)
	}
	return string(tmps)
}
func randUnrecognizedCasttype(r randyCasttype, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldCasttype(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldCasttype(dAtA []byte, r randyCasttype, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateCasttype(dAtA, uint64(key))
		v17 := r.Int63()
		if r.Intn(2) == 0 {
			v17 *= -1
		}
		dAtA = encodeVarintPopulateCasttype(dAtA, uint64(v17))
	case 1:
		dAtA = encodeVarintPopulateCasttype(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateCasttype(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateCasttype(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateCasttype(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateCasttype(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Castaway) Size() (n int) {
	var l int
	_ = l
	if m.Int32Ptr != nil {
		n += 1 + sovCasttype(uint64(*m.Int32Ptr))
	}
	n += 1 + sovCasttype(uint64(m.Int32))
	if m.MyUint64Ptr != nil {
		n += 1 + sovCasttype(uint64(*m.MyUint64Ptr))
	}
	n += 1 + sovCasttype(uint64(m.MyUint64))
	if m.MyFloat32Ptr != nil {
		n += 5
	}
	n += 5
	if m.MyFloat64Ptr != nil {
		n += 9
	}
	n += 9
	if m.MyBytes != nil {
		l = len(m.MyBytes)
		n += 1 + l + sovCasttype(uint64(l))
	}
	if m.NormalBytes != nil {
		l = len(m.NormalBytes)
		n += 1 + l + sovCasttype(uint64(l))
	}
	if len(m.MyUint64S) > 0 {
		for _, e := range m.MyUint64S {
			n += 1 + sovCasttype(uint64(e))
		}
	}
	if len(m.MyMap) > 0 {
		for k, v := range m.MyMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCasttype(uint64(len(k))) + 1 + sovCasttype(uint64(v))
			n += mapEntrySize + 1 + sovCasttype(uint64(mapEntrySize))
		}
	}
	if len(m.MyCustomMap) > 0 {
		for k, v := range m.MyCustomMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCasttype(uint64(len(k))) + 1 + sovCasttype(uint64(v))
			n += mapEntrySize + 1 + sovCasttype(uint64(mapEntrySize))
		}
	}
	if len(m.MyNullableMap) > 0 {
		for k, v := range m.MyNullableMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCasttype(uint64(l))
			}
			mapEntrySize := 1 + sovCasttype(uint64(k)) + l
			n += mapEntrySize + 1 + sovCasttype(uint64(mapEntrySize))
		}
	}
	if len(m.MyEmbeddedMap) > 0 {
		for k, v := range m.MyEmbeddedMap {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovCasttype(uint64(k)) + 1 + l + sovCasttype(uint64(l))
			n += mapEntrySize + 1 + sovCasttype(uint64(mapEntrySize))
		}
	}
	if m.String_ != nil {
		l = len(*m.String_)
		n += 2 + l + sovCasttype(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Wilson) Size() (n int) {
	var l int
	_ = l
	if m.Int64 != nil {
		n += 1 + sovCasttype(uint64(*m.Int64))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCasttype(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCasttype(x uint64) (n int) {
	return sovCasttype(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Castaway) String() string {
	if this == nil {
		return "nil"
	}
	keysForMyMap := make([]string, 0, len(this.MyMap))
	for k := range this.MyMap {
		keysForMyMap = append(keysForMyMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMyMap)
	mapStringForMyMap := "github_com_gogo_protobuf_test_casttype.MyMapType{"
	for _, k := range keysForMyMap {
		mapStringForMyMap += fmt.Sprintf("%v: %v,", k, this.MyMap[k])
	}
	mapStringForMyMap += "}"
	keysForMyCustomMap := make([]string, 0, len(this.MyCustomMap))
	for k := range this.MyCustomMap {
		keysForMyCustomMap = append(keysForMyCustomMap, string(k))
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForMyCustomMap)
	mapStringForMyCustomMap := "map[github_com_gogo_protobuf_test_casttype.MyStringType]github_com_gogo_protobuf_test_casttype.MyUint64Type{"
	for _, k := range keysForMyCustomMap {
		mapStringForMyCustomMap += fmt.Sprintf("%v: %v,", k, this.MyCustomMap[github_com_gogo_protobuf_test_casttype.MyStringType(k)])
	}
	mapStringForMyCustomMap += "}"
	keysForMyNullableMap := make([]int32, 0, len(this.MyNullableMap))
	for k := range this.MyNullableMap {
		keysForMyNullableMap = append(keysForMyNullableMap, int32(k))
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForMyNullableMap)
	mapStringForMyNullableMap := "map[github_com_gogo_protobuf_test_casttype.MyInt32Type]*Wilson{"
	for _, k := range keysForMyNullableMap {
		mapStringForMyNullableMap += fmt.Sprintf("%v: %v,", k, this.MyNullableMap[github_com_gogo_protobuf_test_casttype.MyInt32Type(k)])
	}
	mapStringForMyNullableMap += "}"
	keysForMyEmbeddedMap := make([]int32, 0, len(this.MyEmbeddedMap))
	for k := range this.MyEmbeddedMap {
		keysForMyEmbeddedMap = append(keysForMyEmbeddedMap, int32(k))
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForMyEmbeddedMap)
	mapStringForMyEmbeddedMap := "map[github_com_gogo_protobuf_test_casttype.MyInt32Type]Wilson{"
	for _, k := range keysForMyEmbeddedMap {
		mapStringForMyEmbeddedMap += fmt.Sprintf("%v: %v,", k, this.MyEmbeddedMap[github_com_gogo_protobuf_test_casttype.MyInt32Type(k)])
	}
	mapStringForMyEmbeddedMap += "}"
	s := strings.Join([]string{`&Castaway{`,
		`Int32Ptr:` + valueToStringCasttype(this.Int32Ptr) + `,`,
		`Int32:` + fmt.Sprintf("%v", this.Int32) + `,`,
		`MyUint64Ptr:` + valueToStringCasttype(this.MyUint64Ptr) + `,`,
		`MyUint64:` + fmt.Sprintf("%v", this.MyUint64) + `,`,
		`MyFloat32Ptr:` + valueToStringCasttype(this.MyFloat32Ptr) + `,`,
		`MyFloat32:` + fmt.Sprintf("%v", this.MyFloat32) + `,`,
		`MyFloat64Ptr:` + valueToStringCasttype(this.MyFloat64Ptr) + `,`,
		`MyFloat64:` + fmt.Sprintf("%v", this.MyFloat64) + `,`,
		`MyBytes:` + valueToStringCasttype(this.MyBytes) + `,`,
		`NormalBytes:` + valueToStringCasttype(this.NormalBytes) + `,`,
		`MyUint64S:` + fmt.Sprintf("%v", this.MyUint64S) + `,`,
		`MyMap:` + mapStringForMyMap + `,`,
		`MyCustomMap:` + mapStringForMyCustomMap + `,`,
		`MyNullableMap:` + mapStringForMyNullableMap + `,`,
		`MyEmbeddedMap:` + mapStringForMyEmbeddedMap + `,`,
		`String_:` + valueToStringCasttype(this.String_) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Wilson) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Wilson{`,
		`Int64:` + valueToStringCasttype(this.Int64) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCasttype(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Castaway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCasttype
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Castaway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Castaway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32Ptr", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasttype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Int32Ptr = &v
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32", wireType)
			}
			m.Int32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasttype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int32 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyUint64Ptr", wireType)
			}
			var v github_com_gogo_protobuf_test_casttype.MyUint64Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasttype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (github_com_gogo_protobuf_test_casttype.MyUint64Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MyUint64Ptr = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyUint64", wireType)
			}
			m.MyUint64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasttype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyUint64 |= (github_com_gogo_protobuf_test_casttype.MyUint64Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyFloat32Ptr", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			v2 := github_com_gogo_protobuf_test_casttype.MyFloat32Type(math.Float32frombits(v))
			m.MyFloat32Ptr = &v2
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyFloat32", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MyFloat32 = github_com_gogo_protobuf_test_casttype.MyFloat32Type(math.Float32frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyFloat64Ptr", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := github_com_gogo_protobuf_test_casttype.MyFloat64Type(math.Float64frombits(v))
			m.MyFloat64Ptr = &v2
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyFloat64", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MyFloat64 = github_com_gogo_protobuf_test_casttype.MyFloat64Type(math.Float64frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasttype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCasttype
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MyBytes = append(m.MyBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.MyBytes == nil {
				m.MyBytes = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasttype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCasttype
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NormalBytes = append(m.NormalBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.NormalBytes == nil {
				m.NormalBytes = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType == 0 {
				var v github_com_gogo_protobuf_test_casttype.MyUint64Type
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCasttype
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (github_com_gogo_protobuf_test_casttype.MyUint64Type(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MyUint64S = append(m.MyUint64S, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCasttype
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCasttype
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v github_com_gogo_protobuf_test_casttype.MyUint64Type
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCasttype
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (github_com_gogo_protobuf_test_casttype.MyUint64Type(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MyUint64S = append(m.MyUint64S, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MyUint64S", wireType)
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasttype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCasttype
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MyMap == nil {
				m.MyMap = make(github_com_gogo_protobuf_test_casttype.MyMapType)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCasttype
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCasttype
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCasttype
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCasttype
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCasttype(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCasttype
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MyMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyCustomMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasttype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCasttype
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MyCustomMap == nil {
				m.MyCustomMap = make(map[github_com_gogo_protobuf_test_casttype.MyStringType]github_com_gogo_protobuf_test_casttype.MyUint64Type)
			}
			var mapkey github_com_gogo_protobuf_test_casttype.MyStringType
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCasttype
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCasttype
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCasttype
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = github_com_gogo_protobuf_test_casttype.MyStringType(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCasttype
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCasttype(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCasttype
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MyCustomMap[github_com_gogo_protobuf_test_casttype.MyStringType(mapkey)] = ((github_com_gogo_protobuf_test_casttype.MyUint64Type)(mapvalue))
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyNullableMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasttype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCasttype
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MyNullableMap == nil {
				m.MyNullableMap = make(map[github_com_gogo_protobuf_test_casttype.MyInt32Type]*Wilson)
			}
			var mapkey int32
			var mapvalue *Wilson
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCasttype
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCasttype
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCasttype
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCasttype
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthCasttype
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Wilson{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCasttype(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCasttype
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MyNullableMap[github_com_gogo_protobuf_test_casttype.MyInt32Type(mapkey)] = mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyEmbeddedMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasttype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCasttype
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MyEmbeddedMap == nil {
				m.MyEmbeddedMap = make(map[github_com_gogo_protobuf_test_casttype.MyInt32Type]Wilson)
			}
			var mapkey int32
			mapvalue := &Wilson{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCasttype
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCasttype
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCasttype
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCasttype
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthCasttype
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Wilson{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCasttype(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCasttype
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MyEmbeddedMap[github_com_gogo_protobuf_test_casttype.MyInt32Type(mapkey)] = *mapvalue
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasttype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCasttype
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := github_com_gogo_protobuf_test_casttype.MyStringType(dAtA[iNdEx:postIndex])
			m.String_ = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCasttype(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCasttype
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Wilson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCasttype
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wilson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wilson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCasttype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Int64 = &v
		default:
			iNdEx = preIndex
			skippy, err := skipCasttype(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCasttype
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCasttype(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCasttype
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCasttype
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCasttype
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCasttype
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCasttype
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCasttype(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCasttype = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCasttype   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("combos/unmarshaler/casttype.proto", fileDescriptorCasttype) }

var fileDescriptorCasttype = []byte{
	// 698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0x4d, 0xd3, 0x26, 0x97, 0x06, 0xa2, 0x13, 0x83, 0x55, 0x89, 0xb3, 0x69, 0x55,
	0xe4, 0x01, 0x92, 0x2a, 0x8d, 0x4a, 0x55, 0x10, 0x83, 0xab, 0x22, 0x15, 0xe1, 0x82, 0x0c, 0x55,
	0x05, 0x62, 0xb9, 0xb4, 0x26, 0x8d, 0x70, 0xec, 0xc8, 0xbe, 0x80, 0xbc, 0x55, 0x65, 0x40, 0xe2,
	0x2f, 0x61, 0x64, 0x41, 0x62, 0x64, 0xec, 0xd8, 0x91, 0x29, 0xad, 0xcd, 0x52, 0xb6, 0x8e, 0x55,
	0x26, 0x74, 0x77, 0x4e, 0xec, 0xfe, 0x00, 0xa5, 0xe9, 0x76, 0xef, 0xee, 0xbd, 0xcf, 0xfb, 0xde,
	0xbb, 0x77, 0x77, 0xf0, 0xce, 0x96, 0xdb, 0xaa, 0xbb, 0x7e, 0xa5, 0xe3, 0xb4, 0x88, 0xe7, 0xef,
	0x10, 0xdb, 0xf2, 0x2a, 0x5b, 0xc4, 0xa7, 0x34, 0x68, 0x5b, 0xe5, 0xb6, 0xe7, 0x52, 0x17, 0xe5,
	0xfa, 0xf6, 0xf4, 0xfd, 0x46, 0x93, 0xee, 0x74, 0xea, 0xe5, 0x2d, 0xb7, 0x55, 0x69, 0xb8, 0x0d,
	0xb7, 0xc2, 0x1d, 0xea, 0x9d, 0x77, 0xdc, 0xe2, 0x06, 0x1f, 0x89, 0xc0, 0x99, 0x3f, 0x45, 0x98,
	0x5b, 0x21, 0x3e, 0x25, 0x1f, 0x49, 0x80, 0xe6, 0x60, 0x6e, 0xcd, 0xa1, 0x0b, 0xd5, 0x17, 0xd4,
	0x93, 0x81, 0x0a, 0xb4, 0x8c, 0x9e, 0xef, 0x75, 0x95, 0x6c, 0x93, 0xcd, 0x99, 0x83, 0x25, 0x34,
	0x0b, 0xb3, 0x7c, 0x2c, 0x8f, 0x71, 0x9f, 0xe2, 0x7e, 0x57, 0x91, 0x12, 0x3f, 0xb1, 0x86, 0x5e,
	0xc3, 0x82, 0x11, 0x6c, 0x34, 0x1d, 0xba, 0x58, 0x63, 0xb8, 0x8c, 0x0a, 0xb4, 0x71, 0xfd, 0x41,
	0xaf, 0xab, 0x2c, 0xfc, 0x53, 0x20, 0xb5, 0x7c, 0x9a, 0x6c, 0xac, 0x1f, 0xfd, 0x2a, 0x68, 0x5b,
	0x66, 0x9a, 0x85, 0x36, 0x61, 0xae, 0x6f, 0xca, 0xe3, 0x9c, 0xfb, 0x30, 0x96, 0x30, 0x12, 0x7b,
	0x00, 0x43, 0x6f, 0xe1, 0x94, 0x11, 0x3c, 0xb1, 0x5d, 0x12, 0xd7, 0x20, 0xab, 0x02, 0x6d, 0x4c,
	0x5f, 0xea, 0x75, 0x95, 0xda, 0xd0, 0xe0, 0x38, 0x9c, 0x93, 0xcf, 0xd0, 0xd0, 0x1b, 0x98, 0x1f,
	0xd8, 0xf2, 0x04, 0x47, 0x3f, 0x8a, 0x75, 0x8f, 0x86, 0x4f, 0x70, 0x29, 0xe5, 0xa2, 0xdc, 0x93,
	0x2a, 0xd0, 0xc0, 0x28, 0xca, 0xe3, 0x9a, 0x9c, 0xa1, 0xa5, 0x94, 0x2f, 0xd6, 0xe4, 0x1c, 0x47,
	0x8f, 0xa8, 0x3c, 0xc6, 0x27, 0x38, 0xf4, 0x14, 0x4e, 0x1a, 0x81, 0x1e, 0x50, 0xcb, 0x97, 0xf3,
	0x2a, 0xd0, 0xa6, 0xf4, 0xf9, 0x5e, 0x57, 0xb9, 0x37, 0x24, 0x95, 0xc7, 0x99, 0x7d, 0x00, 0x52,
	0x61, 0x61, 0xdd, 0xf5, 0x5a, 0xc4, 0x16, 0x3c, 0xc8, 0x78, 0x66, 0x7a, 0x0a, 0x6d, 0xb0, 0x9d,
	0x88, 0xd3, 0xf6, 0xe5, 0x82, 0x9a, 0xb9, 0x4e, 0x4f, 0x26, 0x24, 0xd4, 0x84, 0x59, 0x23, 0x30,
	0x48, 0x5b, 0x9e, 0x52, 0x33, 0x5a, 0xa1, 0x7a, 0xbb, 0x3c, 0x88, 0xe8, 0xdf, 0xad, 0x32, 0x5f,
	0x5f, 0x75, 0xa8, 0x17, 0xe8, 0xb5, 0x5e, 0x57, 0x99, 0x1f, 0x3a, 0xa3, 0x41, 0xda, 0x3c, 0x9d,
	0xc8, 0x80, 0xbe, 0x03, 0x76, 0xb1, 0x56, 0x3a, 0x3e, 0x75, 0x5b, 0x2c, 0x63, 0x91, 0x67, 0x9c,
	0xbd, 0x34, 0xe3, 0xc0, 0x4b, 0xe4, 0x75, 0xf6, 0x0e, 0xaf, 0xb0, 0xd3, 0x97, 0xd4, 0x6b, 0x3a,
	0x0d, 0x96, 0xfa, 0xcb, 0xe1, 0xc8, 0x97, 0x76, 0xa0, 0x00, 0x7d, 0x02, 0xb0, 0x68, 0x04, 0xeb,
	0x1d, 0xdb, 0x26, 0x75, 0xdb, 0x62, 0xca, 0x6f, 0x70, 0xe5, 0x73, 0x97, 0x2a, 0x4f, 0xf9, 0x09,
	0xed, 0x8b, 0x7b, 0x87, 0x4a, 0x75, 0x68, 0x11, 0xfc, 0x09, 0xe2, 0x1a, 0xce, 0xe6, 0x44, 0x9f,
	0xb9, 0x8a, 0xd5, 0x56, 0xdd, 0xda, 0xde, 0xb6, 0xb6, 0x99, 0x8a, 0x9b, 0xff, 0x51, 0x91, 0xf2,
	0x13, 0x2a, 0x96, 0x59, 0xd7, 0x8f, 0xae, 0x24, 0xc5, 0x43, 0xcf, 0xe1, 0x84, 0xa8, 0xb0, 0x5c,
	0x52, 0x81, 0x96, 0xbf, 0x62, 0x1b, 0x26, 0x87, 0x63, 0xc6, 0x98, 0xe9, 0x25, 0x08, 0x93, 0x1e,
	0x43, 0x25, 0x98, 0x79, 0x6f, 0x05, 0xfc, 0x15, 0xcf, 0x9b, 0x6c, 0x88, 0x6e, 0xc1, 0xec, 0x07,
	0x62, 0x77, 0x2c, 0xfe, 0x6a, 0x8f, 0x9b, 0xc2, 0x58, 0x1e, 0x5b, 0x02, 0xd3, 0x8f, 0x61, 0xe9,
	0x7c, 0xaf, 0x5c, 0x29, 0xde, 0x84, 0xe8, 0xe2, 0x89, 0xa5, 0x09, 0x59, 0x41, 0xb8, 0x9b, 0x26,
	0x14, 0xaa, 0xa5, 0xa4, 0xe6, 0x9b, 0x4d, 0xdb, 0x77, 0x9d, 0x0b, 0xcc, 0xf3, 0xf5, 0xbf, 0x1e,
	0x73, 0x06, 0xc3, 0x09, 0x31, 0xc9, 0xf6, 0xb2, 0xc6, 0xbf, 0x0f, 0xfe, 0xcb, 0x99, 0xc2, 0xd0,
	0x9f, 0xed, 0x87, 0x58, 0x3a, 0x08, 0xb1, 0xf4, 0x2b, 0xc4, 0xd2, 0x51, 0x88, 0xc1, 0x71, 0x88,
	0xc1, 0x49, 0x88, 0xc1, 0x69, 0x88, 0xc1, 0x6e, 0x84, 0xc1, 0xd7, 0x08, 0x83, 0x6f, 0x11, 0x06,
	0x3f, 0x22, 0x0c, 0x7e, 0x46, 0x18, 0xec, 0x47, 0x58, 0x3a, 0x88, 0x30, 0x38, 0x8a, 0x30, 0x38,
	0x8e, 0xb0, 0x74, 0x12, 0x61, 0x70, 0x1a, 0x61, 0x69, 0xf7, 0x37, 0x96, 0xfe, 0x06, 0x00, 0x00,
	0xff, 0xff, 0xa8, 0xc0, 0xa5, 0xf1, 0xb6, 0x07, 0x00, 0x00,
}
