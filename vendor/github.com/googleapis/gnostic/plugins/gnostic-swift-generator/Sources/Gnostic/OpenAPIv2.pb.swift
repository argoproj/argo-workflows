// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: github.com/googleapis/gnostic/OpenAPIv2/OpenAPIv2.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// THIS FILE IS AUTOMATICALLY GENERATED.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Openapi_V2_AdditionalPropertiesItem: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AdditionalPropertiesItem"

  public var oneof: OneOf_Oneof? {
    get {return _storage._oneof}
    set {_uniqueStorage()._oneof = newValue}
  }

  public var schema: Openapi_V2_Schema {
    get {
      if case .schema(let v)? = _storage._oneof {return v}
      return Openapi_V2_Schema()
    }
    set {_uniqueStorage()._oneof = .schema(newValue)}
  }

  public var boolean: Bool {
    get {
      if case .boolean(let v)? = _storage._oneof {return v}
      return false
    }
    set {_uniqueStorage()._oneof = .boolean(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Oneof: Equatable {
    case schema(Openapi_V2_Schema)
    case boolean(Bool)

    public static func ==(lhs: Openapi_V2_AdditionalPropertiesItem.OneOf_Oneof, rhs: Openapi_V2_AdditionalPropertiesItem.OneOf_Oneof) -> Bool {
      switch (lhs, rhs) {
      case (.schema(let l), .schema(let r)): return l == r
      case (.boolean(let l), .boolean(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Openapi_V2_Schema?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .schema(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .schema(v)}
        case 2:
          if _storage._oneof != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._oneof = .boolean(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._oneof {
      case .schema(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .boolean(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_Any: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Any"

  public var value: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._value ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {_storage._value = nil}

  public var yaml: String {
    get {return _storage._yaml}
    set {_uniqueStorage()._yaml = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._value)
        case 2: try decoder.decodeSingularStringField(value: &_storage._yaml)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._yaml.isEmpty {
        try visitor.visitSingularStringField(value: _storage._yaml, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_ApiKeySecurity: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ApiKeySecurity"

  public var type: String = String()

  public var name: String = String()

  public var `in`: String = String()

  public var description_p: String = String()

  public var vendorExtension: [Openapi_V2_NamedAny] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.type)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.`in`)
      case 4: try decoder.decodeSingularStringField(value: &self.description_p)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.vendorExtension)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.`in`.isEmpty {
      try visitor.visitSingularStringField(value: self.`in`, fieldNumber: 3)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 4)
    }
    if !self.vendorExtension.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vendorExtension, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Openapi_V2_BasicAuthenticationSecurity: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".BasicAuthenticationSecurity"

  public var type: String = String()

  public var description_p: String = String()

  public var vendorExtension: [Openapi_V2_NamedAny] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.type)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.vendorExtension)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.vendorExtension.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vendorExtension, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Openapi_V2_BodyParameter: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".BodyParameter"

  /// A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// The name of the parameter.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Determines the location of the parameter.
  public var `in`: String {
    get {return _storage._in}
    set {_uniqueStorage()._in = newValue}
  }

  /// Determines whether or not this parameter is required or optional.
  public var required: Bool {
    get {return _storage._required}
    set {_uniqueStorage()._required = newValue}
  }

  public var schema: Openapi_V2_Schema {
    get {return _storage._schema ?? Openapi_V2_Schema()}
    set {_uniqueStorage()._schema = newValue}
  }
  /// Returns true if `schema` has been explicitly set.
  public var hasSchema: Bool {return _storage._schema != nil}
  /// Clears the value of `schema`. Subsequent reads from it will return its default value.
  public mutating func clearSchema() {_storage._schema = nil}

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularStringField(value: &_storage._in)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._required)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._schema)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if !_storage._in.isEmpty {
        try visitor.visitSingularStringField(value: _storage._in, fieldNumber: 3)
      }
      if _storage._required != false {
        try visitor.visitSingularBoolField(value: _storage._required, fieldNumber: 4)
      }
      if let v = _storage._schema {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Contact information for the owners of the API.
public struct Openapi_V2_Contact: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Contact"

  /// The identifying name of the contact person/organization.
  public var name: String = String()

  /// The URL pointing to the contact information.
  public var url: String = String()

  /// The email address of the contact person/organization.
  public var email: String = String()

  public var vendorExtension: [Openapi_V2_NamedAny] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.url)
      case 3: try decoder.decodeSingularStringField(value: &self.email)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.vendorExtension)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    if !self.vendorExtension.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vendorExtension, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Openapi_V2_Default: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Default"

  public var additionalProperties: [Openapi_V2_NamedAny] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.additionalProperties)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.additionalProperties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalProperties, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// One or more JSON objects describing the schemas being consumed and produced by the API.
public struct Openapi_V2_Definitions: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Definitions"

  public var additionalProperties: [Openapi_V2_NamedSchema] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.additionalProperties)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.additionalProperties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalProperties, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Openapi_V2_Document: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Document"

  /// The Swagger version of this document.
  public var swagger: String {
    get {return _storage._swagger}
    set {_uniqueStorage()._swagger = newValue}
  }

  public var info: Openapi_V2_Info {
    get {return _storage._info ?? Openapi_V2_Info()}
    set {_uniqueStorage()._info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  public var hasInfo: Bool {return _storage._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  public mutating func clearInfo() {_storage._info = nil}

  /// The host (name or ip) of the API. Example: 'swagger.io'
  public var host: String {
    get {return _storage._host}
    set {_uniqueStorage()._host = newValue}
  }

  /// The base path to the API. Example: '/api'.
  public var basePath: String {
    get {return _storage._basePath}
    set {_uniqueStorage()._basePath = newValue}
  }

  /// The transfer protocol of the API.
  public var schemes: [String] {
    get {return _storage._schemes}
    set {_uniqueStorage()._schemes = newValue}
  }

  /// A list of MIME types accepted by the API.
  public var consumes: [String] {
    get {return _storage._consumes}
    set {_uniqueStorage()._consumes = newValue}
  }

  /// A list of MIME types the API can produce.
  public var produces: [String] {
    get {return _storage._produces}
    set {_uniqueStorage()._produces = newValue}
  }

  public var paths: Openapi_V2_Paths {
    get {return _storage._paths ?? Openapi_V2_Paths()}
    set {_uniqueStorage()._paths = newValue}
  }
  /// Returns true if `paths` has been explicitly set.
  public var hasPaths: Bool {return _storage._paths != nil}
  /// Clears the value of `paths`. Subsequent reads from it will return its default value.
  public mutating func clearPaths() {_storage._paths = nil}

  public var definitions: Openapi_V2_Definitions {
    get {return _storage._definitions ?? Openapi_V2_Definitions()}
    set {_uniqueStorage()._definitions = newValue}
  }
  /// Returns true if `definitions` has been explicitly set.
  public var hasDefinitions: Bool {return _storage._definitions != nil}
  /// Clears the value of `definitions`. Subsequent reads from it will return its default value.
  public mutating func clearDefinitions() {_storage._definitions = nil}

  public var parameters: Openapi_V2_ParameterDefinitions {
    get {return _storage._parameters ?? Openapi_V2_ParameterDefinitions()}
    set {_uniqueStorage()._parameters = newValue}
  }
  /// Returns true if `parameters` has been explicitly set.
  public var hasParameters: Bool {return _storage._parameters != nil}
  /// Clears the value of `parameters`. Subsequent reads from it will return its default value.
  public mutating func clearParameters() {_storage._parameters = nil}

  public var responses: Openapi_V2_ResponseDefinitions {
    get {return _storage._responses ?? Openapi_V2_ResponseDefinitions()}
    set {_uniqueStorage()._responses = newValue}
  }
  /// Returns true if `responses` has been explicitly set.
  public var hasResponses: Bool {return _storage._responses != nil}
  /// Clears the value of `responses`. Subsequent reads from it will return its default value.
  public mutating func clearResponses() {_storage._responses = nil}

  public var security: [Openapi_V2_SecurityRequirement] {
    get {return _storage._security}
    set {_uniqueStorage()._security = newValue}
  }

  public var securityDefinitions: Openapi_V2_SecurityDefinitions {
    get {return _storage._securityDefinitions ?? Openapi_V2_SecurityDefinitions()}
    set {_uniqueStorage()._securityDefinitions = newValue}
  }
  /// Returns true if `securityDefinitions` has been explicitly set.
  public var hasSecurityDefinitions: Bool {return _storage._securityDefinitions != nil}
  /// Clears the value of `securityDefinitions`. Subsequent reads from it will return its default value.
  public mutating func clearSecurityDefinitions() {_storage._securityDefinitions = nil}

  public var tags: [Openapi_V2_Tag] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  public var externalDocs: Openapi_V2_ExternalDocs {
    get {return _storage._externalDocs ?? Openapi_V2_ExternalDocs()}
    set {_uniqueStorage()._externalDocs = newValue}
  }
  /// Returns true if `externalDocs` has been explicitly set.
  public var hasExternalDocs: Bool {return _storage._externalDocs != nil}
  /// Clears the value of `externalDocs`. Subsequent reads from it will return its default value.
  public mutating func clearExternalDocs() {_storage._externalDocs = nil}

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._swagger)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._info)
        case 3: try decoder.decodeSingularStringField(value: &_storage._host)
        case 4: try decoder.decodeSingularStringField(value: &_storage._basePath)
        case 5: try decoder.decodeRepeatedStringField(value: &_storage._schemes)
        case 6: try decoder.decodeRepeatedStringField(value: &_storage._consumes)
        case 7: try decoder.decodeRepeatedStringField(value: &_storage._produces)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._paths)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._definitions)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._parameters)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._responses)
        case 12: try decoder.decodeRepeatedMessageField(value: &_storage._security)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._securityDefinitions)
        case 14: try decoder.decodeRepeatedMessageField(value: &_storage._tags)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._externalDocs)
        case 16: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._swagger.isEmpty {
        try visitor.visitSingularStringField(value: _storage._swagger, fieldNumber: 1)
      }
      if let v = _storage._info {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._host.isEmpty {
        try visitor.visitSingularStringField(value: _storage._host, fieldNumber: 3)
      }
      if !_storage._basePath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._basePath, fieldNumber: 4)
      }
      if !_storage._schemes.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._schemes, fieldNumber: 5)
      }
      if !_storage._consumes.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._consumes, fieldNumber: 6)
      }
      if !_storage._produces.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._produces, fieldNumber: 7)
      }
      if let v = _storage._paths {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._definitions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._parameters {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._responses {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if !_storage._security.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._security, fieldNumber: 12)
      }
      if let v = _storage._securityDefinitions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tags, fieldNumber: 14)
      }
      if let v = _storage._externalDocs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 16)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_Examples: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Examples"

  public var additionalProperties: [Openapi_V2_NamedAny] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.additionalProperties)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.additionalProperties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalProperties, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// information about external documentation
public struct Openapi_V2_ExternalDocs: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ExternalDocs"

  public var description_p: String = String()

  public var url: String = String()

  public var vendorExtension: [Openapi_V2_NamedAny] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.description_p)
      case 2: try decoder.decodeSingularStringField(value: &self.url)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.vendorExtension)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    if !self.vendorExtension.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vendorExtension, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// A deterministic version of a JSON Schema object.
public struct Openapi_V2_FileSchema: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".FileSchema"

  public var format: String {
    get {return _storage._format}
    set {_uniqueStorage()._format = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var `default`: Openapi_V2_Any {
    get {return _storage._default ?? Openapi_V2_Any()}
    set {_uniqueStorage()._default = newValue}
  }
  /// Returns true if ``default`` has been explicitly set.
  public var hasDefault: Bool {return _storage._default != nil}
  /// Clears the value of ``default``. Subsequent reads from it will return its default value.
  public mutating func clearDefault() {_storage._default = nil}

  public var required: [String] {
    get {return _storage._required}
    set {_uniqueStorage()._required = newValue}
  }

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var readOnly: Bool {
    get {return _storage._readOnly}
    set {_uniqueStorage()._readOnly = newValue}
  }

  public var externalDocs: Openapi_V2_ExternalDocs {
    get {return _storage._externalDocs ?? Openapi_V2_ExternalDocs()}
    set {_uniqueStorage()._externalDocs = newValue}
  }
  /// Returns true if `externalDocs` has been explicitly set.
  public var hasExternalDocs: Bool {return _storage._externalDocs != nil}
  /// Clears the value of `externalDocs`. Subsequent reads from it will return its default value.
  public mutating func clearExternalDocs() {_storage._externalDocs = nil}

  public var example: Openapi_V2_Any {
    get {return _storage._example ?? Openapi_V2_Any()}
    set {_uniqueStorage()._example = newValue}
  }
  /// Returns true if `example` has been explicitly set.
  public var hasExample: Bool {return _storage._example != nil}
  /// Clears the value of `example`. Subsequent reads from it will return its default value.
  public mutating func clearExample() {_storage._example = nil}

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._format)
        case 2: try decoder.decodeSingularStringField(value: &_storage._title)
        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._default)
        case 5: try decoder.decodeRepeatedStringField(value: &_storage._required)
        case 6: try decoder.decodeSingularStringField(value: &_storage._type)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._readOnly)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._externalDocs)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._example)
        case 10: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._format.isEmpty {
        try visitor.visitSingularStringField(value: _storage._format, fieldNumber: 1)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if let v = _storage._default {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._required.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._required, fieldNumber: 5)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 6)
      }
      if _storage._readOnly != false {
        try visitor.visitSingularBoolField(value: _storage._readOnly, fieldNumber: 7)
      }
      if let v = _storage._externalDocs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._example {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_FormDataParameterSubSchema: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".FormDataParameterSubSchema"

  /// Determines whether or not this parameter is required or optional.
  public var required: Bool {
    get {return _storage._required}
    set {_uniqueStorage()._required = newValue}
  }

  /// Determines the location of the parameter.
  public var `in`: String {
    get {return _storage._in}
    set {_uniqueStorage()._in = newValue}
  }

  /// A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// The name of the parameter.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// allows sending a parameter by name only or with an empty value.
  public var allowEmptyValue: Bool {
    get {return _storage._allowEmptyValue}
    set {_uniqueStorage()._allowEmptyValue = newValue}
  }

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var format: String {
    get {return _storage._format}
    set {_uniqueStorage()._format = newValue}
  }

  public var items: Openapi_V2_PrimitivesItems {
    get {return _storage._items ?? Openapi_V2_PrimitivesItems()}
    set {_uniqueStorage()._items = newValue}
  }
  /// Returns true if `items` has been explicitly set.
  public var hasItems: Bool {return _storage._items != nil}
  /// Clears the value of `items`. Subsequent reads from it will return its default value.
  public mutating func clearItems() {_storage._items = nil}

  public var collectionFormat: String {
    get {return _storage._collectionFormat}
    set {_uniqueStorage()._collectionFormat = newValue}
  }

  public var `default`: Openapi_V2_Any {
    get {return _storage._default ?? Openapi_V2_Any()}
    set {_uniqueStorage()._default = newValue}
  }
  /// Returns true if ``default`` has been explicitly set.
  public var hasDefault: Bool {return _storage._default != nil}
  /// Clears the value of ``default``. Subsequent reads from it will return its default value.
  public mutating func clearDefault() {_storage._default = nil}

  public var maximum: Double {
    get {return _storage._maximum}
    set {_uniqueStorage()._maximum = newValue}
  }

  public var exclusiveMaximum: Bool {
    get {return _storage._exclusiveMaximum}
    set {_uniqueStorage()._exclusiveMaximum = newValue}
  }

  public var minimum: Double {
    get {return _storage._minimum}
    set {_uniqueStorage()._minimum = newValue}
  }

  public var exclusiveMinimum: Bool {
    get {return _storage._exclusiveMinimum}
    set {_uniqueStorage()._exclusiveMinimum = newValue}
  }

  public var maxLength: Int64 {
    get {return _storage._maxLength}
    set {_uniqueStorage()._maxLength = newValue}
  }

  public var minLength: Int64 {
    get {return _storage._minLength}
    set {_uniqueStorage()._minLength = newValue}
  }

  public var pattern: String {
    get {return _storage._pattern}
    set {_uniqueStorage()._pattern = newValue}
  }

  public var maxItems: Int64 {
    get {return _storage._maxItems}
    set {_uniqueStorage()._maxItems = newValue}
  }

  public var minItems: Int64 {
    get {return _storage._minItems}
    set {_uniqueStorage()._minItems = newValue}
  }

  public var uniqueItems: Bool {
    get {return _storage._uniqueItems}
    set {_uniqueStorage()._uniqueItems = newValue}
  }

  public var `enum`: [Openapi_V2_Any] {
    get {return _storage._enum}
    set {_uniqueStorage()._enum = newValue}
  }

  public var multipleOf: Double {
    get {return _storage._multipleOf}
    set {_uniqueStorage()._multipleOf = newValue}
  }

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._required)
        case 2: try decoder.decodeSingularStringField(value: &_storage._in)
        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 4: try decoder.decodeSingularStringField(value: &_storage._name)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._allowEmptyValue)
        case 6: try decoder.decodeSingularStringField(value: &_storage._type)
        case 7: try decoder.decodeSingularStringField(value: &_storage._format)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._items)
        case 9: try decoder.decodeSingularStringField(value: &_storage._collectionFormat)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._default)
        case 11: try decoder.decodeSingularDoubleField(value: &_storage._maximum)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._exclusiveMaximum)
        case 13: try decoder.decodeSingularDoubleField(value: &_storage._minimum)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._exclusiveMinimum)
        case 15: try decoder.decodeSingularInt64Field(value: &_storage._maxLength)
        case 16: try decoder.decodeSingularInt64Field(value: &_storage._minLength)
        case 17: try decoder.decodeSingularStringField(value: &_storage._pattern)
        case 18: try decoder.decodeSingularInt64Field(value: &_storage._maxItems)
        case 19: try decoder.decodeSingularInt64Field(value: &_storage._minItems)
        case 20: try decoder.decodeSingularBoolField(value: &_storage._uniqueItems)
        case 21: try decoder.decodeRepeatedMessageField(value: &_storage._enum)
        case 22: try decoder.decodeSingularDoubleField(value: &_storage._multipleOf)
        case 23: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._required != false {
        try visitor.visitSingularBoolField(value: _storage._required, fieldNumber: 1)
      }
      if !_storage._in.isEmpty {
        try visitor.visitSingularStringField(value: _storage._in, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 4)
      }
      if _storage._allowEmptyValue != false {
        try visitor.visitSingularBoolField(value: _storage._allowEmptyValue, fieldNumber: 5)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 6)
      }
      if !_storage._format.isEmpty {
        try visitor.visitSingularStringField(value: _storage._format, fieldNumber: 7)
      }
      if let v = _storage._items {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._collectionFormat.isEmpty {
        try visitor.visitSingularStringField(value: _storage._collectionFormat, fieldNumber: 9)
      }
      if let v = _storage._default {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if _storage._maximum != 0 {
        try visitor.visitSingularDoubleField(value: _storage._maximum, fieldNumber: 11)
      }
      if _storage._exclusiveMaximum != false {
        try visitor.visitSingularBoolField(value: _storage._exclusiveMaximum, fieldNumber: 12)
      }
      if _storage._minimum != 0 {
        try visitor.visitSingularDoubleField(value: _storage._minimum, fieldNumber: 13)
      }
      if _storage._exclusiveMinimum != false {
        try visitor.visitSingularBoolField(value: _storage._exclusiveMinimum, fieldNumber: 14)
      }
      if _storage._maxLength != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxLength, fieldNumber: 15)
      }
      if _storage._minLength != 0 {
        try visitor.visitSingularInt64Field(value: _storage._minLength, fieldNumber: 16)
      }
      if !_storage._pattern.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pattern, fieldNumber: 17)
      }
      if _storage._maxItems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxItems, fieldNumber: 18)
      }
      if _storage._minItems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._minItems, fieldNumber: 19)
      }
      if _storage._uniqueItems != false {
        try visitor.visitSingularBoolField(value: _storage._uniqueItems, fieldNumber: 20)
      }
      if !_storage._enum.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._enum, fieldNumber: 21)
      }
      if _storage._multipleOf != 0 {
        try visitor.visitSingularDoubleField(value: _storage._multipleOf, fieldNumber: 22)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 23)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_Header: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Header"

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var format: String {
    get {return _storage._format}
    set {_uniqueStorage()._format = newValue}
  }

  public var items: Openapi_V2_PrimitivesItems {
    get {return _storage._items ?? Openapi_V2_PrimitivesItems()}
    set {_uniqueStorage()._items = newValue}
  }
  /// Returns true if `items` has been explicitly set.
  public var hasItems: Bool {return _storage._items != nil}
  /// Clears the value of `items`. Subsequent reads from it will return its default value.
  public mutating func clearItems() {_storage._items = nil}

  public var collectionFormat: String {
    get {return _storage._collectionFormat}
    set {_uniqueStorage()._collectionFormat = newValue}
  }

  public var `default`: Openapi_V2_Any {
    get {return _storage._default ?? Openapi_V2_Any()}
    set {_uniqueStorage()._default = newValue}
  }
  /// Returns true if ``default`` has been explicitly set.
  public var hasDefault: Bool {return _storage._default != nil}
  /// Clears the value of ``default``. Subsequent reads from it will return its default value.
  public mutating func clearDefault() {_storage._default = nil}

  public var maximum: Double {
    get {return _storage._maximum}
    set {_uniqueStorage()._maximum = newValue}
  }

  public var exclusiveMaximum: Bool {
    get {return _storage._exclusiveMaximum}
    set {_uniqueStorage()._exclusiveMaximum = newValue}
  }

  public var minimum: Double {
    get {return _storage._minimum}
    set {_uniqueStorage()._minimum = newValue}
  }

  public var exclusiveMinimum: Bool {
    get {return _storage._exclusiveMinimum}
    set {_uniqueStorage()._exclusiveMinimum = newValue}
  }

  public var maxLength: Int64 {
    get {return _storage._maxLength}
    set {_uniqueStorage()._maxLength = newValue}
  }

  public var minLength: Int64 {
    get {return _storage._minLength}
    set {_uniqueStorage()._minLength = newValue}
  }

  public var pattern: String {
    get {return _storage._pattern}
    set {_uniqueStorage()._pattern = newValue}
  }

  public var maxItems: Int64 {
    get {return _storage._maxItems}
    set {_uniqueStorage()._maxItems = newValue}
  }

  public var minItems: Int64 {
    get {return _storage._minItems}
    set {_uniqueStorage()._minItems = newValue}
  }

  public var uniqueItems: Bool {
    get {return _storage._uniqueItems}
    set {_uniqueStorage()._uniqueItems = newValue}
  }

  public var `enum`: [Openapi_V2_Any] {
    get {return _storage._enum}
    set {_uniqueStorage()._enum = newValue}
  }

  public var multipleOf: Double {
    get {return _storage._multipleOf}
    set {_uniqueStorage()._multipleOf = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._type)
        case 2: try decoder.decodeSingularStringField(value: &_storage._format)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._items)
        case 4: try decoder.decodeSingularStringField(value: &_storage._collectionFormat)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._default)
        case 6: try decoder.decodeSingularDoubleField(value: &_storage._maximum)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._exclusiveMaximum)
        case 8: try decoder.decodeSingularDoubleField(value: &_storage._minimum)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._exclusiveMinimum)
        case 10: try decoder.decodeSingularInt64Field(value: &_storage._maxLength)
        case 11: try decoder.decodeSingularInt64Field(value: &_storage._minLength)
        case 12: try decoder.decodeSingularStringField(value: &_storage._pattern)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._maxItems)
        case 14: try decoder.decodeSingularInt64Field(value: &_storage._minItems)
        case 15: try decoder.decodeSingularBoolField(value: &_storage._uniqueItems)
        case 16: try decoder.decodeRepeatedMessageField(value: &_storage._enum)
        case 17: try decoder.decodeSingularDoubleField(value: &_storage._multipleOf)
        case 18: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 19: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 1)
      }
      if !_storage._format.isEmpty {
        try visitor.visitSingularStringField(value: _storage._format, fieldNumber: 2)
      }
      if let v = _storage._items {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._collectionFormat.isEmpty {
        try visitor.visitSingularStringField(value: _storage._collectionFormat, fieldNumber: 4)
      }
      if let v = _storage._default {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._maximum != 0 {
        try visitor.visitSingularDoubleField(value: _storage._maximum, fieldNumber: 6)
      }
      if _storage._exclusiveMaximum != false {
        try visitor.visitSingularBoolField(value: _storage._exclusiveMaximum, fieldNumber: 7)
      }
      if _storage._minimum != 0 {
        try visitor.visitSingularDoubleField(value: _storage._minimum, fieldNumber: 8)
      }
      if _storage._exclusiveMinimum != false {
        try visitor.visitSingularBoolField(value: _storage._exclusiveMinimum, fieldNumber: 9)
      }
      if _storage._maxLength != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxLength, fieldNumber: 10)
      }
      if _storage._minLength != 0 {
        try visitor.visitSingularInt64Field(value: _storage._minLength, fieldNumber: 11)
      }
      if !_storage._pattern.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pattern, fieldNumber: 12)
      }
      if _storage._maxItems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxItems, fieldNumber: 13)
      }
      if _storage._minItems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._minItems, fieldNumber: 14)
      }
      if _storage._uniqueItems != false {
        try visitor.visitSingularBoolField(value: _storage._uniqueItems, fieldNumber: 15)
      }
      if !_storage._enum.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._enum, fieldNumber: 16)
      }
      if _storage._multipleOf != 0 {
        try visitor.visitSingularDoubleField(value: _storage._multipleOf, fieldNumber: 17)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 18)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_HeaderParameterSubSchema: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".HeaderParameterSubSchema"

  /// Determines whether or not this parameter is required or optional.
  public var required: Bool {
    get {return _storage._required}
    set {_uniqueStorage()._required = newValue}
  }

  /// Determines the location of the parameter.
  public var `in`: String {
    get {return _storage._in}
    set {_uniqueStorage()._in = newValue}
  }

  /// A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// The name of the parameter.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var format: String {
    get {return _storage._format}
    set {_uniqueStorage()._format = newValue}
  }

  public var items: Openapi_V2_PrimitivesItems {
    get {return _storage._items ?? Openapi_V2_PrimitivesItems()}
    set {_uniqueStorage()._items = newValue}
  }
  /// Returns true if `items` has been explicitly set.
  public var hasItems: Bool {return _storage._items != nil}
  /// Clears the value of `items`. Subsequent reads from it will return its default value.
  public mutating func clearItems() {_storage._items = nil}

  public var collectionFormat: String {
    get {return _storage._collectionFormat}
    set {_uniqueStorage()._collectionFormat = newValue}
  }

  public var `default`: Openapi_V2_Any {
    get {return _storage._default ?? Openapi_V2_Any()}
    set {_uniqueStorage()._default = newValue}
  }
  /// Returns true if ``default`` has been explicitly set.
  public var hasDefault: Bool {return _storage._default != nil}
  /// Clears the value of ``default``. Subsequent reads from it will return its default value.
  public mutating func clearDefault() {_storage._default = nil}

  public var maximum: Double {
    get {return _storage._maximum}
    set {_uniqueStorage()._maximum = newValue}
  }

  public var exclusiveMaximum: Bool {
    get {return _storage._exclusiveMaximum}
    set {_uniqueStorage()._exclusiveMaximum = newValue}
  }

  public var minimum: Double {
    get {return _storage._minimum}
    set {_uniqueStorage()._minimum = newValue}
  }

  public var exclusiveMinimum: Bool {
    get {return _storage._exclusiveMinimum}
    set {_uniqueStorage()._exclusiveMinimum = newValue}
  }

  public var maxLength: Int64 {
    get {return _storage._maxLength}
    set {_uniqueStorage()._maxLength = newValue}
  }

  public var minLength: Int64 {
    get {return _storage._minLength}
    set {_uniqueStorage()._minLength = newValue}
  }

  public var pattern: String {
    get {return _storage._pattern}
    set {_uniqueStorage()._pattern = newValue}
  }

  public var maxItems: Int64 {
    get {return _storage._maxItems}
    set {_uniqueStorage()._maxItems = newValue}
  }

  public var minItems: Int64 {
    get {return _storage._minItems}
    set {_uniqueStorage()._minItems = newValue}
  }

  public var uniqueItems: Bool {
    get {return _storage._uniqueItems}
    set {_uniqueStorage()._uniqueItems = newValue}
  }

  public var `enum`: [Openapi_V2_Any] {
    get {return _storage._enum}
    set {_uniqueStorage()._enum = newValue}
  }

  public var multipleOf: Double {
    get {return _storage._multipleOf}
    set {_uniqueStorage()._multipleOf = newValue}
  }

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._required)
        case 2: try decoder.decodeSingularStringField(value: &_storage._in)
        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 4: try decoder.decodeSingularStringField(value: &_storage._name)
        case 5: try decoder.decodeSingularStringField(value: &_storage._type)
        case 6: try decoder.decodeSingularStringField(value: &_storage._format)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._items)
        case 8: try decoder.decodeSingularStringField(value: &_storage._collectionFormat)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._default)
        case 10: try decoder.decodeSingularDoubleField(value: &_storage._maximum)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._exclusiveMaximum)
        case 12: try decoder.decodeSingularDoubleField(value: &_storage._minimum)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._exclusiveMinimum)
        case 14: try decoder.decodeSingularInt64Field(value: &_storage._maxLength)
        case 15: try decoder.decodeSingularInt64Field(value: &_storage._minLength)
        case 16: try decoder.decodeSingularStringField(value: &_storage._pattern)
        case 17: try decoder.decodeSingularInt64Field(value: &_storage._maxItems)
        case 18: try decoder.decodeSingularInt64Field(value: &_storage._minItems)
        case 19: try decoder.decodeSingularBoolField(value: &_storage._uniqueItems)
        case 20: try decoder.decodeRepeatedMessageField(value: &_storage._enum)
        case 21: try decoder.decodeSingularDoubleField(value: &_storage._multipleOf)
        case 22: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._required != false {
        try visitor.visitSingularBoolField(value: _storage._required, fieldNumber: 1)
      }
      if !_storage._in.isEmpty {
        try visitor.visitSingularStringField(value: _storage._in, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 4)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 5)
      }
      if !_storage._format.isEmpty {
        try visitor.visitSingularStringField(value: _storage._format, fieldNumber: 6)
      }
      if let v = _storage._items {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._collectionFormat.isEmpty {
        try visitor.visitSingularStringField(value: _storage._collectionFormat, fieldNumber: 8)
      }
      if let v = _storage._default {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if _storage._maximum != 0 {
        try visitor.visitSingularDoubleField(value: _storage._maximum, fieldNumber: 10)
      }
      if _storage._exclusiveMaximum != false {
        try visitor.visitSingularBoolField(value: _storage._exclusiveMaximum, fieldNumber: 11)
      }
      if _storage._minimum != 0 {
        try visitor.visitSingularDoubleField(value: _storage._minimum, fieldNumber: 12)
      }
      if _storage._exclusiveMinimum != false {
        try visitor.visitSingularBoolField(value: _storage._exclusiveMinimum, fieldNumber: 13)
      }
      if _storage._maxLength != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxLength, fieldNumber: 14)
      }
      if _storage._minLength != 0 {
        try visitor.visitSingularInt64Field(value: _storage._minLength, fieldNumber: 15)
      }
      if !_storage._pattern.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pattern, fieldNumber: 16)
      }
      if _storage._maxItems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxItems, fieldNumber: 17)
      }
      if _storage._minItems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._minItems, fieldNumber: 18)
      }
      if _storage._uniqueItems != false {
        try visitor.visitSingularBoolField(value: _storage._uniqueItems, fieldNumber: 19)
      }
      if !_storage._enum.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._enum, fieldNumber: 20)
      }
      if _storage._multipleOf != 0 {
        try visitor.visitSingularDoubleField(value: _storage._multipleOf, fieldNumber: 21)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_Headers: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Headers"

  public var additionalProperties: [Openapi_V2_NamedHeader] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.additionalProperties)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.additionalProperties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalProperties, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// General information about the API.
public struct Openapi_V2_Info: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Info"

  /// A unique and precise title of the API.
  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  /// A semantic version number of the API.
  public var version: String {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  /// A longer description of the API. Should be different from the title.  GitHub Flavored Markdown is allowed.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// The terms of service for the API.
  public var termsOfService: String {
    get {return _storage._termsOfService}
    set {_uniqueStorage()._termsOfService = newValue}
  }

  public var contact: Openapi_V2_Contact {
    get {return _storage._contact ?? Openapi_V2_Contact()}
    set {_uniqueStorage()._contact = newValue}
  }
  /// Returns true if `contact` has been explicitly set.
  public var hasContact: Bool {return _storage._contact != nil}
  /// Clears the value of `contact`. Subsequent reads from it will return its default value.
  public mutating func clearContact() {_storage._contact = nil}

  public var license: Openapi_V2_License {
    get {return _storage._license ?? Openapi_V2_License()}
    set {_uniqueStorage()._license = newValue}
  }
  /// Returns true if `license` has been explicitly set.
  public var hasLicense: Bool {return _storage._license != nil}
  /// Clears the value of `license`. Subsequent reads from it will return its default value.
  public mutating func clearLicense() {_storage._license = nil}

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._title)
        case 2: try decoder.decodeSingularStringField(value: &_storage._version)
        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 4: try decoder.decodeSingularStringField(value: &_storage._termsOfService)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._contact)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._license)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 1)
      }
      if !_storage._version.isEmpty {
        try visitor.visitSingularStringField(value: _storage._version, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if !_storage._termsOfService.isEmpty {
        try visitor.visitSingularStringField(value: _storage._termsOfService, fieldNumber: 4)
      }
      if let v = _storage._contact {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._license {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_ItemsItem: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ItemsItem"

  public var schema: [Openapi_V2_Schema] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.schema)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.schema.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.schema, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Openapi_V2_JsonReference: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".JsonReference"

  public var ref: String = String()

  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.ref)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ref.isEmpty {
      try visitor.visitSingularStringField(value: self.ref, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Openapi_V2_License: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".License"

  /// The name of the license type. It's encouraged to use an OSI compatible license.
  public var name: String = String()

  /// The URL pointing to the license.
  public var url: String = String()

  public var vendorExtension: [Openapi_V2_NamedAny] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.url)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.vendorExtension)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    if !self.vendorExtension.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vendorExtension, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Automatically-generated message used to represent maps of Any as ordered (name,value) pairs.
public struct Openapi_V2_NamedAny: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".NamedAny"

  /// Map key
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Mapped value
  public var value: Openapi_V2_Any {
    get {return _storage._value ?? Openapi_V2_Any()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {_storage._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Automatically-generated message used to represent maps of Header as ordered (name,value) pairs.
public struct Openapi_V2_NamedHeader: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".NamedHeader"

  /// Map key
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Mapped value
  public var value: Openapi_V2_Header {
    get {return _storage._value ?? Openapi_V2_Header()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {_storage._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Automatically-generated message used to represent maps of Parameter as ordered (name,value) pairs.
public struct Openapi_V2_NamedParameter: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".NamedParameter"

  /// Map key
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Mapped value
  public var value: Openapi_V2_Parameter {
    get {return _storage._value ?? Openapi_V2_Parameter()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {_storage._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Automatically-generated message used to represent maps of PathItem as ordered (name,value) pairs.
public struct Openapi_V2_NamedPathItem: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".NamedPathItem"

  /// Map key
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Mapped value
  public var value: Openapi_V2_PathItem {
    get {return _storage._value ?? Openapi_V2_PathItem()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {_storage._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Automatically-generated message used to represent maps of Response as ordered (name,value) pairs.
public struct Openapi_V2_NamedResponse: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".NamedResponse"

  /// Map key
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Mapped value
  public var value: Openapi_V2_Response {
    get {return _storage._value ?? Openapi_V2_Response()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {_storage._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Automatically-generated message used to represent maps of ResponseValue as ordered (name,value) pairs.
public struct Openapi_V2_NamedResponseValue: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".NamedResponseValue"

  /// Map key
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Mapped value
  public var value: Openapi_V2_ResponseValue {
    get {return _storage._value ?? Openapi_V2_ResponseValue()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {_storage._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Automatically-generated message used to represent maps of Schema as ordered (name,value) pairs.
public struct Openapi_V2_NamedSchema: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".NamedSchema"

  /// Map key
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Mapped value
  public var value: Openapi_V2_Schema {
    get {return _storage._value ?? Openapi_V2_Schema()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {_storage._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Automatically-generated message used to represent maps of SecurityDefinitionsItem as ordered (name,value) pairs.
public struct Openapi_V2_NamedSecurityDefinitionsItem: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".NamedSecurityDefinitionsItem"

  /// Map key
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Mapped value
  public var value: Openapi_V2_SecurityDefinitionsItem {
    get {return _storage._value ?? Openapi_V2_SecurityDefinitionsItem()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {_storage._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Automatically-generated message used to represent maps of string as ordered (name,value) pairs.
public struct Openapi_V2_NamedString: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".NamedString"

  /// Map key
  public var name: String = String()

  /// Mapped value
  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Automatically-generated message used to represent maps of StringArray as ordered (name,value) pairs.
public struct Openapi_V2_NamedStringArray: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".NamedStringArray"

  /// Map key
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Mapped value
  public var value: Openapi_V2_StringArray {
    get {return _storage._value ?? Openapi_V2_StringArray()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {_storage._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_NonBodyParameter: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".NonBodyParameter"

  public var oneof: OneOf_Oneof? {
    get {return _storage._oneof}
    set {_uniqueStorage()._oneof = newValue}
  }

  public var headerParameterSubSchema: Openapi_V2_HeaderParameterSubSchema {
    get {
      if case .headerParameterSubSchema(let v)? = _storage._oneof {return v}
      return Openapi_V2_HeaderParameterSubSchema()
    }
    set {_uniqueStorage()._oneof = .headerParameterSubSchema(newValue)}
  }

  public var formDataParameterSubSchema: Openapi_V2_FormDataParameterSubSchema {
    get {
      if case .formDataParameterSubSchema(let v)? = _storage._oneof {return v}
      return Openapi_V2_FormDataParameterSubSchema()
    }
    set {_uniqueStorage()._oneof = .formDataParameterSubSchema(newValue)}
  }

  public var queryParameterSubSchema: Openapi_V2_QueryParameterSubSchema {
    get {
      if case .queryParameterSubSchema(let v)? = _storage._oneof {return v}
      return Openapi_V2_QueryParameterSubSchema()
    }
    set {_uniqueStorage()._oneof = .queryParameterSubSchema(newValue)}
  }

  public var pathParameterSubSchema: Openapi_V2_PathParameterSubSchema {
    get {
      if case .pathParameterSubSchema(let v)? = _storage._oneof {return v}
      return Openapi_V2_PathParameterSubSchema()
    }
    set {_uniqueStorage()._oneof = .pathParameterSubSchema(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Oneof: Equatable {
    case headerParameterSubSchema(Openapi_V2_HeaderParameterSubSchema)
    case formDataParameterSubSchema(Openapi_V2_FormDataParameterSubSchema)
    case queryParameterSubSchema(Openapi_V2_QueryParameterSubSchema)
    case pathParameterSubSchema(Openapi_V2_PathParameterSubSchema)

    public static func ==(lhs: Openapi_V2_NonBodyParameter.OneOf_Oneof, rhs: Openapi_V2_NonBodyParameter.OneOf_Oneof) -> Bool {
      switch (lhs, rhs) {
      case (.headerParameterSubSchema(let l), .headerParameterSubSchema(let r)): return l == r
      case (.formDataParameterSubSchema(let l), .formDataParameterSubSchema(let r)): return l == r
      case (.queryParameterSubSchema(let l), .queryParameterSubSchema(let r)): return l == r
      case (.pathParameterSubSchema(let l), .pathParameterSubSchema(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Openapi_V2_HeaderParameterSubSchema?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .headerParameterSubSchema(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .headerParameterSubSchema(v)}
        case 2:
          var v: Openapi_V2_FormDataParameterSubSchema?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .formDataParameterSubSchema(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .formDataParameterSubSchema(v)}
        case 3:
          var v: Openapi_V2_QueryParameterSubSchema?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .queryParameterSubSchema(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .queryParameterSubSchema(v)}
        case 4:
          var v: Openapi_V2_PathParameterSubSchema?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .pathParameterSubSchema(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .pathParameterSubSchema(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._oneof {
      case .headerParameterSubSchema(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .formDataParameterSubSchema(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .queryParameterSubSchema(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .pathParameterSubSchema(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_Oauth2AccessCodeSecurity: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Oauth2AccessCodeSecurity"

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var flow: String {
    get {return _storage._flow}
    set {_uniqueStorage()._flow = newValue}
  }

  public var scopes: Openapi_V2_Oauth2Scopes {
    get {return _storage._scopes ?? Openapi_V2_Oauth2Scopes()}
    set {_uniqueStorage()._scopes = newValue}
  }
  /// Returns true if `scopes` has been explicitly set.
  public var hasScopes: Bool {return _storage._scopes != nil}
  /// Clears the value of `scopes`. Subsequent reads from it will return its default value.
  public mutating func clearScopes() {_storage._scopes = nil}

  public var authorizationURL: String {
    get {return _storage._authorizationURL}
    set {_uniqueStorage()._authorizationURL = newValue}
  }

  public var tokenURL: String {
    get {return _storage._tokenURL}
    set {_uniqueStorage()._tokenURL = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._type)
        case 2: try decoder.decodeSingularStringField(value: &_storage._flow)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._scopes)
        case 4: try decoder.decodeSingularStringField(value: &_storage._authorizationURL)
        case 5: try decoder.decodeSingularStringField(value: &_storage._tokenURL)
        case 6: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 1)
      }
      if !_storage._flow.isEmpty {
        try visitor.visitSingularStringField(value: _storage._flow, fieldNumber: 2)
      }
      if let v = _storage._scopes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._authorizationURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._authorizationURL, fieldNumber: 4)
      }
      if !_storage._tokenURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tokenURL, fieldNumber: 5)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 6)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_Oauth2ApplicationSecurity: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Oauth2ApplicationSecurity"

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var flow: String {
    get {return _storage._flow}
    set {_uniqueStorage()._flow = newValue}
  }

  public var scopes: Openapi_V2_Oauth2Scopes {
    get {return _storage._scopes ?? Openapi_V2_Oauth2Scopes()}
    set {_uniqueStorage()._scopes = newValue}
  }
  /// Returns true if `scopes` has been explicitly set.
  public var hasScopes: Bool {return _storage._scopes != nil}
  /// Clears the value of `scopes`. Subsequent reads from it will return its default value.
  public mutating func clearScopes() {_storage._scopes = nil}

  public var tokenURL: String {
    get {return _storage._tokenURL}
    set {_uniqueStorage()._tokenURL = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._type)
        case 2: try decoder.decodeSingularStringField(value: &_storage._flow)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._scopes)
        case 4: try decoder.decodeSingularStringField(value: &_storage._tokenURL)
        case 5: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 1)
      }
      if !_storage._flow.isEmpty {
        try visitor.visitSingularStringField(value: _storage._flow, fieldNumber: 2)
      }
      if let v = _storage._scopes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._tokenURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tokenURL, fieldNumber: 4)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 5)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_Oauth2ImplicitSecurity: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Oauth2ImplicitSecurity"

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var flow: String {
    get {return _storage._flow}
    set {_uniqueStorage()._flow = newValue}
  }

  public var scopes: Openapi_V2_Oauth2Scopes {
    get {return _storage._scopes ?? Openapi_V2_Oauth2Scopes()}
    set {_uniqueStorage()._scopes = newValue}
  }
  /// Returns true if `scopes` has been explicitly set.
  public var hasScopes: Bool {return _storage._scopes != nil}
  /// Clears the value of `scopes`. Subsequent reads from it will return its default value.
  public mutating func clearScopes() {_storage._scopes = nil}

  public var authorizationURL: String {
    get {return _storage._authorizationURL}
    set {_uniqueStorage()._authorizationURL = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._type)
        case 2: try decoder.decodeSingularStringField(value: &_storage._flow)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._scopes)
        case 4: try decoder.decodeSingularStringField(value: &_storage._authorizationURL)
        case 5: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 1)
      }
      if !_storage._flow.isEmpty {
        try visitor.visitSingularStringField(value: _storage._flow, fieldNumber: 2)
      }
      if let v = _storage._scopes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._authorizationURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._authorizationURL, fieldNumber: 4)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 5)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_Oauth2PasswordSecurity: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Oauth2PasswordSecurity"

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var flow: String {
    get {return _storage._flow}
    set {_uniqueStorage()._flow = newValue}
  }

  public var scopes: Openapi_V2_Oauth2Scopes {
    get {return _storage._scopes ?? Openapi_V2_Oauth2Scopes()}
    set {_uniqueStorage()._scopes = newValue}
  }
  /// Returns true if `scopes` has been explicitly set.
  public var hasScopes: Bool {return _storage._scopes != nil}
  /// Clears the value of `scopes`. Subsequent reads from it will return its default value.
  public mutating func clearScopes() {_storage._scopes = nil}

  public var tokenURL: String {
    get {return _storage._tokenURL}
    set {_uniqueStorage()._tokenURL = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._type)
        case 2: try decoder.decodeSingularStringField(value: &_storage._flow)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._scopes)
        case 4: try decoder.decodeSingularStringField(value: &_storage._tokenURL)
        case 5: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 1)
      }
      if !_storage._flow.isEmpty {
        try visitor.visitSingularStringField(value: _storage._flow, fieldNumber: 2)
      }
      if let v = _storage._scopes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._tokenURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._tokenURL, fieldNumber: 4)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 5)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_Oauth2Scopes: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Oauth2Scopes"

  public var additionalProperties: [Openapi_V2_NamedString] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.additionalProperties)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.additionalProperties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalProperties, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Openapi_V2_Operation: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Operation"

  public var tags: [String] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  /// A brief summary of the operation.
  public var summary: String {
    get {return _storage._summary}
    set {_uniqueStorage()._summary = newValue}
  }

  /// A longer description of the operation, GitHub Flavored Markdown is allowed.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var externalDocs: Openapi_V2_ExternalDocs {
    get {return _storage._externalDocs ?? Openapi_V2_ExternalDocs()}
    set {_uniqueStorage()._externalDocs = newValue}
  }
  /// Returns true if `externalDocs` has been explicitly set.
  public var hasExternalDocs: Bool {return _storage._externalDocs != nil}
  /// Clears the value of `externalDocs`. Subsequent reads from it will return its default value.
  public mutating func clearExternalDocs() {_storage._externalDocs = nil}

  /// A unique identifier of the operation.
  public var operationID: String {
    get {return _storage._operationID}
    set {_uniqueStorage()._operationID = newValue}
  }

  /// A list of MIME types the API can produce.
  public var produces: [String] {
    get {return _storage._produces}
    set {_uniqueStorage()._produces = newValue}
  }

  /// A list of MIME types the API can consume.
  public var consumes: [String] {
    get {return _storage._consumes}
    set {_uniqueStorage()._consumes = newValue}
  }

  /// The parameters needed to send a valid API call.
  public var parameters: [Openapi_V2_ParametersItem] {
    get {return _storage._parameters}
    set {_uniqueStorage()._parameters = newValue}
  }

  public var responses: Openapi_V2_Responses {
    get {return _storage._responses ?? Openapi_V2_Responses()}
    set {_uniqueStorage()._responses = newValue}
  }
  /// Returns true if `responses` has been explicitly set.
  public var hasResponses: Bool {return _storage._responses != nil}
  /// Clears the value of `responses`. Subsequent reads from it will return its default value.
  public mutating func clearResponses() {_storage._responses = nil}

  /// The transfer protocol of the API.
  public var schemes: [String] {
    get {return _storage._schemes}
    set {_uniqueStorage()._schemes = newValue}
  }

  public var deprecated: Bool {
    get {return _storage._deprecated}
    set {_uniqueStorage()._deprecated = newValue}
  }

  public var security: [Openapi_V2_SecurityRequirement] {
    get {return _storage._security}
    set {_uniqueStorage()._security = newValue}
  }

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedStringField(value: &_storage._tags)
        case 2: try decoder.decodeSingularStringField(value: &_storage._summary)
        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._externalDocs)
        case 5: try decoder.decodeSingularStringField(value: &_storage._operationID)
        case 6: try decoder.decodeRepeatedStringField(value: &_storage._produces)
        case 7: try decoder.decodeRepeatedStringField(value: &_storage._consumes)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._parameters)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._responses)
        case 10: try decoder.decodeRepeatedStringField(value: &_storage._schemes)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._deprecated)
        case 12: try decoder.decodeRepeatedMessageField(value: &_storage._security)
        case 13: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tags, fieldNumber: 1)
      }
      if !_storage._summary.isEmpty {
        try visitor.visitSingularStringField(value: _storage._summary, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if let v = _storage._externalDocs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._operationID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._operationID, fieldNumber: 5)
      }
      if !_storage._produces.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._produces, fieldNumber: 6)
      }
      if !_storage._consumes.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._consumes, fieldNumber: 7)
      }
      if !_storage._parameters.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._parameters, fieldNumber: 8)
      }
      if let v = _storage._responses {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._schemes.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._schemes, fieldNumber: 10)
      }
      if _storage._deprecated != false {
        try visitor.visitSingularBoolField(value: _storage._deprecated, fieldNumber: 11)
      }
      if !_storage._security.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._security, fieldNumber: 12)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_Parameter: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Parameter"

  public var oneof: OneOf_Oneof? {
    get {return _storage._oneof}
    set {_uniqueStorage()._oneof = newValue}
  }

  public var bodyParameter: Openapi_V2_BodyParameter {
    get {
      if case .bodyParameter(let v)? = _storage._oneof {return v}
      return Openapi_V2_BodyParameter()
    }
    set {_uniqueStorage()._oneof = .bodyParameter(newValue)}
  }

  public var nonBodyParameter: Openapi_V2_NonBodyParameter {
    get {
      if case .nonBodyParameter(let v)? = _storage._oneof {return v}
      return Openapi_V2_NonBodyParameter()
    }
    set {_uniqueStorage()._oneof = .nonBodyParameter(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Oneof: Equatable {
    case bodyParameter(Openapi_V2_BodyParameter)
    case nonBodyParameter(Openapi_V2_NonBodyParameter)

    public static func ==(lhs: Openapi_V2_Parameter.OneOf_Oneof, rhs: Openapi_V2_Parameter.OneOf_Oneof) -> Bool {
      switch (lhs, rhs) {
      case (.bodyParameter(let l), .bodyParameter(let r)): return l == r
      case (.nonBodyParameter(let l), .nonBodyParameter(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Openapi_V2_BodyParameter?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .bodyParameter(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .bodyParameter(v)}
        case 2:
          var v: Openapi_V2_NonBodyParameter?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .nonBodyParameter(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .nonBodyParameter(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._oneof {
      case .bodyParameter(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .nonBodyParameter(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// One or more JSON representations for parameters
public struct Openapi_V2_ParameterDefinitions: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ParameterDefinitions"

  public var additionalProperties: [Openapi_V2_NamedParameter] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.additionalProperties)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.additionalProperties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalProperties, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Openapi_V2_ParametersItem: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ParametersItem"

  public var oneof: OneOf_Oneof? {
    get {return _storage._oneof}
    set {_uniqueStorage()._oneof = newValue}
  }

  public var parameter: Openapi_V2_Parameter {
    get {
      if case .parameter(let v)? = _storage._oneof {return v}
      return Openapi_V2_Parameter()
    }
    set {_uniqueStorage()._oneof = .parameter(newValue)}
  }

  public var jsonReference: Openapi_V2_JsonReference {
    get {
      if case .jsonReference(let v)? = _storage._oneof {return v}
      return Openapi_V2_JsonReference()
    }
    set {_uniqueStorage()._oneof = .jsonReference(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Oneof: Equatable {
    case parameter(Openapi_V2_Parameter)
    case jsonReference(Openapi_V2_JsonReference)

    public static func ==(lhs: Openapi_V2_ParametersItem.OneOf_Oneof, rhs: Openapi_V2_ParametersItem.OneOf_Oneof) -> Bool {
      switch (lhs, rhs) {
      case (.parameter(let l), .parameter(let r)): return l == r
      case (.jsonReference(let l), .jsonReference(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Openapi_V2_Parameter?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .parameter(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .parameter(v)}
        case 2:
          var v: Openapi_V2_JsonReference?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .jsonReference(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .jsonReference(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._oneof {
      case .parameter(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .jsonReference(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_PathItem: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".PathItem"

  public var ref: String {
    get {return _storage._ref}
    set {_uniqueStorage()._ref = newValue}
  }

  public var get: Openapi_V2_Operation {
    get {return _storage._get ?? Openapi_V2_Operation()}
    set {_uniqueStorage()._get = newValue}
  }
  /// Returns true if `get` has been explicitly set.
  public var hasGet: Bool {return _storage._get != nil}
  /// Clears the value of `get`. Subsequent reads from it will return its default value.
  public mutating func clearGet() {_storage._get = nil}

  public var put: Openapi_V2_Operation {
    get {return _storage._put ?? Openapi_V2_Operation()}
    set {_uniqueStorage()._put = newValue}
  }
  /// Returns true if `put` has been explicitly set.
  public var hasPut: Bool {return _storage._put != nil}
  /// Clears the value of `put`. Subsequent reads from it will return its default value.
  public mutating func clearPut() {_storage._put = nil}

  public var post: Openapi_V2_Operation {
    get {return _storage._post ?? Openapi_V2_Operation()}
    set {_uniqueStorage()._post = newValue}
  }
  /// Returns true if `post` has been explicitly set.
  public var hasPost: Bool {return _storage._post != nil}
  /// Clears the value of `post`. Subsequent reads from it will return its default value.
  public mutating func clearPost() {_storage._post = nil}

  public var delete: Openapi_V2_Operation {
    get {return _storage._delete ?? Openapi_V2_Operation()}
    set {_uniqueStorage()._delete = newValue}
  }
  /// Returns true if `delete` has been explicitly set.
  public var hasDelete: Bool {return _storage._delete != nil}
  /// Clears the value of `delete`. Subsequent reads from it will return its default value.
  public mutating func clearDelete() {_storage._delete = nil}

  public var options: Openapi_V2_Operation {
    get {return _storage._options ?? Openapi_V2_Operation()}
    set {_uniqueStorage()._options = newValue}
  }
  /// Returns true if `options` has been explicitly set.
  public var hasOptions: Bool {return _storage._options != nil}
  /// Clears the value of `options`. Subsequent reads from it will return its default value.
  public mutating func clearOptions() {_storage._options = nil}

  public var head: Openapi_V2_Operation {
    get {return _storage._head ?? Openapi_V2_Operation()}
    set {_uniqueStorage()._head = newValue}
  }
  /// Returns true if `head` has been explicitly set.
  public var hasHead: Bool {return _storage._head != nil}
  /// Clears the value of `head`. Subsequent reads from it will return its default value.
  public mutating func clearHead() {_storage._head = nil}

  public var patch: Openapi_V2_Operation {
    get {return _storage._patch ?? Openapi_V2_Operation()}
    set {_uniqueStorage()._patch = newValue}
  }
  /// Returns true if `patch` has been explicitly set.
  public var hasPatch: Bool {return _storage._patch != nil}
  /// Clears the value of `patch`. Subsequent reads from it will return its default value.
  public mutating func clearPatch() {_storage._patch = nil}

  /// The parameters needed to send a valid API call.
  public var parameters: [Openapi_V2_ParametersItem] {
    get {return _storage._parameters}
    set {_uniqueStorage()._parameters = newValue}
  }

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._ref)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._get)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._put)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._post)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._delete)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._options)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._head)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._patch)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._parameters)
        case 10: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._ref.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ref, fieldNumber: 1)
      }
      if let v = _storage._get {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._put {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._post {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._delete {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._options {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._head {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._patch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._parameters.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._parameters, fieldNumber: 9)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_PathParameterSubSchema: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".PathParameterSubSchema"

  /// Determines whether or not this parameter is required or optional.
  public var required: Bool {
    get {return _storage._required}
    set {_uniqueStorage()._required = newValue}
  }

  /// Determines the location of the parameter.
  public var `in`: String {
    get {return _storage._in}
    set {_uniqueStorage()._in = newValue}
  }

  /// A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// The name of the parameter.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var format: String {
    get {return _storage._format}
    set {_uniqueStorage()._format = newValue}
  }

  public var items: Openapi_V2_PrimitivesItems {
    get {return _storage._items ?? Openapi_V2_PrimitivesItems()}
    set {_uniqueStorage()._items = newValue}
  }
  /// Returns true if `items` has been explicitly set.
  public var hasItems: Bool {return _storage._items != nil}
  /// Clears the value of `items`. Subsequent reads from it will return its default value.
  public mutating func clearItems() {_storage._items = nil}

  public var collectionFormat: String {
    get {return _storage._collectionFormat}
    set {_uniqueStorage()._collectionFormat = newValue}
  }

  public var `default`: Openapi_V2_Any {
    get {return _storage._default ?? Openapi_V2_Any()}
    set {_uniqueStorage()._default = newValue}
  }
  /// Returns true if ``default`` has been explicitly set.
  public var hasDefault: Bool {return _storage._default != nil}
  /// Clears the value of ``default``. Subsequent reads from it will return its default value.
  public mutating func clearDefault() {_storage._default = nil}

  public var maximum: Double {
    get {return _storage._maximum}
    set {_uniqueStorage()._maximum = newValue}
  }

  public var exclusiveMaximum: Bool {
    get {return _storage._exclusiveMaximum}
    set {_uniqueStorage()._exclusiveMaximum = newValue}
  }

  public var minimum: Double {
    get {return _storage._minimum}
    set {_uniqueStorage()._minimum = newValue}
  }

  public var exclusiveMinimum: Bool {
    get {return _storage._exclusiveMinimum}
    set {_uniqueStorage()._exclusiveMinimum = newValue}
  }

  public var maxLength: Int64 {
    get {return _storage._maxLength}
    set {_uniqueStorage()._maxLength = newValue}
  }

  public var minLength: Int64 {
    get {return _storage._minLength}
    set {_uniqueStorage()._minLength = newValue}
  }

  public var pattern: String {
    get {return _storage._pattern}
    set {_uniqueStorage()._pattern = newValue}
  }

  public var maxItems: Int64 {
    get {return _storage._maxItems}
    set {_uniqueStorage()._maxItems = newValue}
  }

  public var minItems: Int64 {
    get {return _storage._minItems}
    set {_uniqueStorage()._minItems = newValue}
  }

  public var uniqueItems: Bool {
    get {return _storage._uniqueItems}
    set {_uniqueStorage()._uniqueItems = newValue}
  }

  public var `enum`: [Openapi_V2_Any] {
    get {return _storage._enum}
    set {_uniqueStorage()._enum = newValue}
  }

  public var multipleOf: Double {
    get {return _storage._multipleOf}
    set {_uniqueStorage()._multipleOf = newValue}
  }

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._required)
        case 2: try decoder.decodeSingularStringField(value: &_storage._in)
        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 4: try decoder.decodeSingularStringField(value: &_storage._name)
        case 5: try decoder.decodeSingularStringField(value: &_storage._type)
        case 6: try decoder.decodeSingularStringField(value: &_storage._format)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._items)
        case 8: try decoder.decodeSingularStringField(value: &_storage._collectionFormat)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._default)
        case 10: try decoder.decodeSingularDoubleField(value: &_storage._maximum)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._exclusiveMaximum)
        case 12: try decoder.decodeSingularDoubleField(value: &_storage._minimum)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._exclusiveMinimum)
        case 14: try decoder.decodeSingularInt64Field(value: &_storage._maxLength)
        case 15: try decoder.decodeSingularInt64Field(value: &_storage._minLength)
        case 16: try decoder.decodeSingularStringField(value: &_storage._pattern)
        case 17: try decoder.decodeSingularInt64Field(value: &_storage._maxItems)
        case 18: try decoder.decodeSingularInt64Field(value: &_storage._minItems)
        case 19: try decoder.decodeSingularBoolField(value: &_storage._uniqueItems)
        case 20: try decoder.decodeRepeatedMessageField(value: &_storage._enum)
        case 21: try decoder.decodeSingularDoubleField(value: &_storage._multipleOf)
        case 22: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._required != false {
        try visitor.visitSingularBoolField(value: _storage._required, fieldNumber: 1)
      }
      if !_storage._in.isEmpty {
        try visitor.visitSingularStringField(value: _storage._in, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 4)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 5)
      }
      if !_storage._format.isEmpty {
        try visitor.visitSingularStringField(value: _storage._format, fieldNumber: 6)
      }
      if let v = _storage._items {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._collectionFormat.isEmpty {
        try visitor.visitSingularStringField(value: _storage._collectionFormat, fieldNumber: 8)
      }
      if let v = _storage._default {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if _storage._maximum != 0 {
        try visitor.visitSingularDoubleField(value: _storage._maximum, fieldNumber: 10)
      }
      if _storage._exclusiveMaximum != false {
        try visitor.visitSingularBoolField(value: _storage._exclusiveMaximum, fieldNumber: 11)
      }
      if _storage._minimum != 0 {
        try visitor.visitSingularDoubleField(value: _storage._minimum, fieldNumber: 12)
      }
      if _storage._exclusiveMinimum != false {
        try visitor.visitSingularBoolField(value: _storage._exclusiveMinimum, fieldNumber: 13)
      }
      if _storage._maxLength != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxLength, fieldNumber: 14)
      }
      if _storage._minLength != 0 {
        try visitor.visitSingularInt64Field(value: _storage._minLength, fieldNumber: 15)
      }
      if !_storage._pattern.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pattern, fieldNumber: 16)
      }
      if _storage._maxItems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxItems, fieldNumber: 17)
      }
      if _storage._minItems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._minItems, fieldNumber: 18)
      }
      if _storage._uniqueItems != false {
        try visitor.visitSingularBoolField(value: _storage._uniqueItems, fieldNumber: 19)
      }
      if !_storage._enum.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._enum, fieldNumber: 20)
      }
      if _storage._multipleOf != 0 {
        try visitor.visitSingularDoubleField(value: _storage._multipleOf, fieldNumber: 21)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Relative paths to the individual endpoints. They must be relative to the 'basePath'.
public struct Openapi_V2_Paths: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Paths"

  public var vendorExtension: [Openapi_V2_NamedAny] = []

  public var path: [Openapi_V2_NamedPathItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.vendorExtension)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.path)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vendorExtension.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vendorExtension, fieldNumber: 1)
    }
    if !self.path.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.path, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Openapi_V2_PrimitivesItems: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".PrimitivesItems"

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var format: String {
    get {return _storage._format}
    set {_uniqueStorage()._format = newValue}
  }

  public var items: Openapi_V2_PrimitivesItems {
    get {return _storage._items ?? Openapi_V2_PrimitivesItems()}
    set {_uniqueStorage()._items = newValue}
  }
  /// Returns true if `items` has been explicitly set.
  public var hasItems: Bool {return _storage._items != nil}
  /// Clears the value of `items`. Subsequent reads from it will return its default value.
  public mutating func clearItems() {_storage._items = nil}

  public var collectionFormat: String {
    get {return _storage._collectionFormat}
    set {_uniqueStorage()._collectionFormat = newValue}
  }

  public var `default`: Openapi_V2_Any {
    get {return _storage._default ?? Openapi_V2_Any()}
    set {_uniqueStorage()._default = newValue}
  }
  /// Returns true if ``default`` has been explicitly set.
  public var hasDefault: Bool {return _storage._default != nil}
  /// Clears the value of ``default``. Subsequent reads from it will return its default value.
  public mutating func clearDefault() {_storage._default = nil}

  public var maximum: Double {
    get {return _storage._maximum}
    set {_uniqueStorage()._maximum = newValue}
  }

  public var exclusiveMaximum: Bool {
    get {return _storage._exclusiveMaximum}
    set {_uniqueStorage()._exclusiveMaximum = newValue}
  }

  public var minimum: Double {
    get {return _storage._minimum}
    set {_uniqueStorage()._minimum = newValue}
  }

  public var exclusiveMinimum: Bool {
    get {return _storage._exclusiveMinimum}
    set {_uniqueStorage()._exclusiveMinimum = newValue}
  }

  public var maxLength: Int64 {
    get {return _storage._maxLength}
    set {_uniqueStorage()._maxLength = newValue}
  }

  public var minLength: Int64 {
    get {return _storage._minLength}
    set {_uniqueStorage()._minLength = newValue}
  }

  public var pattern: String {
    get {return _storage._pattern}
    set {_uniqueStorage()._pattern = newValue}
  }

  public var maxItems: Int64 {
    get {return _storage._maxItems}
    set {_uniqueStorage()._maxItems = newValue}
  }

  public var minItems: Int64 {
    get {return _storage._minItems}
    set {_uniqueStorage()._minItems = newValue}
  }

  public var uniqueItems: Bool {
    get {return _storage._uniqueItems}
    set {_uniqueStorage()._uniqueItems = newValue}
  }

  public var `enum`: [Openapi_V2_Any] {
    get {return _storage._enum}
    set {_uniqueStorage()._enum = newValue}
  }

  public var multipleOf: Double {
    get {return _storage._multipleOf}
    set {_uniqueStorage()._multipleOf = newValue}
  }

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._type)
        case 2: try decoder.decodeSingularStringField(value: &_storage._format)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._items)
        case 4: try decoder.decodeSingularStringField(value: &_storage._collectionFormat)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._default)
        case 6: try decoder.decodeSingularDoubleField(value: &_storage._maximum)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._exclusiveMaximum)
        case 8: try decoder.decodeSingularDoubleField(value: &_storage._minimum)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._exclusiveMinimum)
        case 10: try decoder.decodeSingularInt64Field(value: &_storage._maxLength)
        case 11: try decoder.decodeSingularInt64Field(value: &_storage._minLength)
        case 12: try decoder.decodeSingularStringField(value: &_storage._pattern)
        case 13: try decoder.decodeSingularInt64Field(value: &_storage._maxItems)
        case 14: try decoder.decodeSingularInt64Field(value: &_storage._minItems)
        case 15: try decoder.decodeSingularBoolField(value: &_storage._uniqueItems)
        case 16: try decoder.decodeRepeatedMessageField(value: &_storage._enum)
        case 17: try decoder.decodeSingularDoubleField(value: &_storage._multipleOf)
        case 18: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 1)
      }
      if !_storage._format.isEmpty {
        try visitor.visitSingularStringField(value: _storage._format, fieldNumber: 2)
      }
      if let v = _storage._items {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._collectionFormat.isEmpty {
        try visitor.visitSingularStringField(value: _storage._collectionFormat, fieldNumber: 4)
      }
      if let v = _storage._default {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._maximum != 0 {
        try visitor.visitSingularDoubleField(value: _storage._maximum, fieldNumber: 6)
      }
      if _storage._exclusiveMaximum != false {
        try visitor.visitSingularBoolField(value: _storage._exclusiveMaximum, fieldNumber: 7)
      }
      if _storage._minimum != 0 {
        try visitor.visitSingularDoubleField(value: _storage._minimum, fieldNumber: 8)
      }
      if _storage._exclusiveMinimum != false {
        try visitor.visitSingularBoolField(value: _storage._exclusiveMinimum, fieldNumber: 9)
      }
      if _storage._maxLength != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxLength, fieldNumber: 10)
      }
      if _storage._minLength != 0 {
        try visitor.visitSingularInt64Field(value: _storage._minLength, fieldNumber: 11)
      }
      if !_storage._pattern.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pattern, fieldNumber: 12)
      }
      if _storage._maxItems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxItems, fieldNumber: 13)
      }
      if _storage._minItems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._minItems, fieldNumber: 14)
      }
      if _storage._uniqueItems != false {
        try visitor.visitSingularBoolField(value: _storage._uniqueItems, fieldNumber: 15)
      }
      if !_storage._enum.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._enum, fieldNumber: 16)
      }
      if _storage._multipleOf != 0 {
        try visitor.visitSingularDoubleField(value: _storage._multipleOf, fieldNumber: 17)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_Properties: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Properties"

  public var additionalProperties: [Openapi_V2_NamedSchema] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.additionalProperties)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.additionalProperties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalProperties, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Openapi_V2_QueryParameterSubSchema: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".QueryParameterSubSchema"

  /// Determines whether or not this parameter is required or optional.
  public var required: Bool {
    get {return _storage._required}
    set {_uniqueStorage()._required = newValue}
  }

  /// Determines the location of the parameter.
  public var `in`: String {
    get {return _storage._in}
    set {_uniqueStorage()._in = newValue}
  }

  /// A brief description of the parameter. This could contain examples of use.  GitHub Flavored Markdown is allowed.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// The name of the parameter.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// allows sending a parameter by name only or with an empty value.
  public var allowEmptyValue: Bool {
    get {return _storage._allowEmptyValue}
    set {_uniqueStorage()._allowEmptyValue = newValue}
  }

  public var type: String {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var format: String {
    get {return _storage._format}
    set {_uniqueStorage()._format = newValue}
  }

  public var items: Openapi_V2_PrimitivesItems {
    get {return _storage._items ?? Openapi_V2_PrimitivesItems()}
    set {_uniqueStorage()._items = newValue}
  }
  /// Returns true if `items` has been explicitly set.
  public var hasItems: Bool {return _storage._items != nil}
  /// Clears the value of `items`. Subsequent reads from it will return its default value.
  public mutating func clearItems() {_storage._items = nil}

  public var collectionFormat: String {
    get {return _storage._collectionFormat}
    set {_uniqueStorage()._collectionFormat = newValue}
  }

  public var `default`: Openapi_V2_Any {
    get {return _storage._default ?? Openapi_V2_Any()}
    set {_uniqueStorage()._default = newValue}
  }
  /// Returns true if ``default`` has been explicitly set.
  public var hasDefault: Bool {return _storage._default != nil}
  /// Clears the value of ``default``. Subsequent reads from it will return its default value.
  public mutating func clearDefault() {_storage._default = nil}

  public var maximum: Double {
    get {return _storage._maximum}
    set {_uniqueStorage()._maximum = newValue}
  }

  public var exclusiveMaximum: Bool {
    get {return _storage._exclusiveMaximum}
    set {_uniqueStorage()._exclusiveMaximum = newValue}
  }

  public var minimum: Double {
    get {return _storage._minimum}
    set {_uniqueStorage()._minimum = newValue}
  }

  public var exclusiveMinimum: Bool {
    get {return _storage._exclusiveMinimum}
    set {_uniqueStorage()._exclusiveMinimum = newValue}
  }

  public var maxLength: Int64 {
    get {return _storage._maxLength}
    set {_uniqueStorage()._maxLength = newValue}
  }

  public var minLength: Int64 {
    get {return _storage._minLength}
    set {_uniqueStorage()._minLength = newValue}
  }

  public var pattern: String {
    get {return _storage._pattern}
    set {_uniqueStorage()._pattern = newValue}
  }

  public var maxItems: Int64 {
    get {return _storage._maxItems}
    set {_uniqueStorage()._maxItems = newValue}
  }

  public var minItems: Int64 {
    get {return _storage._minItems}
    set {_uniqueStorage()._minItems = newValue}
  }

  public var uniqueItems: Bool {
    get {return _storage._uniqueItems}
    set {_uniqueStorage()._uniqueItems = newValue}
  }

  public var `enum`: [Openapi_V2_Any] {
    get {return _storage._enum}
    set {_uniqueStorage()._enum = newValue}
  }

  public var multipleOf: Double {
    get {return _storage._multipleOf}
    set {_uniqueStorage()._multipleOf = newValue}
  }

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._required)
        case 2: try decoder.decodeSingularStringField(value: &_storage._in)
        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 4: try decoder.decodeSingularStringField(value: &_storage._name)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._allowEmptyValue)
        case 6: try decoder.decodeSingularStringField(value: &_storage._type)
        case 7: try decoder.decodeSingularStringField(value: &_storage._format)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._items)
        case 9: try decoder.decodeSingularStringField(value: &_storage._collectionFormat)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._default)
        case 11: try decoder.decodeSingularDoubleField(value: &_storage._maximum)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._exclusiveMaximum)
        case 13: try decoder.decodeSingularDoubleField(value: &_storage._minimum)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._exclusiveMinimum)
        case 15: try decoder.decodeSingularInt64Field(value: &_storage._maxLength)
        case 16: try decoder.decodeSingularInt64Field(value: &_storage._minLength)
        case 17: try decoder.decodeSingularStringField(value: &_storage._pattern)
        case 18: try decoder.decodeSingularInt64Field(value: &_storage._maxItems)
        case 19: try decoder.decodeSingularInt64Field(value: &_storage._minItems)
        case 20: try decoder.decodeSingularBoolField(value: &_storage._uniqueItems)
        case 21: try decoder.decodeRepeatedMessageField(value: &_storage._enum)
        case 22: try decoder.decodeSingularDoubleField(value: &_storage._multipleOf)
        case 23: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._required != false {
        try visitor.visitSingularBoolField(value: _storage._required, fieldNumber: 1)
      }
      if !_storage._in.isEmpty {
        try visitor.visitSingularStringField(value: _storage._in, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 4)
      }
      if _storage._allowEmptyValue != false {
        try visitor.visitSingularBoolField(value: _storage._allowEmptyValue, fieldNumber: 5)
      }
      if !_storage._type.isEmpty {
        try visitor.visitSingularStringField(value: _storage._type, fieldNumber: 6)
      }
      if !_storage._format.isEmpty {
        try visitor.visitSingularStringField(value: _storage._format, fieldNumber: 7)
      }
      if let v = _storage._items {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._collectionFormat.isEmpty {
        try visitor.visitSingularStringField(value: _storage._collectionFormat, fieldNumber: 9)
      }
      if let v = _storage._default {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if _storage._maximum != 0 {
        try visitor.visitSingularDoubleField(value: _storage._maximum, fieldNumber: 11)
      }
      if _storage._exclusiveMaximum != false {
        try visitor.visitSingularBoolField(value: _storage._exclusiveMaximum, fieldNumber: 12)
      }
      if _storage._minimum != 0 {
        try visitor.visitSingularDoubleField(value: _storage._minimum, fieldNumber: 13)
      }
      if _storage._exclusiveMinimum != false {
        try visitor.visitSingularBoolField(value: _storage._exclusiveMinimum, fieldNumber: 14)
      }
      if _storage._maxLength != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxLength, fieldNumber: 15)
      }
      if _storage._minLength != 0 {
        try visitor.visitSingularInt64Field(value: _storage._minLength, fieldNumber: 16)
      }
      if !_storage._pattern.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pattern, fieldNumber: 17)
      }
      if _storage._maxItems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxItems, fieldNumber: 18)
      }
      if _storage._minItems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._minItems, fieldNumber: 19)
      }
      if _storage._uniqueItems != false {
        try visitor.visitSingularBoolField(value: _storage._uniqueItems, fieldNumber: 20)
      }
      if !_storage._enum.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._enum, fieldNumber: 21)
      }
      if _storage._multipleOf != 0 {
        try visitor.visitSingularDoubleField(value: _storage._multipleOf, fieldNumber: 22)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 23)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_Response: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Response"

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var schema: Openapi_V2_SchemaItem {
    get {return _storage._schema ?? Openapi_V2_SchemaItem()}
    set {_uniqueStorage()._schema = newValue}
  }
  /// Returns true if `schema` has been explicitly set.
  public var hasSchema: Bool {return _storage._schema != nil}
  /// Clears the value of `schema`. Subsequent reads from it will return its default value.
  public mutating func clearSchema() {_storage._schema = nil}

  public var headers: Openapi_V2_Headers {
    get {return _storage._headers ?? Openapi_V2_Headers()}
    set {_uniqueStorage()._headers = newValue}
  }
  /// Returns true if `headers` has been explicitly set.
  public var hasHeaders: Bool {return _storage._headers != nil}
  /// Clears the value of `headers`. Subsequent reads from it will return its default value.
  public mutating func clearHeaders() {_storage._headers = nil}

  public var examples: Openapi_V2_Examples {
    get {return _storage._examples ?? Openapi_V2_Examples()}
    set {_uniqueStorage()._examples = newValue}
  }
  /// Returns true if `examples` has been explicitly set.
  public var hasExamples: Bool {return _storage._examples != nil}
  /// Clears the value of `examples`. Subsequent reads from it will return its default value.
  public mutating func clearExamples() {_storage._examples = nil}

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._schema)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._headers)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._examples)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 1)
      }
      if let v = _storage._schema {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._headers {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._examples {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// One or more JSON representations for parameters
public struct Openapi_V2_ResponseDefinitions: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ResponseDefinitions"

  public var additionalProperties: [Openapi_V2_NamedResponse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.additionalProperties)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.additionalProperties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalProperties, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Openapi_V2_ResponseValue: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ResponseValue"

  public var oneof: OneOf_Oneof? {
    get {return _storage._oneof}
    set {_uniqueStorage()._oneof = newValue}
  }

  public var response: Openapi_V2_Response {
    get {
      if case .response(let v)? = _storage._oneof {return v}
      return Openapi_V2_Response()
    }
    set {_uniqueStorage()._oneof = .response(newValue)}
  }

  public var jsonReference: Openapi_V2_JsonReference {
    get {
      if case .jsonReference(let v)? = _storage._oneof {return v}
      return Openapi_V2_JsonReference()
    }
    set {_uniqueStorage()._oneof = .jsonReference(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Oneof: Equatable {
    case response(Openapi_V2_Response)
    case jsonReference(Openapi_V2_JsonReference)

    public static func ==(lhs: Openapi_V2_ResponseValue.OneOf_Oneof, rhs: Openapi_V2_ResponseValue.OneOf_Oneof) -> Bool {
      switch (lhs, rhs) {
      case (.response(let l), .response(let r)): return l == r
      case (.jsonReference(let l), .jsonReference(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Openapi_V2_Response?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .response(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .response(v)}
        case 2:
          var v: Openapi_V2_JsonReference?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .jsonReference(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .jsonReference(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._oneof {
      case .response(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .jsonReference(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Response objects names can either be any valid HTTP status code or 'default'.
public struct Openapi_V2_Responses: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Responses"

  public var responseCode: [Openapi_V2_NamedResponseValue] = []

  public var vendorExtension: [Openapi_V2_NamedAny] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.responseCode)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.vendorExtension)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.responseCode.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.responseCode, fieldNumber: 1)
    }
    if !self.vendorExtension.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vendorExtension, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// A deterministic version of a JSON Schema object.
public struct Openapi_V2_Schema: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Schema"

  public var ref: String {
    get {return _storage._ref}
    set {_uniqueStorage()._ref = newValue}
  }

  public var format: String {
    get {return _storage._format}
    set {_uniqueStorage()._format = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var `default`: Openapi_V2_Any {
    get {return _storage._default ?? Openapi_V2_Any()}
    set {_uniqueStorage()._default = newValue}
  }
  /// Returns true if ``default`` has been explicitly set.
  public var hasDefault: Bool {return _storage._default != nil}
  /// Clears the value of ``default``. Subsequent reads from it will return its default value.
  public mutating func clearDefault() {_storage._default = nil}

  public var multipleOf: Double {
    get {return _storage._multipleOf}
    set {_uniqueStorage()._multipleOf = newValue}
  }

  public var maximum: Double {
    get {return _storage._maximum}
    set {_uniqueStorage()._maximum = newValue}
  }

  public var exclusiveMaximum: Bool {
    get {return _storage._exclusiveMaximum}
    set {_uniqueStorage()._exclusiveMaximum = newValue}
  }

  public var minimum: Double {
    get {return _storage._minimum}
    set {_uniqueStorage()._minimum = newValue}
  }

  public var exclusiveMinimum: Bool {
    get {return _storage._exclusiveMinimum}
    set {_uniqueStorage()._exclusiveMinimum = newValue}
  }

  public var maxLength: Int64 {
    get {return _storage._maxLength}
    set {_uniqueStorage()._maxLength = newValue}
  }

  public var minLength: Int64 {
    get {return _storage._minLength}
    set {_uniqueStorage()._minLength = newValue}
  }

  public var pattern: String {
    get {return _storage._pattern}
    set {_uniqueStorage()._pattern = newValue}
  }

  public var maxItems: Int64 {
    get {return _storage._maxItems}
    set {_uniqueStorage()._maxItems = newValue}
  }

  public var minItems: Int64 {
    get {return _storage._minItems}
    set {_uniqueStorage()._minItems = newValue}
  }

  public var uniqueItems: Bool {
    get {return _storage._uniqueItems}
    set {_uniqueStorage()._uniqueItems = newValue}
  }

  public var maxProperties: Int64 {
    get {return _storage._maxProperties}
    set {_uniqueStorage()._maxProperties = newValue}
  }

  public var minProperties: Int64 {
    get {return _storage._minProperties}
    set {_uniqueStorage()._minProperties = newValue}
  }

  public var required: [String] {
    get {return _storage._required}
    set {_uniqueStorage()._required = newValue}
  }

  public var `enum`: [Openapi_V2_Any] {
    get {return _storage._enum}
    set {_uniqueStorage()._enum = newValue}
  }

  public var additionalProperties: Openapi_V2_AdditionalPropertiesItem {
    get {return _storage._additionalProperties ?? Openapi_V2_AdditionalPropertiesItem()}
    set {_uniqueStorage()._additionalProperties = newValue}
  }
  /// Returns true if `additionalProperties` has been explicitly set.
  public var hasAdditionalProperties: Bool {return _storage._additionalProperties != nil}
  /// Clears the value of `additionalProperties`. Subsequent reads from it will return its default value.
  public mutating func clearAdditionalProperties() {_storage._additionalProperties = nil}

  public var type: Openapi_V2_TypeItem {
    get {return _storage._type ?? Openapi_V2_TypeItem()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {_storage._type = nil}

  public var items: Openapi_V2_ItemsItem {
    get {return _storage._items ?? Openapi_V2_ItemsItem()}
    set {_uniqueStorage()._items = newValue}
  }
  /// Returns true if `items` has been explicitly set.
  public var hasItems: Bool {return _storage._items != nil}
  /// Clears the value of `items`. Subsequent reads from it will return its default value.
  public mutating func clearItems() {_storage._items = nil}

  public var allOf: [Openapi_V2_Schema] {
    get {return _storage._allOf}
    set {_uniqueStorage()._allOf = newValue}
  }

  public var properties: Openapi_V2_Properties {
    get {return _storage._properties ?? Openapi_V2_Properties()}
    set {_uniqueStorage()._properties = newValue}
  }
  /// Returns true if `properties` has been explicitly set.
  public var hasProperties: Bool {return _storage._properties != nil}
  /// Clears the value of `properties`. Subsequent reads from it will return its default value.
  public mutating func clearProperties() {_storage._properties = nil}

  public var discriminator: String {
    get {return _storage._discriminator}
    set {_uniqueStorage()._discriminator = newValue}
  }

  public var readOnly: Bool {
    get {return _storage._readOnly}
    set {_uniqueStorage()._readOnly = newValue}
  }

  public var xml: Openapi_V2_Xml {
    get {return _storage._xml ?? Openapi_V2_Xml()}
    set {_uniqueStorage()._xml = newValue}
  }
  /// Returns true if `xml` has been explicitly set.
  public var hasXml: Bool {return _storage._xml != nil}
  /// Clears the value of `xml`. Subsequent reads from it will return its default value.
  public mutating func clearXml() {_storage._xml = nil}

  public var externalDocs: Openapi_V2_ExternalDocs {
    get {return _storage._externalDocs ?? Openapi_V2_ExternalDocs()}
    set {_uniqueStorage()._externalDocs = newValue}
  }
  /// Returns true if `externalDocs` has been explicitly set.
  public var hasExternalDocs: Bool {return _storage._externalDocs != nil}
  /// Clears the value of `externalDocs`. Subsequent reads from it will return its default value.
  public mutating func clearExternalDocs() {_storage._externalDocs = nil}

  public var example: Openapi_V2_Any {
    get {return _storage._example ?? Openapi_V2_Any()}
    set {_uniqueStorage()._example = newValue}
  }
  /// Returns true if `example` has been explicitly set.
  public var hasExample: Bool {return _storage._example != nil}
  /// Clears the value of `example`. Subsequent reads from it will return its default value.
  public mutating func clearExample() {_storage._example = nil}

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._ref)
        case 2: try decoder.decodeSingularStringField(value: &_storage._format)
        case 3: try decoder.decodeSingularStringField(value: &_storage._title)
        case 4: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._default)
        case 6: try decoder.decodeSingularDoubleField(value: &_storage._multipleOf)
        case 7: try decoder.decodeSingularDoubleField(value: &_storage._maximum)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._exclusiveMaximum)
        case 9: try decoder.decodeSingularDoubleField(value: &_storage._minimum)
        case 10: try decoder.decodeSingularBoolField(value: &_storage._exclusiveMinimum)
        case 11: try decoder.decodeSingularInt64Field(value: &_storage._maxLength)
        case 12: try decoder.decodeSingularInt64Field(value: &_storage._minLength)
        case 13: try decoder.decodeSingularStringField(value: &_storage._pattern)
        case 14: try decoder.decodeSingularInt64Field(value: &_storage._maxItems)
        case 15: try decoder.decodeSingularInt64Field(value: &_storage._minItems)
        case 16: try decoder.decodeSingularBoolField(value: &_storage._uniqueItems)
        case 17: try decoder.decodeSingularInt64Field(value: &_storage._maxProperties)
        case 18: try decoder.decodeSingularInt64Field(value: &_storage._minProperties)
        case 19: try decoder.decodeRepeatedStringField(value: &_storage._required)
        case 20: try decoder.decodeRepeatedMessageField(value: &_storage._enum)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._additionalProperties)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._type)
        case 23: try decoder.decodeSingularMessageField(value: &_storage._items)
        case 24: try decoder.decodeRepeatedMessageField(value: &_storage._allOf)
        case 25: try decoder.decodeSingularMessageField(value: &_storage._properties)
        case 26: try decoder.decodeSingularStringField(value: &_storage._discriminator)
        case 27: try decoder.decodeSingularBoolField(value: &_storage._readOnly)
        case 28: try decoder.decodeSingularMessageField(value: &_storage._xml)
        case 29: try decoder.decodeSingularMessageField(value: &_storage._externalDocs)
        case 30: try decoder.decodeSingularMessageField(value: &_storage._example)
        case 31: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._ref.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ref, fieldNumber: 1)
      }
      if !_storage._format.isEmpty {
        try visitor.visitSingularStringField(value: _storage._format, fieldNumber: 2)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 3)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 4)
      }
      if let v = _storage._default {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._multipleOf != 0 {
        try visitor.visitSingularDoubleField(value: _storage._multipleOf, fieldNumber: 6)
      }
      if _storage._maximum != 0 {
        try visitor.visitSingularDoubleField(value: _storage._maximum, fieldNumber: 7)
      }
      if _storage._exclusiveMaximum != false {
        try visitor.visitSingularBoolField(value: _storage._exclusiveMaximum, fieldNumber: 8)
      }
      if _storage._minimum != 0 {
        try visitor.visitSingularDoubleField(value: _storage._minimum, fieldNumber: 9)
      }
      if _storage._exclusiveMinimum != false {
        try visitor.visitSingularBoolField(value: _storage._exclusiveMinimum, fieldNumber: 10)
      }
      if _storage._maxLength != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxLength, fieldNumber: 11)
      }
      if _storage._minLength != 0 {
        try visitor.visitSingularInt64Field(value: _storage._minLength, fieldNumber: 12)
      }
      if !_storage._pattern.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pattern, fieldNumber: 13)
      }
      if _storage._maxItems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxItems, fieldNumber: 14)
      }
      if _storage._minItems != 0 {
        try visitor.visitSingularInt64Field(value: _storage._minItems, fieldNumber: 15)
      }
      if _storage._uniqueItems != false {
        try visitor.visitSingularBoolField(value: _storage._uniqueItems, fieldNumber: 16)
      }
      if _storage._maxProperties != 0 {
        try visitor.visitSingularInt64Field(value: _storage._maxProperties, fieldNumber: 17)
      }
      if _storage._minProperties != 0 {
        try visitor.visitSingularInt64Field(value: _storage._minProperties, fieldNumber: 18)
      }
      if !_storage._required.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._required, fieldNumber: 19)
      }
      if !_storage._enum.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._enum, fieldNumber: 20)
      }
      if let v = _storage._additionalProperties {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if let v = _storage._items {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      }
      if !_storage._allOf.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._allOf, fieldNumber: 24)
      }
      if let v = _storage._properties {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      }
      if !_storage._discriminator.isEmpty {
        try visitor.visitSingularStringField(value: _storage._discriminator, fieldNumber: 26)
      }
      if _storage._readOnly != false {
        try visitor.visitSingularBoolField(value: _storage._readOnly, fieldNumber: 27)
      }
      if let v = _storage._xml {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      }
      if let v = _storage._externalDocs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      }
      if let v = _storage._example {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 31)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_SchemaItem: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".SchemaItem"

  public var oneof: OneOf_Oneof? {
    get {return _storage._oneof}
    set {_uniqueStorage()._oneof = newValue}
  }

  public var schema: Openapi_V2_Schema {
    get {
      if case .schema(let v)? = _storage._oneof {return v}
      return Openapi_V2_Schema()
    }
    set {_uniqueStorage()._oneof = .schema(newValue)}
  }

  public var fileSchema: Openapi_V2_FileSchema {
    get {
      if case .fileSchema(let v)? = _storage._oneof {return v}
      return Openapi_V2_FileSchema()
    }
    set {_uniqueStorage()._oneof = .fileSchema(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Oneof: Equatable {
    case schema(Openapi_V2_Schema)
    case fileSchema(Openapi_V2_FileSchema)

    public static func ==(lhs: Openapi_V2_SchemaItem.OneOf_Oneof, rhs: Openapi_V2_SchemaItem.OneOf_Oneof) -> Bool {
      switch (lhs, rhs) {
      case (.schema(let l), .schema(let r)): return l == r
      case (.fileSchema(let l), .fileSchema(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Openapi_V2_Schema?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .schema(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .schema(v)}
        case 2:
          var v: Openapi_V2_FileSchema?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .fileSchema(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .fileSchema(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._oneof {
      case .schema(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .fileSchema(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_SecurityDefinitions: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".SecurityDefinitions"

  public var additionalProperties: [Openapi_V2_NamedSecurityDefinitionsItem] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.additionalProperties)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.additionalProperties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalProperties, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Openapi_V2_SecurityDefinitionsItem: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".SecurityDefinitionsItem"

  public var oneof: OneOf_Oneof? {
    get {return _storage._oneof}
    set {_uniqueStorage()._oneof = newValue}
  }

  public var basicAuthenticationSecurity: Openapi_V2_BasicAuthenticationSecurity {
    get {
      if case .basicAuthenticationSecurity(let v)? = _storage._oneof {return v}
      return Openapi_V2_BasicAuthenticationSecurity()
    }
    set {_uniqueStorage()._oneof = .basicAuthenticationSecurity(newValue)}
  }

  public var apiKeySecurity: Openapi_V2_ApiKeySecurity {
    get {
      if case .apiKeySecurity(let v)? = _storage._oneof {return v}
      return Openapi_V2_ApiKeySecurity()
    }
    set {_uniqueStorage()._oneof = .apiKeySecurity(newValue)}
  }

  public var oauth2ImplicitSecurity: Openapi_V2_Oauth2ImplicitSecurity {
    get {
      if case .oauth2ImplicitSecurity(let v)? = _storage._oneof {return v}
      return Openapi_V2_Oauth2ImplicitSecurity()
    }
    set {_uniqueStorage()._oneof = .oauth2ImplicitSecurity(newValue)}
  }

  public var oauth2PasswordSecurity: Openapi_V2_Oauth2PasswordSecurity {
    get {
      if case .oauth2PasswordSecurity(let v)? = _storage._oneof {return v}
      return Openapi_V2_Oauth2PasswordSecurity()
    }
    set {_uniqueStorage()._oneof = .oauth2PasswordSecurity(newValue)}
  }

  public var oauth2ApplicationSecurity: Openapi_V2_Oauth2ApplicationSecurity {
    get {
      if case .oauth2ApplicationSecurity(let v)? = _storage._oneof {return v}
      return Openapi_V2_Oauth2ApplicationSecurity()
    }
    set {_uniqueStorage()._oneof = .oauth2ApplicationSecurity(newValue)}
  }

  public var oauth2AccessCodeSecurity: Openapi_V2_Oauth2AccessCodeSecurity {
    get {
      if case .oauth2AccessCodeSecurity(let v)? = _storage._oneof {return v}
      return Openapi_V2_Oauth2AccessCodeSecurity()
    }
    set {_uniqueStorage()._oneof = .oauth2AccessCodeSecurity(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Oneof: Equatable {
    case basicAuthenticationSecurity(Openapi_V2_BasicAuthenticationSecurity)
    case apiKeySecurity(Openapi_V2_ApiKeySecurity)
    case oauth2ImplicitSecurity(Openapi_V2_Oauth2ImplicitSecurity)
    case oauth2PasswordSecurity(Openapi_V2_Oauth2PasswordSecurity)
    case oauth2ApplicationSecurity(Openapi_V2_Oauth2ApplicationSecurity)
    case oauth2AccessCodeSecurity(Openapi_V2_Oauth2AccessCodeSecurity)

    public static func ==(lhs: Openapi_V2_SecurityDefinitionsItem.OneOf_Oneof, rhs: Openapi_V2_SecurityDefinitionsItem.OneOf_Oneof) -> Bool {
      switch (lhs, rhs) {
      case (.basicAuthenticationSecurity(let l), .basicAuthenticationSecurity(let r)): return l == r
      case (.apiKeySecurity(let l), .apiKeySecurity(let r)): return l == r
      case (.oauth2ImplicitSecurity(let l), .oauth2ImplicitSecurity(let r)): return l == r
      case (.oauth2PasswordSecurity(let l), .oauth2PasswordSecurity(let r)): return l == r
      case (.oauth2ApplicationSecurity(let l), .oauth2ApplicationSecurity(let r)): return l == r
      case (.oauth2AccessCodeSecurity(let l), .oauth2AccessCodeSecurity(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Openapi_V2_BasicAuthenticationSecurity?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .basicAuthenticationSecurity(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .basicAuthenticationSecurity(v)}
        case 2:
          var v: Openapi_V2_ApiKeySecurity?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .apiKeySecurity(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .apiKeySecurity(v)}
        case 3:
          var v: Openapi_V2_Oauth2ImplicitSecurity?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .oauth2ImplicitSecurity(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .oauth2ImplicitSecurity(v)}
        case 4:
          var v: Openapi_V2_Oauth2PasswordSecurity?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .oauth2PasswordSecurity(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .oauth2PasswordSecurity(v)}
        case 5:
          var v: Openapi_V2_Oauth2ApplicationSecurity?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .oauth2ApplicationSecurity(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .oauth2ApplicationSecurity(v)}
        case 6:
          var v: Openapi_V2_Oauth2AccessCodeSecurity?
          if let current = _storage._oneof {
            try decoder.handleConflictingOneOf()
            if case .oauth2AccessCodeSecurity(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._oneof = .oauth2AccessCodeSecurity(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._oneof {
      case .basicAuthenticationSecurity(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .apiKeySecurity(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .oauth2ImplicitSecurity(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .oauth2PasswordSecurity(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .oauth2ApplicationSecurity(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .oauth2AccessCodeSecurity(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_SecurityRequirement: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".SecurityRequirement"

  public var additionalProperties: [Openapi_V2_NamedStringArray] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.additionalProperties)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.additionalProperties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalProperties, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Openapi_V2_StringArray: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".StringArray"

  public var value: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.value)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitRepeatedStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Openapi_V2_Tag: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Tag"

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var externalDocs: Openapi_V2_ExternalDocs {
    get {return _storage._externalDocs ?? Openapi_V2_ExternalDocs()}
    set {_uniqueStorage()._externalDocs = newValue}
  }
  /// Returns true if `externalDocs` has been explicitly set.
  public var hasExternalDocs: Bool {return _storage._externalDocs != nil}
  /// Clears the value of `externalDocs`. Subsequent reads from it will return its default value.
  public mutating func clearExternalDocs() {_storage._externalDocs = nil}

  public var vendorExtension: [Openapi_V2_NamedAny] {
    get {return _storage._vendorExtension}
    set {_uniqueStorage()._vendorExtension = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._externalDocs)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._vendorExtension)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 2)
      }
      if let v = _storage._externalDocs {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._vendorExtension.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorExtension, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Openapi_V2_TypeItem: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".TypeItem"

  public var value: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.value)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitRepeatedStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Any property starting with x- is valid.
public struct Openapi_V2_VendorExtension: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".VendorExtension"

  public var additionalProperties: [Openapi_V2_NamedAny] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.additionalProperties)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.additionalProperties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.additionalProperties, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Openapi_V2_Xml: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Xml"

  public var name: String = String()

  public var namespace: String = String()

  public var prefix: String = String()

  public var attribute: Bool = false

  public var wrapped: Bool = false

  public var vendorExtension: [Openapi_V2_NamedAny] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.namespace)
      case 3: try decoder.decodeSingularStringField(value: &self.prefix)
      case 4: try decoder.decodeSingularBoolField(value: &self.attribute)
      case 5: try decoder.decodeSingularBoolField(value: &self.wrapped)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.vendorExtension)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.namespace.isEmpty {
      try visitor.visitSingularStringField(value: self.namespace, fieldNumber: 2)
    }
    if !self.prefix.isEmpty {
      try visitor.visitSingularStringField(value: self.prefix, fieldNumber: 3)
    }
    if self.attribute != false {
      try visitor.visitSingularBoolField(value: self.attribute, fieldNumber: 4)
    }
    if self.wrapped != false {
      try visitor.visitSingularBoolField(value: self.wrapped, fieldNumber: 5)
    }
    if !self.vendorExtension.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vendorExtension, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "openapi.v2"

extension Openapi_V2_AdditionalPropertiesItem: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "schema"),
    2: .same(proto: "boolean"),
  ]

  fileprivate class _StorageClass {
    var _oneof: Openapi_V2_AdditionalPropertiesItem.OneOf_Oneof?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _oneof = source._oneof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_AdditionalPropertiesItem) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._oneof != other_storage._oneof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Any: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "yaml"),
  ]

  fileprivate class _StorageClass {
    var _value: SwiftProtobuf.Google_Protobuf_Any? = nil
    var _yaml: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
      _yaml = source._yaml
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Any) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._value != other_storage._value {return false}
        if _storage._yaml != other_storage._yaml {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_ApiKeySecurity: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "name"),
    3: .same(proto: "in"),
    4: .same(proto: "description"),
    5: .standard(proto: "vendor_extension"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_ApiKeySecurity) -> Bool {
    if self.type != other.type {return false}
    if self.name != other.name {return false}
    if self.`in` != other.`in` {return false}
    if self.description_p != other.description_p {return false}
    if self.vendorExtension != other.vendorExtension {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_BasicAuthenticationSecurity: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "description"),
    3: .standard(proto: "vendor_extension"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_BasicAuthenticationSecurity) -> Bool {
    if self.type != other.type {return false}
    if self.description_p != other.description_p {return false}
    if self.vendorExtension != other.vendorExtension {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_BodyParameter: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "name"),
    3: .same(proto: "in"),
    4: .same(proto: "required"),
    5: .same(proto: "schema"),
    6: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _description_p: String = String()
    var _name: String = String()
    var _in: String = String()
    var _required: Bool = false
    var _schema: Openapi_V2_Schema? = nil
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _description_p = source._description_p
      _name = source._name
      _in = source._in
      _required = source._required
      _schema = source._schema
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_BodyParameter) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._in != other_storage._in {return false}
        if _storage._required != other_storage._required {return false}
        if _storage._schema != other_storage._schema {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Contact: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "url"),
    3: .same(proto: "email"),
    4: .standard(proto: "vendor_extension"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Contact) -> Bool {
    if self.name != other.name {return false}
    if self.url != other.url {return false}
    if self.email != other.email {return false}
    if self.vendorExtension != other.vendorExtension {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Default: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "additional_properties"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Default) -> Bool {
    if self.additionalProperties != other.additionalProperties {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Definitions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "additional_properties"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Definitions) -> Bool {
    if self.additionalProperties != other.additionalProperties {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Document: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "swagger"),
    2: .same(proto: "info"),
    3: .same(proto: "host"),
    4: .standard(proto: "base_path"),
    5: .same(proto: "schemes"),
    6: .same(proto: "consumes"),
    7: .same(proto: "produces"),
    8: .same(proto: "paths"),
    9: .same(proto: "definitions"),
    10: .same(proto: "parameters"),
    11: .same(proto: "responses"),
    12: .same(proto: "security"),
    13: .standard(proto: "security_definitions"),
    14: .same(proto: "tags"),
    15: .standard(proto: "external_docs"),
    16: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _swagger: String = String()
    var _info: Openapi_V2_Info? = nil
    var _host: String = String()
    var _basePath: String = String()
    var _schemes: [String] = []
    var _consumes: [String] = []
    var _produces: [String] = []
    var _paths: Openapi_V2_Paths? = nil
    var _definitions: Openapi_V2_Definitions? = nil
    var _parameters: Openapi_V2_ParameterDefinitions? = nil
    var _responses: Openapi_V2_ResponseDefinitions? = nil
    var _security: [Openapi_V2_SecurityRequirement] = []
    var _securityDefinitions: Openapi_V2_SecurityDefinitions? = nil
    var _tags: [Openapi_V2_Tag] = []
    var _externalDocs: Openapi_V2_ExternalDocs? = nil
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _swagger = source._swagger
      _info = source._info
      _host = source._host
      _basePath = source._basePath
      _schemes = source._schemes
      _consumes = source._consumes
      _produces = source._produces
      _paths = source._paths
      _definitions = source._definitions
      _parameters = source._parameters
      _responses = source._responses
      _security = source._security
      _securityDefinitions = source._securityDefinitions
      _tags = source._tags
      _externalDocs = source._externalDocs
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Document) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._swagger != other_storage._swagger {return false}
        if _storage._info != other_storage._info {return false}
        if _storage._host != other_storage._host {return false}
        if _storage._basePath != other_storage._basePath {return false}
        if _storage._schemes != other_storage._schemes {return false}
        if _storage._consumes != other_storage._consumes {return false}
        if _storage._produces != other_storage._produces {return false}
        if _storage._paths != other_storage._paths {return false}
        if _storage._definitions != other_storage._definitions {return false}
        if _storage._parameters != other_storage._parameters {return false}
        if _storage._responses != other_storage._responses {return false}
        if _storage._security != other_storage._security {return false}
        if _storage._securityDefinitions != other_storage._securityDefinitions {return false}
        if _storage._tags != other_storage._tags {return false}
        if _storage._externalDocs != other_storage._externalDocs {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Examples: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "additional_properties"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Examples) -> Bool {
    if self.additionalProperties != other.additionalProperties {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_ExternalDocs: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "url"),
    3: .standard(proto: "vendor_extension"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_ExternalDocs) -> Bool {
    if self.description_p != other.description_p {return false}
    if self.url != other.url {return false}
    if self.vendorExtension != other.vendorExtension {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_FileSchema: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "format"),
    2: .same(proto: "title"),
    3: .same(proto: "description"),
    4: .same(proto: "default"),
    5: .same(proto: "required"),
    6: .same(proto: "type"),
    7: .standard(proto: "read_only"),
    8: .standard(proto: "external_docs"),
    9: .same(proto: "example"),
    10: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _format: String = String()
    var _title: String = String()
    var _description_p: String = String()
    var _default: Openapi_V2_Any? = nil
    var _required: [String] = []
    var _type: String = String()
    var _readOnly: Bool = false
    var _externalDocs: Openapi_V2_ExternalDocs? = nil
    var _example: Openapi_V2_Any? = nil
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _format = source._format
      _title = source._title
      _description_p = source._description_p
      _default = source._default
      _required = source._required
      _type = source._type
      _readOnly = source._readOnly
      _externalDocs = source._externalDocs
      _example = source._example
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_FileSchema) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._format != other_storage._format {return false}
        if _storage._title != other_storage._title {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._default != other_storage._default {return false}
        if _storage._required != other_storage._required {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._readOnly != other_storage._readOnly {return false}
        if _storage._externalDocs != other_storage._externalDocs {return false}
        if _storage._example != other_storage._example {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_FormDataParameterSubSchema: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "required"),
    2: .same(proto: "in"),
    3: .same(proto: "description"),
    4: .same(proto: "name"),
    5: .standard(proto: "allow_empty_value"),
    6: .same(proto: "type"),
    7: .same(proto: "format"),
    8: .same(proto: "items"),
    9: .standard(proto: "collection_format"),
    10: .same(proto: "default"),
    11: .same(proto: "maximum"),
    12: .standard(proto: "exclusive_maximum"),
    13: .same(proto: "minimum"),
    14: .standard(proto: "exclusive_minimum"),
    15: .standard(proto: "max_length"),
    16: .standard(proto: "min_length"),
    17: .same(proto: "pattern"),
    18: .standard(proto: "max_items"),
    19: .standard(proto: "min_items"),
    20: .standard(proto: "unique_items"),
    21: .same(proto: "enum"),
    22: .standard(proto: "multiple_of"),
    23: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _required: Bool = false
    var _in: String = String()
    var _description_p: String = String()
    var _name: String = String()
    var _allowEmptyValue: Bool = false
    var _type: String = String()
    var _format: String = String()
    var _items: Openapi_V2_PrimitivesItems? = nil
    var _collectionFormat: String = String()
    var _default: Openapi_V2_Any? = nil
    var _maximum: Double = 0
    var _exclusiveMaximum: Bool = false
    var _minimum: Double = 0
    var _exclusiveMinimum: Bool = false
    var _maxLength: Int64 = 0
    var _minLength: Int64 = 0
    var _pattern: String = String()
    var _maxItems: Int64 = 0
    var _minItems: Int64 = 0
    var _uniqueItems: Bool = false
    var _enum: [Openapi_V2_Any] = []
    var _multipleOf: Double = 0
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _required = source._required
      _in = source._in
      _description_p = source._description_p
      _name = source._name
      _allowEmptyValue = source._allowEmptyValue
      _type = source._type
      _format = source._format
      _items = source._items
      _collectionFormat = source._collectionFormat
      _default = source._default
      _maximum = source._maximum
      _exclusiveMaximum = source._exclusiveMaximum
      _minimum = source._minimum
      _exclusiveMinimum = source._exclusiveMinimum
      _maxLength = source._maxLength
      _minLength = source._minLength
      _pattern = source._pattern
      _maxItems = source._maxItems
      _minItems = source._minItems
      _uniqueItems = source._uniqueItems
      _enum = source._enum
      _multipleOf = source._multipleOf
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_FormDataParameterSubSchema) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._required != other_storage._required {return false}
        if _storage._in != other_storage._in {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._allowEmptyValue != other_storage._allowEmptyValue {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._format != other_storage._format {return false}
        if _storage._items != other_storage._items {return false}
        if _storage._collectionFormat != other_storage._collectionFormat {return false}
        if _storage._default != other_storage._default {return false}
        if _storage._maximum != other_storage._maximum {return false}
        if _storage._exclusiveMaximum != other_storage._exclusiveMaximum {return false}
        if _storage._minimum != other_storage._minimum {return false}
        if _storage._exclusiveMinimum != other_storage._exclusiveMinimum {return false}
        if _storage._maxLength != other_storage._maxLength {return false}
        if _storage._minLength != other_storage._minLength {return false}
        if _storage._pattern != other_storage._pattern {return false}
        if _storage._maxItems != other_storage._maxItems {return false}
        if _storage._minItems != other_storage._minItems {return false}
        if _storage._uniqueItems != other_storage._uniqueItems {return false}
        if _storage._enum != other_storage._enum {return false}
        if _storage._multipleOf != other_storage._multipleOf {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Header: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "format"),
    3: .same(proto: "items"),
    4: .standard(proto: "collection_format"),
    5: .same(proto: "default"),
    6: .same(proto: "maximum"),
    7: .standard(proto: "exclusive_maximum"),
    8: .same(proto: "minimum"),
    9: .standard(proto: "exclusive_minimum"),
    10: .standard(proto: "max_length"),
    11: .standard(proto: "min_length"),
    12: .same(proto: "pattern"),
    13: .standard(proto: "max_items"),
    14: .standard(proto: "min_items"),
    15: .standard(proto: "unique_items"),
    16: .same(proto: "enum"),
    17: .standard(proto: "multiple_of"),
    18: .same(proto: "description"),
    19: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _type: String = String()
    var _format: String = String()
    var _items: Openapi_V2_PrimitivesItems? = nil
    var _collectionFormat: String = String()
    var _default: Openapi_V2_Any? = nil
    var _maximum: Double = 0
    var _exclusiveMaximum: Bool = false
    var _minimum: Double = 0
    var _exclusiveMinimum: Bool = false
    var _maxLength: Int64 = 0
    var _minLength: Int64 = 0
    var _pattern: String = String()
    var _maxItems: Int64 = 0
    var _minItems: Int64 = 0
    var _uniqueItems: Bool = false
    var _enum: [Openapi_V2_Any] = []
    var _multipleOf: Double = 0
    var _description_p: String = String()
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _format = source._format
      _items = source._items
      _collectionFormat = source._collectionFormat
      _default = source._default
      _maximum = source._maximum
      _exclusiveMaximum = source._exclusiveMaximum
      _minimum = source._minimum
      _exclusiveMinimum = source._exclusiveMinimum
      _maxLength = source._maxLength
      _minLength = source._minLength
      _pattern = source._pattern
      _maxItems = source._maxItems
      _minItems = source._minItems
      _uniqueItems = source._uniqueItems
      _enum = source._enum
      _multipleOf = source._multipleOf
      _description_p = source._description_p
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Header) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._type != other_storage._type {return false}
        if _storage._format != other_storage._format {return false}
        if _storage._items != other_storage._items {return false}
        if _storage._collectionFormat != other_storage._collectionFormat {return false}
        if _storage._default != other_storage._default {return false}
        if _storage._maximum != other_storage._maximum {return false}
        if _storage._exclusiveMaximum != other_storage._exclusiveMaximum {return false}
        if _storage._minimum != other_storage._minimum {return false}
        if _storage._exclusiveMinimum != other_storage._exclusiveMinimum {return false}
        if _storage._maxLength != other_storage._maxLength {return false}
        if _storage._minLength != other_storage._minLength {return false}
        if _storage._pattern != other_storage._pattern {return false}
        if _storage._maxItems != other_storage._maxItems {return false}
        if _storage._minItems != other_storage._minItems {return false}
        if _storage._uniqueItems != other_storage._uniqueItems {return false}
        if _storage._enum != other_storage._enum {return false}
        if _storage._multipleOf != other_storage._multipleOf {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_HeaderParameterSubSchema: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "required"),
    2: .same(proto: "in"),
    3: .same(proto: "description"),
    4: .same(proto: "name"),
    5: .same(proto: "type"),
    6: .same(proto: "format"),
    7: .same(proto: "items"),
    8: .standard(proto: "collection_format"),
    9: .same(proto: "default"),
    10: .same(proto: "maximum"),
    11: .standard(proto: "exclusive_maximum"),
    12: .same(proto: "minimum"),
    13: .standard(proto: "exclusive_minimum"),
    14: .standard(proto: "max_length"),
    15: .standard(proto: "min_length"),
    16: .same(proto: "pattern"),
    17: .standard(proto: "max_items"),
    18: .standard(proto: "min_items"),
    19: .standard(proto: "unique_items"),
    20: .same(proto: "enum"),
    21: .standard(proto: "multiple_of"),
    22: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _required: Bool = false
    var _in: String = String()
    var _description_p: String = String()
    var _name: String = String()
    var _type: String = String()
    var _format: String = String()
    var _items: Openapi_V2_PrimitivesItems? = nil
    var _collectionFormat: String = String()
    var _default: Openapi_V2_Any? = nil
    var _maximum: Double = 0
    var _exclusiveMaximum: Bool = false
    var _minimum: Double = 0
    var _exclusiveMinimum: Bool = false
    var _maxLength: Int64 = 0
    var _minLength: Int64 = 0
    var _pattern: String = String()
    var _maxItems: Int64 = 0
    var _minItems: Int64 = 0
    var _uniqueItems: Bool = false
    var _enum: [Openapi_V2_Any] = []
    var _multipleOf: Double = 0
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _required = source._required
      _in = source._in
      _description_p = source._description_p
      _name = source._name
      _type = source._type
      _format = source._format
      _items = source._items
      _collectionFormat = source._collectionFormat
      _default = source._default
      _maximum = source._maximum
      _exclusiveMaximum = source._exclusiveMaximum
      _minimum = source._minimum
      _exclusiveMinimum = source._exclusiveMinimum
      _maxLength = source._maxLength
      _minLength = source._minLength
      _pattern = source._pattern
      _maxItems = source._maxItems
      _minItems = source._minItems
      _uniqueItems = source._uniqueItems
      _enum = source._enum
      _multipleOf = source._multipleOf
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_HeaderParameterSubSchema) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._required != other_storage._required {return false}
        if _storage._in != other_storage._in {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._format != other_storage._format {return false}
        if _storage._items != other_storage._items {return false}
        if _storage._collectionFormat != other_storage._collectionFormat {return false}
        if _storage._default != other_storage._default {return false}
        if _storage._maximum != other_storage._maximum {return false}
        if _storage._exclusiveMaximum != other_storage._exclusiveMaximum {return false}
        if _storage._minimum != other_storage._minimum {return false}
        if _storage._exclusiveMinimum != other_storage._exclusiveMinimum {return false}
        if _storage._maxLength != other_storage._maxLength {return false}
        if _storage._minLength != other_storage._minLength {return false}
        if _storage._pattern != other_storage._pattern {return false}
        if _storage._maxItems != other_storage._maxItems {return false}
        if _storage._minItems != other_storage._minItems {return false}
        if _storage._uniqueItems != other_storage._uniqueItems {return false}
        if _storage._enum != other_storage._enum {return false}
        if _storage._multipleOf != other_storage._multipleOf {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Headers: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "additional_properties"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Headers) -> Bool {
    if self.additionalProperties != other.additionalProperties {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Info: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "version"),
    3: .same(proto: "description"),
    4: .standard(proto: "terms_of_service"),
    5: .same(proto: "contact"),
    6: .same(proto: "license"),
    7: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _title: String = String()
    var _version: String = String()
    var _description_p: String = String()
    var _termsOfService: String = String()
    var _contact: Openapi_V2_Contact? = nil
    var _license: Openapi_V2_License? = nil
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _title = source._title
      _version = source._version
      _description_p = source._description_p
      _termsOfService = source._termsOfService
      _contact = source._contact
      _license = source._license
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Info) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._title != other_storage._title {return false}
        if _storage._version != other_storage._version {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._termsOfService != other_storage._termsOfService {return false}
        if _storage._contact != other_storage._contact {return false}
        if _storage._license != other_storage._license {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_ItemsItem: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "schema"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_ItemsItem) -> Bool {
    if self.schema != other.schema {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_JsonReference: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "_ref"),
    2: .same(proto: "description"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_JsonReference) -> Bool {
    if self.ref != other.ref {return false}
    if self.description_p != other.description_p {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_License: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "url"),
    3: .standard(proto: "vendor_extension"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_License) -> Bool {
    if self.name != other.name {return false}
    if self.url != other.url {return false}
    if self.vendorExtension != other.vendorExtension {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_NamedAny: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _value: Openapi_V2_Any? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_NamedAny) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._name != other_storage._name {return false}
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_NamedHeader: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _value: Openapi_V2_Header? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_NamedHeader) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._name != other_storage._name {return false}
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_NamedParameter: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _value: Openapi_V2_Parameter? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_NamedParameter) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._name != other_storage._name {return false}
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_NamedPathItem: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _value: Openapi_V2_PathItem? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_NamedPathItem) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._name != other_storage._name {return false}
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_NamedResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _value: Openapi_V2_Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_NamedResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._name != other_storage._name {return false}
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_NamedResponseValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _value: Openapi_V2_ResponseValue? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_NamedResponseValue) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._name != other_storage._name {return false}
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_NamedSchema: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _value: Openapi_V2_Schema? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_NamedSchema) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._name != other_storage._name {return false}
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_NamedSecurityDefinitionsItem: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _value: Openapi_V2_SecurityDefinitionsItem? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_NamedSecurityDefinitionsItem) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._name != other_storage._name {return false}
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_NamedString: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_NamedString) -> Bool {
    if self.name != other.name {return false}
    if self.value != other.value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_NamedStringArray: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _value: Openapi_V2_StringArray? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_NamedStringArray) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._name != other_storage._name {return false}
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_NonBodyParameter: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "header_parameter_sub_schema"),
    2: .standard(proto: "form_data_parameter_sub_schema"),
    3: .standard(proto: "query_parameter_sub_schema"),
    4: .standard(proto: "path_parameter_sub_schema"),
  ]

  fileprivate class _StorageClass {
    var _oneof: Openapi_V2_NonBodyParameter.OneOf_Oneof?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _oneof = source._oneof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_NonBodyParameter) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._oneof != other_storage._oneof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Oauth2AccessCodeSecurity: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "flow"),
    3: .same(proto: "scopes"),
    4: .standard(proto: "authorization_url"),
    5: .standard(proto: "token_url"),
    6: .same(proto: "description"),
    7: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _type: String = String()
    var _flow: String = String()
    var _scopes: Openapi_V2_Oauth2Scopes? = nil
    var _authorizationURL: String = String()
    var _tokenURL: String = String()
    var _description_p: String = String()
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _flow = source._flow
      _scopes = source._scopes
      _authorizationURL = source._authorizationURL
      _tokenURL = source._tokenURL
      _description_p = source._description_p
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Oauth2AccessCodeSecurity) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._type != other_storage._type {return false}
        if _storage._flow != other_storage._flow {return false}
        if _storage._scopes != other_storage._scopes {return false}
        if _storage._authorizationURL != other_storage._authorizationURL {return false}
        if _storage._tokenURL != other_storage._tokenURL {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Oauth2ApplicationSecurity: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "flow"),
    3: .same(proto: "scopes"),
    4: .standard(proto: "token_url"),
    5: .same(proto: "description"),
    6: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _type: String = String()
    var _flow: String = String()
    var _scopes: Openapi_V2_Oauth2Scopes? = nil
    var _tokenURL: String = String()
    var _description_p: String = String()
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _flow = source._flow
      _scopes = source._scopes
      _tokenURL = source._tokenURL
      _description_p = source._description_p
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Oauth2ApplicationSecurity) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._type != other_storage._type {return false}
        if _storage._flow != other_storage._flow {return false}
        if _storage._scopes != other_storage._scopes {return false}
        if _storage._tokenURL != other_storage._tokenURL {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Oauth2ImplicitSecurity: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "flow"),
    3: .same(proto: "scopes"),
    4: .standard(proto: "authorization_url"),
    5: .same(proto: "description"),
    6: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _type: String = String()
    var _flow: String = String()
    var _scopes: Openapi_V2_Oauth2Scopes? = nil
    var _authorizationURL: String = String()
    var _description_p: String = String()
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _flow = source._flow
      _scopes = source._scopes
      _authorizationURL = source._authorizationURL
      _description_p = source._description_p
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Oauth2ImplicitSecurity) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._type != other_storage._type {return false}
        if _storage._flow != other_storage._flow {return false}
        if _storage._scopes != other_storage._scopes {return false}
        if _storage._authorizationURL != other_storage._authorizationURL {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Oauth2PasswordSecurity: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "flow"),
    3: .same(proto: "scopes"),
    4: .standard(proto: "token_url"),
    5: .same(proto: "description"),
    6: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _type: String = String()
    var _flow: String = String()
    var _scopes: Openapi_V2_Oauth2Scopes? = nil
    var _tokenURL: String = String()
    var _description_p: String = String()
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _flow = source._flow
      _scopes = source._scopes
      _tokenURL = source._tokenURL
      _description_p = source._description_p
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Oauth2PasswordSecurity) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._type != other_storage._type {return false}
        if _storage._flow != other_storage._flow {return false}
        if _storage._scopes != other_storage._scopes {return false}
        if _storage._tokenURL != other_storage._tokenURL {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Oauth2Scopes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "additional_properties"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Oauth2Scopes) -> Bool {
    if self.additionalProperties != other.additionalProperties {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Operation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tags"),
    2: .same(proto: "summary"),
    3: .same(proto: "description"),
    4: .standard(proto: "external_docs"),
    5: .standard(proto: "operation_id"),
    6: .same(proto: "produces"),
    7: .same(proto: "consumes"),
    8: .same(proto: "parameters"),
    9: .same(proto: "responses"),
    10: .same(proto: "schemes"),
    11: .same(proto: "deprecated"),
    12: .same(proto: "security"),
    13: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _tags: [String] = []
    var _summary: String = String()
    var _description_p: String = String()
    var _externalDocs: Openapi_V2_ExternalDocs? = nil
    var _operationID: String = String()
    var _produces: [String] = []
    var _consumes: [String] = []
    var _parameters: [Openapi_V2_ParametersItem] = []
    var _responses: Openapi_V2_Responses? = nil
    var _schemes: [String] = []
    var _deprecated: Bool = false
    var _security: [Openapi_V2_SecurityRequirement] = []
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _tags = source._tags
      _summary = source._summary
      _description_p = source._description_p
      _externalDocs = source._externalDocs
      _operationID = source._operationID
      _produces = source._produces
      _consumes = source._consumes
      _parameters = source._parameters
      _responses = source._responses
      _schemes = source._schemes
      _deprecated = source._deprecated
      _security = source._security
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Operation) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._tags != other_storage._tags {return false}
        if _storage._summary != other_storage._summary {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._externalDocs != other_storage._externalDocs {return false}
        if _storage._operationID != other_storage._operationID {return false}
        if _storage._produces != other_storage._produces {return false}
        if _storage._consumes != other_storage._consumes {return false}
        if _storage._parameters != other_storage._parameters {return false}
        if _storage._responses != other_storage._responses {return false}
        if _storage._schemes != other_storage._schemes {return false}
        if _storage._deprecated != other_storage._deprecated {return false}
        if _storage._security != other_storage._security {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Parameter: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "body_parameter"),
    2: .standard(proto: "non_body_parameter"),
  ]

  fileprivate class _StorageClass {
    var _oneof: Openapi_V2_Parameter.OneOf_Oneof?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _oneof = source._oneof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Parameter) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._oneof != other_storage._oneof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_ParameterDefinitions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "additional_properties"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_ParameterDefinitions) -> Bool {
    if self.additionalProperties != other.additionalProperties {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_ParametersItem: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parameter"),
    2: .standard(proto: "json_reference"),
  ]

  fileprivate class _StorageClass {
    var _oneof: Openapi_V2_ParametersItem.OneOf_Oneof?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _oneof = source._oneof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_ParametersItem) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._oneof != other_storage._oneof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_PathItem: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "_ref"),
    2: .same(proto: "get"),
    3: .same(proto: "put"),
    4: .same(proto: "post"),
    5: .same(proto: "delete"),
    6: .same(proto: "options"),
    7: .same(proto: "head"),
    8: .same(proto: "patch"),
    9: .same(proto: "parameters"),
    10: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _ref: String = String()
    var _get: Openapi_V2_Operation? = nil
    var _put: Openapi_V2_Operation? = nil
    var _post: Openapi_V2_Operation? = nil
    var _delete: Openapi_V2_Operation? = nil
    var _options: Openapi_V2_Operation? = nil
    var _head: Openapi_V2_Operation? = nil
    var _patch: Openapi_V2_Operation? = nil
    var _parameters: [Openapi_V2_ParametersItem] = []
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ref = source._ref
      _get = source._get
      _put = source._put
      _post = source._post
      _delete = source._delete
      _options = source._options
      _head = source._head
      _patch = source._patch
      _parameters = source._parameters
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_PathItem) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._ref != other_storage._ref {return false}
        if _storage._get != other_storage._get {return false}
        if _storage._put != other_storage._put {return false}
        if _storage._post != other_storage._post {return false}
        if _storage._delete != other_storage._delete {return false}
        if _storage._options != other_storage._options {return false}
        if _storage._head != other_storage._head {return false}
        if _storage._patch != other_storage._patch {return false}
        if _storage._parameters != other_storage._parameters {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_PathParameterSubSchema: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "required"),
    2: .same(proto: "in"),
    3: .same(proto: "description"),
    4: .same(proto: "name"),
    5: .same(proto: "type"),
    6: .same(proto: "format"),
    7: .same(proto: "items"),
    8: .standard(proto: "collection_format"),
    9: .same(proto: "default"),
    10: .same(proto: "maximum"),
    11: .standard(proto: "exclusive_maximum"),
    12: .same(proto: "minimum"),
    13: .standard(proto: "exclusive_minimum"),
    14: .standard(proto: "max_length"),
    15: .standard(proto: "min_length"),
    16: .same(proto: "pattern"),
    17: .standard(proto: "max_items"),
    18: .standard(proto: "min_items"),
    19: .standard(proto: "unique_items"),
    20: .same(proto: "enum"),
    21: .standard(proto: "multiple_of"),
    22: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _required: Bool = false
    var _in: String = String()
    var _description_p: String = String()
    var _name: String = String()
    var _type: String = String()
    var _format: String = String()
    var _items: Openapi_V2_PrimitivesItems? = nil
    var _collectionFormat: String = String()
    var _default: Openapi_V2_Any? = nil
    var _maximum: Double = 0
    var _exclusiveMaximum: Bool = false
    var _minimum: Double = 0
    var _exclusiveMinimum: Bool = false
    var _maxLength: Int64 = 0
    var _minLength: Int64 = 0
    var _pattern: String = String()
    var _maxItems: Int64 = 0
    var _minItems: Int64 = 0
    var _uniqueItems: Bool = false
    var _enum: [Openapi_V2_Any] = []
    var _multipleOf: Double = 0
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _required = source._required
      _in = source._in
      _description_p = source._description_p
      _name = source._name
      _type = source._type
      _format = source._format
      _items = source._items
      _collectionFormat = source._collectionFormat
      _default = source._default
      _maximum = source._maximum
      _exclusiveMaximum = source._exclusiveMaximum
      _minimum = source._minimum
      _exclusiveMinimum = source._exclusiveMinimum
      _maxLength = source._maxLength
      _minLength = source._minLength
      _pattern = source._pattern
      _maxItems = source._maxItems
      _minItems = source._minItems
      _uniqueItems = source._uniqueItems
      _enum = source._enum
      _multipleOf = source._multipleOf
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_PathParameterSubSchema) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._required != other_storage._required {return false}
        if _storage._in != other_storage._in {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._format != other_storage._format {return false}
        if _storage._items != other_storage._items {return false}
        if _storage._collectionFormat != other_storage._collectionFormat {return false}
        if _storage._default != other_storage._default {return false}
        if _storage._maximum != other_storage._maximum {return false}
        if _storage._exclusiveMaximum != other_storage._exclusiveMaximum {return false}
        if _storage._minimum != other_storage._minimum {return false}
        if _storage._exclusiveMinimum != other_storage._exclusiveMinimum {return false}
        if _storage._maxLength != other_storage._maxLength {return false}
        if _storage._minLength != other_storage._minLength {return false}
        if _storage._pattern != other_storage._pattern {return false}
        if _storage._maxItems != other_storage._maxItems {return false}
        if _storage._minItems != other_storage._minItems {return false}
        if _storage._uniqueItems != other_storage._uniqueItems {return false}
        if _storage._enum != other_storage._enum {return false}
        if _storage._multipleOf != other_storage._multipleOf {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Paths: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vendor_extension"),
    2: .same(proto: "path"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Paths) -> Bool {
    if self.vendorExtension != other.vendorExtension {return false}
    if self.path != other.path {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_PrimitivesItems: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "format"),
    3: .same(proto: "items"),
    4: .standard(proto: "collection_format"),
    5: .same(proto: "default"),
    6: .same(proto: "maximum"),
    7: .standard(proto: "exclusive_maximum"),
    8: .same(proto: "minimum"),
    9: .standard(proto: "exclusive_minimum"),
    10: .standard(proto: "max_length"),
    11: .standard(proto: "min_length"),
    12: .same(proto: "pattern"),
    13: .standard(proto: "max_items"),
    14: .standard(proto: "min_items"),
    15: .standard(proto: "unique_items"),
    16: .same(proto: "enum"),
    17: .standard(proto: "multiple_of"),
    18: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _type: String = String()
    var _format: String = String()
    var _items: Openapi_V2_PrimitivesItems? = nil
    var _collectionFormat: String = String()
    var _default: Openapi_V2_Any? = nil
    var _maximum: Double = 0
    var _exclusiveMaximum: Bool = false
    var _minimum: Double = 0
    var _exclusiveMinimum: Bool = false
    var _maxLength: Int64 = 0
    var _minLength: Int64 = 0
    var _pattern: String = String()
    var _maxItems: Int64 = 0
    var _minItems: Int64 = 0
    var _uniqueItems: Bool = false
    var _enum: [Openapi_V2_Any] = []
    var _multipleOf: Double = 0
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _format = source._format
      _items = source._items
      _collectionFormat = source._collectionFormat
      _default = source._default
      _maximum = source._maximum
      _exclusiveMaximum = source._exclusiveMaximum
      _minimum = source._minimum
      _exclusiveMinimum = source._exclusiveMinimum
      _maxLength = source._maxLength
      _minLength = source._minLength
      _pattern = source._pattern
      _maxItems = source._maxItems
      _minItems = source._minItems
      _uniqueItems = source._uniqueItems
      _enum = source._enum
      _multipleOf = source._multipleOf
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_PrimitivesItems) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._type != other_storage._type {return false}
        if _storage._format != other_storage._format {return false}
        if _storage._items != other_storage._items {return false}
        if _storage._collectionFormat != other_storage._collectionFormat {return false}
        if _storage._default != other_storage._default {return false}
        if _storage._maximum != other_storage._maximum {return false}
        if _storage._exclusiveMaximum != other_storage._exclusiveMaximum {return false}
        if _storage._minimum != other_storage._minimum {return false}
        if _storage._exclusiveMinimum != other_storage._exclusiveMinimum {return false}
        if _storage._maxLength != other_storage._maxLength {return false}
        if _storage._minLength != other_storage._minLength {return false}
        if _storage._pattern != other_storage._pattern {return false}
        if _storage._maxItems != other_storage._maxItems {return false}
        if _storage._minItems != other_storage._minItems {return false}
        if _storage._uniqueItems != other_storage._uniqueItems {return false}
        if _storage._enum != other_storage._enum {return false}
        if _storage._multipleOf != other_storage._multipleOf {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Properties: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "additional_properties"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Properties) -> Bool {
    if self.additionalProperties != other.additionalProperties {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_QueryParameterSubSchema: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "required"),
    2: .same(proto: "in"),
    3: .same(proto: "description"),
    4: .same(proto: "name"),
    5: .standard(proto: "allow_empty_value"),
    6: .same(proto: "type"),
    7: .same(proto: "format"),
    8: .same(proto: "items"),
    9: .standard(proto: "collection_format"),
    10: .same(proto: "default"),
    11: .same(proto: "maximum"),
    12: .standard(proto: "exclusive_maximum"),
    13: .same(proto: "minimum"),
    14: .standard(proto: "exclusive_minimum"),
    15: .standard(proto: "max_length"),
    16: .standard(proto: "min_length"),
    17: .same(proto: "pattern"),
    18: .standard(proto: "max_items"),
    19: .standard(proto: "min_items"),
    20: .standard(proto: "unique_items"),
    21: .same(proto: "enum"),
    22: .standard(proto: "multiple_of"),
    23: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _required: Bool = false
    var _in: String = String()
    var _description_p: String = String()
    var _name: String = String()
    var _allowEmptyValue: Bool = false
    var _type: String = String()
    var _format: String = String()
    var _items: Openapi_V2_PrimitivesItems? = nil
    var _collectionFormat: String = String()
    var _default: Openapi_V2_Any? = nil
    var _maximum: Double = 0
    var _exclusiveMaximum: Bool = false
    var _minimum: Double = 0
    var _exclusiveMinimum: Bool = false
    var _maxLength: Int64 = 0
    var _minLength: Int64 = 0
    var _pattern: String = String()
    var _maxItems: Int64 = 0
    var _minItems: Int64 = 0
    var _uniqueItems: Bool = false
    var _enum: [Openapi_V2_Any] = []
    var _multipleOf: Double = 0
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _required = source._required
      _in = source._in
      _description_p = source._description_p
      _name = source._name
      _allowEmptyValue = source._allowEmptyValue
      _type = source._type
      _format = source._format
      _items = source._items
      _collectionFormat = source._collectionFormat
      _default = source._default
      _maximum = source._maximum
      _exclusiveMaximum = source._exclusiveMaximum
      _minimum = source._minimum
      _exclusiveMinimum = source._exclusiveMinimum
      _maxLength = source._maxLength
      _minLength = source._minLength
      _pattern = source._pattern
      _maxItems = source._maxItems
      _minItems = source._minItems
      _uniqueItems = source._uniqueItems
      _enum = source._enum
      _multipleOf = source._multipleOf
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_QueryParameterSubSchema) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._required != other_storage._required {return false}
        if _storage._in != other_storage._in {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._allowEmptyValue != other_storage._allowEmptyValue {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._format != other_storage._format {return false}
        if _storage._items != other_storage._items {return false}
        if _storage._collectionFormat != other_storage._collectionFormat {return false}
        if _storage._default != other_storage._default {return false}
        if _storage._maximum != other_storage._maximum {return false}
        if _storage._exclusiveMaximum != other_storage._exclusiveMaximum {return false}
        if _storage._minimum != other_storage._minimum {return false}
        if _storage._exclusiveMinimum != other_storage._exclusiveMinimum {return false}
        if _storage._maxLength != other_storage._maxLength {return false}
        if _storage._minLength != other_storage._minLength {return false}
        if _storage._pattern != other_storage._pattern {return false}
        if _storage._maxItems != other_storage._maxItems {return false}
        if _storage._minItems != other_storage._minItems {return false}
        if _storage._uniqueItems != other_storage._uniqueItems {return false}
        if _storage._enum != other_storage._enum {return false}
        if _storage._multipleOf != other_storage._multipleOf {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "schema"),
    3: .same(proto: "headers"),
    4: .same(proto: "examples"),
    5: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _description_p: String = String()
    var _schema: Openapi_V2_SchemaItem? = nil
    var _headers: Openapi_V2_Headers? = nil
    var _examples: Openapi_V2_Examples? = nil
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _description_p = source._description_p
      _schema = source._schema
      _headers = source._headers
      _examples = source._examples
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Response) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._schema != other_storage._schema {return false}
        if _storage._headers != other_storage._headers {return false}
        if _storage._examples != other_storage._examples {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_ResponseDefinitions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "additional_properties"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_ResponseDefinitions) -> Bool {
    if self.additionalProperties != other.additionalProperties {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_ResponseValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "response"),
    2: .standard(proto: "json_reference"),
  ]

  fileprivate class _StorageClass {
    var _oneof: Openapi_V2_ResponseValue.OneOf_Oneof?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _oneof = source._oneof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_ResponseValue) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._oneof != other_storage._oneof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Responses: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "response_code"),
    2: .standard(proto: "vendor_extension"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Responses) -> Bool {
    if self.responseCode != other.responseCode {return false}
    if self.vendorExtension != other.vendorExtension {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Schema: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "_ref"),
    2: .same(proto: "format"),
    3: .same(proto: "title"),
    4: .same(proto: "description"),
    5: .same(proto: "default"),
    6: .standard(proto: "multiple_of"),
    7: .same(proto: "maximum"),
    8: .standard(proto: "exclusive_maximum"),
    9: .same(proto: "minimum"),
    10: .standard(proto: "exclusive_minimum"),
    11: .standard(proto: "max_length"),
    12: .standard(proto: "min_length"),
    13: .same(proto: "pattern"),
    14: .standard(proto: "max_items"),
    15: .standard(proto: "min_items"),
    16: .standard(proto: "unique_items"),
    17: .standard(proto: "max_properties"),
    18: .standard(proto: "min_properties"),
    19: .same(proto: "required"),
    20: .same(proto: "enum"),
    21: .standard(proto: "additional_properties"),
    22: .same(proto: "type"),
    23: .same(proto: "items"),
    24: .standard(proto: "all_of"),
    25: .same(proto: "properties"),
    26: .same(proto: "discriminator"),
    27: .standard(proto: "read_only"),
    28: .same(proto: "xml"),
    29: .standard(proto: "external_docs"),
    30: .same(proto: "example"),
    31: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _ref: String = String()
    var _format: String = String()
    var _title: String = String()
    var _description_p: String = String()
    var _default: Openapi_V2_Any? = nil
    var _multipleOf: Double = 0
    var _maximum: Double = 0
    var _exclusiveMaximum: Bool = false
    var _minimum: Double = 0
    var _exclusiveMinimum: Bool = false
    var _maxLength: Int64 = 0
    var _minLength: Int64 = 0
    var _pattern: String = String()
    var _maxItems: Int64 = 0
    var _minItems: Int64 = 0
    var _uniqueItems: Bool = false
    var _maxProperties: Int64 = 0
    var _minProperties: Int64 = 0
    var _required: [String] = []
    var _enum: [Openapi_V2_Any] = []
    var _additionalProperties: Openapi_V2_AdditionalPropertiesItem? = nil
    var _type: Openapi_V2_TypeItem? = nil
    var _items: Openapi_V2_ItemsItem? = nil
    var _allOf: [Openapi_V2_Schema] = []
    var _properties: Openapi_V2_Properties? = nil
    var _discriminator: String = String()
    var _readOnly: Bool = false
    var _xml: Openapi_V2_Xml? = nil
    var _externalDocs: Openapi_V2_ExternalDocs? = nil
    var _example: Openapi_V2_Any? = nil
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ref = source._ref
      _format = source._format
      _title = source._title
      _description_p = source._description_p
      _default = source._default
      _multipleOf = source._multipleOf
      _maximum = source._maximum
      _exclusiveMaximum = source._exclusiveMaximum
      _minimum = source._minimum
      _exclusiveMinimum = source._exclusiveMinimum
      _maxLength = source._maxLength
      _minLength = source._minLength
      _pattern = source._pattern
      _maxItems = source._maxItems
      _minItems = source._minItems
      _uniqueItems = source._uniqueItems
      _maxProperties = source._maxProperties
      _minProperties = source._minProperties
      _required = source._required
      _enum = source._enum
      _additionalProperties = source._additionalProperties
      _type = source._type
      _items = source._items
      _allOf = source._allOf
      _properties = source._properties
      _discriminator = source._discriminator
      _readOnly = source._readOnly
      _xml = source._xml
      _externalDocs = source._externalDocs
      _example = source._example
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Schema) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._ref != other_storage._ref {return false}
        if _storage._format != other_storage._format {return false}
        if _storage._title != other_storage._title {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._default != other_storage._default {return false}
        if _storage._multipleOf != other_storage._multipleOf {return false}
        if _storage._maximum != other_storage._maximum {return false}
        if _storage._exclusiveMaximum != other_storage._exclusiveMaximum {return false}
        if _storage._minimum != other_storage._minimum {return false}
        if _storage._exclusiveMinimum != other_storage._exclusiveMinimum {return false}
        if _storage._maxLength != other_storage._maxLength {return false}
        if _storage._minLength != other_storage._minLength {return false}
        if _storage._pattern != other_storage._pattern {return false}
        if _storage._maxItems != other_storage._maxItems {return false}
        if _storage._minItems != other_storage._minItems {return false}
        if _storage._uniqueItems != other_storage._uniqueItems {return false}
        if _storage._maxProperties != other_storage._maxProperties {return false}
        if _storage._minProperties != other_storage._minProperties {return false}
        if _storage._required != other_storage._required {return false}
        if _storage._enum != other_storage._enum {return false}
        if _storage._additionalProperties != other_storage._additionalProperties {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._items != other_storage._items {return false}
        if _storage._allOf != other_storage._allOf {return false}
        if _storage._properties != other_storage._properties {return false}
        if _storage._discriminator != other_storage._discriminator {return false}
        if _storage._readOnly != other_storage._readOnly {return false}
        if _storage._xml != other_storage._xml {return false}
        if _storage._externalDocs != other_storage._externalDocs {return false}
        if _storage._example != other_storage._example {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_SchemaItem: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "schema"),
    2: .standard(proto: "file_schema"),
  ]

  fileprivate class _StorageClass {
    var _oneof: Openapi_V2_SchemaItem.OneOf_Oneof?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _oneof = source._oneof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_SchemaItem) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._oneof != other_storage._oneof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_SecurityDefinitions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "additional_properties"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_SecurityDefinitions) -> Bool {
    if self.additionalProperties != other.additionalProperties {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_SecurityDefinitionsItem: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "basic_authentication_security"),
    2: .standard(proto: "api_key_security"),
    3: .standard(proto: "oauth2_implicit_security"),
    4: .standard(proto: "oauth2_password_security"),
    5: .standard(proto: "oauth2_application_security"),
    6: .standard(proto: "oauth2_access_code_security"),
  ]

  fileprivate class _StorageClass {
    var _oneof: Openapi_V2_SecurityDefinitionsItem.OneOf_Oneof?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _oneof = source._oneof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_SecurityDefinitionsItem) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._oneof != other_storage._oneof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_SecurityRequirement: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "additional_properties"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_SecurityRequirement) -> Bool {
    if self.additionalProperties != other.additionalProperties {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_StringArray: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_StringArray) -> Bool {
    if self.value != other.value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Tag: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "description"),
    3: .standard(proto: "external_docs"),
    4: .standard(proto: "vendor_extension"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _description_p: String = String()
    var _externalDocs: Openapi_V2_ExternalDocs? = nil
    var _vendorExtension: [Openapi_V2_NamedAny] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _description_p = source._description_p
      _externalDocs = source._externalDocs
      _vendorExtension = source._vendorExtension
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Tag) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._name != other_storage._name {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._externalDocs != other_storage._externalDocs {return false}
        if _storage._vendorExtension != other_storage._vendorExtension {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_TypeItem: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_TypeItem) -> Bool {
    if self.value != other.value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_VendorExtension: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "additional_properties"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_VendorExtension) -> Bool {
    if self.additionalProperties != other.additionalProperties {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Openapi_V2_Xml: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "namespace"),
    3: .same(proto: "prefix"),
    4: .same(proto: "attribute"),
    5: .same(proto: "wrapped"),
    6: .standard(proto: "vendor_extension"),
  ]

  public func _protobuf_generated_isEqualTo(other: Openapi_V2_Xml) -> Bool {
    if self.name != other.name {return false}
    if self.namespace != other.namespace {return false}
    if self.prefix != other.prefix {return false}
    if self.attribute != other.attribute {return false}
    if self.wrapped != other.wrapped {return false}
    if self.vendorExtension != other.vendorExtension {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
