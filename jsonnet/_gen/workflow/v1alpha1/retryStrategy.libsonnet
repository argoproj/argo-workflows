{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='retryStrategy', url='', help='RetryStrategy provides controls on how to retry a workflow step'),
  '#backoff':: d.obj(help='Backoff is a backoff strategy to use within retryStrategy'),
  backoff: {
    '#factor':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
    factor: {
      '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
      withIntVal(intVal): { backoff+: { factor+: { intVal: intVal } } },
      '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
      withStrVal(strVal): { backoff+: { factor+: { strVal: strVal } } },
      '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
      withType(type): { backoff+: { factor+: { type: type } } },
    },
    '#withDuration':: d.fn(help='Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")', args=[d.arg(name='duration', type=d.T.string)]),
    withDuration(duration): { backoff+: { duration: duration } },
    '#withMaxDuration':: d.fn(help='MaxDuration is the maximum amount of time allowed for the backoff strategy', args=[d.arg(name='maxDuration', type=d.T.string)]),
    withMaxDuration(maxDuration): { backoff+: { maxDuration: maxDuration } },
  },
  '#limit':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
  limit: {
    '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
    withIntVal(intVal): { limit+: { intVal: intVal } },
    '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
    withStrVal(strVal): { limit+: { strVal: strVal } },
    '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
    withType(type): { limit+: { type: type } },
  },
  '#withRetryPolicy':: d.fn(help='RetryPolicy is a policy of NodePhase statuses that will be retried', args=[d.arg(name='retryPolicy', type=d.T.string)]),
  withRetryPolicy(retryPolicy): { retryPolicy: retryPolicy },
  '#mixin': 'ignore',
  mixin: self,
}
