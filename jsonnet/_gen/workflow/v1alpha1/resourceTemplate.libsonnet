{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='resourceTemplate', url='', help='ResourceTemplate is a template subtype to manipulate kubernetes resources'),
  '#withAction':: d.fn(help='Action is the action to perform to the resource. Must be one of: get, create, apply, delete, replace, patch', args=[d.arg(name='action', type=d.T.string)]),
  withAction(action): { action: action },
  '#withFailureCondition':: d.fn(help='FailureCondition is a label selector expression which describes the conditions of the k8s resource in which the step was considered failed', args=[d.arg(name='failureCondition', type=d.T.string)]),
  withFailureCondition(failureCondition): { failureCondition: failureCondition },
  '#withFlags':: d.fn(help='Flags is a set of additional options passed to kubectl before submitting a resource I.e. to disable resource validation: flags: [\n\t"--validate=false"  # disable resource validation\n]', args=[d.arg(name='flags', type=d.T.array)]),
  withFlags(flags): { flags: if std.isArray(v=flags) then flags else [flags] },
  '#withFlagsMixin':: d.fn(help='Flags is a set of additional options passed to kubectl before submitting a resource I.e. to disable resource validation: flags: [\n\t"--validate=false"  # disable resource validation\n]\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='flags', type=d.T.array)]),
  withFlagsMixin(flags): { flags+: if std.isArray(v=flags) then flags else [flags] },
  '#withManifest':: d.fn(help='Manifest contains the kubernetes manifest', args=[d.arg(name='manifest', type=d.T.string)]),
  withManifest(manifest): { manifest: manifest },
  '#withMergeStrategy':: d.fn(help='MergeStrategy is the strategy used to merge a patch. It defaults to "strategic" Must be one of: strategic, merge, json', args=[d.arg(name='mergeStrategy', type=d.T.string)]),
  withMergeStrategy(mergeStrategy): { mergeStrategy: mergeStrategy },
  '#withSetOwnerReference':: d.fn(help='SetOwnerReference sets the reference to the workflow on the OwnerReference of generated resource.', args=[d.arg(name='setOwnerReference', type=d.T.boolean)]),
  withSetOwnerReference(setOwnerReference): { setOwnerReference: setOwnerReference },
  '#withSuccessCondition':: d.fn(help='SuccessCondition is a label selector expression which describes the conditions of the k8s resource in which it is acceptable to proceed to the following step', args=[d.arg(name='successCondition', type=d.T.string)]),
  withSuccessCondition(successCondition): { successCondition: successCondition },
  '#mixin': 'ignore',
  mixin: self,
}
