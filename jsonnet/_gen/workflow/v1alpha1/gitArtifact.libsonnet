{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='gitArtifact', url='', help='GitArtifact is the location of an git artifact'),
  '#passwordSecret':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
  passwordSecret: {
    '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
    localObjectReference: {
      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { passwordSecret+: { localObjectReference+: { name: name } } },
    },
    '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
    withKey(key): { passwordSecret+: { key: key } },
    '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
    withOptional(optional): { passwordSecret+: { optional: optional } },
  },
  '#sshPrivateKeySecret':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
  sshPrivateKeySecret: {
    '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
    localObjectReference: {
      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { sshPrivateKeySecret+: { localObjectReference+: { name: name } } },
    },
    '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
    withKey(key): { sshPrivateKeySecret+: { key: key } },
    '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
    withOptional(optional): { sshPrivateKeySecret+: { optional: optional } },
  },
  '#usernameSecret':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
  usernameSecret: {
    '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
    localObjectReference: {
      '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { usernameSecret+: { localObjectReference+: { name: name } } },
    },
    '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
    withKey(key): { usernameSecret+: { key: key } },
    '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
    withOptional(optional): { usernameSecret+: { optional: optional } },
  },
  '#withDepth':: d.fn(help='Depth specifies clones/fetches should be shallow and include the given number of commits from the branch tip', args=[d.arg(name='depth', type=d.T.integer)]),
  withDepth(depth): { depth: depth },
  '#withFetch':: d.fn(help='Fetch specifies a number of refs that should be fetched before checkout', args=[d.arg(name='fetch', type=d.T.array)]),
  withFetch(fetch): { fetch: if std.isArray(v=fetch) then fetch else [fetch] },
  '#withFetchMixin':: d.fn(help='Fetch specifies a number of refs that should be fetched before checkout\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fetch', type=d.T.array)]),
  withFetchMixin(fetch): { fetch+: if std.isArray(v=fetch) then fetch else [fetch] },
  '#withInsecureIgnoreHostKey':: d.fn(help='InsecureIgnoreHostKey disables SSH strict host key checking during git clone', args=[d.arg(name='insecureIgnoreHostKey', type=d.T.boolean)]),
  withInsecureIgnoreHostKey(insecureIgnoreHostKey): { insecureIgnoreHostKey: insecureIgnoreHostKey },
  '#withRepo':: d.fn(help='Repo is the git repository', args=[d.arg(name='repo', type=d.T.string)]),
  withRepo(repo): { repo: repo },
  '#withRevision':: d.fn(help='Revision is the git commit, tag, branch to checkout', args=[d.arg(name='revision', type=d.T.string)]),
  withRevision(revision): { revision: revision },
  '#mixin': 'ignore',
  mixin: self,
}
