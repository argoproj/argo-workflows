{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='v1alpha1', url='', help=''),
  amount: (import 'amount.libsonnet'),
  archiveStrategy: (import 'archiveStrategy.libsonnet'),
  archivedWorkflowDeletedResponse: (import 'archivedWorkflowDeletedResponse.libsonnet'),
  arguments: (import 'arguments.libsonnet'),
  artifact: (import 'artifact.libsonnet'),
  artifactLocation: (import 'artifactLocation.libsonnet'),
  artifactRepositoryRef: (import 'artifactRepositoryRef.libsonnet'),
  artifactRepositoryRefStatus: (import 'artifactRepositoryRefStatus.libsonnet'),
  artifactoryArtifact: (import 'artifactoryArtifact.libsonnet'),
  artifactoryAuth: (import 'artifactoryAuth.libsonnet'),
  backoff: (import 'backoff.libsonnet'),
  cache: (import 'cache.libsonnet'),
  clusterWorkflowTemplate: (import 'clusterWorkflowTemplate.libsonnet'),
  clusterWorkflowTemplateCreateRequest: (import 'clusterWorkflowTemplateCreateRequest.libsonnet'),
  clusterWorkflowTemplateDeleteResponse: (import 'clusterWorkflowTemplateDeleteResponse.libsonnet'),
  clusterWorkflowTemplateLintRequest: (import 'clusterWorkflowTemplateLintRequest.libsonnet'),
  clusterWorkflowTemplateUpdateRequest: (import 'clusterWorkflowTemplateUpdateRequest.libsonnet'),
  condition: (import 'condition.libsonnet'),
  continueOn: (import 'continueOn.libsonnet'),
  counter: (import 'counter.libsonnet'),
  createCronWorkflowRequest: (import 'createCronWorkflowRequest.libsonnet'),
  createS3BucketOptions: (import 'createS3BucketOptions.libsonnet'),
  cronWorkflow: (import 'cronWorkflow.libsonnet'),
  cronWorkflowDeletedResponse: (import 'cronWorkflowDeletedResponse.libsonnet'),
  cronWorkflowResumeRequest: (import 'cronWorkflowResumeRequest.libsonnet'),
  cronWorkflowSpec: (import 'cronWorkflowSpec.libsonnet'),
  cronWorkflowStatus: (import 'cronWorkflowStatus.libsonnet'),
  cronWorkflowSuspendRequest: (import 'cronWorkflowSuspendRequest.libsonnet'),
  dagTask: (import 'dagTask.libsonnet'),
  dagTemplate: (import 'dagTemplate.libsonnet'),
  event: (import 'event.libsonnet'),
  eventResponse: (import 'eventResponse.libsonnet'),
  executorConfig: (import 'executorConfig.libsonnet'),
  gauge: (import 'gauge.libsonnet'),
  gcsArtifact: (import 'gcsArtifact.libsonnet'),
  gcsBucket: (import 'gcsBucket.libsonnet'),
  getUserInfoResponse: (import 'getUserInfoResponse.libsonnet'),
  gitArtifact: (import 'gitArtifact.libsonnet'),
  hdfsArtifact: (import 'hdfsArtifact.libsonnet'),
  hdfsConfig: (import 'hdfsConfig.libsonnet'),
  hdfsKrbConfig: (import 'hdfsKrbConfig.libsonnet'),
  header: (import 'header.libsonnet'),
  histogram: (import 'histogram.libsonnet'),
  httpArtifact: (import 'httpArtifact.libsonnet'),
  infoResponse: (import 'infoResponse.libsonnet'),
  inputs: (import 'inputs.libsonnet'),
  item: (import 'item.libsonnet'),
  link: (import 'link.libsonnet'),
  lintCronWorkflowRequest: (import 'lintCronWorkflowRequest.libsonnet'),
  logEntry: (import 'logEntry.libsonnet'),
  memoizationStatus: (import 'memoizationStatus.libsonnet'),
  memoize: (import 'memoize.libsonnet'),
  metadata: (import 'metadata.libsonnet'),
  metricLabel: (import 'metricLabel.libsonnet'),
  metrics: (import 'metrics.libsonnet'),
  mutex: (import 'mutex.libsonnet'),
  mutexHolding: (import 'mutexHolding.libsonnet'),
  mutexStatus: (import 'mutexStatus.libsonnet'),
  nodeStatus: (import 'nodeStatus.libsonnet'),
  nodeSynchronizationStatus: (import 'nodeSynchronizationStatus.libsonnet'),
  noneStrategy: (import 'noneStrategy.libsonnet'),
  ossArtifact: (import 'ossArtifact.libsonnet'),
  ossBucket: (import 'ossBucket.libsonnet'),
  outputs: (import 'outputs.libsonnet'),
  parallelSteps: (import 'parallelSteps.libsonnet'),
  parameter: (import 'parameter.libsonnet'),
  podGC: (import 'podGC.libsonnet'),
  prometheus: (import 'prometheus.libsonnet'),
  rawArtifact: (import 'rawArtifact.libsonnet'),
  resourceTemplate: (import 'resourceTemplate.libsonnet'),
  retryStrategy: (import 'retryStrategy.libsonnet'),
  s3Artifact: (import 's3Artifact.libsonnet'),
  s3Bucket: (import 's3Bucket.libsonnet'),
  scriptTemplate: (import 'scriptTemplate.libsonnet'),
  semaphoreHolding: (import 'semaphoreHolding.libsonnet'),
  semaphoreRef: (import 'semaphoreRef.libsonnet'),
  semaphoreStatus: (import 'semaphoreStatus.libsonnet'),
  sequence: (import 'sequence.libsonnet'),
  submit: (import 'submit.libsonnet'),
  submitOpts: (import 'submitOpts.libsonnet'),
  suppliedValueFrom: (import 'suppliedValueFrom.libsonnet'),
  suspendTemplate: (import 'suspendTemplate.libsonnet'),
  synchronization: (import 'synchronization.libsonnet'),
  synchronizationStatus: (import 'synchronizationStatus.libsonnet'),
  tarStrategy: (import 'tarStrategy.libsonnet'),
  template: (import 'template.libsonnet'),
  templateRef: (import 'templateRef.libsonnet'),
  ttlStrategy: (import 'ttlStrategy.libsonnet'),
  updateCronWorkflowRequest: (import 'updateCronWorkflowRequest.libsonnet'),
  userContainer: (import 'userContainer.libsonnet'),
  valueFrom: (import 'valueFrom.libsonnet'),
  version: (import 'version.libsonnet'),
  volumeClaimGC: (import 'volumeClaimGC.libsonnet'),
  workflow: (import 'workflow.libsonnet'),
  workflowCreateRequest: (import 'workflowCreateRequest.libsonnet'),
  workflowDeleteResponse: (import 'workflowDeleteResponse.libsonnet'),
  workflowEventBinding: (import 'workflowEventBinding.libsonnet'),
  workflowEventBindingSpec: (import 'workflowEventBindingSpec.libsonnet'),
  workflowLintRequest: (import 'workflowLintRequest.libsonnet'),
  workflowResubmitRequest: (import 'workflowResubmitRequest.libsonnet'),
  workflowResumeRequest: (import 'workflowResumeRequest.libsonnet'),
  workflowRetryRequest: (import 'workflowRetryRequest.libsonnet'),
  workflowSetRequest: (import 'workflowSetRequest.libsonnet'),
  workflowSpec: (import 'workflowSpec.libsonnet'),
  workflowStatus: (import 'workflowStatus.libsonnet'),
  workflowStep: (import 'workflowStep.libsonnet'),
  workflowStopRequest: (import 'workflowStopRequest.libsonnet'),
  workflowSubmitRequest: (import 'workflowSubmitRequest.libsonnet'),
  workflowSuspendRequest: (import 'workflowSuspendRequest.libsonnet'),
  workflowTemplate: (import 'workflowTemplate.libsonnet'),
  workflowTemplateCreateRequest: (import 'workflowTemplateCreateRequest.libsonnet'),
  workflowTemplateDeleteResponse: (import 'workflowTemplateDeleteResponse.libsonnet'),
  workflowTemplateLintRequest: (import 'workflowTemplateLintRequest.libsonnet'),
  workflowTemplateRef: (import 'workflowTemplateRef.libsonnet'),
  workflowTemplateSpec: (import 'workflowTemplateSpec.libsonnet'),
  workflowTemplateUpdateRequest: (import 'workflowTemplateUpdateRequest.libsonnet'),
  workflowTerminateRequest: (import 'workflowTerminateRequest.libsonnet'),
  workflowWatchEvent: (import 'workflowWatchEvent.libsonnet'),
  zipStrategy: (import 'zipStrategy.libsonnet'),
}
