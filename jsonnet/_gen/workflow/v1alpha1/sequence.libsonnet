{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='sequence', url='', help='Sequence expands a workflow step into numeric range'),
  '#count':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
  count: {
    '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
    withIntVal(intVal): { count+: { intVal: intVal } },
    '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
    withStrVal(strVal): { count+: { strVal: strVal } },
    '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
    withType(type): { count+: { type: type } },
  },
  '#end':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
  end: {
    '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
    withIntVal(intVal): { end+: { intVal: intVal } },
    '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
    withStrVal(strVal): { end+: { strVal: strVal } },
    '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
    withType(type): { end+: { type: type } },
  },
  '#start':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
  start: {
    '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
    withIntVal(intVal): { start+: { intVal: intVal } },
    '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
    withStrVal(strVal): { start+: { strVal: strVal } },
    '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
    withType(type): { start+: { type: type } },
  },
  '#withFormat':: d.fn(help='Format is a printf format string to format the value in the sequence', args=[d.arg(name='format', type=d.T.string)]),
  withFormat(format): { format: format },
  '#mixin': 'ignore',
  mixin: self,
}
