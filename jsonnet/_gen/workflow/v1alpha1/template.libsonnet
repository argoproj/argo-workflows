{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='template', url='', help='Template is a reusable and composable unit of execution in a workflow'),
  '#activeDeadlineSeconds':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
  activeDeadlineSeconds: {
    '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
    withIntVal(intVal): { activeDeadlineSeconds+: { intVal: intVal } },
    '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
    withStrVal(strVal): { activeDeadlineSeconds+: { strVal: strVal } },
    '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
    withType(type): { activeDeadlineSeconds+: { type: type } },
  },
  '#affinity':: d.obj(help='Affinity is a group of affinity scheduling rules.'),
  affinity: {
    '#nodeAffinity':: d.obj(help='Node affinity is a group of node affinity scheduling rules.'),
    nodeAffinity: {
      '#requiredDuringSchedulingIgnoredDuringExecution':: d.obj(help='A node selector represents the union of the results of one or more label queries\nover a set of nodes; that is, it represents the OR of the selectors represented\nby the node selector terms.'),
      requiredDuringSchedulingIgnoredDuringExecution: {
        '#withNodeSelectorTerms':: d.fn(help='Required. A list of node selector terms. The terms are ORed.', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
        withNodeSelectorTerms(nodeSelectorTerms): { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } },
        '#withNodeSelectorTermsMixin':: d.fn(help='Required. A list of node selector terms. The terms are ORed.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelectorTerms', type=d.T.array)]),
        withNodeSelectorTermsMixin(nodeSelectorTerms): { affinity+: { nodeAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: { nodeSelectorTerms+: if std.isArray(v=nodeSelectorTerms) then nodeSelectorTerms else [nodeSelectorTerms] } } } },
      },
      '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
      withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } },
      '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
      withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { affinity+: { nodeAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } },
    },
    '#podAffinity':: d.obj(help='Pod affinity is a group of inter pod affinity scheduling rules.'),
    podAffinity: {
      '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
      withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } },
      '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
      withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { affinity+: { podAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } },
      '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
      withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } },
      '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
      withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { affinity+: { podAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } },
    },
    '#podAntiAffinity':: d.obj(help='Pod anti affinity is a group of inter pod anti affinity scheduling rules.'),
    podAntiAffinity: {
      '#withPreferredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
      withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution): { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } },
      '#withPreferredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='preferredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
      withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution): { affinity+: { podAntiAffinity+: { preferredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=preferredDuringSchedulingIgnoredDuringExecution) then preferredDuringSchedulingIgnoredDuringExecution else [preferredDuringSchedulingIgnoredDuringExecution] } } },
      '#withRequiredDuringSchedulingIgnoredDuringExecution':: d.fn(help='', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
      withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution): { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } },
      '#withRequiredDuringSchedulingIgnoredDuringExecutionMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requiredDuringSchedulingIgnoredDuringExecution', type=d.T.array)]),
      withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution): { affinity+: { podAntiAffinity+: { requiredDuringSchedulingIgnoredDuringExecution+: if std.isArray(v=requiredDuringSchedulingIgnoredDuringExecution) then requiredDuringSchedulingIgnoredDuringExecution else [requiredDuringSchedulingIgnoredDuringExecution] } } },
    },
  },
  '#archiveLocation':: d.obj(help='ArtifactLocation describes a location for a single or multiple artifacts. It is used as single artifact in the context of inputs/outputs (e.g. outputs.artifacts.artname). It is also used to describe the location of multiple artifacts such as the archive location of a single workflow step, which the executor will use as a default location to store its files.'),
  archiveLocation: {
    '#artifactory':: d.obj(help='ArtifactoryArtifact is the location of an artifactory artifact'),
    artifactory: {
      '#passwordSecret':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
      passwordSecret: {
        '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
        localObjectReference: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { archiveLocation+: { artifactory+: { passwordSecret+: { localObjectReference+: { name: name } } } } },
        },
        '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { archiveLocation+: { artifactory+: { passwordSecret+: { key: key } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { archiveLocation+: { artifactory+: { passwordSecret+: { optional: optional } } } },
      },
      '#usernameSecret':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
      usernameSecret: {
        '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
        localObjectReference: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { archiveLocation+: { artifactory+: { usernameSecret+: { localObjectReference+: { name: name } } } } },
        },
        '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { archiveLocation+: { artifactory+: { usernameSecret+: { key: key } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { archiveLocation+: { artifactory+: { usernameSecret+: { optional: optional } } } },
      },
      '#withUrl':: d.fn(help='URL of the artifact', args=[d.arg(name='url', type=d.T.string)]),
      withUrl(url): { archiveLocation+: { artifactory+: { url: url } } },
    },
    '#gcs':: d.obj(help='GCSArtifact is the location of a GCS artifact'),
    gcs: {
      '#serviceAccountKeySecret':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
      serviceAccountKeySecret: {
        '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
        localObjectReference: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { archiveLocation+: { gcs+: { serviceAccountKeySecret+: { localObjectReference+: { name: name } } } } },
        },
        '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { archiveLocation+: { gcs+: { serviceAccountKeySecret+: { key: key } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { archiveLocation+: { gcs+: { serviceAccountKeySecret+: { optional: optional } } } },
      },
      '#withBucket':: d.fn(help='Bucket is the name of the bucket', args=[d.arg(name='bucket', type=d.T.string)]),
      withBucket(bucket): { archiveLocation+: { gcs+: { bucket: bucket } } },
      '#withKey':: d.fn(help='Key is the path in the bucket where the artifact resides', args=[d.arg(name='key', type=d.T.string)]),
      withKey(key): { archiveLocation+: { gcs+: { key: key } } },
    },
    '#git':: d.obj(help='GitArtifact is the location of an git artifact'),
    git: {
      '#passwordSecret':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
      passwordSecret: {
        '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
        localObjectReference: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { archiveLocation+: { git+: { passwordSecret+: { localObjectReference+: { name: name } } } } },
        },
        '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { archiveLocation+: { git+: { passwordSecret+: { key: key } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { archiveLocation+: { git+: { passwordSecret+: { optional: optional } } } },
      },
      '#sshPrivateKeySecret':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
      sshPrivateKeySecret: {
        '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
        localObjectReference: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { archiveLocation+: { git+: { sshPrivateKeySecret+: { localObjectReference+: { name: name } } } } },
        },
        '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { archiveLocation+: { git+: { sshPrivateKeySecret+: { key: key } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { archiveLocation+: { git+: { sshPrivateKeySecret+: { optional: optional } } } },
      },
      '#usernameSecret':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
      usernameSecret: {
        '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
        localObjectReference: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { archiveLocation+: { git+: { usernameSecret+: { localObjectReference+: { name: name } } } } },
        },
        '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { archiveLocation+: { git+: { usernameSecret+: { key: key } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { archiveLocation+: { git+: { usernameSecret+: { optional: optional } } } },
      },
      '#withDepth':: d.fn(help='Depth specifies clones/fetches should be shallow and include the given number of commits from the branch tip', args=[d.arg(name='depth', type=d.T.integer)]),
      withDepth(depth): { archiveLocation+: { git+: { depth: depth } } },
      '#withFetch':: d.fn(help='Fetch specifies a number of refs that should be fetched before checkout', args=[d.arg(name='fetch', type=d.T.array)]),
      withFetch(fetch): { archiveLocation+: { git+: { fetch: if std.isArray(v=fetch) then fetch else [fetch] } } },
      '#withFetchMixin':: d.fn(help='Fetch specifies a number of refs that should be fetched before checkout\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='fetch', type=d.T.array)]),
      withFetchMixin(fetch): { archiveLocation+: { git+: { fetch+: if std.isArray(v=fetch) then fetch else [fetch] } } },
      '#withInsecureIgnoreHostKey':: d.fn(help='InsecureIgnoreHostKey disables SSH strict host key checking during git clone', args=[d.arg(name='insecureIgnoreHostKey', type=d.T.boolean)]),
      withInsecureIgnoreHostKey(insecureIgnoreHostKey): { archiveLocation+: { git+: { insecureIgnoreHostKey: insecureIgnoreHostKey } } },
      '#withRepo':: d.fn(help='Repo is the git repository', args=[d.arg(name='repo', type=d.T.string)]),
      withRepo(repo): { archiveLocation+: { git+: { repo: repo } } },
      '#withRevision':: d.fn(help='Revision is the git commit, tag, branch to checkout', args=[d.arg(name='revision', type=d.T.string)]),
      withRevision(revision): { archiveLocation+: { git+: { revision: revision } } },
    },
    '#hdfs':: d.obj(help='HDFSArtifact is the location of an HDFS artifact'),
    hdfs: {
      '#krbCCacheSecret':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
      krbCCacheSecret: {
        '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
        localObjectReference: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { archiveLocation+: { hdfs+: { krbCCacheSecret+: { localObjectReference+: { name: name } } } } },
        },
        '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { archiveLocation+: { hdfs+: { krbCCacheSecret+: { key: key } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { archiveLocation+: { hdfs+: { krbCCacheSecret+: { optional: optional } } } },
      },
      '#krbConfigConfigMap':: d.obj(help='Selects a key from a ConfigMap.'),
      krbConfigConfigMap: {
        '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
        localObjectReference: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { archiveLocation+: { hdfs+: { krbConfigConfigMap+: { localObjectReference+: { name: name } } } } },
        },
        '#withKey':: d.fn(help='The key to select.', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { archiveLocation+: { hdfs+: { krbConfigConfigMap+: { key: key } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { archiveLocation+: { hdfs+: { krbConfigConfigMap+: { optional: optional } } } },
      },
      '#krbKeytabSecret':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
      krbKeytabSecret: {
        '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
        localObjectReference: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { archiveLocation+: { hdfs+: { krbKeytabSecret+: { localObjectReference+: { name: name } } } } },
        },
        '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { archiveLocation+: { hdfs+: { krbKeytabSecret+: { key: key } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { archiveLocation+: { hdfs+: { krbKeytabSecret+: { optional: optional } } } },
      },
      '#withAddresses':: d.fn(help='Addresses is accessible addresses of HDFS name nodes', args=[d.arg(name='addresses', type=d.T.array)]),
      withAddresses(addresses): { archiveLocation+: { hdfs+: { addresses: if std.isArray(v=addresses) then addresses else [addresses] } } },
      '#withAddressesMixin':: d.fn(help='Addresses is accessible addresses of HDFS name nodes\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='addresses', type=d.T.array)]),
      withAddressesMixin(addresses): { archiveLocation+: { hdfs+: { addresses+: if std.isArray(v=addresses) then addresses else [addresses] } } },
      '#withForce':: d.fn(help='Force copies a file forcibly even if it exists (default: false)', args=[d.arg(name='force', type=d.T.boolean)]),
      withForce(force): { archiveLocation+: { hdfs+: { force: force } } },
      '#withHdfsUser':: d.fn(help='HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.', args=[d.arg(name='hdfsUser', type=d.T.string)]),
      withHdfsUser(hdfsUser): { archiveLocation+: { hdfs+: { hdfsUser: hdfsUser } } },
      '#withKrbRealm':: d.fn(help='KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.', args=[d.arg(name='krbRealm', type=d.T.string)]),
      withKrbRealm(krbRealm): { archiveLocation+: { hdfs+: { krbRealm: krbRealm } } },
      '#withKrbServicePrincipalName':: d.fn(help='KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.', args=[d.arg(name='krbServicePrincipalName', type=d.T.string)]),
      withKrbServicePrincipalName(krbServicePrincipalName): { archiveLocation+: { hdfs+: { krbServicePrincipalName: krbServicePrincipalName } } },
      '#withKrbUsername':: d.fn(help='KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.', args=[d.arg(name='krbUsername', type=d.T.string)]),
      withKrbUsername(krbUsername): { archiveLocation+: { hdfs+: { krbUsername: krbUsername } } },
      '#withPath':: d.fn(help='Path is a file path in HDFS', args=[d.arg(name='path', type=d.T.string)]),
      withPath(path): { archiveLocation+: { hdfs+: { path: path } } },
    },
    '#http':: d.obj(help='HTTPArtifact allows an file served on HTTP to be placed as an input artifact in a container'),
    http: {
      '#withHeaders':: d.fn(help='Headers are an optional list of headers to send with HTTP requests for artifacts', args=[d.arg(name='headers', type=d.T.array)]),
      withHeaders(headers): { archiveLocation+: { http+: { headers: if std.isArray(v=headers) then headers else [headers] } } },
      '#withHeadersMixin':: d.fn(help='Headers are an optional list of headers to send with HTTP requests for artifacts\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='headers', type=d.T.array)]),
      withHeadersMixin(headers): { archiveLocation+: { http+: { headers+: if std.isArray(v=headers) then headers else [headers] } } },
      '#withUrl':: d.fn(help='URL of the artifact', args=[d.arg(name='url', type=d.T.string)]),
      withUrl(url): { archiveLocation+: { http+: { url: url } } },
    },
    '#oss':: d.obj(help='OSSArtifact is the location of an Alibaba Cloud OSS artifact'),
    oss: {
      '#accessKeySecret':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
      accessKeySecret: {
        '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
        localObjectReference: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { archiveLocation+: { oss+: { accessKeySecret+: { localObjectReference+: { name: name } } } } },
        },
        '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { archiveLocation+: { oss+: { accessKeySecret+: { key: key } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { archiveLocation+: { oss+: { accessKeySecret+: { optional: optional } } } },
      },
      '#secretKeySecret':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
      secretKeySecret: {
        '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
        localObjectReference: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { archiveLocation+: { oss+: { secretKeySecret+: { localObjectReference+: { name: name } } } } },
        },
        '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { archiveLocation+: { oss+: { secretKeySecret+: { key: key } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { archiveLocation+: { oss+: { secretKeySecret+: { optional: optional } } } },
      },
      '#withBucket':: d.fn(help='Bucket is the name of the bucket', args=[d.arg(name='bucket', type=d.T.string)]),
      withBucket(bucket): { archiveLocation+: { oss+: { bucket: bucket } } },
      '#withEndpoint':: d.fn(help='Endpoint is the hostname of the bucket endpoint', args=[d.arg(name='endpoint', type=d.T.string)]),
      withEndpoint(endpoint): { archiveLocation+: { oss+: { endpoint: endpoint } } },
      '#withKey':: d.fn(help='Key is the path in the bucket where the artifact resides', args=[d.arg(name='key', type=d.T.string)]),
      withKey(key): { archiveLocation+: { oss+: { key: key } } },
    },
    '#raw':: d.obj(help='RawArtifact allows raw string content to be placed as an artifact in a container'),
    raw: {
      '#withData':: d.fn(help='Data is the string contents of the artifact', args=[d.arg(name='data', type=d.T.string)]),
      withData(data): { archiveLocation+: { raw+: { data: data } } },
    },
    '#s3':: d.obj(help='S3Artifact is the location of an S3 artifact'),
    s3: {
      '#accessKeySecret':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
      accessKeySecret: {
        '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
        localObjectReference: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { archiveLocation+: { s3+: { accessKeySecret+: { localObjectReference+: { name: name } } } } },
        },
        '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { archiveLocation+: { s3+: { accessKeySecret+: { key: key } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { archiveLocation+: { s3+: { accessKeySecret+: { optional: optional } } } },
      },
      '#createBucketIfNotPresent':: d.obj(help='CreateS3BucketOptions options used to determine automatic automatic bucket-creation process'),
      createBucketIfNotPresent: {
        '#withObjectLocking':: d.fn(help='ObjectLocking Enable object locking', args=[d.arg(name='objectLocking', type=d.T.boolean)]),
        withObjectLocking(objectLocking): { archiveLocation+: { s3+: { createBucketIfNotPresent+: { objectLocking: objectLocking } } } },
      },
      '#secretKeySecret':: d.obj(help='SecretKeySelector selects a key of a Secret.'),
      secretKeySecret: {
        '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
        localObjectReference: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { archiveLocation+: { s3+: { secretKeySecret+: { localObjectReference+: { name: name } } } } },
        },
        '#withKey':: d.fn(help='The key of the secret to select from.  Must be a valid secret key.', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { archiveLocation+: { s3+: { secretKeySecret+: { key: key } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { archiveLocation+: { s3+: { secretKeySecret+: { optional: optional } } } },
      },
      '#withBucket':: d.fn(help='Bucket is the name of the bucket', args=[d.arg(name='bucket', type=d.T.string)]),
      withBucket(bucket): { archiveLocation+: { s3+: { bucket: bucket } } },
      '#withEndpoint':: d.fn(help='Endpoint is the hostname of the bucket endpoint', args=[d.arg(name='endpoint', type=d.T.string)]),
      withEndpoint(endpoint): { archiveLocation+: { s3+: { endpoint: endpoint } } },
      '#withInsecure':: d.fn(help='Insecure will connect to the service with TLS', args=[d.arg(name='insecure', type=d.T.boolean)]),
      withInsecure(insecure): { archiveLocation+: { s3+: { insecure: insecure } } },
      '#withKey':: d.fn(help='Key is the key in the bucket where the artifact resides', args=[d.arg(name='key', type=d.T.string)]),
      withKey(key): { archiveLocation+: { s3+: { key: key } } },
      '#withRegion':: d.fn(help='Region contains the optional bucket region', args=[d.arg(name='region', type=d.T.string)]),
      withRegion(region): { archiveLocation+: { s3+: { region: region } } },
      '#withRoleARN':: d.fn(help='RoleARN is the Amazon Resource Name (ARN) of the role to assume.', args=[d.arg(name='roleARN', type=d.T.string)]),
      withRoleARN(roleARN): { archiveLocation+: { s3+: { roleARN: roleARN } } },
      '#withUseSDKCreds':: d.fn(help='UseSDKCreds tells the driver to figure out credentials based on sdk defaults.', args=[d.arg(name='useSDKCreds', type=d.T.boolean)]),
      withUseSDKCreds(useSDKCreds): { archiveLocation+: { s3+: { useSDKCreds: useSDKCreds } } },
    },
    '#withArchiveLogs':: d.fn(help='ArchiveLogs indicates if the container logs should be archived', args=[d.arg(name='archiveLogs', type=d.T.boolean)]),
    withArchiveLogs(archiveLogs): { archiveLocation+: { archiveLogs: archiveLogs } },
  },
  '#arguments':: d.obj(help='Arguments to a template'),
  arguments: {
    '#withArtifacts':: d.fn(help='Artifacts is the list of artifacts to pass to the template or workflow', args=[d.arg(name='artifacts', type=d.T.array)]),
    withArtifacts(artifacts): { arguments+: { artifacts: if std.isArray(v=artifacts) then artifacts else [artifacts] } },
    '#withArtifactsMixin':: d.fn(help='Artifacts is the list of artifacts to pass to the template or workflow\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='artifacts', type=d.T.array)]),
    withArtifactsMixin(artifacts): { arguments+: { artifacts+: if std.isArray(v=artifacts) then artifacts else [artifacts] } },
    '#withParameters':: d.fn(help='Parameters is the list of parameters to pass to the template or workflow', args=[d.arg(name='parameters', type=d.T.array)]),
    withParameters(parameters): { arguments+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
    '#withParametersMixin':: d.fn(help='Parameters is the list of parameters to pass to the template or workflow\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
    withParametersMixin(parameters): { arguments+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
  },
  '#container':: d.obj(help='A single application container that you want to run within a pod.'),
  container: {
    '#lifecycle':: d.obj(help='Lifecycle describes actions that the management system should take in response to container lifecycle\nevents. For the PostStart and PreStop lifecycle handlers, management of the container blocks\nuntil the action is complete, unless the container process fails, in which case the handler is aborted.'),
    lifecycle: {
      '#postStart':: d.obj(help='Handler defines a specific action that should be taken\nTODO: pass structured data to these actions, and document that data here.'),
      postStart: {
        '#exec':: d.obj(help='ExecAction describes a "run in container" action.'),
        exec: {
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { container+: { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } } },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { container+: { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } } },
        },
        '#httpGet':: d.obj(help='HTTPGetAction describes an action based on HTTP Get requests.'),
        httpGet: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { container+: { lifecycle+: { postStart+: { httpGet+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { container+: { lifecycle+: { postStart+: { httpGet+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { container+: { lifecycle+: { postStart+: { httpGet+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { container+: { lifecycle+: { postStart+: { httpGet+: { host: host } } } } },
          '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeaders(httpHeaders): { container+: { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeadersMixin(httpHeaders): { container+: { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { container+: { lifecycle+: { postStart+: { httpGet+: { path: path } } } } },
          '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
          withScheme(scheme): { container+: { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } } },
        },
        '#tcpSocket':: d.obj(help=''),
        tcpSocket: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { container+: { lifecycle+: { postStart+: { tcpSocket+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { container+: { lifecycle+: { postStart+: { tcpSocket+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { container+: { lifecycle+: { postStart+: { tcpSocket+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { container+: { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } } },
        },
      },
      '#preStop':: d.obj(help='Handler defines a specific action that should be taken\nTODO: pass structured data to these actions, and document that data here.'),
      preStop: {
        '#exec':: d.obj(help='ExecAction describes a "run in container" action.'),
        exec: {
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { container+: { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } } },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { container+: { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } } },
        },
        '#httpGet':: d.obj(help='HTTPGetAction describes an action based on HTTP Get requests.'),
        httpGet: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { container+: { lifecycle+: { preStop+: { httpGet+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { container+: { lifecycle+: { preStop+: { httpGet+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { container+: { lifecycle+: { preStop+: { httpGet+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { container+: { lifecycle+: { preStop+: { httpGet+: { host: host } } } } },
          '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeaders(httpHeaders): { container+: { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeadersMixin(httpHeaders): { container+: { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { container+: { lifecycle+: { preStop+: { httpGet+: { path: path } } } } },
          '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
          withScheme(scheme): { container+: { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } } },
        },
        '#tcpSocket':: d.obj(help=''),
        tcpSocket: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { container+: { lifecycle+: { preStop+: { tcpSocket+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { container+: { lifecycle+: { preStop+: { tcpSocket+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { container+: { lifecycle+: { preStop+: { tcpSocket+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { container+: { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } } },
        },
      },
    },
    '#livenessProbe':: d.obj(help='Probe describes a health check to be performed against a container to determine whether it is\nalive or ready to receive traffic.'),
    livenessProbe: {
      '#handler':: d.obj(help='Handler defines a specific action that should be taken\nTODO: pass structured data to these actions, and document that data here.'),
      handler: {
        '#exec':: d.obj(help='ExecAction describes a "run in container" action.'),
        exec: {
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { container+: { livenessProbe+: { handler+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } } },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { container+: { livenessProbe+: { handler+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } } },
        },
        '#httpGet':: d.obj(help='HTTPGetAction describes an action based on HTTP Get requests.'),
        httpGet: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { container+: { livenessProbe+: { handler+: { httpGet+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { container+: { livenessProbe+: { handler+: { httpGet+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { container+: { livenessProbe+: { handler+: { httpGet+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { container+: { livenessProbe+: { handler+: { httpGet+: { host: host } } } } },
          '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeaders(httpHeaders): { container+: { livenessProbe+: { handler+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeadersMixin(httpHeaders): { container+: { livenessProbe+: { handler+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { container+: { livenessProbe+: { handler+: { httpGet+: { path: path } } } } },
          '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
          withScheme(scheme): { container+: { livenessProbe+: { handler+: { httpGet+: { scheme: scheme } } } } },
        },
        '#tcpSocket':: d.obj(help=''),
        tcpSocket: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { container+: { livenessProbe+: { handler+: { tcpSocket+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { container+: { livenessProbe+: { handler+: { tcpSocket+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { container+: { livenessProbe+: { handler+: { tcpSocket+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { container+: { livenessProbe+: { handler+: { tcpSocket+: { host: host } } } } },
        },
      },
      '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
      withFailureThreshold(failureThreshold): { container+: { livenessProbe+: { failureThreshold: failureThreshold } } },
      '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
      withInitialDelaySeconds(initialDelaySeconds): { container+: { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } } },
      '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
      withPeriodSeconds(periodSeconds): { container+: { livenessProbe+: { periodSeconds: periodSeconds } } },
      '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
      withSuccessThreshold(successThreshold): { container+: { livenessProbe+: { successThreshold: successThreshold } } },
      '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
      withTimeoutSeconds(timeoutSeconds): { container+: { livenessProbe+: { timeoutSeconds: timeoutSeconds } } },
    },
    '#readinessProbe':: d.obj(help='Probe describes a health check to be performed against a container to determine whether it is\nalive or ready to receive traffic.'),
    readinessProbe: {
      '#handler':: d.obj(help='Handler defines a specific action that should be taken\nTODO: pass structured data to these actions, and document that data here.'),
      handler: {
        '#exec':: d.obj(help='ExecAction describes a "run in container" action.'),
        exec: {
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { container+: { readinessProbe+: { handler+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } } },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { container+: { readinessProbe+: { handler+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } } },
        },
        '#httpGet':: d.obj(help='HTTPGetAction describes an action based on HTTP Get requests.'),
        httpGet: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { container+: { readinessProbe+: { handler+: { httpGet+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { container+: { readinessProbe+: { handler+: { httpGet+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { container+: { readinessProbe+: { handler+: { httpGet+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { container+: { readinessProbe+: { handler+: { httpGet+: { host: host } } } } },
          '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeaders(httpHeaders): { container+: { readinessProbe+: { handler+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeadersMixin(httpHeaders): { container+: { readinessProbe+: { handler+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { container+: { readinessProbe+: { handler+: { httpGet+: { path: path } } } } },
          '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
          withScheme(scheme): { container+: { readinessProbe+: { handler+: { httpGet+: { scheme: scheme } } } } },
        },
        '#tcpSocket':: d.obj(help=''),
        tcpSocket: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { container+: { readinessProbe+: { handler+: { tcpSocket+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { container+: { readinessProbe+: { handler+: { tcpSocket+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { container+: { readinessProbe+: { handler+: { tcpSocket+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { container+: { readinessProbe+: { handler+: { tcpSocket+: { host: host } } } } },
        },
      },
      '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
      withFailureThreshold(failureThreshold): { container+: { readinessProbe+: { failureThreshold: failureThreshold } } },
      '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
      withInitialDelaySeconds(initialDelaySeconds): { container+: { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } } },
      '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
      withPeriodSeconds(periodSeconds): { container+: { readinessProbe+: { periodSeconds: periodSeconds } } },
      '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
      withSuccessThreshold(successThreshold): { container+: { readinessProbe+: { successThreshold: successThreshold } } },
      '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
      withTimeoutSeconds(timeoutSeconds): { container+: { readinessProbe+: { timeoutSeconds: timeoutSeconds } } },
    },
    '#resources':: d.obj(help='ResourceRequirements describes the compute resource requirements.'),
    resources: {
      '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
      withLimits(limits): { container+: { resources+: { limits: limits } } },
      '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
      withLimitsMixin(limits): { container+: { resources+: { limits+: limits } } },
      '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
      withRequests(requests): { container+: { resources+: { requests: requests } } },
      '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
      withRequestsMixin(requests): { container+: { resources+: { requests+: requests } } },
    },
    '#securityContext':: d.obj(help='SecurityContext holds security configuration that will be applied to a container.\nSome fields are present in both SecurityContext and PodSecurityContext.  When both\nare set, the values in SecurityContext take precedence.'),
    securityContext: {
      '#capabilities':: d.obj(help='Adds and removes POSIX capabilities from running containers.'),
      capabilities: {
        '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
        withAdd(add): { container+: { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } } },
        '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
        withAddMixin(add): { container+: { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } } },
        '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
        withDrop(drop): { container+: { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } } },
        '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
        withDropMixin(drop): { container+: { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } } },
      },
      '#seLinuxOptions':: d.obj(help=''),
      seLinuxOptions: {
        '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
        withLevel(level): { container+: { securityContext+: { seLinuxOptions+: { level: level } } } },
        '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
        withRole(role): { container+: { securityContext+: { seLinuxOptions+: { role: role } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { container+: { securityContext+: { seLinuxOptions+: { type: type } } } },
        '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
        withUser(user): { container+: { securityContext+: { seLinuxOptions+: { user: user } } } },
      },
      '#windowsOptions':: d.obj(help='WindowsSecurityContextOptions contain Windows-specific options and credentials.'),
      windowsOptions: {
        '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
        withGmsaCredentialSpec(gmsaCredentialSpec): { container+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } },
        '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
        withGmsaCredentialSpecName(gmsaCredentialSpecName): { container+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } },
        '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
        withRunAsUserName(runAsUserName): { container+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } },
      },
      '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
      withAllowPrivilegeEscalation(allowPrivilegeEscalation): { container+: { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } } },
      '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
      withPrivileged(privileged): { container+: { securityContext+: { privileged: privileged } } },
      '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
      withProcMount(procMount): { container+: { securityContext+: { procMount: procMount } } },
      '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
      withReadOnlyRootFilesystem(readOnlyRootFilesystem): { container+: { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } } },
      '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.string)]),
      withRunAsGroup(runAsGroup): { container+: { securityContext+: { runAsGroup: runAsGroup } } },
      '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
      withRunAsNonRoot(runAsNonRoot): { container+: { securityContext+: { runAsNonRoot: runAsNonRoot } } },
      '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.string)]),
      withRunAsUser(runAsUser): { container+: { securityContext+: { runAsUser: runAsUser } } },
    },
    '#startupProbe':: d.obj(help='Probe describes a health check to be performed against a container to determine whether it is\nalive or ready to receive traffic.'),
    startupProbe: {
      '#handler':: d.obj(help='Handler defines a specific action that should be taken\nTODO: pass structured data to these actions, and document that data here.'),
      handler: {
        '#exec':: d.obj(help='ExecAction describes a "run in container" action.'),
        exec: {
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { container+: { startupProbe+: { handler+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } } },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { container+: { startupProbe+: { handler+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } } },
        },
        '#httpGet':: d.obj(help='HTTPGetAction describes an action based on HTTP Get requests.'),
        httpGet: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { container+: { startupProbe+: { handler+: { httpGet+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { container+: { startupProbe+: { handler+: { httpGet+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { container+: { startupProbe+: { handler+: { httpGet+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { container+: { startupProbe+: { handler+: { httpGet+: { host: host } } } } },
          '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeaders(httpHeaders): { container+: { startupProbe+: { handler+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeadersMixin(httpHeaders): { container+: { startupProbe+: { handler+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { container+: { startupProbe+: { handler+: { httpGet+: { path: path } } } } },
          '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
          withScheme(scheme): { container+: { startupProbe+: { handler+: { httpGet+: { scheme: scheme } } } } },
        },
        '#tcpSocket':: d.obj(help=''),
        tcpSocket: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { container+: { startupProbe+: { handler+: { tcpSocket+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { container+: { startupProbe+: { handler+: { tcpSocket+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { container+: { startupProbe+: { handler+: { tcpSocket+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { container+: { startupProbe+: { handler+: { tcpSocket+: { host: host } } } } },
        },
      },
      '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
      withFailureThreshold(failureThreshold): { container+: { startupProbe+: { failureThreshold: failureThreshold } } },
      '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
      withInitialDelaySeconds(initialDelaySeconds): { container+: { startupProbe+: { initialDelaySeconds: initialDelaySeconds } } },
      '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
      withPeriodSeconds(periodSeconds): { container+: { startupProbe+: { periodSeconds: periodSeconds } } },
      '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
      withSuccessThreshold(successThreshold): { container+: { startupProbe+: { successThreshold: successThreshold } } },
      '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
      withTimeoutSeconds(timeoutSeconds): { container+: { startupProbe+: { timeoutSeconds: timeoutSeconds } } },
    },
    '#withArgs':: d.fn(help='', args=[d.arg(name='args', type=d.T.array)]),
    withArgs(args): { container+: { args: if std.isArray(v=args) then args else [args] } },
    '#withArgsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='args', type=d.T.array)]),
    withArgsMixin(args): { container+: { args+: if std.isArray(v=args) then args else [args] } },
    '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
    withCommand(command): { container+: { command: if std.isArray(v=command) then command else [command] } },
    '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
    withCommandMixin(command): { container+: { command+: if std.isArray(v=command) then command else [command] } },
    '#withEnv':: d.fn(help='', args=[d.arg(name='env', type=d.T.array)]),
    withEnv(env): { container+: { env: if std.isArray(v=env) then env else [env] } },
    '#withEnvFrom':: d.fn(help='', args=[d.arg(name='envFrom', type=d.T.array)]),
    withEnvFrom(envFrom): { container+: { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] } },
    '#withEnvFromMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
    withEnvFromMixin(envFrom): { container+: { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] } },
    '#withEnvMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
    withEnvMixin(env): { container+: { env+: if std.isArray(v=env) then env else [env] } },
    '#withImage':: d.fn(help='', args=[d.arg(name='image', type=d.T.string)]),
    withImage(image): { container+: { image: image } },
    '#withImagePullPolicy':: d.fn(help='', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
    withImagePullPolicy(imagePullPolicy): { container+: { imagePullPolicy: imagePullPolicy } },
    '#withName':: d.fn(help='Name of the container specified as a DNS_LABEL.\nEach container in a pod must have a unique name (DNS_LABEL).\nCannot be updated.', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { container+: { name: name } },
    '#withPorts':: d.fn(help='', args=[d.arg(name='ports', type=d.T.array)]),
    withPorts(ports): { container+: { ports: if std.isArray(v=ports) then ports else [ports] } },
    '#withPortsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
    withPortsMixin(ports): { container+: { ports+: if std.isArray(v=ports) then ports else [ports] } },
    '#withStdin':: d.fn(help='', args=[d.arg(name='stdin', type=d.T.boolean)]),
    withStdin(stdin): { container+: { stdin: stdin } },
    '#withStdinOnce':: d.fn(help='', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
    withStdinOnce(stdinOnce): { container+: { stdinOnce: stdinOnce } },
    '#withTerminationMessagePath':: d.fn(help='', args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
    withTerminationMessagePath(terminationMessagePath): { container+: { terminationMessagePath: terminationMessagePath } },
    '#withTerminationMessagePolicy':: d.fn(help='', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
    withTerminationMessagePolicy(terminationMessagePolicy): { container+: { terminationMessagePolicy: terminationMessagePolicy } },
    '#withTty':: d.fn(help='', args=[d.arg(name='tty', type=d.T.boolean)]),
    withTty(tty): { container+: { tty: tty } },
    '#withVolumeDevices':: d.fn(help='', args=[d.arg(name='volumeDevices', type=d.T.array)]),
    withVolumeDevices(volumeDevices): { container+: { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] } },
    '#withVolumeDevicesMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
    withVolumeDevicesMixin(volumeDevices): { container+: { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] } },
    '#withVolumeMounts':: d.fn(help='', args=[d.arg(name='volumeMounts', type=d.T.array)]),
    withVolumeMounts(volumeMounts): { container+: { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] } },
    '#withVolumeMountsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeMounts', type=d.T.array)]),
    withVolumeMountsMixin(volumeMounts): { container+: { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] } },
    '#withWorkingDir':: d.fn(help='', args=[d.arg(name='workingDir', type=d.T.string)]),
    withWorkingDir(workingDir): { container+: { workingDir: workingDir } },
  },
  '#dag':: d.obj(help='DAGTemplate is a template subtype for directed acyclic graph templates'),
  dag: {
    '#withFailFast':: d.fn(help='This flag is for DAG logic. The DAG logic has a built-in "fail fast" feature to stop scheduling new steps, as soon as it detects that one of the DAG nodes is failed. Then it waits until all DAG nodes are completed before failing the DAG itself. The FailFast flag default is true,  if set to false, it will allow a DAG to run all branches of the DAG to completion (either success or failure), regardless of the failed outcomes of branches in the DAG. More info and example about this feature at https://github.com/argoproj/argo/issues/1442', args=[d.arg(name='failFast', type=d.T.boolean)]),
    withFailFast(failFast): { dag+: { failFast: failFast } },
    '#withTarget':: d.fn(help='Target are one or more names of targets to execute in a DAG', args=[d.arg(name='target', type=d.T.string)]),
    withTarget(target): { dag+: { target: target } },
    '#withTasks':: d.fn(help='Tasks are a list of DAG tasks', args=[d.arg(name='tasks', type=d.T.array)]),
    withTasks(tasks): { dag+: { tasks: if std.isArray(v=tasks) then tasks else [tasks] } },
    '#withTasksMixin':: d.fn(help='Tasks are a list of DAG tasks\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tasks', type=d.T.array)]),
    withTasksMixin(tasks): { dag+: { tasks+: if std.isArray(v=tasks) then tasks else [tasks] } },
  },
  '#executor':: d.obj(help='ExecutorConfig holds configurations of an executor container.'),
  executor: {
    '#withServiceAccountName':: d.fn(help='ServiceAccountName specifies the service account name of the executor container.', args=[d.arg(name='serviceAccountName', type=d.T.string)]),
    withServiceAccountName(serviceAccountName): { executor+: { serviceAccountName: serviceAccountName } },
  },
  '#inputs':: d.obj(help='Inputs are the mechanism for passing parameters, artifacts, volumes from one template to another'),
  inputs: {
    '#withArtifacts':: d.fn(help='Artifact are a list of artifacts passed as inputs', args=[d.arg(name='artifacts', type=d.T.array)]),
    withArtifacts(artifacts): { inputs+: { artifacts: if std.isArray(v=artifacts) then artifacts else [artifacts] } },
    '#withArtifactsMixin':: d.fn(help='Artifact are a list of artifacts passed as inputs\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='artifacts', type=d.T.array)]),
    withArtifactsMixin(artifacts): { inputs+: { artifacts+: if std.isArray(v=artifacts) then artifacts else [artifacts] } },
    '#withParameters':: d.fn(help='Parameters are a list of parameters passed as inputs', args=[d.arg(name='parameters', type=d.T.array)]),
    withParameters(parameters): { inputs+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
    '#withParametersMixin':: d.fn(help='Parameters are a list of parameters passed as inputs\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
    withParametersMixin(parameters): { inputs+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
  },
  '#memoize':: d.obj(help='Memoization enables caching for the Outputs of the template'),
  memoize: {
    '#cache':: d.obj(help='Cache is the configuration for the type of cache to be used'),
    cache: {
      '#configMap':: d.obj(help='Selects a key from a ConfigMap.'),
      configMap: {
        '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
        localObjectReference: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { memoize+: { cache+: { configMap+: { localObjectReference+: { name: name } } } } },
        },
        '#withKey':: d.fn(help='The key to select.', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { memoize+: { cache+: { configMap+: { key: key } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { memoize+: { cache+: { configMap+: { optional: optional } } } },
      },
    },
    '#withKey':: d.fn(help='Key is the key to use as the caching key', args=[d.arg(name='key', type=d.T.string)]),
    withKey(key): { memoize+: { key: key } },
    '#withMaxAge':: d.fn(help='MaxAge is the maximum age (e.g. "180s", "24h") of an entry that is still considered valid. If an entry is older than the MaxAge, it will be ignored.', args=[d.arg(name='maxAge', type=d.T.string)]),
    withMaxAge(maxAge): { memoize+: { maxAge: maxAge } },
  },
  '#metadata':: d.obj(help='Pod metdata'),
  metadata: {
    '#withAnnotations':: d.fn(help='', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotations(annotations): { metadata+: { annotations: annotations } },
    '#withAnnotationsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='annotations', type=d.T.object)]),
    withAnnotationsMixin(annotations): { metadata+: { annotations+: annotations } },
    '#withLabels':: d.fn(help='', args=[d.arg(name='labels', type=d.T.object)]),
    withLabels(labels): { metadata+: { labels: labels } },
    '#withLabelsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='labels', type=d.T.object)]),
    withLabelsMixin(labels): { metadata+: { labels+: labels } },
  },
  '#metrics':: d.obj(help='Metrics are a list of metrics emitted from a Workflow/Template'),
  metrics: {
    '#withPrometheus':: d.fn(help='Prometheus is a list of prometheus metrics to be emitted', args=[d.arg(name='prometheus', type=d.T.array)]),
    withPrometheus(prometheus): { metrics+: { prometheus: if std.isArray(v=prometheus) then prometheus else [prometheus] } },
    '#withPrometheusMixin':: d.fn(help='Prometheus is a list of prometheus metrics to be emitted\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='prometheus', type=d.T.array)]),
    withPrometheusMixin(prometheus): { metrics+: { prometheus+: if std.isArray(v=prometheus) then prometheus else [prometheus] } },
  },
  '#outputs':: d.obj(help='Outputs hold parameters, artifacts, and results from a step'),
  outputs: {
    '#withArtifacts':: d.fn(help='Artifacts holds the list of output artifacts produced by a step', args=[d.arg(name='artifacts', type=d.T.array)]),
    withArtifacts(artifacts): { outputs+: { artifacts: if std.isArray(v=artifacts) then artifacts else [artifacts] } },
    '#withArtifactsMixin':: d.fn(help='Artifacts holds the list of output artifacts produced by a step\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='artifacts', type=d.T.array)]),
    withArtifactsMixin(artifacts): { outputs+: { artifacts+: if std.isArray(v=artifacts) then artifacts else [artifacts] } },
    '#withExitCode':: d.fn(help='ExitCode holds the exit code of a script template', args=[d.arg(name='exitCode', type=d.T.string)]),
    withExitCode(exitCode): { outputs+: { exitCode: exitCode } },
    '#withParameters':: d.fn(help='Parameters holds the list of output parameters produced by a step', args=[d.arg(name='parameters', type=d.T.array)]),
    withParameters(parameters): { outputs+: { parameters: if std.isArray(v=parameters) then parameters else [parameters] } },
    '#withParametersMixin':: d.fn(help='Parameters holds the list of output parameters produced by a step\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='parameters', type=d.T.array)]),
    withParametersMixin(parameters): { outputs+: { parameters+: if std.isArray(v=parameters) then parameters else [parameters] } },
    '#withResult':: d.fn(help='Result holds the result (stdout) of a script template', args=[d.arg(name='result', type=d.T.string)]),
    withResult(result): { outputs+: { result: result } },
  },
  '#resource':: d.obj(help='ResourceTemplate is a template subtype to manipulate kubernetes resources'),
  resource: {
    '#withAction':: d.fn(help='Action is the action to perform to the resource. Must be one of: get, create, apply, delete, replace, patch', args=[d.arg(name='action', type=d.T.string)]),
    withAction(action): { resource+: { action: action } },
    '#withFailureCondition':: d.fn(help='FailureCondition is a label selector expression which describes the conditions of the k8s resource in which the step was considered failed', args=[d.arg(name='failureCondition', type=d.T.string)]),
    withFailureCondition(failureCondition): { resource+: { failureCondition: failureCondition } },
    '#withFlags':: d.fn(help='Flags is a set of additional options passed to kubectl before submitting a resource I.e. to disable resource validation: flags: [\n\t"--validate=false"  # disable resource validation\n]', args=[d.arg(name='flags', type=d.T.array)]),
    withFlags(flags): { resource+: { flags: if std.isArray(v=flags) then flags else [flags] } },
    '#withFlagsMixin':: d.fn(help='Flags is a set of additional options passed to kubectl before submitting a resource I.e. to disable resource validation: flags: [\n\t"--validate=false"  # disable resource validation\n]\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='flags', type=d.T.array)]),
    withFlagsMixin(flags): { resource+: { flags+: if std.isArray(v=flags) then flags else [flags] } },
    '#withManifest':: d.fn(help='Manifest contains the kubernetes manifest', args=[d.arg(name='manifest', type=d.T.string)]),
    withManifest(manifest): { resource+: { manifest: manifest } },
    '#withMergeStrategy':: d.fn(help='MergeStrategy is the strategy used to merge a patch. It defaults to "strategic" Must be one of: strategic, merge, json', args=[d.arg(name='mergeStrategy', type=d.T.string)]),
    withMergeStrategy(mergeStrategy): { resource+: { mergeStrategy: mergeStrategy } },
    '#withSetOwnerReference':: d.fn(help='SetOwnerReference sets the reference to the workflow on the OwnerReference of generated resource.', args=[d.arg(name='setOwnerReference', type=d.T.boolean)]),
    withSetOwnerReference(setOwnerReference): { resource+: { setOwnerReference: setOwnerReference } },
    '#withSuccessCondition':: d.fn(help='SuccessCondition is a label selector expression which describes the conditions of the k8s resource in which it is acceptable to proceed to the following step', args=[d.arg(name='successCondition', type=d.T.string)]),
    withSuccessCondition(successCondition): { resource+: { successCondition: successCondition } },
  },
  '#retryStrategy':: d.obj(help='RetryStrategy provides controls on how to retry a workflow step'),
  retryStrategy: {
    '#backoff':: d.obj(help='Backoff is a backoff strategy to use within retryStrategy'),
    backoff: {
      '#factor':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
      factor: {
        '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
        withIntVal(intVal): { retryStrategy+: { backoff+: { factor+: { intVal: intVal } } } },
        '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
        withStrVal(strVal): { retryStrategy+: { backoff+: { factor+: { strVal: strVal } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { retryStrategy+: { backoff+: { factor+: { type: type } } } },
      },
      '#withDuration':: d.fn(help='Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")', args=[d.arg(name='duration', type=d.T.string)]),
      withDuration(duration): { retryStrategy+: { backoff+: { duration: duration } } },
      '#withMaxDuration':: d.fn(help='MaxDuration is the maximum amount of time allowed for the backoff strategy', args=[d.arg(name='maxDuration', type=d.T.string)]),
      withMaxDuration(maxDuration): { retryStrategy+: { backoff+: { maxDuration: maxDuration } } },
    },
    '#limit':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
    limit: {
      '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
      withIntVal(intVal): { retryStrategy+: { limit+: { intVal: intVal } } },
      '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
      withStrVal(strVal): { retryStrategy+: { limit+: { strVal: strVal } } },
      '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
      withType(type): { retryStrategy+: { limit+: { type: type } } },
    },
    '#withRetryPolicy':: d.fn(help='RetryPolicy is a policy of NodePhase statuses that will be retried', args=[d.arg(name='retryPolicy', type=d.T.string)]),
    withRetryPolicy(retryPolicy): { retryStrategy+: { retryPolicy: retryPolicy } },
  },
  '#script':: d.obj(help='ScriptTemplate is a template subtype to enable scripting through code steps'),
  script: {
    '#lifecycle':: d.obj(help='Lifecycle describes actions that the management system should take in response to container lifecycle\nevents. For the PostStart and PreStop lifecycle handlers, management of the container blocks\nuntil the action is complete, unless the container process fails, in which case the handler is aborted.'),
    lifecycle: {
      '#postStart':: d.obj(help='Handler defines a specific action that should be taken\nTODO: pass structured data to these actions, and document that data here.'),
      postStart: {
        '#exec':: d.obj(help='ExecAction describes a "run in container" action.'),
        exec: {
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { script+: { lifecycle+: { postStart+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } } },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { script+: { lifecycle+: { postStart+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } } },
        },
        '#httpGet':: d.obj(help='HTTPGetAction describes an action based on HTTP Get requests.'),
        httpGet: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { script+: { lifecycle+: { postStart+: { httpGet+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { script+: { lifecycle+: { postStart+: { httpGet+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { script+: { lifecycle+: { postStart+: { httpGet+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { script+: { lifecycle+: { postStart+: { httpGet+: { host: host } } } } },
          '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeaders(httpHeaders): { script+: { lifecycle+: { postStart+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeadersMixin(httpHeaders): { script+: { lifecycle+: { postStart+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { script+: { lifecycle+: { postStart+: { httpGet+: { path: path } } } } },
          '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
          withScheme(scheme): { script+: { lifecycle+: { postStart+: { httpGet+: { scheme: scheme } } } } },
        },
        '#tcpSocket':: d.obj(help=''),
        tcpSocket: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { script+: { lifecycle+: { postStart+: { tcpSocket+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { script+: { lifecycle+: { postStart+: { tcpSocket+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { script+: { lifecycle+: { postStart+: { tcpSocket+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { script+: { lifecycle+: { postStart+: { tcpSocket+: { host: host } } } } },
        },
      },
      '#preStop':: d.obj(help='Handler defines a specific action that should be taken\nTODO: pass structured data to these actions, and document that data here.'),
      preStop: {
        '#exec':: d.obj(help='ExecAction describes a "run in container" action.'),
        exec: {
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { script+: { lifecycle+: { preStop+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } } },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { script+: { lifecycle+: { preStop+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } } },
        },
        '#httpGet':: d.obj(help='HTTPGetAction describes an action based on HTTP Get requests.'),
        httpGet: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { script+: { lifecycle+: { preStop+: { httpGet+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { script+: { lifecycle+: { preStop+: { httpGet+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { script+: { lifecycle+: { preStop+: { httpGet+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { script+: { lifecycle+: { preStop+: { httpGet+: { host: host } } } } },
          '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeaders(httpHeaders): { script+: { lifecycle+: { preStop+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeadersMixin(httpHeaders): { script+: { lifecycle+: { preStop+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { script+: { lifecycle+: { preStop+: { httpGet+: { path: path } } } } },
          '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
          withScheme(scheme): { script+: { lifecycle+: { preStop+: { httpGet+: { scheme: scheme } } } } },
        },
        '#tcpSocket':: d.obj(help=''),
        tcpSocket: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { script+: { lifecycle+: { preStop+: { tcpSocket+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { script+: { lifecycle+: { preStop+: { tcpSocket+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { script+: { lifecycle+: { preStop+: { tcpSocket+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { script+: { lifecycle+: { preStop+: { tcpSocket+: { host: host } } } } },
        },
      },
    },
    '#livenessProbe':: d.obj(help='Probe describes a health check to be performed against a container to determine whether it is\nalive or ready to receive traffic.'),
    livenessProbe: {
      '#handler':: d.obj(help='Handler defines a specific action that should be taken\nTODO: pass structured data to these actions, and document that data here.'),
      handler: {
        '#exec':: d.obj(help='ExecAction describes a "run in container" action.'),
        exec: {
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { script+: { livenessProbe+: { handler+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } } },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { script+: { livenessProbe+: { handler+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } } },
        },
        '#httpGet':: d.obj(help='HTTPGetAction describes an action based on HTTP Get requests.'),
        httpGet: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { script+: { livenessProbe+: { handler+: { httpGet+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { script+: { livenessProbe+: { handler+: { httpGet+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { script+: { livenessProbe+: { handler+: { httpGet+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { script+: { livenessProbe+: { handler+: { httpGet+: { host: host } } } } },
          '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeaders(httpHeaders): { script+: { livenessProbe+: { handler+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeadersMixin(httpHeaders): { script+: { livenessProbe+: { handler+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { script+: { livenessProbe+: { handler+: { httpGet+: { path: path } } } } },
          '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
          withScheme(scheme): { script+: { livenessProbe+: { handler+: { httpGet+: { scheme: scheme } } } } },
        },
        '#tcpSocket':: d.obj(help=''),
        tcpSocket: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { script+: { livenessProbe+: { handler+: { tcpSocket+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { script+: { livenessProbe+: { handler+: { tcpSocket+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { script+: { livenessProbe+: { handler+: { tcpSocket+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { script+: { livenessProbe+: { handler+: { tcpSocket+: { host: host } } } } },
        },
      },
      '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
      withFailureThreshold(failureThreshold): { script+: { livenessProbe+: { failureThreshold: failureThreshold } } },
      '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
      withInitialDelaySeconds(initialDelaySeconds): { script+: { livenessProbe+: { initialDelaySeconds: initialDelaySeconds } } },
      '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
      withPeriodSeconds(periodSeconds): { script+: { livenessProbe+: { periodSeconds: periodSeconds } } },
      '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
      withSuccessThreshold(successThreshold): { script+: { livenessProbe+: { successThreshold: successThreshold } } },
      '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
      withTimeoutSeconds(timeoutSeconds): { script+: { livenessProbe+: { timeoutSeconds: timeoutSeconds } } },
    },
    '#readinessProbe':: d.obj(help='Probe describes a health check to be performed against a container to determine whether it is\nalive or ready to receive traffic.'),
    readinessProbe: {
      '#handler':: d.obj(help='Handler defines a specific action that should be taken\nTODO: pass structured data to these actions, and document that data here.'),
      handler: {
        '#exec':: d.obj(help='ExecAction describes a "run in container" action.'),
        exec: {
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { script+: { readinessProbe+: { handler+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } } },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { script+: { readinessProbe+: { handler+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } } },
        },
        '#httpGet':: d.obj(help='HTTPGetAction describes an action based on HTTP Get requests.'),
        httpGet: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { script+: { readinessProbe+: { handler+: { httpGet+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { script+: { readinessProbe+: { handler+: { httpGet+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { script+: { readinessProbe+: { handler+: { httpGet+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { script+: { readinessProbe+: { handler+: { httpGet+: { host: host } } } } },
          '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeaders(httpHeaders): { script+: { readinessProbe+: { handler+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeadersMixin(httpHeaders): { script+: { readinessProbe+: { handler+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { script+: { readinessProbe+: { handler+: { httpGet+: { path: path } } } } },
          '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
          withScheme(scheme): { script+: { readinessProbe+: { handler+: { httpGet+: { scheme: scheme } } } } },
        },
        '#tcpSocket':: d.obj(help=''),
        tcpSocket: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { script+: { readinessProbe+: { handler+: { tcpSocket+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { script+: { readinessProbe+: { handler+: { tcpSocket+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { script+: { readinessProbe+: { handler+: { tcpSocket+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { script+: { readinessProbe+: { handler+: { tcpSocket+: { host: host } } } } },
        },
      },
      '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
      withFailureThreshold(failureThreshold): { script+: { readinessProbe+: { failureThreshold: failureThreshold } } },
      '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
      withInitialDelaySeconds(initialDelaySeconds): { script+: { readinessProbe+: { initialDelaySeconds: initialDelaySeconds } } },
      '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
      withPeriodSeconds(periodSeconds): { script+: { readinessProbe+: { periodSeconds: periodSeconds } } },
      '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
      withSuccessThreshold(successThreshold): { script+: { readinessProbe+: { successThreshold: successThreshold } } },
      '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
      withTimeoutSeconds(timeoutSeconds): { script+: { readinessProbe+: { timeoutSeconds: timeoutSeconds } } },
    },
    '#resources':: d.obj(help='ResourceRequirements describes the compute resource requirements.'),
    resources: {
      '#withLimits':: d.fn(help='', args=[d.arg(name='limits', type=d.T.object)]),
      withLimits(limits): { script+: { resources+: { limits: limits } } },
      '#withLimitsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='limits', type=d.T.object)]),
      withLimitsMixin(limits): { script+: { resources+: { limits+: limits } } },
      '#withRequests':: d.fn(help='', args=[d.arg(name='requests', type=d.T.object)]),
      withRequests(requests): { script+: { resources+: { requests: requests } } },
      '#withRequestsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='requests', type=d.T.object)]),
      withRequestsMixin(requests): { script+: { resources+: { requests+: requests } } },
    },
    '#securityContext':: d.obj(help='SecurityContext holds security configuration that will be applied to a container.\nSome fields are present in both SecurityContext and PodSecurityContext.  When both\nare set, the values in SecurityContext take precedence.'),
    securityContext: {
      '#capabilities':: d.obj(help='Adds and removes POSIX capabilities from running containers.'),
      capabilities: {
        '#withAdd':: d.fn(help='', args=[d.arg(name='add', type=d.T.array)]),
        withAdd(add): { script+: { securityContext+: { capabilities+: { add: if std.isArray(v=add) then add else [add] } } } },
        '#withAddMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='add', type=d.T.array)]),
        withAddMixin(add): { script+: { securityContext+: { capabilities+: { add+: if std.isArray(v=add) then add else [add] } } } },
        '#withDrop':: d.fn(help='', args=[d.arg(name='drop', type=d.T.array)]),
        withDrop(drop): { script+: { securityContext+: { capabilities+: { drop: if std.isArray(v=drop) then drop else [drop] } } } },
        '#withDropMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='drop', type=d.T.array)]),
        withDropMixin(drop): { script+: { securityContext+: { capabilities+: { drop+: if std.isArray(v=drop) then drop else [drop] } } } },
      },
      '#seLinuxOptions':: d.obj(help=''),
      seLinuxOptions: {
        '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
        withLevel(level): { script+: { securityContext+: { seLinuxOptions+: { level: level } } } },
        '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
        withRole(role): { script+: { securityContext+: { seLinuxOptions+: { role: role } } } },
        '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
        withType(type): { script+: { securityContext+: { seLinuxOptions+: { type: type } } } },
        '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
        withUser(user): { script+: { securityContext+: { seLinuxOptions+: { user: user } } } },
      },
      '#windowsOptions':: d.obj(help='WindowsSecurityContextOptions contain Windows-specific options and credentials.'),
      windowsOptions: {
        '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
        withGmsaCredentialSpec(gmsaCredentialSpec): { script+: { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } } },
        '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
        withGmsaCredentialSpecName(gmsaCredentialSpecName): { script+: { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } } },
        '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
        withRunAsUserName(runAsUserName): { script+: { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } } },
      },
      '#withAllowPrivilegeEscalation':: d.fn(help='', args=[d.arg(name='allowPrivilegeEscalation', type=d.T.boolean)]),
      withAllowPrivilegeEscalation(allowPrivilegeEscalation): { script+: { securityContext+: { allowPrivilegeEscalation: allowPrivilegeEscalation } } },
      '#withPrivileged':: d.fn(help='', args=[d.arg(name='privileged', type=d.T.boolean)]),
      withPrivileged(privileged): { script+: { securityContext+: { privileged: privileged } } },
      '#withProcMount':: d.fn(help='', args=[d.arg(name='procMount', type=d.T.string)]),
      withProcMount(procMount): { script+: { securityContext+: { procMount: procMount } } },
      '#withReadOnlyRootFilesystem':: d.fn(help='', args=[d.arg(name='readOnlyRootFilesystem', type=d.T.boolean)]),
      withReadOnlyRootFilesystem(readOnlyRootFilesystem): { script+: { securityContext+: { readOnlyRootFilesystem: readOnlyRootFilesystem } } },
      '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.string)]),
      withRunAsGroup(runAsGroup): { script+: { securityContext+: { runAsGroup: runAsGroup } } },
      '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
      withRunAsNonRoot(runAsNonRoot): { script+: { securityContext+: { runAsNonRoot: runAsNonRoot } } },
      '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.string)]),
      withRunAsUser(runAsUser): { script+: { securityContext+: { runAsUser: runAsUser } } },
    },
    '#startupProbe':: d.obj(help='Probe describes a health check to be performed against a container to determine whether it is\nalive or ready to receive traffic.'),
    startupProbe: {
      '#handler':: d.obj(help='Handler defines a specific action that should be taken\nTODO: pass structured data to these actions, and document that data here.'),
      handler: {
        '#exec':: d.obj(help='ExecAction describes a "run in container" action.'),
        exec: {
          '#withCommand':: d.fn(help='', args=[d.arg(name='command', type=d.T.array)]),
          withCommand(command): { script+: { startupProbe+: { handler+: { exec+: { command: if std.isArray(v=command) then command else [command] } } } } },
          '#withCommandMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='command', type=d.T.array)]),
          withCommandMixin(command): { script+: { startupProbe+: { handler+: { exec+: { command+: if std.isArray(v=command) then command else [command] } } } } },
        },
        '#httpGet':: d.obj(help='HTTPGetAction describes an action based on HTTP Get requests.'),
        httpGet: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { script+: { startupProbe+: { handler+: { httpGet+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { script+: { startupProbe+: { handler+: { httpGet+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { script+: { startupProbe+: { handler+: { httpGet+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { script+: { startupProbe+: { handler+: { httpGet+: { host: host } } } } },
          '#withHttpHeaders':: d.fn(help='', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeaders(httpHeaders): { script+: { startupProbe+: { handler+: { httpGet+: { httpHeaders: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withHttpHeadersMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='httpHeaders', type=d.T.array)]),
          withHttpHeadersMixin(httpHeaders): { script+: { startupProbe+: { handler+: { httpGet+: { httpHeaders+: if std.isArray(v=httpHeaders) then httpHeaders else [httpHeaders] } } } } },
          '#withPath':: d.fn(help='', args=[d.arg(name='path', type=d.T.string)]),
          withPath(path): { script+: { startupProbe+: { handler+: { httpGet+: { path: path } } } } },
          '#withScheme':: d.fn(help='', args=[d.arg(name='scheme', type=d.T.string)]),
          withScheme(scheme): { script+: { startupProbe+: { handler+: { httpGet+: { scheme: scheme } } } } },
        },
        '#tcpSocket':: d.obj(help=''),
        tcpSocket: {
          '#port':: d.obj(help='+protobuf=true\n+protobuf.options.(gogoproto.goproto_stringer)=false\n+k8s:openapi-gen=true'),
          port: {
            '#withIntVal':: d.fn(help='', args=[d.arg(name='intVal', type=d.T.integer)]),
            withIntVal(intVal): { script+: { startupProbe+: { handler+: { tcpSocket+: { port+: { intVal: intVal } } } } } },
            '#withStrVal':: d.fn(help='', args=[d.arg(name='strVal', type=d.T.string)]),
            withStrVal(strVal): { script+: { startupProbe+: { handler+: { tcpSocket+: { port+: { strVal: strVal } } } } } },
            '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
            withType(type): { script+: { startupProbe+: { handler+: { tcpSocket+: { port+: { type: type } } } } } },
          },
          '#withHost':: d.fn(help='', args=[d.arg(name='host', type=d.T.string)]),
          withHost(host): { script+: { startupProbe+: { handler+: { tcpSocket+: { host: host } } } } },
        },
      },
      '#withFailureThreshold':: d.fn(help='', args=[d.arg(name='failureThreshold', type=d.T.integer)]),
      withFailureThreshold(failureThreshold): { script+: { startupProbe+: { failureThreshold: failureThreshold } } },
      '#withInitialDelaySeconds':: d.fn(help='', args=[d.arg(name='initialDelaySeconds', type=d.T.integer)]),
      withInitialDelaySeconds(initialDelaySeconds): { script+: { startupProbe+: { initialDelaySeconds: initialDelaySeconds } } },
      '#withPeriodSeconds':: d.fn(help='', args=[d.arg(name='periodSeconds', type=d.T.integer)]),
      withPeriodSeconds(periodSeconds): { script+: { startupProbe+: { periodSeconds: periodSeconds } } },
      '#withSuccessThreshold':: d.fn(help='', args=[d.arg(name='successThreshold', type=d.T.integer)]),
      withSuccessThreshold(successThreshold): { script+: { startupProbe+: { successThreshold: successThreshold } } },
      '#withTimeoutSeconds':: d.fn(help='', args=[d.arg(name='timeoutSeconds', type=d.T.integer)]),
      withTimeoutSeconds(timeoutSeconds): { script+: { startupProbe+: { timeoutSeconds: timeoutSeconds } } },
    },
    '#withArgs':: d.fn(help="Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell", args=[d.arg(name='args', type=d.T.array)]),
    withArgs(args): { script+: { args: if std.isArray(v=args) then args else [args] } },
    '#withArgsMixin':: d.fn(help="Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='args', type=d.T.array)]),
    withArgsMixin(args): { script+: { args+: if std.isArray(v=args) then args else [args] } },
    '#withCommand':: d.fn(help="Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell", args=[d.arg(name='command', type=d.T.array)]),
    withCommand(command): { script+: { command: if std.isArray(v=command) then command else [command] } },
    '#withCommandMixin':: d.fn(help="Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='command', type=d.T.array)]),
    withCommandMixin(command): { script+: { command+: if std.isArray(v=command) then command else [command] } },
    '#withEnv':: d.fn(help='List of environment variables to set in the container. Cannot be updated.', args=[d.arg(name='env', type=d.T.array)]),
    withEnv(env): { script+: { env: if std.isArray(v=env) then env else [env] } },
    '#withEnvFrom':: d.fn(help='List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.', args=[d.arg(name='envFrom', type=d.T.array)]),
    withEnvFrom(envFrom): { script+: { envFrom: if std.isArray(v=envFrom) then envFrom else [envFrom] } },
    '#withEnvFromMixin':: d.fn(help='List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='envFrom', type=d.T.array)]),
    withEnvFromMixin(envFrom): { script+: { envFrom+: if std.isArray(v=envFrom) then envFrom else [envFrom] } },
    '#withEnvMixin':: d.fn(help='List of environment variables to set in the container. Cannot be updated.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='env', type=d.T.array)]),
    withEnvMixin(env): { script+: { env+: if std.isArray(v=env) then env else [env] } },
    '#withImage':: d.fn(help='Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.', args=[d.arg(name='image', type=d.T.string)]),
    withImage(image): { script+: { image: image } },
    '#withImagePullPolicy':: d.fn(help='Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images', args=[d.arg(name='imagePullPolicy', type=d.T.string)]),
    withImagePullPolicy(imagePullPolicy): { script+: { imagePullPolicy: imagePullPolicy } },
    '#withName':: d.fn(help='Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { script+: { name: name } },
    '#withPorts':: d.fn(help='List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.', args=[d.arg(name='ports', type=d.T.array)]),
    withPorts(ports): { script+: { ports: if std.isArray(v=ports) then ports else [ports] } },
    '#withPortsMixin':: d.fn(help='List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='ports', type=d.T.array)]),
    withPortsMixin(ports): { script+: { ports+: if std.isArray(v=ports) then ports else [ports] } },
    '#withSource':: d.fn(help='Source contains the source code of the script to execute', args=[d.arg(name='source', type=d.T.string)]),
    withSource(source): { script+: { source: source } },
    '#withStdin':: d.fn(help='Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.', args=[d.arg(name='stdin', type=d.T.boolean)]),
    withStdin(stdin): { script+: { stdin: stdin } },
    '#withStdinOnce':: d.fn(help='Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false', args=[d.arg(name='stdinOnce', type=d.T.boolean)]),
    withStdinOnce(stdinOnce): { script+: { stdinOnce: stdinOnce } },
    '#withTerminationMessagePath':: d.fn(help="Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.", args=[d.arg(name='terminationMessagePath', type=d.T.string)]),
    withTerminationMessagePath(terminationMessagePath): { script+: { terminationMessagePath: terminationMessagePath } },
    '#withTerminationMessagePolicy':: d.fn(help='Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.', args=[d.arg(name='terminationMessagePolicy', type=d.T.string)]),
    withTerminationMessagePolicy(terminationMessagePolicy): { script+: { terminationMessagePolicy: terminationMessagePolicy } },
    '#withTty':: d.fn(help="Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.", args=[d.arg(name='tty', type=d.T.boolean)]),
    withTty(tty): { script+: { tty: tty } },
    '#withVolumeDevices':: d.fn(help='volumeDevices is the list of block devices to be used by the container. This is a beta feature.', args=[d.arg(name='volumeDevices', type=d.T.array)]),
    withVolumeDevices(volumeDevices): { script+: { volumeDevices: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] } },
    '#withVolumeDevicesMixin':: d.fn(help='volumeDevices is the list of block devices to be used by the container. This is a beta feature.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumeDevices', type=d.T.array)]),
    withVolumeDevicesMixin(volumeDevices): { script+: { volumeDevices+: if std.isArray(v=volumeDevices) then volumeDevices else [volumeDevices] } },
    '#withVolumeMounts':: d.fn(help="Pod volumes to mount into the container's filesystem. Cannot be updated.", args=[d.arg(name='volumeMounts', type=d.T.array)]),
    withVolumeMounts(volumeMounts): { script+: { volumeMounts: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] } },
    '#withVolumeMountsMixin':: d.fn(help="Pod volumes to mount into the container's filesystem. Cannot be updated.\n\n**Note:** This function appends passed data to existing values", args=[d.arg(name='volumeMounts', type=d.T.array)]),
    withVolumeMountsMixin(volumeMounts): { script+: { volumeMounts+: if std.isArray(v=volumeMounts) then volumeMounts else [volumeMounts] } },
    '#withWorkingDir':: d.fn(help="Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.", args=[d.arg(name='workingDir', type=d.T.string)]),
    withWorkingDir(workingDir): { script+: { workingDir: workingDir } },
  },
  '#securityContext':: d.obj(help='PodSecurityContext holds pod-level security attributes and common container settings.\nSome fields are also present in container.securityContext.  Field values of\ncontainer.securityContext take precedence over field values of PodSecurityContext.'),
  securityContext: {
    '#seLinuxOptions':: d.obj(help=''),
    seLinuxOptions: {
      '#withLevel':: d.fn(help='', args=[d.arg(name='level', type=d.T.string)]),
      withLevel(level): { securityContext+: { seLinuxOptions+: { level: level } } },
      '#withRole':: d.fn(help='', args=[d.arg(name='role', type=d.T.string)]),
      withRole(role): { securityContext+: { seLinuxOptions+: { role: role } } },
      '#withType':: d.fn(help='', args=[d.arg(name='type', type=d.T.string)]),
      withType(type): { securityContext+: { seLinuxOptions+: { type: type } } },
      '#withUser':: d.fn(help='', args=[d.arg(name='user', type=d.T.string)]),
      withUser(user): { securityContext+: { seLinuxOptions+: { user: user } } },
    },
    '#windowsOptions':: d.obj(help='WindowsSecurityContextOptions contain Windows-specific options and credentials.'),
    windowsOptions: {
      '#withGmsaCredentialSpec':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpec', type=d.T.string)]),
      withGmsaCredentialSpec(gmsaCredentialSpec): { securityContext+: { windowsOptions+: { gmsaCredentialSpec: gmsaCredentialSpec } } },
      '#withGmsaCredentialSpecName':: d.fn(help='', args=[d.arg(name='gmsaCredentialSpecName', type=d.T.string)]),
      withGmsaCredentialSpecName(gmsaCredentialSpecName): { securityContext+: { windowsOptions+: { gmsaCredentialSpecName: gmsaCredentialSpecName } } },
      '#withRunAsUserName':: d.fn(help='', args=[d.arg(name='runAsUserName', type=d.T.string)]),
      withRunAsUserName(runAsUserName): { securityContext+: { windowsOptions+: { runAsUserName: runAsUserName } } },
    },
    '#withFsGroup':: d.fn(help="1. The owning GID will be the FSGroup\n2. The setgid bit is set (new files created in the volume will be owned by FSGroup)\n3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.\n+optional", args=[d.arg(name='fsGroup', type=d.T.string)]),
    withFsGroup(fsGroup): { securityContext+: { fsGroup: fsGroup } },
    '#withRunAsGroup':: d.fn(help='', args=[d.arg(name='runAsGroup', type=d.T.string)]),
    withRunAsGroup(runAsGroup): { securityContext+: { runAsGroup: runAsGroup } },
    '#withRunAsNonRoot':: d.fn(help='', args=[d.arg(name='runAsNonRoot', type=d.T.boolean)]),
    withRunAsNonRoot(runAsNonRoot): { securityContext+: { runAsNonRoot: runAsNonRoot } },
    '#withRunAsUser':: d.fn(help='', args=[d.arg(name='runAsUser', type=d.T.string)]),
    withRunAsUser(runAsUser): { securityContext+: { runAsUser: runAsUser } },
    '#withSupplementalGroups':: d.fn(help='', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
    withSupplementalGroups(supplementalGroups): { securityContext+: { supplementalGroups: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } },
    '#withSupplementalGroupsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='supplementalGroups', type=d.T.array)]),
    withSupplementalGroupsMixin(supplementalGroups): { securityContext+: { supplementalGroups+: if std.isArray(v=supplementalGroups) then supplementalGroups else [supplementalGroups] } },
    '#withSysctls':: d.fn(help='', args=[d.arg(name='sysctls', type=d.T.array)]),
    withSysctls(sysctls): { securityContext+: { sysctls: if std.isArray(v=sysctls) then sysctls else [sysctls] } },
    '#withSysctlsMixin':: d.fn(help='\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sysctls', type=d.T.array)]),
    withSysctlsMixin(sysctls): { securityContext+: { sysctls+: if std.isArray(v=sysctls) then sysctls else [sysctls] } },
  },
  '#suspend':: d.obj(help='SuspendTemplate is a template subtype to suspend a workflow at a predetermined point in time'),
  suspend: {
    '#withDuration':: d.fn(help='Duration is the seconds to wait before automatically resuming a template', args=[d.arg(name='duration', type=d.T.string)]),
    withDuration(duration): { suspend+: { duration: duration } },
  },
  '#synchronization':: d.obj(help='Synchronization holds synchronization lock configuration'),
  synchronization: {
    '#mutex':: d.obj(help='Mutex holds Mutex configuration'),
    mutex: {
      '#withName':: d.fn(help='name of the mutex', args=[d.arg(name='name', type=d.T.string)]),
      withName(name): { synchronization+: { mutex+: { name: name } } },
    },
    '#semaphore':: d.obj(help='SemaphoreRef is a reference of Semaphore'),
    semaphore: {
      '#configMapKeyRef':: d.obj(help='Selects a key from a ConfigMap.'),
      configMapKeyRef: {
        '#localObjectReference':: d.obj(help='LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.'),
        localObjectReference: {
          '#withName':: d.fn(help='', args=[d.arg(name='name', type=d.T.string)]),
          withName(name): { synchronization+: { semaphore+: { configMapKeyRef+: { localObjectReference+: { name: name } } } } },
        },
        '#withKey':: d.fn(help='The key to select.', args=[d.arg(name='key', type=d.T.string)]),
        withKey(key): { synchronization+: { semaphore+: { configMapKeyRef+: { key: key } } } },
        '#withOptional':: d.fn(help='', args=[d.arg(name='optional', type=d.T.boolean)]),
        withOptional(optional): { synchronization+: { semaphore+: { configMapKeyRef+: { optional: optional } } } },
      },
    },
  },
  '#templateRef':: d.obj(help='TemplateRef is a reference of template resource.'),
  templateRef: {
    '#withClusterScope':: d.fn(help='ClusterScope indicates the referred template is cluster scoped (i.e. a ClusterWorkflowTemplate).', args=[d.arg(name='clusterScope', type=d.T.boolean)]),
    withClusterScope(clusterScope): { templateRef+: { clusterScope: clusterScope } },
    '#withName':: d.fn(help='Name is the resource name of the template.', args=[d.arg(name='name', type=d.T.string)]),
    withName(name): { templateRef+: { name: name } },
    '#withRuntimeResolution':: d.fn(help='RuntimeResolution skips validation at creation time. By enabling this option, you can create the referred workflow template before the actual runtime. DEPRECATED: This value is not used anymore and is ignored', args=[d.arg(name='runtimeResolution', type=d.T.boolean)]),
    withRuntimeResolution(runtimeResolution): { templateRef+: { runtimeResolution: runtimeResolution } },
    '#withTemplate':: d.fn(help='Template is the name of referred template in the resource.', args=[d.arg(name='template', type=d.T.string)]),
    withTemplate(template): { templateRef+: { template: template } },
  },
  '#withAutomountServiceAccountToken':: d.fn(help='AutomountServiceAccountToken indicates whether a service account token should be automatically mounted in pods. ServiceAccountName of ExecutorConfig must be specified if this value is false.', args=[d.arg(name='automountServiceAccountToken', type=d.T.boolean)]),
  withAutomountServiceAccountToken(automountServiceAccountToken): { automountServiceAccountToken: automountServiceAccountToken },
  '#withDaemon':: d.fn(help='Deamon will allow a workflow to proceed to the next step so long as the container reaches readiness', args=[d.arg(name='daemon', type=d.T.boolean)]),
  withDaemon(daemon): { daemon: daemon },
  '#withHostAliases':: d.fn(help='HostAliases is an optional list of hosts and IPs that will be injected into the pod spec', args=[d.arg(name='hostAliases', type=d.T.array)]),
  withHostAliases(hostAliases): { hostAliases: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] },
  '#withHostAliasesMixin':: d.fn(help='HostAliases is an optional list of hosts and IPs that will be injected into the pod spec\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='hostAliases', type=d.T.array)]),
  withHostAliasesMixin(hostAliases): { hostAliases+: if std.isArray(v=hostAliases) then hostAliases else [hostAliases] },
  '#withInitContainers':: d.fn(help='InitContainers is a list of containers which run before the main container.', args=[d.arg(name='initContainers', type=d.T.array)]),
  withInitContainers(initContainers): { initContainers: if std.isArray(v=initContainers) then initContainers else [initContainers] },
  '#withInitContainersMixin':: d.fn(help='InitContainers is a list of containers which run before the main container.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='initContainers', type=d.T.array)]),
  withInitContainersMixin(initContainers): { initContainers+: if std.isArray(v=initContainers) then initContainers else [initContainers] },
  '#withName':: d.fn(help='Name is the name of the template', args=[d.arg(name='name', type=d.T.string)]),
  withName(name): { name: name },
  '#withNodeSelector':: d.fn(help='NodeSelector is a selector to schedule this step of the workflow to be run on the selected node(s). Overrides the selector set at the workflow level.', args=[d.arg(name='nodeSelector', type=d.T.object)]),
  withNodeSelector(nodeSelector): { nodeSelector: nodeSelector },
  '#withNodeSelectorMixin':: d.fn(help='NodeSelector is a selector to schedule this step of the workflow to be run on the selected node(s). Overrides the selector set at the workflow level.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='nodeSelector', type=d.T.object)]),
  withNodeSelectorMixin(nodeSelector): { nodeSelector+: nodeSelector },
  '#withParallelism':: d.fn(help='Parallelism limits the max total parallel pods that can execute at the same time within the boundaries of this template invocation. If additional steps/dag templates are invoked, the pods created by those templates will not be counted towards this total.', args=[d.arg(name='parallelism', type=d.T.integer)]),
  withParallelism(parallelism): { parallelism: parallelism },
  '#withPodSpecPatch':: d.fn(help='PodSpecPatch holds strategic merge patch to apply against the pod spec. Allows parameterization of container fields which are not strings (e.g. resource limits).', args=[d.arg(name='podSpecPatch', type=d.T.string)]),
  withPodSpecPatch(podSpecPatch): { podSpecPatch: podSpecPatch },
  '#withPriority':: d.fn(help='Priority to apply to workflow pods.', args=[d.arg(name='priority', type=d.T.integer)]),
  withPriority(priority): { priority: priority },
  '#withPriorityClassName':: d.fn(help='PriorityClassName to apply to workflow pods.', args=[d.arg(name='priorityClassName', type=d.T.string)]),
  withPriorityClassName(priorityClassName): { priorityClassName: priorityClassName },
  '#withSchedulerName':: d.fn(help='If specified, the pod will be dispatched by specified scheduler. Or it will be dispatched by workflow scope scheduler if specified. If neither specified, the pod will be dispatched by default scheduler.', args=[d.arg(name='schedulerName', type=d.T.string)]),
  withSchedulerName(schedulerName): { schedulerName: schedulerName },
  '#withServiceAccountName':: d.fn(help='ServiceAccountName to apply to workflow pods', args=[d.arg(name='serviceAccountName', type=d.T.string)]),
  withServiceAccountName(serviceAccountName): { serviceAccountName: serviceAccountName },
  '#withSidecars':: d.fn(help='Sidecars is a list of containers which run alongside the main container Sidecars are automatically killed when the main container completes', args=[d.arg(name='sidecars', type=d.T.array)]),
  withSidecars(sidecars): { sidecars: if std.isArray(v=sidecars) then sidecars else [sidecars] },
  '#withSidecarsMixin':: d.fn(help='Sidecars is a list of containers which run alongside the main container Sidecars are automatically killed when the main container completes\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='sidecars', type=d.T.array)]),
  withSidecarsMixin(sidecars): { sidecars+: if std.isArray(v=sidecars) then sidecars else [sidecars] },
  '#withSteps':: d.fn(help='Steps define a series of sequential/parallel workflow steps', args=[d.arg(name='steps', type=d.T.array)]),
  withSteps(steps): { steps: if std.isArray(v=steps) then steps else [steps] },
  '#withStepsMixin':: d.fn(help='Steps define a series of sequential/parallel workflow steps\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='steps', type=d.T.array)]),
  withStepsMixin(steps): { steps+: if std.isArray(v=steps) then steps else [steps] },
  '#withTemplate':: d.fn(help='Template is the name of the template which is used as the base of this template. DEPRECATED: This field is not used.', args=[d.arg(name='template', type=d.T.string)]),
  withTemplate(template): { template: template },
  '#withTimeout':: d.fn(help="Timout allows to set the total node execution timeout duration counting from the node's start time. This duration also includes time in which the node spends in Pending state. This duration may not be applied to Step or DAG templates.", args=[d.arg(name='timeout', type=d.T.string)]),
  withTimeout(timeout): { timeout: timeout },
  '#withTolerations':: d.fn(help='Tolerations to apply to workflow pods.', args=[d.arg(name='tolerations', type=d.T.array)]),
  withTolerations(tolerations): { tolerations: if std.isArray(v=tolerations) then tolerations else [tolerations] },
  '#withTolerationsMixin':: d.fn(help='Tolerations to apply to workflow pods.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='tolerations', type=d.T.array)]),
  withTolerationsMixin(tolerations): { tolerations+: if std.isArray(v=tolerations) then tolerations else [tolerations] },
  '#withVolumes':: d.fn(help='Volumes is a list of volumes that can be mounted by containers in a template.', args=[d.arg(name='volumes', type=d.T.array)]),
  withVolumes(volumes): { volumes: if std.isArray(v=volumes) then volumes else [volumes] },
  '#withVolumesMixin':: d.fn(help='Volumes is a list of volumes that can be mounted by containers in a template.\n\n**Note:** This function appends passed data to existing values', args=[d.arg(name='volumes', type=d.T.array)]),
  withVolumesMixin(volumes): { volumes+: if std.isArray(v=volumes) then volumes else [volumes] },
  '#mixin': 'ignore',
  mixin: self,
}
