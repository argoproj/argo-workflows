// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

import time "time"
import v1alpha1 "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// Initialize provides a mock function with given fields: list
func (_m *Manager) Initialize(list *v1alpha1.WorkflowList) {
	_m.Called(list)
}

// Release provides a mock function with given fields: wf, nodeName, namespace, syncRef
func (_m *Manager) Release(wf *v1alpha1.Workflow, nodeName string, namespace string, syncRef *v1alpha1.Synchronization) {
	_m.Called(wf, nodeName, namespace, syncRef)
}

// ReleaseAll provides a mock function with given fields: wf
func (_m *Manager) ReleaseAll(wf *v1alpha1.Workflow) bool {
	ret := _m.Called(wf)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*v1alpha1.Workflow) bool); ok {
		r0 = rf(wf)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TryAcquire provides a mock function with given fields: wf, nodeName, priority, creationTime, syncLockRef
func (_m *Manager) TryAcquire(wf *v1alpha1.Workflow, nodeName string, priority int32, creationTime time.Time, syncLockRef *v1alpha1.Synchronization) (bool, bool, string, error) {
	ret := _m.Called(wf, nodeName, priority, creationTime, syncLockRef)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*v1alpha1.Workflow, string, int32, time.Time, *v1alpha1.Synchronization) bool); ok {
		r0 = rf(wf, nodeName, priority, creationTime, syncLockRef)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(*v1alpha1.Workflow, string, int32, time.Time, *v1alpha1.Synchronization) bool); ok {
		r1 = rf(wf, nodeName, priority, creationTime, syncLockRef)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(*v1alpha1.Workflow, string, int32, time.Time, *v1alpha1.Synchronization) string); ok {
		r2 = rf(wf, nodeName, priority, creationTime, syncLockRef)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(*v1alpha1.Workflow, string, int32, time.Time, *v1alpha1.Synchronization) error); ok {
		r3 = rf(wf, nodeName, priority, creationTime, syncLockRef)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}
