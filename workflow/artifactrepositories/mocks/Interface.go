// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	config "github.com/argoproj/argo/config"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"
)

// Interface is an autogenerated mock type for the Interface type
type Interface struct {
	mock.Mock
}

// GetArtifactRepositoryByRef provides a mock function with given fields: ref
func (_m *Interface) Get(ref *v1alpha1.ArtifactRepositoryRef) (*config.ArtifactRepository, error) {
	ret := _m.Called(ref)

	var r0 *config.ArtifactRepository
	if rf, ok := ret.Get(0).(func(*v1alpha1.ArtifactRepositoryRef) *config.ArtifactRepository); ok {
		r0 = rf(ref)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.ArtifactRepository)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.ArtifactRepositoryRef) error); ok {
		r1 = rf(ref)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveArtifactRepositoryByRef provides a mock function with given fields: ref, workflowNamespace
func (_m *Interface) Resolve(ref *v1alpha1.ArtifactRepositoryRef, workflowNamespace string) (*v1alpha1.ArtifactRepositoryRef, error) {
	ret := _m.Called(ref, workflowNamespace)

	var r0 *v1alpha1.ArtifactRepositoryRef
	if rf, ok := ret.Get(0).(func(*v1alpha1.ArtifactRepositoryRef, string) *v1alpha1.ArtifactRepositoryRef); ok {
		r0 = rf(ref, workflowNamespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ArtifactRepositoryRef)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.ArtifactRepositoryRef, string) error); ok {
		r1 = rf(ref, workflowNamespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
