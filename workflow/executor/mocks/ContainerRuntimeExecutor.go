// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	io "io"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ContainerRuntimeExecutor is an autogenerated mock type for the ContainerRuntimeExecutor type
type ContainerRuntimeExecutor struct {
	mock.Mock
}

// CopyFile provides a mock function with given fields: containerName, sourcePath, destPath, compressionLevel
func (_m *ContainerRuntimeExecutor) CopyFile(containerName string, sourcePath string, destPath string, compressionLevel int) error {
	ret := _m.Called(containerName, sourcePath, destPath, compressionLevel)

	if len(ret) == 0 {
		panic("no return value specified for CopyFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, int) error); ok {
		r0 = rf(containerName, sourcePath, destPath, compressionLevel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFileContents provides a mock function with given fields: containerName, sourcePath
func (_m *ContainerRuntimeExecutor) GetFileContents(containerName string, sourcePath string) (string, error) {
	ret := _m.Called(containerName, sourcePath)

	if len(ret) == 0 {
		panic("no return value specified for GetFileContents")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(containerName, sourcePath)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(containerName, sourcePath)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(containerName, sourcePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOutputStream provides a mock function with given fields: ctx, containerName, combinedOutput
func (_m *ContainerRuntimeExecutor) GetOutputStream(ctx context.Context, containerName string, combinedOutput bool) (io.ReadCloser, error) {
	ret := _m.Called(ctx, containerName, combinedOutput)

	if len(ret) == 0 {
		panic("no return value specified for GetOutputStream")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (io.ReadCloser, error)); ok {
		return rf(ctx, containerName, combinedOutput)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) io.ReadCloser); ok {
		r0 = rf(ctx, containerName, combinedOutput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, containerName, combinedOutput)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Kill provides a mock function with given fields: ctx, containerNames, terminationGracePeriodDuration
func (_m *ContainerRuntimeExecutor) Kill(ctx context.Context, containerNames []string, terminationGracePeriodDuration time.Duration) error {
	ret := _m.Called(ctx, containerNames, terminationGracePeriodDuration)

	if len(ret) == 0 {
		panic("no return value specified for Kill")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, time.Duration) error); ok {
		r0 = rf(ctx, containerNames, terminationGracePeriodDuration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Wait provides a mock function with given fields: ctx, containerNames
func (_m *ContainerRuntimeExecutor) Wait(ctx context.Context, containerNames []string) error {
	ret := _m.Called(ctx, containerNames)

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, containerNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewContainerRuntimeExecutor creates a new instance of ContainerRuntimeExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContainerRuntimeExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContainerRuntimeExecutor {
	mock := &ContainerRuntimeExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
