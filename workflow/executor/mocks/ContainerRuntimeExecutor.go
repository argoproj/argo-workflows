// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"io"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewContainerRuntimeExecutor creates a new instance of ContainerRuntimeExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContainerRuntimeExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *ContainerRuntimeExecutor {
	mock := &ContainerRuntimeExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ContainerRuntimeExecutor is an autogenerated mock type for the ContainerRuntimeExecutor type
type ContainerRuntimeExecutor struct {
	mock.Mock
}

type ContainerRuntimeExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *ContainerRuntimeExecutor) EXPECT() *ContainerRuntimeExecutor_Expecter {
	return &ContainerRuntimeExecutor_Expecter{mock: &_m.Mock}
}

// CopyFile provides a mock function for the type ContainerRuntimeExecutor
func (_mock *ContainerRuntimeExecutor) CopyFile(ctx context.Context, containerName string, sourcePath string, destPath string, compressionLevel int) error {
	ret := _mock.Called(ctx, containerName, sourcePath, destPath, compressionLevel)

	if len(ret) == 0 {
		panic("no return value specified for CopyFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, int) error); ok {
		r0 = returnFunc(ctx, containerName, sourcePath, destPath, compressionLevel)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ContainerRuntimeExecutor_CopyFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyFile'
type ContainerRuntimeExecutor_CopyFile_Call struct {
	*mock.Call
}

// CopyFile is a helper method to define mock.On call
//   - ctx context.Context
//   - containerName string
//   - sourcePath string
//   - destPath string
//   - compressionLevel int
func (_e *ContainerRuntimeExecutor_Expecter) CopyFile(ctx interface{}, containerName interface{}, sourcePath interface{}, destPath interface{}, compressionLevel interface{}) *ContainerRuntimeExecutor_CopyFile_Call {
	return &ContainerRuntimeExecutor_CopyFile_Call{Call: _e.mock.On("CopyFile", ctx, containerName, sourcePath, destPath, compressionLevel)}
}

func (_c *ContainerRuntimeExecutor_CopyFile_Call) Run(run func(ctx context.Context, containerName string, sourcePath string, destPath string, compressionLevel int)) *ContainerRuntimeExecutor_CopyFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 int
		if args[4] != nil {
			arg4 = args[4].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *ContainerRuntimeExecutor_CopyFile_Call) Return(err error) *ContainerRuntimeExecutor_CopyFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ContainerRuntimeExecutor_CopyFile_Call) RunAndReturn(run func(ctx context.Context, containerName string, sourcePath string, destPath string, compressionLevel int) error) *ContainerRuntimeExecutor_CopyFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileContents provides a mock function for the type ContainerRuntimeExecutor
func (_mock *ContainerRuntimeExecutor) GetFileContents(containerName string, sourcePath string) (string, error) {
	ret := _mock.Called(containerName, sourcePath)

	if len(ret) == 0 {
		panic("no return value specified for GetFileContents")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return returnFunc(containerName, sourcePath)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(containerName, sourcePath)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(containerName, sourcePath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ContainerRuntimeExecutor_GetFileContents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileContents'
type ContainerRuntimeExecutor_GetFileContents_Call struct {
	*mock.Call
}

// GetFileContents is a helper method to define mock.On call
//   - containerName string
//   - sourcePath string
func (_e *ContainerRuntimeExecutor_Expecter) GetFileContents(containerName interface{}, sourcePath interface{}) *ContainerRuntimeExecutor_GetFileContents_Call {
	return &ContainerRuntimeExecutor_GetFileContents_Call{Call: _e.mock.On("GetFileContents", containerName, sourcePath)}
}

func (_c *ContainerRuntimeExecutor_GetFileContents_Call) Run(run func(containerName string, sourcePath string)) *ContainerRuntimeExecutor_GetFileContents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ContainerRuntimeExecutor_GetFileContents_Call) Return(s string, err error) *ContainerRuntimeExecutor_GetFileContents_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *ContainerRuntimeExecutor_GetFileContents_Call) RunAndReturn(run func(containerName string, sourcePath string) (string, error)) *ContainerRuntimeExecutor_GetFileContents_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutputStream provides a mock function for the type ContainerRuntimeExecutor
func (_mock *ContainerRuntimeExecutor) GetOutputStream(ctx context.Context, containerName string, combinedOutput bool) (io.ReadCloser, error) {
	ret := _mock.Called(ctx, containerName, combinedOutput)

	if len(ret) == 0 {
		panic("no return value specified for GetOutputStream")
	}

	var r0 io.ReadCloser
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) (io.ReadCloser, error)); ok {
		return returnFunc(ctx, containerName, combinedOutput)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) io.ReadCloser); ok {
		r0 = returnFunc(ctx, containerName, combinedOutput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = returnFunc(ctx, containerName, combinedOutput)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ContainerRuntimeExecutor_GetOutputStream_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutputStream'
type ContainerRuntimeExecutor_GetOutputStream_Call struct {
	*mock.Call
}

// GetOutputStream is a helper method to define mock.On call
//   - ctx context.Context
//   - containerName string
//   - combinedOutput bool
func (_e *ContainerRuntimeExecutor_Expecter) GetOutputStream(ctx interface{}, containerName interface{}, combinedOutput interface{}) *ContainerRuntimeExecutor_GetOutputStream_Call {
	return &ContainerRuntimeExecutor_GetOutputStream_Call{Call: _e.mock.On("GetOutputStream", ctx, containerName, combinedOutput)}
}

func (_c *ContainerRuntimeExecutor_GetOutputStream_Call) Run(run func(ctx context.Context, containerName string, combinedOutput bool)) *ContainerRuntimeExecutor_GetOutputStream_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ContainerRuntimeExecutor_GetOutputStream_Call) Return(readCloser io.ReadCloser, err error) *ContainerRuntimeExecutor_GetOutputStream_Call {
	_c.Call.Return(readCloser, err)
	return _c
}

func (_c *ContainerRuntimeExecutor_GetOutputStream_Call) RunAndReturn(run func(ctx context.Context, containerName string, combinedOutput bool) (io.ReadCloser, error)) *ContainerRuntimeExecutor_GetOutputStream_Call {
	_c.Call.Return(run)
	return _c
}

// Kill provides a mock function for the type ContainerRuntimeExecutor
func (_mock *ContainerRuntimeExecutor) Kill(ctx context.Context, containerNames []string, terminationGracePeriodDuration time.Duration) error {
	ret := _mock.Called(ctx, containerNames, terminationGracePeriodDuration)

	if len(ret) == 0 {
		panic("no return value specified for Kill")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, time.Duration) error); ok {
		r0 = returnFunc(ctx, containerNames, terminationGracePeriodDuration)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ContainerRuntimeExecutor_Kill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Kill'
type ContainerRuntimeExecutor_Kill_Call struct {
	*mock.Call
}

// Kill is a helper method to define mock.On call
//   - ctx context.Context
//   - containerNames []string
//   - terminationGracePeriodDuration time.Duration
func (_e *ContainerRuntimeExecutor_Expecter) Kill(ctx interface{}, containerNames interface{}, terminationGracePeriodDuration interface{}) *ContainerRuntimeExecutor_Kill_Call {
	return &ContainerRuntimeExecutor_Kill_Call{Call: _e.mock.On("Kill", ctx, containerNames, terminationGracePeriodDuration)}
}

func (_c *ContainerRuntimeExecutor_Kill_Call) Run(run func(ctx context.Context, containerNames []string, terminationGracePeriodDuration time.Duration)) *ContainerRuntimeExecutor_Kill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *ContainerRuntimeExecutor_Kill_Call) Return(err error) *ContainerRuntimeExecutor_Kill_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ContainerRuntimeExecutor_Kill_Call) RunAndReturn(run func(ctx context.Context, containerNames []string, terminationGracePeriodDuration time.Duration) error) *ContainerRuntimeExecutor_Kill_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function for the type ContainerRuntimeExecutor
func (_mock *ContainerRuntimeExecutor) Wait(ctx context.Context, containerNames []string) error {
	ret := _mock.Called(ctx, containerNames)

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = returnFunc(ctx, containerNames)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ContainerRuntimeExecutor_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type ContainerRuntimeExecutor_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
//   - ctx context.Context
//   - containerNames []string
func (_e *ContainerRuntimeExecutor_Expecter) Wait(ctx interface{}, containerNames interface{}) *ContainerRuntimeExecutor_Wait_Call {
	return &ContainerRuntimeExecutor_Wait_Call{Call: _e.mock.On("Wait", ctx, containerNames)}
}

func (_c *ContainerRuntimeExecutor_Wait_Call) Run(run func(ctx context.Context, containerNames []string)) *ContainerRuntimeExecutor_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ContainerRuntimeExecutor_Wait_Call) Return(err error) *ContainerRuntimeExecutor_Wait_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ContainerRuntimeExecutor_Wait_Call) RunAndReturn(run func(ctx context.Context, containerNames []string) error) *ContainerRuntimeExecutor_Wait_Call {
	_c.Call.Return(run)
	return _c
}
