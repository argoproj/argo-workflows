apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: hello-world-
spec:
  entrypoint: sleep-then-hello
  arguments:
    parameters:
      - name: key
        value: test11
  onExit: exit
  templates:
    - name: sleep-then-hello
      steps:
        - - name: sleep
            template: sleep
          - name: hello
            template: hello
    - name: sleep
      retryStrategy:
        limit: "3"
        retryPolicy: Always
      daemon: true
      script:
        image: python:alpine3.6
        command: [python]
        source: |
          import signal
          import time
        
          class GracefulKiller:
            kill_now = False
            def __init__(self):
              signal.signal(signal.SIGINT, self.exit_gracefully)
              signal.signal(signal.SIGTERM, self.exit_gracefully)
        
            def exit_gracefully(self, *args):
              print("End of the program. I was killed gracefully :)")
        
          if __name__ == '__main__':
            killer = GracefulKiller()
            print("doing something in a loop ...")
            while not killer.kill_now:
              time.sleep(1)
              print("doing something in a loop ...")
        
          print("End of the program. I was killed gracefully :)")
    
    - name: hello
      script:
        image: alpine:3.6
        command: [sh]
        source: |
          sleep 30
          echo "im in ur container, running ur code"
    
    - name: exit
      container:
        image: python:alpine3.6
        command: ["python", -c]
        # fail with a 66% probability
        args: ["import random; import sys; exit_code = random.choice([1, 1, 1]); sys.exit(exit_code)"]