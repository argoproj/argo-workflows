#!/bin/bash
#
# Copyright 2015-2017 Applatix, Inc. All rights reserved.
#


KUBELET_HC_LOG_TAG="[kubelet-healthcheck]"
KUBELET_LOG_TAG="kubelet["
KUBELET_HC_LOG_PATH="/tmp/kubelet-healthcheck.log"
KUBELET_HEALTHZ="http://127.0.0.1:10248/healthz"

log () {
    logger -t ${KUBELET_HC_LOG_TAG} $1
}

get-ec2-meta () {
    placement=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
    region=${placement:0:-1}
    instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
}

instance-id-to-tags () {
    aws ec2 describe-tags --region ${region} \
                          --filters "Name=resource-id,Values=${instance_id}" "Name=key,Values=AXClusterNameID,AXCustomerID" \
                          --query Tags[].Value \
                          --output text
}

dump-system () {
    echo "===== ${KUBELET_HC_LOG_TAG} log =====" >> ${KUBELET_HC_LOG_PATH}
    grep -F "${KUBELET_HC_LOG_TAG}" /var/log/syslog >> ${KUBELET_HC_LOG_PATH}

    echo >> ${KUBELET_HC_LOG_PATH}
    echo >> ${KUBELET_HC_LOG_PATH}
    echo >> ${KUBELET_HC_LOG_PATH}
    echo >> ${KUBELET_HC_LOG_PATH}
    echo >> ${KUBELET_HC_LOG_PATH}

    echo "===== Last 20000 lines of kubelet log =====" >> ${KUBELET_HC_LOG_PATH}
    grep -F "${KUBELET_LOG_TAG}" /var/log/syslog | tail -20000 >> ${KUBELET_HC_LOG_PATH}
}

persist-kubelet-healthcheck-log () {
    local cluster_name_id=$1
    local customer_id=$2
    local cluster_uuid=${cluster_name_id:(-36)}
    local cluster_name=${cluster_name_id/-$cluster_uuid/}

    s3path="s3://applatix-cluster-${customer_id}-0/${cluster_name}/${cluster_uuid}/kubelet-info/${instance_id}-$(date +"%Y-%m-%d-%s")"
    log "persisting kubelet healthcheck log to ${s3path}"

    log "dumping system before issuing terminating instance ..."
    dump-system

    aws s3 cp ${KUBELET_HC_LOG_PATH} ${s3path} --acl bucket-owner-full-control
}

bye-world () {
    log "Getting ec2 instance metadata ..."
    get-ec2-meta

    log "Getting Argo cluster information ..."
    cluster_info=$(instance-id-to-tags)

    log "Persisting kubelet-healthcheck logs ..."
    persist-kubelet-healthcheck-log ${cluster_info}

    log "Terminating instance ${instance_id} in region ${region}"
    aws --region ${region} ec2 terminate-instances --instance-ids ${instance_id}
}


if [[ $(cat /proc/uptime | awk '{print int($1)}') -lt 300 ]]; then
    log "Boot up time less than 300, skip kubelet health check"
    exit 0
fi


if timeout 5 curl --silent ${KUBELET_HEALTHZ} > /dev/null; then
    log "Kubelet Healthy"
    exit 0
fi

log "Kubelet not healthy, sleeping for 90 seconds for it to recover"
sleep 90

if timeout 5 curl --silent ${KUBELET_HEALTHZ} > /dev/null; then
    log "Kubelet Recovered"
    exit 0
fi

log "Kubelet still not healthy, restarting kubelet"

systemctl restart kubelet

log "Restarted Kubelet, waiting for 60s"
sleep 60

if timeout 5 curl --silent ${KUBELET_HEALTHZ} > /dev/null; then
    log "Kubelet Recovered"
    exit 0
fi

log "Kubelet still failed. Proceed to terminate instance"
bye-world

