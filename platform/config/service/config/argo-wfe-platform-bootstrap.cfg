#
# NOTE: IF THIS FILE IS BEING MODIFIED, please look at platform.py start() to check if
# the ordering guarantees are broken!
#
version: "v1"
name: "Argo Platform Config Only"
spec:
  steps:
    # Step 0: Create all kubernetes namespaces
    - name: "Essential Kubernetes Namespaces"
      policy: "CreateOnce"
      consistency: "CreateIfNotExist"
      objects:
        - name: "axuser-namespace"
          file: "axuser-namespace.yml.in"

        - name: "axsys-namespace"
          file: "axsys-namespace.yml.in"

    # Step 1: Any kubernetes addons/secrets
    - name: "Essential Kubnernetes addons"
      policy: "CreateOnce"
      consistency: "CreateIfNotExist"
      objects:
        - name: "access-key-secret"
          file: "access-key-secret.yml.in"
          namespace: "axsys"

        - name: "secret-key-secret"
          file: "secret-key-secret.yml.in"
          namespace: "axsys"


    # Step 2: Applatix basics
    # Including basic services, volumes and secrets. These object should be only created once
    - name: "Basic Infrastructure"
      policy: "CreateOnce"
      consistency: "CreateIfNotExist"
      objects:
        - name: "axops-svc"
          file: "axops-svc.yml.in"
          namespace: "axsys"

        - name: "axops-internal-svc"
          file: "axops-internal-svc.yml.in"
          namespace: "axsys"

        - name: "applatix-svc"
          file: "applatix-svc.yml.in"
          namespace: "axsys"

        - name: "kafka-zk-pvc"
          file: "kafka-zk-pvc.yml.in"
          namespace: "axsys"

        - name: "redis-pvc"
          file: "redis-pvc.yml.in"
          namespace: "axsys"

        - name: "gateway-pvc"
          file: "gateway-pvc.yml.in"
          namespace: "axsys"

    # Step 3: Registry Secrets
    - name: "Registry Secrets"
      policy: "CreateOnce"
      policy_predicate: "PrivateRegistryOnly"
      consistency: "CreateIfNotExist"
      objects:
        - name: "registry-secrets-axsys"
          file: "registry-secrets.yml.in"
          namespace: "axsys"

        - name: "registry-secrets-axuser"
          file: "registry-secrets.yml.in"
          namespace: "axuser"

        - name: "registry-secrets-kube"
          file: "registry-secrets.yml.in"
          namespace: "kube-system"

    # Step 4: Kafka (Heavy Hitter)
    - name: "Kafka"
      policy: "CreateMany"
      consistency: "CreateIfNotExist"
      objects:
        - name: "kafka-zk-svc"
          file: "kafka-zk-svc.yml.in"
          namespace: "axsys"

    # Step 5: Cassandra (Heavy Hitter)
    - name: "Cassandra"
      policy: "CreateMany"
      consistency: "CreateIfNotExist"
      objects:
        - name: "axdb-svc"
          file: "axdb-svc.yml.in"
          namespace: "axsys"

    # Step 6: Other heavy hitters and their dependencies
    - name: "Heavy Hitters"
      policy: "CreateMany"
      consistency: "CreateIfNotExist"
      objects:
        - name: "gateway-svc"
          file: "gateway-svc.yml.in"
          namespace: "axsys"
        - name: "axops"
          file: "axops.yml.in"
          namespace: "axsys"
        - name: "axmon-svc"
          file: "axmon-svc.yml.in"
          namespace: "axsys"

    # Step 7: Rest of Argo services
    - name: "Backend Micro Services"
      policy: "CreateMany"
      consistency: "CreateIfNotExist"
      objects:
        - name: "axworkflowadc-svc"
          file: "axworkflowadc-svc.yml.in"
          namespace: "axsys"

        - name: "redis-svc"
          file: "redis-svc.yml.in"
          namespace: "axsys"

        - name: "axopsbootstrap"
          file: "axopsbootstrap.yml.in"
          namespace: "axsys"

        - name: "axartifactmanager-svc"
          file: "axartifactmanager-svc.yml.in"
          namespace: "axsys"

        - name: "axscheduler-svc"
          file: "axscheduler-svc.yml.in"
          namespace: "axsys"
